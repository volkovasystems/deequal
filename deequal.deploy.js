!function webpackUniversalModuleDefinition(root,factory){"object"==typeof exports&&"object"==typeof module?module.exports=factory():"function"==typeof define&&define.amd?define([],factory):"object"==typeof exports?exports.deequal=factory():root.deequal=factory()}(this,function(){return function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:!1};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.loaded=!0,module.exports}var installedModules={};return __webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.p="",__webpack_require__(0)}([function(module,exports,__webpack_require__){"use strict";var kount=__webpack_require__(1),loosen=__webpack_require__(42),protype=__webpack_require__(90),deequal=function deequal(source,target){if(!protype(source,OBJECT)||!protype(target,OBJECT))try{return protype(source,FUNCTION)&&protype(target,FUNCTION)?source===target||source.toString()==target.toString():source===target}catch(error){return!1}source=loosen(source);for(var property in source)protype(source[property],OBJECT)&&delete source[property];target=loosen(target);for(var _property in target)protype(target[_property],OBJECT)&&delete target[_property];for(var _property2 in source)if(source[_property2]!==target[_property2])return!1;return kount(source)===kount(target)};module.exports=deequal},function(module,exports,__webpack_require__){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _getOwnPropertyDescriptor=__webpack_require__(2),_getOwnPropertyDescriptor2=_interopRequireDefault(_getOwnPropertyDescriptor),_getOwnPropertyNames=__webpack_require__(28),_getOwnPropertyNames2=_interopRequireDefault(_getOwnPropertyNames),kount=function kount(entity){try{return(0,_getOwnPropertyNames2.default)(entity).filter(function(property){return(0,_getOwnPropertyDescriptor2.default)(entity,property).enumerable}).length}catch(error){return 0}};module.exports=kount},function(module,exports,__webpack_require__){module.exports={default:__webpack_require__(3),__esModule:!0}},function(module,exports,__webpack_require__){__webpack_require__(4);var $Object=__webpack_require__(22).Object;module.exports=function getOwnPropertyDescriptor(it,key){return $Object.getOwnPropertyDescriptor(it,key)}},function(module,exports,__webpack_require__){var toIObject=__webpack_require__(5),$getOwnPropertyDescriptor=__webpack_require__(9).f;__webpack_require__(20)("getOwnPropertyDescriptor",function(){return function getOwnPropertyDescriptor(it,key){return $getOwnPropertyDescriptor(toIObject(it),key)}})},function(module,exports,__webpack_require__){var IObject=__webpack_require__(6),defined=__webpack_require__(8);module.exports=function(it){return IObject(defined(it))}},function(module,exports,__webpack_require__){var cof=__webpack_require__(7);module.exports=Object("z").propertyIsEnumerable(0)?Object:function(it){return"String"==cof(it)?it.split(""):Object(it)}},function(module,exports){var toString={}.toString;module.exports=function(it){return toString.call(it).slice(8,-1)}},function(module,exports){module.exports=function(it){if(void 0==it)throw TypeError("Can't call method on  "+it);return it}},function(module,exports,__webpack_require__){var pIE=__webpack_require__(10),createDesc=__webpack_require__(11),toIObject=__webpack_require__(5),toPrimitive=__webpack_require__(12),has=__webpack_require__(14),IE8_DOM_DEFINE=__webpack_require__(15),gOPD=Object.getOwnPropertyDescriptor;exports.f=__webpack_require__(16)?gOPD:function getOwnPropertyDescriptor(O,P){if(O=toIObject(O),P=toPrimitive(P,!0),IE8_DOM_DEFINE)try{return gOPD(O,P)}catch(e){}if(has(O,P))return createDesc(!pIE.f.call(O,P),O[P])}},function(module,exports){exports.f={}.propertyIsEnumerable},function(module,exports){module.exports=function(bitmap,value){return{enumerable:!(1&bitmap),configurable:!(2&bitmap),writable:!(4&bitmap),value:value}}},function(module,exports,__webpack_require__){var isObject=__webpack_require__(13);module.exports=function(it,S){if(!isObject(it))return it;var fn,val;if(S&&"function"==typeof(fn=it.toString)&&!isObject(val=fn.call(it)))return val;if("function"==typeof(fn=it.valueOf)&&!isObject(val=fn.call(it)))return val;if(!S&&"function"==typeof(fn=it.toString)&&!isObject(val=fn.call(it)))return val;throw TypeError("Can't convert object to primitive value")}},function(module,exports){module.exports=function(it){return"object"==typeof it?null!==it:"function"==typeof it}},function(module,exports){var hasOwnProperty={}.hasOwnProperty;module.exports=function(it,key){return hasOwnProperty.call(it,key)}},function(module,exports,__webpack_require__){module.exports=!__webpack_require__(16)&&!__webpack_require__(17)(function(){return 7!=Object.defineProperty(__webpack_require__(18)("div"),"a",{get:function(){return 7}}).a})},function(module,exports,__webpack_require__){module.exports=!__webpack_require__(17)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(module,exports){module.exports=function(exec){try{return!!exec()}catch(e){return!0}}},function(module,exports,__webpack_require__){var isObject=__webpack_require__(13),document=__webpack_require__(19).document,is=isObject(document)&&isObject(document.createElement);module.exports=function(it){return is?document.createElement(it):{}}},function(module,exports){var global=module.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=global)},function(module,exports,__webpack_require__){var $export=__webpack_require__(21),core=__webpack_require__(22),fails=__webpack_require__(17);module.exports=function(KEY,exec){var fn=(core.Object||{})[KEY]||Object[KEY],exp={};exp[KEY]=exec(fn),$export($export.S+$export.F*fails(function(){fn(1)}),"Object",exp)}},function(module,exports,__webpack_require__){var global=__webpack_require__(19),core=__webpack_require__(22),ctx=__webpack_require__(23),hide=__webpack_require__(25),PROTOTYPE="prototype",$export=function(type,name,source){var key,own,out,IS_FORCED=type&$export.F,IS_GLOBAL=type&$export.G,IS_STATIC=type&$export.S,IS_PROTO=type&$export.P,IS_BIND=type&$export.B,IS_WRAP=type&$export.W,exports=IS_GLOBAL?core:core[name]||(core[name]={}),expProto=exports[PROTOTYPE],target=IS_GLOBAL?global:IS_STATIC?global[name]:(global[name]||{})[PROTOTYPE];IS_GLOBAL&&(source=name);for(key in source)own=!IS_FORCED&&target&&void 0!==target[key],own&&key in exports||(out=own?target[key]:source[key],exports[key]=IS_GLOBAL&&"function"!=typeof target[key]?source[key]:IS_BIND&&own?ctx(out,global):IS_WRAP&&target[key]==out?function(C){var F=function(a,b,c){if(this instanceof C){switch(arguments.length){case 0:return new C;case 1:return new C(a);case 2:return new C(a,b)}return new C(a,b,c)}return C.apply(this,arguments)};return F[PROTOTYPE]=C[PROTOTYPE],F}(out):IS_PROTO&&"function"==typeof out?ctx(Function.call,out):out,IS_PROTO&&((exports.virtual||(exports.virtual={}))[key]=out,type&$export.R&&expProto&&!expProto[key]&&hide(expProto,key,out)))};$export.F=1,$export.G=2,$export.S=4,$export.P=8,$export.B=16,$export.W=32,$export.U=64,$export.R=128,module.exports=$export},function(module,exports){var core=module.exports={version:"2.4.0"};"number"==typeof __e&&(__e=core)},function(module,exports,__webpack_require__){var aFunction=__webpack_require__(24);module.exports=function(fn,that,length){if(aFunction(fn),void 0===that)return fn;switch(length){case 1:return function(a){return fn.call(that,a)};case 2:return function(a,b){return fn.call(that,a,b)};case 3:return function(a,b,c){return fn.call(that,a,b,c)}}return function(){return fn.apply(that,arguments)}}},function(module,exports){module.exports=function(it){if("function"!=typeof it)throw TypeError(it+" is not a function!");return it}},function(module,exports,__webpack_require__){var dP=__webpack_require__(26),createDesc=__webpack_require__(11);module.exports=__webpack_require__(16)?function(object,key,value){return dP.f(object,key,createDesc(1,value))}:function(object,key,value){return object[key]=value,object}},function(module,exports,__webpack_require__){var anObject=__webpack_require__(27),IE8_DOM_DEFINE=__webpack_require__(15),toPrimitive=__webpack_require__(12),dP=Object.defineProperty;exports.f=__webpack_require__(16)?Object.defineProperty:function defineProperty(O,P,Attributes){if(anObject(O),P=toPrimitive(P,!0),anObject(Attributes),IE8_DOM_DEFINE)try{return dP(O,P,Attributes)}catch(e){}if("get"in Attributes||"set"in Attributes)throw TypeError("Accessors not supported!");return"value"in Attributes&&(O[P]=Attributes.value),O}},function(module,exports,__webpack_require__){var isObject=__webpack_require__(13);module.exports=function(it){if(!isObject(it))throw TypeError(it+" is not an object!");return it}},function(module,exports,__webpack_require__){module.exports={default:__webpack_require__(29),__esModule:!0}},function(module,exports,__webpack_require__){__webpack_require__(30);var $Object=__webpack_require__(22).Object;module.exports=function getOwnPropertyNames(it){return $Object.getOwnPropertyNames(it)}},function(module,exports,__webpack_require__){__webpack_require__(20)("getOwnPropertyNames",function(){return __webpack_require__(31).f})},function(module,exports,__webpack_require__){var toIObject=__webpack_require__(5),gOPN=__webpack_require__(32).f,toString={}.toString,windowNames="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],getWindowNames=function(it){try{return gOPN(it)}catch(e){return windowNames.slice()}};module.exports.f=function getOwnPropertyNames(it){return windowNames&&"[object Window]"==toString.call(it)?getWindowNames(it):gOPN(toIObject(it))}},function(module,exports,__webpack_require__){var $keys=__webpack_require__(33),hiddenKeys=__webpack_require__(41).concat("length","prototype");exports.f=Object.getOwnPropertyNames||function getOwnPropertyNames(O){return $keys(O,hiddenKeys)}},function(module,exports,__webpack_require__){var has=__webpack_require__(14),toIObject=__webpack_require__(5),arrayIndexOf=__webpack_require__(34)(!1),IE_PROTO=__webpack_require__(38)("IE_PROTO");module.exports=function(object,names){var key,O=toIObject(object),i=0,result=[];for(key in O)key!=IE_PROTO&&has(O,key)&&result.push(key);for(;names.length>i;)has(O,key=names[i++])&&(~arrayIndexOf(result,key)||result.push(key));return result}},function(module,exports,__webpack_require__){var toIObject=__webpack_require__(5),toLength=__webpack_require__(35),toIndex=__webpack_require__(37);module.exports=function(IS_INCLUDES){return function($this,el,fromIndex){var value,O=toIObject($this),length=toLength(O.length),index=toIndex(fromIndex,length);if(IS_INCLUDES&&el!=el){for(;length>index;)if(value=O[index++],value!=value)return!0}else for(;length>index;index++)if((IS_INCLUDES||index in O)&&O[index]===el)return IS_INCLUDES||index||0;return!IS_INCLUDES&&-1}}},function(module,exports,__webpack_require__){var toInteger=__webpack_require__(36),min=Math.min;module.exports=function(it){return it>0?min(toInteger(it),9007199254740991):0}},function(module,exports){var ceil=Math.ceil,floor=Math.floor;module.exports=function(it){return isNaN(it=+it)?0:(it>0?floor:ceil)(it)}},function(module,exports,__webpack_require__){var toInteger=__webpack_require__(36),max=Math.max,min=Math.min;module.exports=function(index,length){return index=toInteger(index),index<0?max(index+length,0):min(index,length)}},function(module,exports,__webpack_require__){var shared=__webpack_require__(39)("keys"),uid=__webpack_require__(40);module.exports=function(key){return shared[key]||(shared[key]=uid(key))}},function(module,exports,__webpack_require__){var global=__webpack_require__(19),SHARED="__core-js_shared__",store=global[SHARED]||(global[SHARED]={});module.exports=function(key){return store[key]||(store[key]={})}},function(module,exports){var id=0,px=Math.random();module.exports=function(key){return"Symbol(".concat(void 0===key?"":key,")_",(++id+px).toString(36))}},function(module,exports){module.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(module,exports,__webpack_require__){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _keys=__webpack_require__(43),_keys2=_interopRequireDefault(_keys),doubt=__webpack_require__(48),harden=__webpack_require__(85),protype=__webpack_require__(90),truly=__webpack_require__(100),truu=__webpack_require__(101),U200b=__webpack_require__(105),LOOSENED="loosened",REFERENCE_PATTERN=/^\./,ACCUMULATOR_PATTERN=/^\./,loosen=function loosen(entity,path,cache){if(!protype(entity,OBJECT))throw new Error("invalid entity");if(truly(path)&&!protype(path,STRING))throw new Error("invalid path");if(truu(cache)&&!protype(cache,OBJECT))throw new Error("invalid cache");if(entity=entity||{},entity.LOOSENED===LOOSENED)return entity;cache=cache||{},path=path||"";var element=null;if(doubt(entity,ARRAY)){for(var key="",index=0,length=entity.length;index<length;index++)if(key=U200b(path,index).join(".").replace(REFERENCE_PATTERN,""),element=entity[index],cache[key]=element,protype(element,OBJECT)){loosen(element,key,cache);for(var property in element){var _key=U200b(path,property).join("...").replace(ACCUMULATOR_PATTERN,""),list=cache[_key]=cache[_key]||[],data=element[property];list.push(data),protype(data,OBJECT)&&loosen(data,_key,cache)}}}else protype(entity,OBJECT)&&(0,_keys2.default)(entity).forEach(function onEachKey(key){element=entity[key],key=U200b(path,key).join(".").replace(REFERENCE_PATTERN,""),cache[key]=element,protype(element,OBJECT)&&loosen(element,key,cache)});return harden("LOOSENED",LOOSENED,cache),cache};module.exports=loosen},function(module,exports,__webpack_require__){module.exports={default:__webpack_require__(44),__esModule:!0}},function(module,exports,__webpack_require__){__webpack_require__(45),module.exports=__webpack_require__(22).Object.keys},function(module,exports,__webpack_require__){var toObject=__webpack_require__(46),$keys=__webpack_require__(47);__webpack_require__(20)("keys",function(){return function keys(it){return $keys(toObject(it))}})},function(module,exports,__webpack_require__){var defined=__webpack_require__(8);module.exports=function(it){return Object(defined(it))}},function(module,exports,__webpack_require__){var $keys=__webpack_require__(33),enumBugKeys=__webpack_require__(41);module.exports=Object.keys||function keys(O){return $keys(O,enumBugKeys)}},function(module,exports,__webpack_require__){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _iterator=__webpack_require__(49),_iterator2=_interopRequireDefault(_iterator),_symbol=__webpack_require__(69),_symbol2=_interopRequireDefault(_symbol),_keys=__webpack_require__(43),_keys2=_interopRequireDefault(_keys),cemento=__webpack_require__(81),harden=__webpack_require__(85),protype=__webpack_require__(90);Array.isArray||(Array.isArray=function(r){return"[object Array]"===Object.prototype.toString.call(r)}),harden("ARRAY","array"),harden("AS_ARRAY","as-array"),harden("ARGUMENTS","arguments"),harden("ARRAY_LIKE","array-like"),harden("ITERABLE","iterable");var doubt=function doubt(array,condition){var conditionType=protype(condition);if(conditionType.STRING&&condition!=ARRAY&&condition!=AS_ARRAY&&condition!=ARGUMENTS&&condition!=ARRAY_LIKE&&condition!=ITERABLE)throw new Error("invalid condition");if(conditionType.STRING){var arrayType=protype(array);return!(arrayType.STRING||arrayType.NUMBER||arrayType.BOOLEAN||arrayType.UNDEFINED||arrayType.SYMBOL||null===array)&&(condition==ARRAY?Array.isArray(array):condition==AS_ARRAY?doubt(array,ARRAY)||doubt(array,ARGUMENTS)||doubt(array,ARRAY_LIKE)||doubt(array,ITERABLE):condition==ARGUMENTS?protype(array).OBJECT&&/Arguments/.test(array.toString()):condition==ARRAY_LIKE?protype(array.length,NUMBER)&&!!(0,_keys2.default)(array).length&&(0,_keys2.default)(array).some(function onEachIndex(index){return protype(index,NUMBER)}):condition==ITERABLE&&(protype(_symbol2.default,FUNCTION)&&protype(_iterator2.default,SYMBOL)&&!!array[_iterator2.default]))}return cemento({ARRAY:doubt(array,ARRAY),AS_ARRAY:doubt(array,AS_ARRAY),ARGUMENTS:doubt(array,ARGUMENTS),ARRAY_LIKE:doubt(array,ARRAY_LIKE),ITERABLE:doubt(array,ITERABLE)})};module.exports=doubt},function(module,exports,__webpack_require__){module.exports={default:__webpack_require__(50),__esModule:!0}},function(module,exports,__webpack_require__){__webpack_require__(51),__webpack_require__(64),module.exports=__webpack_require__(68).f("iterator")},function(module,exports,__webpack_require__){"use strict";var $at=__webpack_require__(52)(!0);__webpack_require__(53)(String,"String",function(iterated){this._t=String(iterated),this._i=0},function(){var point,O=this._t,index=this._i;return index>=O.length?{value:void 0,done:!0}:(point=$at(O,index),this._i+=point.length,{value:point,done:!1})})},function(module,exports,__webpack_require__){var toInteger=__webpack_require__(36),defined=__webpack_require__(8);module.exports=function(TO_STRING){return function(that,pos){var a,b,s=String(defined(that)),i=toInteger(pos),l=s.length;return i<0||i>=l?TO_STRING?"":void 0:(a=s.charCodeAt(i),a<55296||a>56319||i+1===l||(b=s.charCodeAt(i+1))<56320||b>57343?TO_STRING?s.charAt(i):a:TO_STRING?s.slice(i,i+2):(a-55296<<10)+(b-56320)+65536)}}},function(module,exports,__webpack_require__){"use strict";var LIBRARY=__webpack_require__(54),$export=__webpack_require__(21),redefine=__webpack_require__(55),hide=__webpack_require__(25),has=__webpack_require__(14),Iterators=__webpack_require__(56),$iterCreate=__webpack_require__(57),setToStringTag=__webpack_require__(61),getPrototypeOf=__webpack_require__(63),ITERATOR=__webpack_require__(62)("iterator"),BUGGY=!([].keys&&"next"in[].keys()),FF_ITERATOR="@@iterator",KEYS="keys",VALUES="values",returnThis=function(){return this};module.exports=function(Base,NAME,Constructor,next,DEFAULT,IS_SET,FORCED){$iterCreate(Constructor,NAME,next);var methods,key,IteratorPrototype,getMethod=function(kind){if(!BUGGY&&kind in proto)return proto[kind];switch(kind){case KEYS:return function keys(){return new Constructor(this,kind)};case VALUES:return function values(){return new Constructor(this,kind)}}return function entries(){return new Constructor(this,kind)}},TAG=NAME+" Iterator",DEF_VALUES=DEFAULT==VALUES,VALUES_BUG=!1,proto=Base.prototype,$native=proto[ITERATOR]||proto[FF_ITERATOR]||DEFAULT&&proto[DEFAULT],$default=$native||getMethod(DEFAULT),$entries=DEFAULT?DEF_VALUES?getMethod("entries"):$default:void 0,$anyNative="Array"==NAME?proto.entries||$native:$native;if($anyNative&&(IteratorPrototype=getPrototypeOf($anyNative.call(new Base)),IteratorPrototype!==Object.prototype&&(setToStringTag(IteratorPrototype,TAG,!0),LIBRARY||has(IteratorPrototype,ITERATOR)||hide(IteratorPrototype,ITERATOR,returnThis))),DEF_VALUES&&$native&&$native.name!==VALUES&&(VALUES_BUG=!0,$default=function values(){return $native.call(this)}),LIBRARY&&!FORCED||!BUGGY&&!VALUES_BUG&&proto[ITERATOR]||hide(proto,ITERATOR,$default),Iterators[NAME]=$default,Iterators[TAG]=returnThis,DEFAULT)if(methods={values:DEF_VALUES?$default:getMethod(VALUES),keys:IS_SET?$default:getMethod(KEYS),entries:$entries},FORCED)for(key in methods)key in proto||redefine(proto,key,methods[key]);else $export($export.P+$export.F*(BUGGY||VALUES_BUG),NAME,methods);return methods}},function(module,exports){module.exports=!0},function(module,exports,__webpack_require__){module.exports=__webpack_require__(25)},function(module,exports){module.exports={}},function(module,exports,__webpack_require__){"use strict";var create=__webpack_require__(58),descriptor=__webpack_require__(11),setToStringTag=__webpack_require__(61),IteratorPrototype={};__webpack_require__(25)(IteratorPrototype,__webpack_require__(62)("iterator"),function(){return this}),module.exports=function(Constructor,NAME,next){Constructor.prototype=create(IteratorPrototype,{next:descriptor(1,next)}),setToStringTag(Constructor,NAME+" Iterator")}},function(module,exports,__webpack_require__){var anObject=__webpack_require__(27),dPs=__webpack_require__(59),enumBugKeys=__webpack_require__(41),IE_PROTO=__webpack_require__(38)("IE_PROTO"),Empty=function(){},PROTOTYPE="prototype",createDict=function(){var iframeDocument,iframe=__webpack_require__(18)("iframe"),i=enumBugKeys.length,lt="<",gt=">";for(iframe.style.display="none",__webpack_require__(60).appendChild(iframe),iframe.src="javascript:",iframeDocument=iframe.contentWindow.document,iframeDocument.open(),iframeDocument.write(lt+"script"+gt+"document.F=Object"+lt+"/script"+gt),iframeDocument.close(),createDict=iframeDocument.F;i--;)delete createDict[PROTOTYPE][enumBugKeys[i]];return createDict()};module.exports=Object.create||function create(O,Properties){var result;return null!==O?(Empty[PROTOTYPE]=anObject(O),result=new Empty,Empty[PROTOTYPE]=null,result[IE_PROTO]=O):result=createDict(),void 0===Properties?result:dPs(result,Properties)}},function(module,exports,__webpack_require__){var dP=__webpack_require__(26),anObject=__webpack_require__(27),getKeys=__webpack_require__(47);module.exports=__webpack_require__(16)?Object.defineProperties:function defineProperties(O,Properties){anObject(O);for(var P,keys=getKeys(Properties),length=keys.length,i=0;length>i;)dP.f(O,P=keys[i++],Properties[P]);return O}},function(module,exports,__webpack_require__){module.exports=__webpack_require__(19).document&&document.documentElement},function(module,exports,__webpack_require__){var def=__webpack_require__(26).f,has=__webpack_require__(14),TAG=__webpack_require__(62)("toStringTag");module.exports=function(it,tag,stat){it&&!has(it=stat?it:it.prototype,TAG)&&def(it,TAG,{configurable:!0,value:tag})}},function(module,exports,__webpack_require__){var store=__webpack_require__(39)("wks"),uid=__webpack_require__(40),Symbol=__webpack_require__(19).Symbol,USE_SYMBOL="function"==typeof Symbol,$exports=module.exports=function(name){return store[name]||(store[name]=USE_SYMBOL&&Symbol[name]||(USE_SYMBOL?Symbol:uid)("Symbol."+name))};$exports.store=store},function(module,exports,__webpack_require__){var has=__webpack_require__(14),toObject=__webpack_require__(46),IE_PROTO=__webpack_require__(38)("IE_PROTO"),ObjectProto=Object.prototype;module.exports=Object.getPrototypeOf||function(O){return O=toObject(O),has(O,IE_PROTO)?O[IE_PROTO]:"function"==typeof O.constructor&&O instanceof O.constructor?O.constructor.prototype:O instanceof Object?ObjectProto:null}},function(module,exports,__webpack_require__){__webpack_require__(65);for(var global=__webpack_require__(19),hide=__webpack_require__(25),Iterators=__webpack_require__(56),TO_STRING_TAG=__webpack_require__(62)("toStringTag"),collections=["NodeList","DOMTokenList","MediaList","StyleSheetList","CSSRuleList"],i=0;i<5;i++){var NAME=collections[i],Collection=global[NAME],proto=Collection&&Collection.prototype;proto&&!proto[TO_STRING_TAG]&&hide(proto,TO_STRING_TAG,NAME),Iterators[NAME]=Iterators.Array}},function(module,exports,__webpack_require__){"use strict";var addToUnscopables=__webpack_require__(66),step=__webpack_require__(67),Iterators=__webpack_require__(56),toIObject=__webpack_require__(5);module.exports=__webpack_require__(53)(Array,"Array",function(iterated,kind){this._t=toIObject(iterated),this._i=0,this._k=kind},function(){var O=this._t,kind=this._k,index=this._i++;return!O||index>=O.length?(this._t=void 0,step(1)):"keys"==kind?step(0,index):"values"==kind?step(0,O[index]):step(0,[index,O[index]])},"values"),Iterators.Arguments=Iterators.Array,addToUnscopables("keys"),addToUnscopables("values"),addToUnscopables("entries")},function(module,exports){module.exports=function(){}},function(module,exports){module.exports=function(done,value){return{value:value,done:!!done}}},function(module,exports,__webpack_require__){exports.f=__webpack_require__(62)},function(module,exports,__webpack_require__){module.exports={default:__webpack_require__(70),__esModule:!0}},function(module,exports,__webpack_require__){__webpack_require__(71),__webpack_require__(78),__webpack_require__(79),__webpack_require__(80),module.exports=__webpack_require__(22).Symbol},function(module,exports,__webpack_require__){"use strict";var global=__webpack_require__(19),has=__webpack_require__(14),DESCRIPTORS=__webpack_require__(16),$export=__webpack_require__(21),redefine=__webpack_require__(55),META=__webpack_require__(72).KEY,$fails=__webpack_require__(17),shared=__webpack_require__(39),setToStringTag=__webpack_require__(61),uid=__webpack_require__(40),wks=__webpack_require__(62),wksExt=__webpack_require__(68),wksDefine=__webpack_require__(73),keyOf=__webpack_require__(74),enumKeys=__webpack_require__(75),isArray=__webpack_require__(77),anObject=__webpack_require__(27),toIObject=__webpack_require__(5),toPrimitive=__webpack_require__(12),createDesc=__webpack_require__(11),_create=__webpack_require__(58),gOPNExt=__webpack_require__(31),$GOPD=__webpack_require__(9),$DP=__webpack_require__(26),$keys=__webpack_require__(47),gOPD=$GOPD.f,dP=$DP.f,gOPN=gOPNExt.f,$Symbol=global.Symbol,$JSON=global.JSON,_stringify=$JSON&&$JSON.stringify,PROTOTYPE="prototype",HIDDEN=wks("_hidden"),TO_PRIMITIVE=wks("toPrimitive"),isEnum={}.propertyIsEnumerable,SymbolRegistry=shared("symbol-registry"),AllSymbols=shared("symbols"),OPSymbols=shared("op-symbols"),ObjectProto=Object[PROTOTYPE],USE_NATIVE="function"==typeof $Symbol,QObject=global.QObject,setter=!QObject||!QObject[PROTOTYPE]||!QObject[PROTOTYPE].findChild,setSymbolDesc=DESCRIPTORS&&$fails(function(){return 7!=_create(dP({},"a",{get:function(){return dP(this,"a",{value:7}).a}})).a})?function(it,key,D){var protoDesc=gOPD(ObjectProto,key);protoDesc&&delete ObjectProto[key],dP(it,key,D),protoDesc&&it!==ObjectProto&&dP(ObjectProto,key,protoDesc)}:dP,wrap=function(tag){var sym=AllSymbols[tag]=_create($Symbol[PROTOTYPE]);return sym._k=tag,sym},isSymbol=USE_NATIVE&&"symbol"==typeof $Symbol.iterator?function(it){return"symbol"==typeof it}:function(it){return it instanceof $Symbol},$defineProperty=function defineProperty(it,key,D){return it===ObjectProto&&$defineProperty(OPSymbols,key,D),anObject(it),key=toPrimitive(key,!0),anObject(D),has(AllSymbols,key)?(D.enumerable?(has(it,HIDDEN)&&it[HIDDEN][key]&&(it[HIDDEN][key]=!1),D=_create(D,{enumerable:createDesc(0,!1)})):(has(it,HIDDEN)||dP(it,HIDDEN,createDesc(1,{})),it[HIDDEN][key]=!0),setSymbolDesc(it,key,D)):dP(it,key,D)},$defineProperties=function defineProperties(it,P){anObject(it);for(var key,keys=enumKeys(P=toIObject(P)),i=0,l=keys.length;l>i;)$defineProperty(it,key=keys[i++],P[key]);return it},$create=function create(it,P){return void 0===P?_create(it):$defineProperties(_create(it),P)},$propertyIsEnumerable=function propertyIsEnumerable(key){var E=isEnum.call(this,key=toPrimitive(key,!0));return!(this===ObjectProto&&has(AllSymbols,key)&&!has(OPSymbols,key))&&(!(E||!has(this,key)||!has(AllSymbols,key)||has(this,HIDDEN)&&this[HIDDEN][key])||E)},$getOwnPropertyDescriptor=function getOwnPropertyDescriptor(it,key){if(it=toIObject(it),key=toPrimitive(key,!0),it!==ObjectProto||!has(AllSymbols,key)||has(OPSymbols,key)){var D=gOPD(it,key);return!D||!has(AllSymbols,key)||has(it,HIDDEN)&&it[HIDDEN][key]||(D.enumerable=!0),D}},$getOwnPropertyNames=function getOwnPropertyNames(it){for(var key,names=gOPN(toIObject(it)),result=[],i=0;names.length>i;)has(AllSymbols,key=names[i++])||key==HIDDEN||key==META||result.push(key);return result},$getOwnPropertySymbols=function getOwnPropertySymbols(it){for(var key,IS_OP=it===ObjectProto,names=gOPN(IS_OP?OPSymbols:toIObject(it)),result=[],i=0;names.length>i;)!has(AllSymbols,key=names[i++])||IS_OP&&!has(ObjectProto,key)||result.push(AllSymbols[key]);return result};USE_NATIVE||($Symbol=function Symbol(){if(this instanceof $Symbol)throw TypeError("Symbol is not a constructor!");var tag=uid(arguments.length>0?arguments[0]:void 0),$set=function(value){this===ObjectProto&&$set.call(OPSymbols,value),has(this,HIDDEN)&&has(this[HIDDEN],tag)&&(this[HIDDEN][tag]=!1),setSymbolDesc(this,tag,createDesc(1,value))};return DESCRIPTORS&&setter&&setSymbolDesc(ObjectProto,tag,{configurable:!0,set:$set}),wrap(tag)},redefine($Symbol[PROTOTYPE],"toString",function toString(){return this._k}),$GOPD.f=$getOwnPropertyDescriptor,$DP.f=$defineProperty,__webpack_require__(32).f=gOPNExt.f=$getOwnPropertyNames,__webpack_require__(10).f=$propertyIsEnumerable,__webpack_require__(76).f=$getOwnPropertySymbols,DESCRIPTORS&&!__webpack_require__(54)&&redefine(ObjectProto,"propertyIsEnumerable",$propertyIsEnumerable,!0),wksExt.f=function(name){return wrap(wks(name))}),$export($export.G+$export.W+$export.F*!USE_NATIVE,{Symbol:$Symbol});for(var symbols="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),i=0;symbols.length>i;)wks(symbols[i++]);for(var symbols=$keys(wks.store),i=0;symbols.length>i;)wksDefine(symbols[i++]);$export($export.S+$export.F*!USE_NATIVE,"Symbol",{for:function(key){return has(SymbolRegistry,key+="")?SymbolRegistry[key]:SymbolRegistry[key]=$Symbol(key)},keyFor:function keyFor(key){if(isSymbol(key))return keyOf(SymbolRegistry,key);throw TypeError(key+" is not a symbol!")},useSetter:function(){setter=!0},useSimple:function(){setter=!1}}),$export($export.S+$export.F*!USE_NATIVE,"Object",{create:$create,defineProperty:$defineProperty,defineProperties:$defineProperties,getOwnPropertyDescriptor:$getOwnPropertyDescriptor,getOwnPropertyNames:$getOwnPropertyNames,getOwnPropertySymbols:$getOwnPropertySymbols}),$JSON&&$export($export.S+$export.F*(!USE_NATIVE||$fails(function(){var S=$Symbol();return"[null]"!=_stringify([S])||"{}"!=_stringify({a:S})||"{}"!=_stringify(Object(S))})),"JSON",{stringify:function stringify(it){if(void 0!==it&&!isSymbol(it)){for(var replacer,$replacer,args=[it],i=1;arguments.length>i;)args.push(arguments[i++]);return replacer=args[1],"function"==typeof replacer&&($replacer=replacer),!$replacer&&isArray(replacer)||(replacer=function(key,value){if($replacer&&(value=$replacer.call(this,key,value)),!isSymbol(value))return value}),args[1]=replacer,_stringify.apply($JSON,args)}}}),$Symbol[PROTOTYPE][TO_PRIMITIVE]||__webpack_require__(25)($Symbol[PROTOTYPE],TO_PRIMITIVE,$Symbol[PROTOTYPE].valueOf),setToStringTag($Symbol,"Symbol"),setToStringTag(Math,"Math",!0),setToStringTag(global.JSON,"JSON",!0)},function(module,exports,__webpack_require__){var META=__webpack_require__(40)("meta"),isObject=__webpack_require__(13),has=__webpack_require__(14),setDesc=__webpack_require__(26).f,id=0,isExtensible=Object.isExtensible||function(){return!0},FREEZE=!__webpack_require__(17)(function(){return isExtensible(Object.preventExtensions({}))}),setMeta=function(it){setDesc(it,META,{value:{i:"O"+ ++id,w:{}}})},fastKey=function(it,create){if(!isObject(it))return"symbol"==typeof it?it:("string"==typeof it?"S":"P")+it;if(!has(it,META)){if(!isExtensible(it))return"F";if(!create)return"E";setMeta(it)}return it[META].i},getWeak=function(it,create){if(!has(it,META)){if(!isExtensible(it))return!0;if(!create)return!1;setMeta(it)}return it[META].w},onFreeze=function(it){return FREEZE&&meta.NEED&&isExtensible(it)&&!has(it,META)&&setMeta(it),it},meta=module.exports={KEY:META,NEED:!1,fastKey:fastKey,getWeak:getWeak,onFreeze:onFreeze}},function(module,exports,__webpack_require__){var global=__webpack_require__(19),core=__webpack_require__(22),LIBRARY=__webpack_require__(54),wksExt=__webpack_require__(68),defineProperty=__webpack_require__(26).f;module.exports=function(name){var $Symbol=core.Symbol||(core.Symbol=LIBRARY?{}:global.Symbol||{});"_"==name.charAt(0)||name in $Symbol||defineProperty($Symbol,name,{value:wksExt.f(name)
})}},function(module,exports,__webpack_require__){var getKeys=__webpack_require__(47),toIObject=__webpack_require__(5);module.exports=function(object,el){for(var key,O=toIObject(object),keys=getKeys(O),length=keys.length,index=0;length>index;)if(O[key=keys[index++]]===el)return key}},function(module,exports,__webpack_require__){var getKeys=__webpack_require__(47),gOPS=__webpack_require__(76),pIE=__webpack_require__(10);module.exports=function(it){var result=getKeys(it),getSymbols=gOPS.f;if(getSymbols)for(var key,symbols=getSymbols(it),isEnum=pIE.f,i=0;symbols.length>i;)isEnum.call(it,key=symbols[i++])&&result.push(key);return result}},function(module,exports){exports.f=Object.getOwnPropertySymbols},function(module,exports,__webpack_require__){var cof=__webpack_require__(7);module.exports=Array.isArray||function isArray(arg){return"Array"==cof(arg)}},function(module,exports){},function(module,exports,__webpack_require__){__webpack_require__(73)("asyncIterator")},function(module,exports,__webpack_require__){__webpack_require__(73)("observable")},function(module,exports,__webpack_require__){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _freeze=__webpack_require__(82),_freeze2=_interopRequireDefault(_freeze),_getOwnPropertyNames=__webpack_require__(28),_getOwnPropertyNames2=_interopRequireDefault(_getOwnPropertyNames),harden=__webpack_require__(85),cemento=function cemento(entity){if("undefined"==typeof entity||!entity||0==(0,_getOwnPropertyNames2.default)(entity).length)throw new Error("invalid entity");for(var property in entity)if(entity.hasOwnProperty(property)){var value=entity[property];try{delete entity[property]}catch(error){}entity=entity.harden&&"function"==typeof entity.harden?entity.harden(property,value):harden(property,value,entity)}return(0,_freeze2.default)(entity)};module.exports=cemento},function(module,exports,__webpack_require__){module.exports={default:__webpack_require__(83),__esModule:!0}},function(module,exports,__webpack_require__){__webpack_require__(84),module.exports=__webpack_require__(22).Object.freeze},function(module,exports,__webpack_require__){var isObject=__webpack_require__(13),meta=__webpack_require__(72).onFreeze;__webpack_require__(20)("freeze",function($freeze){return function freeze(it){return $freeze&&isObject(it)?$freeze(meta(it)):it}})},function(module,exports,__webpack_require__){(function(global){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _defineProperty=__webpack_require__(86),_defineProperty2=_interopRequireDefault(_defineProperty),_typeof2=__webpack_require__(89),_typeof3=_interopRequireDefault(_typeof2),harden=function harden(property,value,entity){if(""===property||"string"!=typeof property&&"symbol"!=("undefined"==typeof property?"undefined":(0,_typeof3.default)(property))&&"number"!=typeof property)throw new Error("invalid property");var self=this;if("undefined"!=typeof entity?self=entity:"undefined"!=typeof global&&this===global?self=global:"undefined"!=typeof window&&this===window&&(self=window),entity=entity||self,"undefined"==typeof entity&&"undefined"!=typeof global?entity=global:"undefined"==typeof entity&&"undefined"!=typeof window&&(entity=window),"undefined"!=typeof entity[property])return entity;try{(0,_defineProperty2.default)(entity,property,{enumerable:!1,configurable:!1,writable:!1,value:value})}catch(error){throw new Error("cannot harden property, "+property+", error, "+error)}if(("undefined"!=typeof global&&entity!==global||"undefined"!=typeof window&&entity!==window)&&"undefined"==typeof entity.harden)try{Object.defineProperty(entity,"harden",{enumerable:!1,configurable:!1,writable:!1,value:harden.bind(self)})}catch(error){throw new Error("cannot bind harden, error, "+error)}return entity};module.exports=harden}).call(exports,function(){return this}())},function(module,exports,__webpack_require__){module.exports={default:__webpack_require__(87),__esModule:!0}},function(module,exports,__webpack_require__){__webpack_require__(88);var $Object=__webpack_require__(22).Object;module.exports=function defineProperty(it,key,desc){return $Object.defineProperty(it,key,desc)}},function(module,exports,__webpack_require__){var $export=__webpack_require__(21);$export($export.S+$export.F*!__webpack_require__(16),"Object",{defineProperty:__webpack_require__(26).f})},function(module,exports,__webpack_require__){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.__esModule=!0;var _iterator=__webpack_require__(49),_iterator2=_interopRequireDefault(_iterator),_symbol=__webpack_require__(69),_symbol2=_interopRequireDefault(_symbol),_typeof="function"==typeof _symbol2.default&&"symbol"==typeof _iterator2.default?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof _symbol2.default&&obj.constructor===_symbol2.default&&obj!==_symbol2.default.prototype?"symbol":typeof obj};exports.default="function"==typeof _symbol2.default&&"symbol"===_typeof(_iterator2.default)?function(obj){return"undefined"==typeof obj?"undefined":_typeof(obj)}:function(obj){return obj&&"function"==typeof _symbol2.default&&obj.constructor===_symbol2.default&&obj!==_symbol2.default.prototype?"symbol":"undefined"==typeof obj?"undefined":_typeof(obj)}},function(module,exports,__webpack_require__){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _typeof2=__webpack_require__(89),_typeof3=_interopRequireDefault(_typeof2),_from=__webpack_require__(91),_from2=_interopRequireDefault(_from),cemento=__webpack_require__(81),harden=__webpack_require__(85);Array.isArray||(Array.isArray=function(r){return"[object Array]"===Object.prototype.toString.call(r)}),_from2.default||(Array.from=function(){var r=Object.prototype.toString,n=function n(_n){return"function"==typeof _n||"[object Function]"===r.call(_n)},t=function t(r){var n=Number(r);return isNaN(n)?0:0!==n&&isFinite(n)?(n>0?1:-1)*Math.floor(Math.abs(n)):n},e=Math.pow(2,53)-1,o=function o(r){var n=t(r);return Math.min(Math.max(n,0),e)};return function(r){var t=this,e=Object(r);if(null==r)throw new TypeError("Array.from requires an array-like object - not null or undefined");var a,u=arguments.length>1?arguments[1]:void 0;if("undefined"!=typeof u){if(!n(u))throw new TypeError("Array.from: when provided, the second argument must be a function");arguments.length>2&&(a=arguments[2])}for(var i,f=o(e.length),c=n(t)?Object(new t(f)):new Array(f),h=0;f>h;)i=e[h],u?c[h]="undefined"==typeof a?u(i,h):u.call(a,i,h):c[h]=i,h+=1;return c.length=f,c}}()),Array.prototype.some=Array.prototype.some||function(evaluator,thisArg){if(!this)throw new TypeError("Array.prototype.some called on null or undefined");if("function"!=typeof evaluator){if("string"!=typeof evaluator)throw new TypeError;if(!(evaluator=eval(evaluator)))throw new TypeError}var i;if(void 0===thisArg){for(i in this)if(evaluator(this[i],i,this))return!0;return!1}for(i in this)if(evaluator.call(thisArg,this[i],i,this))return!0;return!1},Array.prototype.reduce||(Array.prototype.reduce=function(r){if(null==this)throw new TypeError("Array.prototype.reduce called on null or undefined");if("function"!=typeof r)throw new TypeError(r+" is not a function");var e,t=Object(this),n=t.length>>>0,o=0;if(2==arguments.length)e=arguments[1];else{for(;n>o&&!(o in t);)o++;if(o>=n)throw new TypeError("Reduce of empty array with no initial value");e=t[o++]}for(;n>o;o++)o in t&&(e=r(e,t[o],o,t));return e}),harden("STRING","string"),harden("NUMBER","number"),harden("BOOLEAN","boolean"),harden("FUNCTION","function"),harden("OBJECT","object"),harden("UNDEFINED","undefined"),harden("SYMBOL","symbol");var protype=function protype(property,type){var _arguments=arguments;if(type&&"string"==typeof type&&type!=STRING&&type!=NUMBER&&type!=BOOLEAN&&type!=FUNCTION&&type!=OBJECT&&type!=UNDEFINED&&type!=SYMBOL)throw new Error("invalid type");if(!type)return cemento({STRING:protype(property,STRING),NUMBER:protype(property,NUMBER),BOOLEAN:protype(property,BOOLEAN),FUNCTION:protype(property,FUNCTION),OBJECT:protype(property,OBJECT),UNDEFINED:protype(property,UNDEFINED),SYMBOL:protype(property,SYMBOL),type:"undefined"==typeof property?"undefined":(0,_typeof3.default)(property)});var _ret=function(){var flatten=function flatten(current){return current.reduce(function(previous,current){var element=Array.isArray(current)?flatten(current):current;return previous.concat(element)},[])};return{v:(0,_from2.default)(_arguments).splice(1).reduce(function(previous,current){var element=Array.isArray(current)?flatten(current):current;return previous.concat(element)},[]).filter(function(type){return("undefined"==typeof type?"undefined":(0,_typeof3.default)(type))==STRING}).filter(function(type){return type==STRING||type==NUMBER||type==BOOLEAN||type==FUNCTION||type==OBJECT||type==UNDEFINED||type==SYMBOL}).some(function(type){return("undefined"==typeof property?"undefined":(0,_typeof3.default)(property))==type})}}();return"object"===("undefined"==typeof _ret?"undefined":(0,_typeof3.default)(_ret))?_ret.v:void 0};module.exports=protype},function(module,exports,__webpack_require__){module.exports={default:__webpack_require__(92),__esModule:!0}},function(module,exports,__webpack_require__){__webpack_require__(51),__webpack_require__(93),module.exports=__webpack_require__(22).Array.from},function(module,exports,__webpack_require__){"use strict";var ctx=__webpack_require__(23),$export=__webpack_require__(21),toObject=__webpack_require__(46),call=__webpack_require__(94),isArrayIter=__webpack_require__(95),toLength=__webpack_require__(35),createProperty=__webpack_require__(96),getIterFn=__webpack_require__(97);$export($export.S+$export.F*!__webpack_require__(99)(function(iter){Array.from(iter)}),"Array",{from:function from(arrayLike){var length,result,step,iterator,O=toObject(arrayLike),C="function"==typeof this?this:Array,aLen=arguments.length,mapfn=aLen>1?arguments[1]:void 0,mapping=void 0!==mapfn,index=0,iterFn=getIterFn(O);if(mapping&&(mapfn=ctx(mapfn,aLen>2?arguments[2]:void 0,2)),void 0==iterFn||C==Array&&isArrayIter(iterFn))for(length=toLength(O.length),result=new C(length);length>index;index++)createProperty(result,index,mapping?mapfn(O[index],index):O[index]);else for(iterator=iterFn.call(O),result=new C;!(step=iterator.next()).done;index++)createProperty(result,index,mapping?call(iterator,mapfn,[step.value,index],!0):step.value);return result.length=index,result}})},function(module,exports,__webpack_require__){var anObject=__webpack_require__(27);module.exports=function(iterator,fn,value,entries){try{return entries?fn(anObject(value)[0],value[1]):fn(value)}catch(e){var ret=iterator.return;throw void 0!==ret&&anObject(ret.call(iterator)),e}}},function(module,exports,__webpack_require__){var Iterators=__webpack_require__(56),ITERATOR=__webpack_require__(62)("iterator"),ArrayProto=Array.prototype;module.exports=function(it){return void 0!==it&&(Iterators.Array===it||ArrayProto[ITERATOR]===it)}},function(module,exports,__webpack_require__){"use strict";var $defineProperty=__webpack_require__(26),createDesc=__webpack_require__(11);module.exports=function(object,index,value){index in object?$defineProperty.f(object,index,createDesc(0,value)):object[index]=value}},function(module,exports,__webpack_require__){var classof=__webpack_require__(98),ITERATOR=__webpack_require__(62)("iterator"),Iterators=__webpack_require__(56);module.exports=__webpack_require__(22).getIteratorMethod=function(it){if(void 0!=it)return it[ITERATOR]||it["@@iterator"]||Iterators[classof(it)]}},function(module,exports,__webpack_require__){var cof=__webpack_require__(7),TAG=__webpack_require__(62)("toStringTag"),ARG="Arguments"==cof(function(){return arguments}()),tryGet=function(it,key){try{return it[key]}catch(e){}};module.exports=function(it){var O,T,B;return void 0===it?"Undefined":null===it?"Null":"string"==typeof(T=tryGet(O=Object(it),TAG))?T:ARG?cof(O):"Object"==(B=cof(O))&&"function"==typeof O.callee?"Arguments":B}},function(module,exports,__webpack_require__){var ITERATOR=__webpack_require__(62)("iterator"),SAFE_CLOSING=!1;try{var riter=[7][ITERATOR]();riter.return=function(){SAFE_CLOSING=!0},Array.from(riter,function(){throw 2})}catch(e){}module.exports=function(exec,skipClosing){if(!skipClosing&&!SAFE_CLOSING)return!1;var safe=!1;try{var arr=[7],iter=arr[ITERATOR]();iter.next=function(){return{done:safe=!0}},arr[ITERATOR]=function(){return iter},exec(arr)}catch(e){}return safe}},function(module,exports,__webpack_require__){"use strict";var protype=__webpack_require__(90),truly=function truly(value){var valueType=protype(value);return valueType.NUMBER?!isNaN(value)&&isFinite(value):!valueType.UNDEFINED&&null!==value&&""!==value};module.exports=truly},function(module,exports,__webpack_require__){"use strict";var doubt=__webpack_require__(48),filled=__webpack_require__(102),protype=__webpack_require__(90),stuffed=__webpack_require__(104),truly=__webpack_require__(100),truu=function truu(entity){return doubt(entity).AS_ARRAY?filled(entity):protype(entity,OBJECT)?stuffed(entity):truly(entity)};module.exports=truu},function(module,exports,__webpack_require__){"use strict";var doubt=__webpack_require__(48),raze=__webpack_require__(103),truly=__webpack_require__(100),filled=function filled(array){if(!doubt(array).AS_ARRAY)throw new Error("invalid array");return array=raze(array),0!=array.length&&0!=array.filter(truly).length};module.exports=filled},function(module,exports,__webpack_require__){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _from=__webpack_require__(91),_from2=_interopRequireDefault(_from),doubt=__webpack_require__(48),harden=__webpack_require__(85);_from2.default||(Array.from=function(){var r=Object.prototype.toString,n=function n(_n){return"function"==typeof _n||"[object Function]"===r.call(_n)},t=function t(r){var n=Number(r);return isNaN(n)?0:0!==n&&isFinite(n)?(n>0?1:-1)*Math.floor(Math.abs(n)):n},e=Math.pow(2,53)-1,o=function o(r){var n=t(r);return Math.min(Math.max(n,0),e)};return function(r){var t=this,e=Object(r);if(null==r)throw new TypeError("Array.from requires an array-like object - not null or undefined");var a,u=arguments.length>1?arguments[1]:void 0;if("undefined"!=typeof u){if(!n(u))throw new TypeError("Array.from: when provided, the second argument must be a function");arguments.length>2&&(a=arguments[2])}for(var i,f=o(e.length),c=n(t)?Object(new t(f)):new Array(f),h=0;f>h;)i=e[h],u?c[h]="undefined"==typeof a?u(i,h):u.call(a,i,h):c[h]=i,h+=1;return c.length=f,c}}());var raze=function raze(array,map,entity){array=doubt(array).AS_ARRAY?array:doubt(this).AS_ARRAY?this:[];var list=(0,_from2.default)(array,map,entity);return array!==this&&doubt(this).ARRAY&&(list=list.concat(this)),harden("raze",raze.bind(list),list),list};module.exports=raze},function(module,exports,__webpack_require__){"use strict";var doubt=__webpack_require__(48),kount=__webpack_require__(1),protype=__webpack_require__(90),truly=__webpack_require__(100),stuffed=function stuffed(object){if(doubt(object).AS_ARRAY||!protype(object,OBJECT))throw new Error("invalid object");return truly(object)&&0!=kount(object)};module.exports=stuffed},function(module,exports,__webpack_require__){"use strict";var arid=__webpack_require__(106),clazof=__webpack_require__(107),diatom=__webpack_require__(111),harden=__webpack_require__(85),optfor=__webpack_require__(118),plough=__webpack_require__(125),truly=(__webpack_require__(90),__webpack_require__(100)),U200b=diatom("U200b");harden("U200B","​"),harden("U200B_BASE16","ffffffff0000200bffffffff"),harden("INSERT","insert"),harden("PREPEND","prepend"),harden("APPEND","append"),U200b.prototype.initialize=function initialize(string){var text=plough(arguments).map(function(parameter){return parameter.toString()}).filter(truly);return this.history=this.history||[],this.text=[].concat(text),this.string=text,this.base(U200B),this.identify(),this},U200b.prototype.base=function base(type){if(type!==U200B&&type!==U200B_BASE16)throw new Error("invalid base type");return this.type=type,this},U200b.prototype.identify=function identify(){var string=this.string.join("");return new RegExp(U200B,"g").test(string)?this.type=U200B:new RegExp(U200B_BASE16,"g").test(string)?this.type=U200B_BASE16:this.type=U200B,this},U200b.prototype.separate=function separate(){return this.string.join("").split(this.type)},U200b.prototype.release=function release(){return arid(this.history)&&this.insert(),[].concat(this.string)},U200b.prototype.join=function join(separator){return this.release().join(separator||"")},U200b.prototype.toString=function toString(){return this.join()},U200b.prototype.valueOf=function valueOf(){return this.release()},U200b.prototype.raw=function raw(){return this.toString().replace(new RegExp(this.type,"g"),"")},U200b.prototype.append=function append(string){var text=plough(arguments).map(function(parameter){return parameter.toString()}).filter(truly)||[];return this.string=this.string.concat(text).map(function onEachToken(token){return token+this.type}.bind(this)),this.history.push(APPEND),this},U200b.prototype.prepend=function prepend(string){var text=plough(arguments).map(function(parameter){return parameter.toString()}).filter(truly)||[];return this.string=text.concat(this.string).map(function onEachToken(token){return this.type+token}.bind(this)),this.history.push(PREPEND),this},U200b.prototype.insert=function insert(string,pattern){var text=plough(arguments).map(function onEachParameter(parameter){return clazof(parameter,RegExp)?null:parameter.toString()}).filter(truly)||[],template=optfor(arguments,RegExp);return truly(template)?this.string=this.string.concat(text).map(function onEachToken(token){return token.replace(template,this.type)}.bind(this)):this.string=this.string.concat(text).join(this.type+"[,]").split("[,]"),this.history.push(INSERT),this},U200b.prototype.clear=function clear(){return this.string=this.text,this.history=[],this},module.exports=U200b},function(module,exports,__webpack_require__){"use strict";var doubt=__webpack_require__(48),truly=__webpack_require__(100),arid=function arid(array){if(!doubt(array).ARRAY)throw new Error("invalid array");return 0==array.length||0==array.filter(truly).length};module.exports=arid},function(module,exports,__webpack_require__){"use strict";var een=__webpack_require__(108),protype=__webpack_require__(90);Array.prototype.some=Array.prototype.some||function(evaluator,thisArg){if(!this)throw new TypeError("Array.prototype.some called on null or undefined");if("function"!=typeof evaluator){if("string"!=typeof evaluator)throw new TypeError;if(!(evaluator=eval(evaluator)))throw new TypeError}var i;if(void 0===thisArg){for(i in this)if(evaluator(this[i],i,this))return!0;return!1}for(i in this)if(evaluator.call(thisArg,this[i],i,this))return!0;return!1};var clazof=function clazof(entity,blueprint){if(!protype(blueprint,FUNCTION))throw new Error("invalid blueprint");if(protype(entity,OBJECT)){var result=entity instanceof blueprint;if(!result){for(var _constructor=[],point=entity;een(_constructor,point.constructor);)_constructor.push(point.constructor),point=point.constructor.prototype;result=_constructor.some(function onEachConstructor(constructor){return clazof(constructor,blueprint)})}if(!result){for(var _constructor2=[],_point=entity.constructor;een(_constructor2,_point.__proto__);)_constructor2.push(_point.__proto__),_point=_point.__proto__;result=_constructor2.some(function onEachConstructor(constructor){return clazof(constructor,blueprint)})}return result}protype(entity,FUNCTION)&&entity.name===blueprint.name&&entity.toString()===blueprint.toString()};module.exports=clazof},function(module,exports,__webpack_require__){"use strict";var doubt=__webpack_require__(48),kein=__webpack_require__(109),protype=__webpack_require__(90),truly=__webpack_require__(100);Array.prototype.some=Array.prototype.some||function(evaluator,thisArg){if(!this)throw new TypeError("Array.prototype.some called on null or undefined");if("function"!=typeof evaluator){if("string"!=typeof evaluator)throw new TypeError;if(!(evaluator=eval(evaluator)))throw new TypeError}var i;if(void 0===thisArg){for(i in this)if(evaluator(this[i],i,this))return!0;return!1}for(i in this)if(evaluator.call(thisArg,this[i],i,this))return!0;return!1};var een=function een(array,value,comparator){if(!doubt(array,AS_ARRAY))throw new Error("invalid array");if(truly(comparator)&&!protype(comparator,FUNCTION))throw new Error("invalid comparator");return comparator=comparator||function comparator(item,value){return protype(item,OBJECT)&&kein(item,"toString")&&kein(value,"toString")?item.toString()===value.toString()||item===value:item===value},array.some(function(item,index){return comparator(item,value,index)})};module.exports=een},function(module,exports,__webpack_require__){"use strict";var falzy=__webpack_require__(110),protype=__webpack_require__(90),kein=function kein(entity,key){if(!protype(entity,OBJECT,FUNCTION)||falzy(entity))throw new Error("invalid entity");if(falzy(key))throw new Error("invalid key");return void 0!==entity[key]};module.exports=kein},function(module,exports,__webpack_require__){"use strict";var protype=__webpack_require__(90),falzy=function falzy(value){var valueType=protype(value);return valueType.NUMBER?isNaN(value)||!isFinite(value):valueType.UNDEFINED||null===value||""===value};module.exports=falzy},function(module,exports,__webpack_require__){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _from=__webpack_require__(91),_from2=_interopRequireDefault(_from),falzy=__webpack_require__(110),komento=__webpack_require__(112),llamalize=__webpack_require__(115),protype=__webpack_require__(90);_from2.default||(Array.from=function(){var r=Object.prototype.toString,n=function n(_n){return"function"==typeof _n||"[object Function]"===r.call(_n)},t=function t(r){var n=Number(r);return isNaN(n)?0:0!==n&&isFinite(n)?(n>0?1:-1)*Math.floor(Math.abs(n)):n},e=Math.pow(2,53)-1,o=function o(r){var n=t(r);return Math.min(Math.max(n,0),e)};return function(r){var t=this,e=Object(r);if(null==r)throw new TypeError("Array.from requires an array-like object - not null or undefined");var a,u=arguments.length>1?arguments[1]:void 0;if("undefined"!=typeof u){if(!n(u))throw new TypeError("Array.from: when provided, the second argument must be a function");arguments.length>2&&(a=arguments[2])}for(var i,f=o(e.length),c=n(t)?Object(new t(f)):new Array(f),h=0;f>h;)i=e[h],u?c[h]="undefined"==typeof a?u(i,h):u.call(a,i,h):c[h]=i,h+=1;return c.length=f,c}}());var diatom=function diatom(name){if(!protype(name,STRING)||falzy(name))throw new Error("invalid name");if(!/^[A-Z][A-Za-z0-9]+$/.test(name))throw new Error("name is not simple");name=llamalize(name,!0);try{var blueprint=komento(function template(){return'\n\t\t\t\tfunction {{name}}( option, callback ){\n\t\t\t\t\tvar parameter = Array.from( arguments );\n\n\t\t\t\t\tvar template = "( function evaluate( ){ var result = undefined; @body return result; } ).bind( @bind )( )"\n\t\t\t\t\t\t.replace( "@bind", "( typeof global != \'undefined\' )? global : ( typeof window != \'undefined\' )? window : this" )\n\t\t\t\t\t\t.replace( "@body", "try{ result = ( @expression ); }catch( error ){ @error }" )\n\t\t\t\t\t\t.replace( "@error", "throw new Error( \'error executing expression, \' + error );" );\n\n\t\t\t\t\tif( this instanceof {{name}} && parameter.length ){\n\t\t\t\t\t\tif( typeof this.initialize == "function" ){\n\t\t\t\t\t\t\tthis.initialize.apply( this, parameter );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}else if( this instanceof {{name}} && !parameter.length ){\n\t\t\t\t\t\tif( typeof this.initialize == "function" ){\n\t\t\t\t\t\t\tthis.initialize( );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}else if( !( this instanceof {{name}} ) && parameter.length ){\n\t\t\t\t\t\tvar expression = "function delegate( @parameter ){ return new this( @parameter ); }"\n\t\t\t\t\t\t\t.replace( /@parameter/g,\n\t\t\t\t\t\t\t\tparameter.map( function onEachParameter( item, index ){\n\t\t\t\t\t\t\t\t\treturn "abcdefghijklmnopqrstuvwxyz"[ index ];\n\t\t\t\t\t\t\t\t} ).join( "," ) );\n\n\t\t\t\t\t\texpression = template.replace( "@expression", expression );\n\n\t\t\t\t\t\treturn eval( expression ).apply( {{name}}, parameter );\n\n\t\t\t\t\t}else{\n\t\t\t\t\t\tvar expression = "function delegate( ){ return new this( ); }";\n\n\t\t\t\t\t\texpression = template.replace( "@expression", expression );\n\n\t\t\t\t\t\treturn eval( expression ).call( {{name}} );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t'},{name:name});return new Function("return "+blueprint)()}catch(error){throw new Error("function not created properly, "+error)}};module.exports=diatom},function(module,exports,__webpack_require__){"use strict";var handlebar=__webpack_require__(113),harden=__webpack_require__(85),protype=__webpack_require__(90),realign=__webpack_require__(114),stuffed=__webpack_require__(104),truly=__webpack_require__(100),komento=function komento(comment,option){if(!protype(comment,FUNCTION))throw new Error("invalid function");var string=(comment.toString().match(komento.MULTIPLE_LINE_COMMENT_PATTERN)||[])[1]||(comment.toString().match(komento.SINGLE_LINE_COMMENT_PATTERN)||[])[1];return string||(string=comment()),string=realign(string),truly(string)&&protype(option,OBJECT)&&stuffed(option)&&(string=handlebar.compile(string)(option)),string};harden.bind(komento)("MULTIPLE_LINE_COMMENT_PATTERN",/^function\s*\w*\([^\(\)]*\)\s*\{\s*[\s\S]*\s*\/\*\!?([\s\S]*|.*|[^]*)\*\/\S*\s*\}$/m).harden("SINGLE_LINE_COMMENT_PATTERN",/^function\s*\w*\([^\(\)]*\)\s*\{\s*[\s\S]*\s*\/\*\!?([\s\S]*|.*|[^]*)\*\/\S*\s*\}$/),module.exports=komento},function(module,exports,__webpack_require__){!function webpackUniversalModuleDefinition(root,factory){module.exports=factory()}(this,function(){return function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:!1};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.loaded=!0,module.exports}var installedModules={};return __webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.p="",__webpack_require__(0)}([function(module,exports,__webpack_require__){"use strict";function create(){var hb=_create();return hb.compile=function(input,options){return _handlebarsCompilerCompiler.compile(input,options,hb)},hb.precompile=function(input,options){return _handlebarsCompilerCompiler.precompile(input,options,hb)},hb.AST=_handlebarsCompilerAst2.default,hb.Compiler=_handlebarsCompilerCompiler.Compiler,hb.JavaScriptCompiler=_handlebarsCompilerJavascriptCompiler2.default,hb.Parser=_handlebarsCompilerBase.parser,hb.parse=_handlebarsCompilerBase.parse,hb}var _interopRequireDefault=__webpack_require__(1).default;exports.__esModule=!0;var _handlebarsRuntime=__webpack_require__(2),_handlebarsRuntime2=_interopRequireDefault(_handlebarsRuntime),_handlebarsCompilerAst=__webpack_require__(21),_handlebarsCompilerAst2=_interopRequireDefault(_handlebarsCompilerAst),_handlebarsCompilerBase=__webpack_require__(22),_handlebarsCompilerCompiler=__webpack_require__(27),_handlebarsCompilerJavascriptCompiler=__webpack_require__(28),_handlebarsCompilerJavascriptCompiler2=_interopRequireDefault(_handlebarsCompilerJavascriptCompiler),_handlebarsCompilerVisitor=__webpack_require__(25),_handlebarsCompilerVisitor2=_interopRequireDefault(_handlebarsCompilerVisitor),_handlebarsNoConflict=__webpack_require__(20),_handlebarsNoConflict2=_interopRequireDefault(_handlebarsNoConflict),_create=_handlebarsRuntime2.default.create,inst=create();inst.create=create,_handlebarsNoConflict2.default(inst),inst.Visitor=_handlebarsCompilerVisitor2.default,inst.default=inst,exports.default=inst,module.exports=exports.default},function(module,exports){"use strict";exports.default=function(obj){return obj&&obj.__esModule?obj:{default:obj}},exports.__esModule=!0},function(module,exports,__webpack_require__){"use strict";function create(){var hb=new base.HandlebarsEnvironment;return Utils.extend(hb,base),hb.SafeString=_handlebarsSafeString2.default,hb.Exception=_handlebarsException2.default,hb.Utils=Utils,hb.escapeExpression=Utils.escapeExpression,hb.VM=runtime,hb.template=function(spec){return runtime.template(spec,hb)},hb}var _interopRequireWildcard=__webpack_require__(3).default,_interopRequireDefault=__webpack_require__(1).default;exports.__esModule=!0;var _handlebarsBase=__webpack_require__(4),base=_interopRequireWildcard(_handlebarsBase),_handlebarsSafeString=__webpack_require__(18),_handlebarsSafeString2=_interopRequireDefault(_handlebarsSafeString),_handlebarsException=__webpack_require__(6),_handlebarsException2=_interopRequireDefault(_handlebarsException),_handlebarsUtils=__webpack_require__(5),Utils=_interopRequireWildcard(_handlebarsUtils),_handlebarsRuntime=__webpack_require__(19),runtime=_interopRequireWildcard(_handlebarsRuntime),_handlebarsNoConflict=__webpack_require__(20),_handlebarsNoConflict2=_interopRequireDefault(_handlebarsNoConflict),inst=create();inst.create=create,_handlebarsNoConflict2.default(inst),inst.default=inst,exports.default=inst,module.exports=exports.default},function(module,exports){"use strict";exports.default=function(obj){if(obj&&obj.__esModule)return obj;var newObj={};if(null!=obj)for(var key in obj)Object.prototype.hasOwnProperty.call(obj,key)&&(newObj[key]=obj[key]);return newObj.default=obj,newObj},exports.__esModule=!0},function(module,exports,__webpack_require__){"use strict";function HandlebarsEnvironment(helpers,partials,decorators){this.helpers=helpers||{},this.partials=partials||{},this.decorators=decorators||{},_helpers.registerDefaultHelpers(this),_decorators.registerDefaultDecorators(this)}var _interopRequireDefault=__webpack_require__(1).default;exports.__esModule=!0,exports.HandlebarsEnvironment=HandlebarsEnvironment;var _utils=__webpack_require__(5),_exception=__webpack_require__(6),_exception2=_interopRequireDefault(_exception),_helpers=__webpack_require__(7),_decorators=__webpack_require__(15),_logger=__webpack_require__(17),_logger2=_interopRequireDefault(_logger),VERSION="4.0.5";exports.VERSION=VERSION;var COMPILER_REVISION=7;exports.COMPILER_REVISION=COMPILER_REVISION;var REVISION_CHANGES={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0"};exports.REVISION_CHANGES=REVISION_CHANGES;var objectType="[object Object]";HandlebarsEnvironment.prototype={constructor:HandlebarsEnvironment,logger:_logger2.default,log:_logger2.default.log,registerHelper:function registerHelper(name,fn){if(_utils.toString.call(name)===objectType){if(fn)throw new _exception2.default("Arg not supported with multiple helpers");_utils.extend(this.helpers,name)}else this.helpers[name]=fn},unregisterHelper:function unregisterHelper(name){delete this.helpers[name]},registerPartial:function registerPartial(name,partial){if(_utils.toString.call(name)===objectType)_utils.extend(this.partials,name);else{if("undefined"==typeof partial)throw new _exception2.default('Attempting to register a partial called "'+name+'" as undefined');this.partials[name]=partial}},unregisterPartial:function unregisterPartial(name){delete this.partials[name]},registerDecorator:function registerDecorator(name,fn){if(_utils.toString.call(name)===objectType){if(fn)throw new _exception2.default("Arg not supported with multiple decorators");_utils.extend(this.decorators,name)}else this.decorators[name]=fn},unregisterDecorator:function unregisterDecorator(name){delete this.decorators[name]}};var log=_logger2.default.log;exports.log=log,exports.createFrame=_utils.createFrame,exports.logger=_logger2.default;
},function(module,exports){"use strict";function escapeChar(chr){return escape[chr]}function extend(obj){for(var i=1;i<arguments.length;i++)for(var key in arguments[i])Object.prototype.hasOwnProperty.call(arguments[i],key)&&(obj[key]=arguments[i][key]);return obj}function indexOf(array,value){for(var i=0,len=array.length;i<len;i++)if(array[i]===value)return i;return-1}function escapeExpression(string){if("string"!=typeof string){if(string&&string.toHTML)return string.toHTML();if(null==string)return"";if(!string)return string+"";string=""+string}return possible.test(string)?string.replace(badChars,escapeChar):string}function isEmpty(value){return!value&&0!==value||!(!isArray(value)||0!==value.length)}function createFrame(object){var frame=extend({},object);return frame._parent=object,frame}function blockParams(params,ids){return params.path=ids,params}function appendContextPath(contextPath,id){return(contextPath?contextPath+".":"")+id}exports.__esModule=!0,exports.extend=extend,exports.indexOf=indexOf,exports.escapeExpression=escapeExpression,exports.isEmpty=isEmpty,exports.createFrame=createFrame,exports.blockParams=blockParams,exports.appendContextPath=appendContextPath;var escape={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},badChars=/[&<>"'`=]/g,possible=/[&<>"'`=]/,toString=Object.prototype.toString;exports.toString=toString;var isFunction=function isFunction(value){return"function"==typeof value};isFunction(/x/)&&(exports.isFunction=isFunction=function(value){return"function"==typeof value&&"[object Function]"===toString.call(value)}),exports.isFunction=isFunction;var isArray=Array.isArray||function(value){return!(!value||"object"!=typeof value)&&"[object Array]"===toString.call(value)};exports.isArray=isArray},function(module,exports){"use strict";function Exception(message,node){var loc=node&&node.loc,line=void 0,column=void 0;loc&&(line=loc.start.line,column=loc.start.column,message+=" - "+line+":"+column);for(var tmp=Error.prototype.constructor.call(this,message),idx=0;idx<errorProps.length;idx++)this[errorProps[idx]]=tmp[errorProps[idx]];Error.captureStackTrace&&Error.captureStackTrace(this,Exception),loc&&(this.lineNumber=line,this.column=column)}exports.__esModule=!0;var errorProps=["description","fileName","lineNumber","message","name","number","stack"];Exception.prototype=new Error,exports.default=Exception,module.exports=exports.default},function(module,exports,__webpack_require__){"use strict";function registerDefaultHelpers(instance){_helpersBlockHelperMissing2.default(instance),_helpersEach2.default(instance),_helpersHelperMissing2.default(instance),_helpersIf2.default(instance),_helpersLog2.default(instance),_helpersLookup2.default(instance),_helpersWith2.default(instance)}var _interopRequireDefault=__webpack_require__(1).default;exports.__esModule=!0,exports.registerDefaultHelpers=registerDefaultHelpers;var _helpersBlockHelperMissing=__webpack_require__(8),_helpersBlockHelperMissing2=_interopRequireDefault(_helpersBlockHelperMissing),_helpersEach=__webpack_require__(9),_helpersEach2=_interopRequireDefault(_helpersEach),_helpersHelperMissing=__webpack_require__(10),_helpersHelperMissing2=_interopRequireDefault(_helpersHelperMissing),_helpersIf=__webpack_require__(11),_helpersIf2=_interopRequireDefault(_helpersIf),_helpersLog=__webpack_require__(12),_helpersLog2=_interopRequireDefault(_helpersLog),_helpersLookup=__webpack_require__(13),_helpersLookup2=_interopRequireDefault(_helpersLookup),_helpersWith=__webpack_require__(14),_helpersWith2=_interopRequireDefault(_helpersWith)},function(module,exports,__webpack_require__){"use strict";exports.__esModule=!0;var _utils=__webpack_require__(5);exports.default=function(instance){instance.registerHelper("blockHelperMissing",function(context,options){var inverse=options.inverse,fn=options.fn;if(context===!0)return fn(this);if(context===!1||null==context)return inverse(this);if(_utils.isArray(context))return context.length>0?(options.ids&&(options.ids=[options.name]),instance.helpers.each(context,options)):inverse(this);if(options.data&&options.ids){var data=_utils.createFrame(options.data);data.contextPath=_utils.appendContextPath(options.data.contextPath,options.name),options={data:data}}return fn(context,options)})},module.exports=exports.default},function(module,exports,__webpack_require__){"use strict";var _interopRequireDefault=__webpack_require__(1).default;exports.__esModule=!0;var _utils=__webpack_require__(5),_exception=__webpack_require__(6),_exception2=_interopRequireDefault(_exception);exports.default=function(instance){instance.registerHelper("each",function(context,options){function execIteration(field,index,last){data&&(data.key=field,data.index=index,data.first=0===index,data.last=!!last,contextPath&&(data.contextPath=contextPath+field)),ret+=fn(context[field],{data:data,blockParams:_utils.blockParams([context[field],field],[contextPath+field,null])})}if(!options)throw new _exception2.default("Must pass iterator to #each");var fn=options.fn,inverse=options.inverse,i=0,ret="",data=void 0,contextPath=void 0;if(options.data&&options.ids&&(contextPath=_utils.appendContextPath(options.data.contextPath,options.ids[0])+"."),_utils.isFunction(context)&&(context=context.call(this)),options.data&&(data=_utils.createFrame(options.data)),context&&"object"==typeof context)if(_utils.isArray(context))for(var j=context.length;i<j;i++)i in context&&execIteration(i,i,i===context.length-1);else{var priorKey=void 0;for(var key in context)context.hasOwnProperty(key)&&(void 0!==priorKey&&execIteration(priorKey,i-1),priorKey=key,i++);void 0!==priorKey&&execIteration(priorKey,i-1,!0)}return 0===i&&(ret=inverse(this)),ret})},module.exports=exports.default},function(module,exports,__webpack_require__){"use strict";var _interopRequireDefault=__webpack_require__(1).default;exports.__esModule=!0;var _exception=__webpack_require__(6),_exception2=_interopRequireDefault(_exception);exports.default=function(instance){instance.registerHelper("helperMissing",function(){if(1!==arguments.length)throw new _exception2.default('Missing helper: "'+arguments[arguments.length-1].name+'"')})},module.exports=exports.default},function(module,exports,__webpack_require__){"use strict";exports.__esModule=!0;var _utils=__webpack_require__(5);exports.default=function(instance){instance.registerHelper("if",function(conditional,options){return _utils.isFunction(conditional)&&(conditional=conditional.call(this)),!options.hash.includeZero&&!conditional||_utils.isEmpty(conditional)?options.inverse(this):options.fn(this)}),instance.registerHelper("unless",function(conditional,options){return instance.helpers.if.call(this,conditional,{fn:options.inverse,inverse:options.fn,hash:options.hash})})},module.exports=exports.default},function(module,exports){"use strict";exports.__esModule=!0,exports.default=function(instance){instance.registerHelper("log",function(){for(var args=[void 0],options=arguments[arguments.length-1],i=0;i<arguments.length-1;i++)args.push(arguments[i]);var level=1;null!=options.hash.level?level=options.hash.level:options.data&&null!=options.data.level&&(level=options.data.level),args[0]=level,instance.log.apply(instance,args)})},module.exports=exports.default},function(module,exports){"use strict";exports.__esModule=!0,exports.default=function(instance){instance.registerHelper("lookup",function(obj,field){return obj&&obj[field]})},module.exports=exports.default},function(module,exports,__webpack_require__){"use strict";exports.__esModule=!0;var _utils=__webpack_require__(5);exports.default=function(instance){instance.registerHelper("with",function(context,options){_utils.isFunction(context)&&(context=context.call(this));var fn=options.fn;if(_utils.isEmpty(context))return options.inverse(this);var data=options.data;return options.data&&options.ids&&(data=_utils.createFrame(options.data),data.contextPath=_utils.appendContextPath(options.data.contextPath,options.ids[0])),fn(context,{data:data,blockParams:_utils.blockParams([context],[data&&data.contextPath])})})},module.exports=exports.default},function(module,exports,__webpack_require__){"use strict";function registerDefaultDecorators(instance){_decoratorsInline2.default(instance)}var _interopRequireDefault=__webpack_require__(1).default;exports.__esModule=!0,exports.registerDefaultDecorators=registerDefaultDecorators;var _decoratorsInline=__webpack_require__(16),_decoratorsInline2=_interopRequireDefault(_decoratorsInline)},function(module,exports,__webpack_require__){"use strict";exports.__esModule=!0;var _utils=__webpack_require__(5);exports.default=function(instance){instance.registerDecorator("inline",function(fn,props,container,options){var ret=fn;return props.partials||(props.partials={},ret=function(context,options){var original=container.partials;container.partials=_utils.extend({},original,props.partials);var ret=fn(context,options);return container.partials=original,ret}),props.partials[options.args[0]]=options.fn,ret})},module.exports=exports.default},function(module,exports,__webpack_require__){"use strict";exports.__esModule=!0;var _utils=__webpack_require__(5),logger={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function lookupLevel(level){if("string"==typeof level){var levelMap=_utils.indexOf(logger.methodMap,level.toLowerCase());level=levelMap>=0?levelMap:parseInt(level,10)}return level},log:function log(level){if(level=logger.lookupLevel(level),"undefined"!=typeof console&&logger.lookupLevel(logger.level)<=level){var method=logger.methodMap[level];console[method]||(method="log");for(var _len=arguments.length,message=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)message[_key-1]=arguments[_key];console[method].apply(console,message)}}};exports.default=logger,module.exports=exports.default},function(module,exports){"use strict";function SafeString(string){this.string=string}exports.__esModule=!0,SafeString.prototype.toString=SafeString.prototype.toHTML=function(){return""+this.string},exports.default=SafeString,module.exports=exports.default},function(module,exports,__webpack_require__){"use strict";function checkRevision(compilerInfo){var compilerRevision=compilerInfo&&compilerInfo[0]||1,currentRevision=_base.COMPILER_REVISION;if(compilerRevision!==currentRevision){if(compilerRevision<currentRevision){var runtimeVersions=_base.REVISION_CHANGES[currentRevision],compilerVersions=_base.REVISION_CHANGES[compilerRevision];throw new _exception2.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+runtimeVersions+") or downgrade your runtime to an older version ("+compilerVersions+").")}throw new _exception2.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+compilerInfo[1]+").")}}function template(templateSpec,env){function invokePartialWrapper(partial,context,options){options.hash&&(context=Utils.extend({},context,options.hash),options.ids&&(options.ids[0]=!0)),partial=env.VM.resolvePartial.call(this,partial,context,options);var result=env.VM.invokePartial.call(this,partial,context,options);if(null==result&&env.compile&&(options.partials[options.name]=env.compile(partial,templateSpec.compilerOptions,env),result=options.partials[options.name](context,options)),null!=result){if(options.indent){for(var lines=result.split("\n"),i=0,l=lines.length;i<l&&(lines[i]||i+1!==l);i++)lines[i]=options.indent+lines[i];result=lines.join("\n")}return result}throw new _exception2.default("The partial "+options.name+" could not be compiled when running in runtime-only mode")}function ret(context){function main(context){return""+templateSpec.main(container,context,container.helpers,container.partials,data,blockParams,depths)}var options=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],data=options.data;ret._setup(options),!options.partial&&templateSpec.useData&&(data=initData(context,data));var depths=void 0,blockParams=templateSpec.useBlockParams?[]:void 0;return templateSpec.useDepths&&(depths=options.depths?context!==options.depths[0]?[context].concat(options.depths):options.depths:[context]),(main=executeDecorators(templateSpec.main,main,container,options.depths||[],data,blockParams))(context,options)}if(!env)throw new _exception2.default("No environment passed to template");if(!templateSpec||!templateSpec.main)throw new _exception2.default("Unknown template object: "+typeof templateSpec);templateSpec.main.decorator=templateSpec.main_d,env.VM.checkRevision(templateSpec.compiler);var container={strict:function strict(obj,name){if(!(name in obj))throw new _exception2.default('"'+name+'" not defined in '+obj);return obj[name]},lookup:function lookup(depths,name){for(var len=depths.length,i=0;i<len;i++)if(depths[i]&&null!=depths[i][name])return depths[i][name]},lambda:function lambda(current,context){return"function"==typeof current?current.call(context):current},escapeExpression:Utils.escapeExpression,invokePartial:invokePartialWrapper,fn:function fn(i){var ret=templateSpec[i];return ret.decorator=templateSpec[i+"_d"],ret},programs:[],program:function program(i,data,declaredBlockParams,blockParams,depths){var programWrapper=this.programs[i],fn=this.fn(i);return data||depths||blockParams||declaredBlockParams?programWrapper=wrapProgram(this,i,fn,data,declaredBlockParams,blockParams,depths):programWrapper||(programWrapper=this.programs[i]=wrapProgram(this,i,fn)),programWrapper},data:function data(value,depth){for(;value&&depth--;)value=value._parent;return value},merge:function merge(param,common){var obj=param||common;return param&&common&&param!==common&&(obj=Utils.extend({},common,param)),obj},noop:env.VM.noop,compilerInfo:templateSpec.compiler};return ret.isTop=!0,ret._setup=function(options){options.partial?(container.helpers=options.helpers,container.partials=options.partials,container.decorators=options.decorators):(container.helpers=container.merge(options.helpers,env.helpers),templateSpec.usePartial&&(container.partials=container.merge(options.partials,env.partials)),(templateSpec.usePartial||templateSpec.useDecorators)&&(container.decorators=container.merge(options.decorators,env.decorators)))},ret._child=function(i,data,blockParams,depths){if(templateSpec.useBlockParams&&!blockParams)throw new _exception2.default("must pass block params");if(templateSpec.useDepths&&!depths)throw new _exception2.default("must pass parent depths");return wrapProgram(container,i,templateSpec[i],data,0,blockParams,depths)},ret}function wrapProgram(container,i,fn,data,declaredBlockParams,blockParams,depths){function prog(context){var options=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],currentDepths=depths;return depths&&context!==depths[0]&&(currentDepths=[context].concat(depths)),fn(container,context,container.helpers,container.partials,options.data||data,blockParams&&[options.blockParams].concat(blockParams),currentDepths)}return prog=executeDecorators(fn,prog,container,depths,data,blockParams),prog.program=i,prog.depth=depths?depths.length:0,prog.blockParams=declaredBlockParams||0,prog}function resolvePartial(partial,context,options){return partial?partial.call||options.name||(options.name=partial,partial=options.partials[partial]):partial="@partial-block"===options.name?options.data["partial-block"]:options.partials[options.name],partial}function invokePartial(partial,context,options){options.partial=!0,options.ids&&(options.data.contextPath=options.ids[0]||options.data.contextPath);var partialBlock=void 0;if(options.fn&&options.fn!==noop&&(options.data=_base.createFrame(options.data),partialBlock=options.data["partial-block"]=options.fn,partialBlock.partials&&(options.partials=Utils.extend({},options.partials,partialBlock.partials))),void 0===partial&&partialBlock&&(partial=partialBlock),void 0===partial)throw new _exception2.default("The partial "+options.name+" could not be found");if(partial instanceof Function)return partial(context,options)}function noop(){return""}function initData(context,data){return data&&"root"in data||(data=data?_base.createFrame(data):{},data.root=context),data}function executeDecorators(fn,prog,container,depths,data,blockParams){if(fn.decorator){var props={};prog=fn.decorator(prog,props,container,depths&&depths[0],data,blockParams,depths),Utils.extend(prog,props)}return prog}var _interopRequireWildcard=__webpack_require__(3).default,_interopRequireDefault=__webpack_require__(1).default;exports.__esModule=!0,exports.checkRevision=checkRevision,exports.template=template,exports.wrapProgram=wrapProgram,exports.resolvePartial=resolvePartial,exports.invokePartial=invokePartial,exports.noop=noop;var _utils=__webpack_require__(5),Utils=_interopRequireWildcard(_utils),_exception=__webpack_require__(6),_exception2=_interopRequireDefault(_exception),_base=__webpack_require__(4)},function(module,exports){(function(global){"use strict";exports.__esModule=!0,exports.default=function(Handlebars){var root="undefined"!=typeof global?global:window,$Handlebars=root.Handlebars;Handlebars.noConflict=function(){return root.Handlebars===Handlebars&&(root.Handlebars=$Handlebars),Handlebars}},module.exports=exports.default}).call(exports,function(){return this}())},function(module,exports){"use strict";exports.__esModule=!0;var AST={helpers:{helperExpression:function helperExpression(node){return"SubExpression"===node.type||("MustacheStatement"===node.type||"BlockStatement"===node.type)&&!!(node.params&&node.params.length||node.hash)},scopedId:function scopedId(path){return/^\.|this\b/.test(path.original)},simpleId:function simpleId(path){return 1===path.parts.length&&!AST.helpers.scopedId(path)&&!path.depth}}};exports.default=AST,module.exports=exports.default},function(module,exports,__webpack_require__){"use strict";function parse(input,options){if("Program"===input.type)return input;_parser2.default.yy=yy,yy.locInfo=function(locInfo){return new yy.SourceLocation(options&&options.srcName,locInfo)};var strip=new _whitespaceControl2.default(options);return strip.accept(_parser2.default.parse(input))}var _interopRequireDefault=__webpack_require__(1).default,_interopRequireWildcard=__webpack_require__(3).default;exports.__esModule=!0,exports.parse=parse;var _parser=__webpack_require__(23),_parser2=_interopRequireDefault(_parser),_whitespaceControl=__webpack_require__(24),_whitespaceControl2=_interopRequireDefault(_whitespaceControl),_helpers=__webpack_require__(26),Helpers=_interopRequireWildcard(_helpers),_utils=__webpack_require__(5);exports.parser=_parser2.default;var yy={};_utils.extend(yy,Helpers)},function(module,exports){"use strict";var handlebars=function(){function Parser(){this.yy={}}var parser={trace:function trace(){},yy:{},symbols_:{error:2,root:3,program:4,EOF:5,program_repetition0:6,statement:7,mustache:8,block:9,rawBlock:10,partial:11,partialBlock:12,content:13,COMMENT:14,CONTENT:15,openRawBlock:16,rawBlock_repetition_plus0:17,END_RAW_BLOCK:18,OPEN_RAW_BLOCK:19,helperName:20,openRawBlock_repetition0:21,openRawBlock_option0:22,CLOSE_RAW_BLOCK:23,openBlock:24,block_option0:25,closeBlock:26,openInverse:27,block_option1:28,OPEN_BLOCK:29,openBlock_repetition0:30,openBlock_option0:31,openBlock_option1:32,CLOSE:33,OPEN_INVERSE:34,openInverse_repetition0:35,openInverse_option0:36,openInverse_option1:37,openInverseChain:38,OPEN_INVERSE_CHAIN:39,openInverseChain_repetition0:40,openInverseChain_option0:41,openInverseChain_option1:42,inverseAndProgram:43,INVERSE:44,inverseChain:45,inverseChain_option0:46,OPEN_ENDBLOCK:47,OPEN:48,mustache_repetition0:49,mustache_option0:50,OPEN_UNESCAPED:51,mustache_repetition1:52,mustache_option1:53,CLOSE_UNESCAPED:54,OPEN_PARTIAL:55,partialName:56,partial_repetition0:57,partial_option0:58,openPartialBlock:59,OPEN_PARTIAL_BLOCK:60,openPartialBlock_repetition0:61,openPartialBlock_option0:62,param:63,sexpr:64,OPEN_SEXPR:65,sexpr_repetition0:66,sexpr_option0:67,CLOSE_SEXPR:68,hash:69,hash_repetition_plus0:70,hashSegment:71,ID:72,EQUALS:73,blockParams:74,OPEN_BLOCK_PARAMS:75,blockParams_repetition_plus0:76,CLOSE_BLOCK_PARAMS:77,path:78,dataName:79,STRING:80,NUMBER:81,BOOLEAN:82,UNDEFINED:83,NULL:84,DATA:85,pathSegments:86,SEP:87,$accept:0,$end:1},terminals_:{2:"error",5:"EOF",14:"COMMENT",15:"CONTENT",18:"END_RAW_BLOCK",19:"OPEN_RAW_BLOCK",23:"CLOSE_RAW_BLOCK",29:"OPEN_BLOCK",33:"CLOSE",34:"OPEN_INVERSE",39:"OPEN_INVERSE_CHAIN",44:"INVERSE",47:"OPEN_ENDBLOCK",48:"OPEN",51:"OPEN_UNESCAPED",54:"CLOSE_UNESCAPED",55:"OPEN_PARTIAL",60:"OPEN_PARTIAL_BLOCK",65:"OPEN_SEXPR",68:"CLOSE_SEXPR",72:"ID",73:"EQUALS",75:"OPEN_BLOCK_PARAMS",77:"CLOSE_BLOCK_PARAMS",80:"STRING",81:"NUMBER",82:"BOOLEAN",83:"UNDEFINED",84:"NULL",85:"DATA",87:"SEP"},productions_:[0,[3,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[13,1],[10,3],[16,5],[9,4],[9,4],[24,6],[27,6],[38,6],[43,2],[45,3],[45,1],[26,3],[8,5],[8,5],[11,5],[12,3],[59,5],[63,1],[63,1],[64,5],[69,1],[71,3],[74,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[56,1],[56,1],[79,2],[78,1],[86,3],[86,1],[6,0],[6,2],[17,1],[17,2],[21,0],[21,2],[22,0],[22,1],[25,0],[25,1],[28,0],[28,1],[30,0],[30,2],[31,0],[31,1],[32,0],[32,1],[35,0],[35,2],[36,0],[36,1],[37,0],[37,1],[40,0],[40,2],[41,0],[41,1],[42,0],[42,1],[46,0],[46,1],[49,0],[49,2],[50,0],[50,1],[52,0],[52,2],[53,0],[53,1],[57,0],[57,2],[58,0],[58,1],[61,0],[61,2],[62,0],[62,1],[66,0],[66,2],[67,0],[67,1],[70,1],[70,2],[76,1],[76,2]],performAction:function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$){var $0=$$.length-1;switch(yystate){case 1:return $$[$0-1];case 2:this.$=yy.prepareProgram($$[$0]);break;case 3:this.$=$$[$0];break;case 4:this.$=$$[$0];break;case 5:this.$=$$[$0];break;case 6:this.$=$$[$0];break;case 7:this.$=$$[$0];break;case 8:this.$=$$[$0];break;case 9:this.$={type:"CommentStatement",value:yy.stripComment($$[$0]),strip:yy.stripFlags($$[$0],$$[$0]),loc:yy.locInfo(this._$)};break;case 10:this.$={type:"ContentStatement",original:$$[$0],value:$$[$0],loc:yy.locInfo(this._$)};break;case 11:this.$=yy.prepareRawBlock($$[$0-2],$$[$0-1],$$[$0],this._$);break;case 12:this.$={path:$$[$0-3],params:$$[$0-2],hash:$$[$0-1]};break;case 13:this.$=yy.prepareBlock($$[$0-3],$$[$0-2],$$[$0-1],$$[$0],!1,this._$);break;case 14:this.$=yy.prepareBlock($$[$0-3],$$[$0-2],$$[$0-1],$$[$0],!0,this._$);break;case 15:this.$={open:$$[$0-5],path:$$[$0-4],params:$$[$0-3],hash:$$[$0-2],blockParams:$$[$0-1],strip:yy.stripFlags($$[$0-5],$$[$0])};break;case 16:this.$={path:$$[$0-4],params:$$[$0-3],hash:$$[$0-2],blockParams:$$[$0-1],strip:yy.stripFlags($$[$0-5],$$[$0])};break;case 17:this.$={path:$$[$0-4],params:$$[$0-3],hash:$$[$0-2],blockParams:$$[$0-1],strip:yy.stripFlags($$[$0-5],$$[$0])};break;case 18:this.$={strip:yy.stripFlags($$[$0-1],$$[$0-1]),program:$$[$0]};break;case 19:var inverse=yy.prepareBlock($$[$0-2],$$[$0-1],$$[$0],$$[$0],!1,this._$),program=yy.prepareProgram([inverse],$$[$0-1].loc);program.chained=!0,this.$={strip:$$[$0-2].strip,program:program,chain:!0};break;case 20:this.$=$$[$0];break;case 21:this.$={path:$$[$0-1],strip:yy.stripFlags($$[$0-2],$$[$0])};break;case 22:this.$=yy.prepareMustache($$[$0-3],$$[$0-2],$$[$0-1],$$[$0-4],yy.stripFlags($$[$0-4],$$[$0]),this._$);break;case 23:this.$=yy.prepareMustache($$[$0-3],$$[$0-2],$$[$0-1],$$[$0-4],yy.stripFlags($$[$0-4],$$[$0]),this._$);break;case 24:this.$={type:"PartialStatement",name:$$[$0-3],params:$$[$0-2],hash:$$[$0-1],indent:"",strip:yy.stripFlags($$[$0-4],$$[$0]),loc:yy.locInfo(this._$)};break;case 25:this.$=yy.preparePartialBlock($$[$0-2],$$[$0-1],$$[$0],this._$);break;case 26:this.$={path:$$[$0-3],params:$$[$0-2],hash:$$[$0-1],strip:yy.stripFlags($$[$0-4],$$[$0])};break;case 27:this.$=$$[$0];break;case 28:this.$=$$[$0];break;case 29:this.$={type:"SubExpression",path:$$[$0-3],params:$$[$0-2],hash:$$[$0-1],loc:yy.locInfo(this._$)};break;case 30:this.$={type:"Hash",pairs:$$[$0],loc:yy.locInfo(this._$)};break;case 31:this.$={type:"HashPair",key:yy.id($$[$0-2]),value:$$[$0],loc:yy.locInfo(this._$)};break;case 32:this.$=yy.id($$[$0-1]);break;case 33:this.$=$$[$0];break;case 34:this.$=$$[$0];break;case 35:this.$={type:"StringLiteral",value:$$[$0],original:$$[$0],loc:yy.locInfo(this._$)};break;case 36:this.$={type:"NumberLiteral",value:Number($$[$0]),original:Number($$[$0]),loc:yy.locInfo(this._$)};break;case 37:this.$={type:"BooleanLiteral",value:"true"===$$[$0],original:"true"===$$[$0],loc:yy.locInfo(this._$)};break;case 38:this.$={type:"UndefinedLiteral",original:void 0,value:void 0,loc:yy.locInfo(this._$)};break;case 39:this.$={type:"NullLiteral",original:null,value:null,loc:yy.locInfo(this._$)};break;case 40:this.$=$$[$0];break;case 41:this.$=$$[$0];break;case 42:this.$=yy.preparePath(!0,$$[$0],this._$);break;case 43:this.$=yy.preparePath(!1,$$[$0],this._$);break;case 44:$$[$0-2].push({part:yy.id($$[$0]),original:$$[$0],separator:$$[$0-1]}),this.$=$$[$0-2];break;case 45:this.$=[{part:yy.id($$[$0]),original:$$[$0]}];break;case 46:this.$=[];break;case 47:$$[$0-1].push($$[$0]);break;case 48:this.$=[$$[$0]];break;case 49:$$[$0-1].push($$[$0]);break;case 50:this.$=[];break;case 51:$$[$0-1].push($$[$0]);break;case 58:this.$=[];break;case 59:$$[$0-1].push($$[$0]);break;case 64:this.$=[];break;case 65:$$[$0-1].push($$[$0]);break;case 70:this.$=[];break;case 71:$$[$0-1].push($$[$0]);break;case 78:this.$=[];break;case 79:$$[$0-1].push($$[$0]);break;case 82:this.$=[];break;case 83:$$[$0-1].push($$[$0]);break;case 86:this.$=[];break;case 87:$$[$0-1].push($$[$0]);break;case 90:this.$=[];break;case 91:$$[$0-1].push($$[$0]);break;case 94:this.$=[];break;case 95:$$[$0-1].push($$[$0]);break;case 98:this.$=[$$[$0]];break;case 99:$$[$0-1].push($$[$0]);break;case 100:this.$=[$$[$0]];break;case 101:$$[$0-1].push($$[$0])}},table:[{3:1,4:2,5:[2,46],6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{1:[3]},{5:[1,4]},{5:[2,2],7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:[1,12],15:[1,20],16:17,19:[1,23],24:15,27:16,29:[1,21],34:[1,22],39:[2,2],44:[2,2],47:[2,2],48:[1,13],51:[1,14],55:[1,18],59:19,60:[1,24]},{1:[2,1]},{5:[2,47],14:[2,47],15:[2,47],19:[2,47],29:[2,47],34:[2,47],39:[2,47],44:[2,47],47:[2,47],48:[2,47],51:[2,47],55:[2,47],60:[2,47]},{5:[2,3],14:[2,3],15:[2,3],19:[2,3],29:[2,3],34:[2,3],39:[2,3],44:[2,3],47:[2,3],48:[2,3],51:[2,3],55:[2,3],60:[2,3]},{5:[2,4],14:[2,4],15:[2,4],19:[2,4],29:[2,4],34:[2,4],39:[2,4],44:[2,4],47:[2,4],48:[2,4],51:[2,4],55:[2,4],60:[2,4]},{5:[2,5],14:[2,5],15:[2,5],19:[2,5],29:[2,5],34:[2,5],39:[2,5],44:[2,5],47:[2,5],48:[2,5],51:[2,5],55:[2,5],60:[2,5]},{5:[2,6],14:[2,6],15:[2,6],19:[2,6],29:[2,6],34:[2,6],39:[2,6],44:[2,6],47:[2,6],48:[2,6],51:[2,6],55:[2,6],60:[2,6]},{5:[2,7],14:[2,7],15:[2,7],19:[2,7],29:[2,7],34:[2,7],39:[2,7],44:[2,7],47:[2,7],48:[2,7],51:[2,7],55:[2,7],60:[2,7]},{5:[2,8],14:[2,8],15:[2,8],19:[2,8],29:[2,8],34:[2,8],39:[2,8],44:[2,8],47:[2,8],48:[2,8],51:[2,8],55:[2,8],60:[2,8]},{5:[2,9],14:[2,9],15:[2,9],19:[2,9],29:[2,9],34:[2,9],39:[2,9],44:[2,9],47:[2,9],48:[2,9],51:[2,9],55:[2,9],60:[2,9]},{20:25,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:36,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:37,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{4:38,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{13:40,15:[1,20],17:39},{20:42,56:41,64:43,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:45,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{5:[2,10],14:[2,10],15:[2,10],18:[2,10],19:[2,10],29:[2,10],34:[2,10],39:[2,10],44:[2,10],47:[2,10],48:[2,10],51:[2,10],55:[2,10],60:[2,10]},{20:46,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:47,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:48,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:42,56:49,64:43,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[2,78],49:50,65:[2,78],72:[2,78],80:[2,78],81:[2,78],82:[2,78],83:[2,78],84:[2,78],85:[2,78]},{23:[2,33],33:[2,33],54:[2,33],65:[2,33],68:[2,33],72:[2,33],75:[2,33],80:[2,33],81:[2,33],82:[2,33],83:[2,33],84:[2,33],85:[2,33]},{23:[2,34],33:[2,34],54:[2,34],65:[2,34],68:[2,34],72:[2,34],75:[2,34],80:[2,34],81:[2,34],82:[2,34],83:[2,34],84:[2,34],85:[2,34]},{23:[2,35],33:[2,35],54:[2,35],65:[2,35],68:[2,35],72:[2,35],75:[2,35],80:[2,35],81:[2,35],82:[2,35],83:[2,35],84:[2,35],85:[2,35]},{23:[2,36],33:[2,36],54:[2,36],65:[2,36],68:[2,36],72:[2,36],75:[2,36],80:[2,36],81:[2,36],82:[2,36],83:[2,36],84:[2,36],85:[2,36]},{23:[2,37],33:[2,37],54:[2,37],65:[2,37],68:[2,37],72:[2,37],75:[2,37],80:[2,37],81:[2,37],82:[2,37],83:[2,37],84:[2,37],85:[2,37]},{23:[2,38],33:[2,38],54:[2,38],65:[2,38],68:[2,38],72:[2,38],75:[2,38],80:[2,38],81:[2,38],82:[2,38],83:[2,38],84:[2,38],85:[2,38]},{23:[2,39],33:[2,39],54:[2,39],65:[2,39],68:[2,39],72:[2,39],75:[2,39],80:[2,39],81:[2,39],82:[2,39],83:[2,39],84:[2,39],85:[2,39]},{23:[2,43],33:[2,43],54:[2,43],65:[2,43],68:[2,43],72:[2,43],75:[2,43],80:[2,43],81:[2,43],82:[2,43],83:[2,43],84:[2,43],85:[2,43],87:[1,51]},{72:[1,35],86:52},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{52:53,54:[2,82],65:[2,82],72:[2,82],80:[2,82],81:[2,82],82:[2,82],83:[2,82],84:[2,82],85:[2,82]},{25:54,38:56,39:[1,58],43:57,44:[1,59],45:55,47:[2,54]},{28:60,43:61,44:[1,59],47:[2,56]},{13:63,15:[1,20],18:[1,62]},{15:[2,48],18:[2,48]},{33:[2,86],57:64,65:[2,86],72:[2,86],80:[2,86],81:[2,86],82:[2,86],83:[2,86],84:[2,86],85:[2,86]},{33:[2,40],65:[2,40],72:[2,40],80:[2,40],81:[2,40],82:[2,40],83:[2,40],84:[2,40],85:[2,40]},{33:[2,41],65:[2,41],72:[2,41],80:[2,41],81:[2,41],82:[2,41],83:[2,41],84:[2,41],85:[2,41]},{20:65,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:66,47:[1,67]},{30:68,33:[2,58],65:[2,58],72:[2,58],75:[2,58],80:[2,58],81:[2,58],82:[2,58],83:[2,58],84:[2,58],85:[2,58]},{33:[2,64],35:69,65:[2,64],72:[2,64],75:[2,64],80:[2,64],81:[2,64],82:[2,64],83:[2,64],84:[2,64],85:[2,64]},{21:70,23:[2,50],65:[2,50],72:[2,50],80:[2,50],81:[2,50],82:[2,50],83:[2,50],84:[2,50],85:[2,50]},{33:[2,90],61:71,65:[2,90],72:[2,90],80:[2,90],81:[2,90],82:[2,90],83:[2,90],84:[2,90],85:[2,90]},{20:75,33:[2,80],50:72,63:73,64:76,65:[1,44],69:74,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{72:[1,80]},{23:[2,42],33:[2,42],54:[2,42],65:[2,42],68:[2,42],72:[2,42],75:[2,42],80:[2,42],81:[2,42],82:[2,42],83:[2,42],84:[2,42],85:[2,42],87:[1,51]},{20:75,53:81,54:[2,84],63:82,64:76,65:[1,44],69:83,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:84,47:[1,67]},{47:[2,55]},{4:85,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{47:[2,20]},{20:86,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:87,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{26:88,47:[1,67]},{47:[2,57]},{5:[2,11],14:[2,11],15:[2,11],19:[2,11],29:[2,11],34:[2,11],39:[2,11],44:[2,11],47:[2,11],48:[2,11],51:[2,11],55:[2,11],60:[2,11]},{15:[2,49],18:[2,49]},{20:75,33:[2,88],58:89,63:90,64:76,65:[1,44],69:91,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{65:[2,94],66:92,68:[2,94],72:[2,94],80:[2,94],81:[2,94],82:[2,94],83:[2,94],84:[2,94],85:[2,94]},{
5:[2,25],14:[2,25],15:[2,25],19:[2,25],29:[2,25],34:[2,25],39:[2,25],44:[2,25],47:[2,25],48:[2,25],51:[2,25],55:[2,25],60:[2,25]},{20:93,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,31:94,33:[2,60],63:95,64:76,65:[1,44],69:96,70:77,71:78,72:[1,79],75:[2,60],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,33:[2,66],36:97,63:98,64:76,65:[1,44],69:99,70:77,71:78,72:[1,79],75:[2,66],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,22:100,23:[2,52],63:101,64:76,65:[1,44],69:102,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,33:[2,92],62:103,63:104,64:76,65:[1,44],69:105,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,106]},{33:[2,79],65:[2,79],72:[2,79],80:[2,79],81:[2,79],82:[2,79],83:[2,79],84:[2,79],85:[2,79]},{33:[2,81]},{23:[2,27],33:[2,27],54:[2,27],65:[2,27],68:[2,27],72:[2,27],75:[2,27],80:[2,27],81:[2,27],82:[2,27],83:[2,27],84:[2,27],85:[2,27]},{23:[2,28],33:[2,28],54:[2,28],65:[2,28],68:[2,28],72:[2,28],75:[2,28],80:[2,28],81:[2,28],82:[2,28],83:[2,28],84:[2,28],85:[2,28]},{23:[2,30],33:[2,30],54:[2,30],68:[2,30],71:107,72:[1,108],75:[2,30]},{23:[2,98],33:[2,98],54:[2,98],68:[2,98],72:[2,98],75:[2,98]},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],73:[1,109],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{23:[2,44],33:[2,44],54:[2,44],65:[2,44],68:[2,44],72:[2,44],75:[2,44],80:[2,44],81:[2,44],82:[2,44],83:[2,44],84:[2,44],85:[2,44],87:[2,44]},{54:[1,110]},{54:[2,83],65:[2,83],72:[2,83],80:[2,83],81:[2,83],82:[2,83],83:[2,83],84:[2,83],85:[2,83]},{54:[2,85]},{5:[2,13],14:[2,13],15:[2,13],19:[2,13],29:[2,13],34:[2,13],39:[2,13],44:[2,13],47:[2,13],48:[2,13],51:[2,13],55:[2,13],60:[2,13]},{38:56,39:[1,58],43:57,44:[1,59],45:112,46:111,47:[2,76]},{33:[2,70],40:113,65:[2,70],72:[2,70],75:[2,70],80:[2,70],81:[2,70],82:[2,70],83:[2,70],84:[2,70],85:[2,70]},{47:[2,18]},{5:[2,14],14:[2,14],15:[2,14],19:[2,14],29:[2,14],34:[2,14],39:[2,14],44:[2,14],47:[2,14],48:[2,14],51:[2,14],55:[2,14],60:[2,14]},{33:[1,114]},{33:[2,87],65:[2,87],72:[2,87],80:[2,87],81:[2,87],82:[2,87],83:[2,87],84:[2,87],85:[2,87]},{33:[2,89]},{20:75,63:116,64:76,65:[1,44],67:115,68:[2,96],69:117,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,118]},{32:119,33:[2,62],74:120,75:[1,121]},{33:[2,59],65:[2,59],72:[2,59],75:[2,59],80:[2,59],81:[2,59],82:[2,59],83:[2,59],84:[2,59],85:[2,59]},{33:[2,61],75:[2,61]},{33:[2,68],37:122,74:123,75:[1,121]},{33:[2,65],65:[2,65],72:[2,65],75:[2,65],80:[2,65],81:[2,65],82:[2,65],83:[2,65],84:[2,65],85:[2,65]},{33:[2,67],75:[2,67]},{23:[1,124]},{23:[2,51],65:[2,51],72:[2,51],80:[2,51],81:[2,51],82:[2,51],83:[2,51],84:[2,51],85:[2,51]},{23:[2,53]},{33:[1,125]},{33:[2,91],65:[2,91],72:[2,91],80:[2,91],81:[2,91],82:[2,91],83:[2,91],84:[2,91],85:[2,91]},{33:[2,93]},{5:[2,22],14:[2,22],15:[2,22],19:[2,22],29:[2,22],34:[2,22],39:[2,22],44:[2,22],47:[2,22],48:[2,22],51:[2,22],55:[2,22],60:[2,22]},{23:[2,99],33:[2,99],54:[2,99],68:[2,99],72:[2,99],75:[2,99]},{73:[1,109]},{20:75,63:126,64:76,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,23],14:[2,23],15:[2,23],19:[2,23],29:[2,23],34:[2,23],39:[2,23],44:[2,23],47:[2,23],48:[2,23],51:[2,23],55:[2,23],60:[2,23]},{47:[2,19]},{47:[2,77]},{20:75,33:[2,72],41:127,63:128,64:76,65:[1,44],69:129,70:77,71:78,72:[1,79],75:[2,72],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,24],14:[2,24],15:[2,24],19:[2,24],29:[2,24],34:[2,24],39:[2,24],44:[2,24],47:[2,24],48:[2,24],51:[2,24],55:[2,24],60:[2,24]},{68:[1,130]},{65:[2,95],68:[2,95],72:[2,95],80:[2,95],81:[2,95],82:[2,95],83:[2,95],84:[2,95],85:[2,95]},{68:[2,97]},{5:[2,21],14:[2,21],15:[2,21],19:[2,21],29:[2,21],34:[2,21],39:[2,21],44:[2,21],47:[2,21],48:[2,21],51:[2,21],55:[2,21],60:[2,21]},{33:[1,131]},{33:[2,63]},{72:[1,133],76:132},{33:[1,134]},{33:[2,69]},{15:[2,12]},{14:[2,26],15:[2,26],19:[2,26],29:[2,26],34:[2,26],47:[2,26],48:[2,26],51:[2,26],55:[2,26],60:[2,26]},{23:[2,31],33:[2,31],54:[2,31],68:[2,31],72:[2,31],75:[2,31]},{33:[2,74],42:135,74:136,75:[1,121]},{33:[2,71],65:[2,71],72:[2,71],75:[2,71],80:[2,71],81:[2,71],82:[2,71],83:[2,71],84:[2,71],85:[2,71]},{33:[2,73],75:[2,73]},{23:[2,29],33:[2,29],54:[2,29],65:[2,29],68:[2,29],72:[2,29],75:[2,29],80:[2,29],81:[2,29],82:[2,29],83:[2,29],84:[2,29],85:[2,29]},{14:[2,15],15:[2,15],19:[2,15],29:[2,15],34:[2,15],39:[2,15],44:[2,15],47:[2,15],48:[2,15],51:[2,15],55:[2,15],60:[2,15]},{72:[1,138],77:[1,137]},{72:[2,100],77:[2,100]},{14:[2,16],15:[2,16],19:[2,16],29:[2,16],34:[2,16],44:[2,16],47:[2,16],48:[2,16],51:[2,16],55:[2,16],60:[2,16]},{33:[1,139]},{33:[2,75]},{33:[2,32]},{72:[2,101],77:[2,101]},{14:[2,17],15:[2,17],19:[2,17],29:[2,17],34:[2,17],39:[2,17],44:[2,17],47:[2,17],48:[2,17],51:[2,17],55:[2,17],60:[2,17]}],defaultActions:{4:[2,1],55:[2,55],57:[2,20],61:[2,57],74:[2,81],83:[2,85],87:[2,18],91:[2,89],102:[2,53],105:[2,93],111:[2,19],112:[2,77],117:[2,97],120:[2,63],123:[2,69],124:[2,12],136:[2,75],137:[2,32]},parseError:function parseError(str,hash){throw new Error(str)},parse:function parse(input){function lex(){var token;return token=self.lexer.lex()||1,"number"!=typeof token&&(token=self.symbols_[token]||token),token}var self=this,stack=[0],vstack=[null],lstack=[],table=this.table,yytext="",yylineno=0,yyleng=0,recovering=0;this.lexer.setInput(input),this.lexer.yy=this.yy,this.yy.lexer=this.lexer,this.yy.parser=this,"undefined"==typeof this.lexer.yylloc&&(this.lexer.yylloc={});var yyloc=this.lexer.yylloc;lstack.push(yyloc);var ranges=this.lexer.options&&this.lexer.options.ranges;"function"==typeof this.yy.parseError&&(this.parseError=this.yy.parseError);for(var symbol,preErrorSymbol,state,action,r,p,len,newState,expected,yyval={};;){if(state=stack[stack.length-1],this.defaultActions[state]?action=this.defaultActions[state]:(null!==symbol&&"undefined"!=typeof symbol||(symbol=lex()),action=table[state]&&table[state][symbol]),"undefined"==typeof action||!action.length||!action[0]){var errStr="";if(!recovering){expected=[];for(p in table[state])this.terminals_[p]&&p>2&&expected.push("'"+this.terminals_[p]+"'");errStr=this.lexer.showPosition?"Parse error on line "+(yylineno+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+expected.join(", ")+", got '"+(this.terminals_[symbol]||symbol)+"'":"Parse error on line "+(yylineno+1)+": Unexpected "+(1==symbol?"end of input":"'"+(this.terminals_[symbol]||symbol)+"'"),this.parseError(errStr,{text:this.lexer.match,token:this.terminals_[symbol]||symbol,line:this.lexer.yylineno,loc:yyloc,expected:expected})}}if(action[0]instanceof Array&&action.length>1)throw new Error("Parse Error: multiple actions possible at state: "+state+", token: "+symbol);switch(action[0]){case 1:stack.push(symbol),vstack.push(this.lexer.yytext),lstack.push(this.lexer.yylloc),stack.push(action[1]),symbol=null,preErrorSymbol?(symbol=preErrorSymbol,preErrorSymbol=null):(yyleng=this.lexer.yyleng,yytext=this.lexer.yytext,yylineno=this.lexer.yylineno,yyloc=this.lexer.yylloc,recovering>0&&recovering--);break;case 2:if(len=this.productions_[action[1]][1],yyval.$=vstack[vstack.length-len],yyval._$={first_line:lstack[lstack.length-(len||1)].first_line,last_line:lstack[lstack.length-1].last_line,first_column:lstack[lstack.length-(len||1)].first_column,last_column:lstack[lstack.length-1].last_column},ranges&&(yyval._$.range=[lstack[lstack.length-(len||1)].range[0],lstack[lstack.length-1].range[1]]),r=this.performAction.call(yyval,yytext,yyleng,yylineno,this.yy,action[1],vstack,lstack),"undefined"!=typeof r)return r;len&&(stack=stack.slice(0,-1*len*2),vstack=vstack.slice(0,-1*len),lstack=lstack.slice(0,-1*len)),stack.push(this.productions_[action[1]][0]),vstack.push(yyval.$),lstack.push(yyval._$),newState=table[stack[stack.length-2]][stack[stack.length-1]],stack.push(newState);break;case 3:return!0}}return!0}},lexer=function(){var lexer={EOF:1,parseError:function parseError(str,hash){if(!this.yy.parser)throw new Error(str);this.yy.parser.parseError(str,hash)},setInput:function setInput(input){return this._input=input,this._more=this._less=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function input(){var ch=this._input[0];this.yytext+=ch,this.yyleng++,this.offset++,this.match+=ch,this.matched+=ch;var lines=ch.match(/(?:\r\n?|\n).*/g);return lines?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),ch},unput:function unput(ch){var len=ch.length,lines=ch.split(/(?:\r\n?|\n)/g);this._input=ch+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-len-1),this.offset-=len;var oldLines=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),lines.length-1&&(this.yylineno-=lines.length-1);var r=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:lines?(lines.length===oldLines.length?this.yylloc.first_column:0)+oldLines[oldLines.length-lines.length].length-lines[0].length:this.yylloc.first_column-len},this.options.ranges&&(this.yylloc.range=[r[0],r[0]+this.yyleng-len]),this},more:function more(){return this._more=!0,this},less:function less(n){this.unput(this.match.slice(n))},pastInput:function pastInput(){var past=this.matched.substr(0,this.matched.length-this.match.length);return(past.length>20?"...":"")+past.substr(-20).replace(/\n/g,"")},upcomingInput:function upcomingInput(){var next=this.match;return next.length<20&&(next+=this._input.substr(0,20-next.length)),(next.substr(0,20)+(next.length>20?"...":"")).replace(/\n/g,"")},showPosition:function showPosition(){var pre=this.pastInput(),c=new Array(pre.length+1).join("-");return pre+this.upcomingInput()+"\n"+c+"^"},next:function next(){if(this.done)return this.EOF;this._input||(this.done=!0);var token,match,tempMatch,index,lines;this._more||(this.yytext="",this.match="");for(var rules=this._currentRules(),i=0;i<rules.length&&(tempMatch=this._input.match(this.rules[rules[i]]),!tempMatch||match&&!(tempMatch[0].length>match[0].length)||(match=tempMatch,index=i,this.options.flex));i++);return match?(lines=match[0].match(/(?:\r\n?|\n).*/g),lines&&(this.yylineno+=lines.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:lines?lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+match[0].length},this.yytext+=match[0],this.match+=match[0],this.matches=match,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._input=this._input.slice(match[0].length),this.matched+=match[0],token=this.performAction.call(this,this.yy,this,rules[index],this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),token?token:void 0):""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function lex(){var r=this.next();return"undefined"!=typeof r?r:this.lex()},begin:function begin(condition){this.conditionStack.push(condition)},popState:function popState(){return this.conditionStack.pop()},_currentRules:function _currentRules(){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules},topState:function topState(){return this.conditionStack[this.conditionStack.length-2]},pushState:function begin(condition){this.begin(condition)}};return lexer.options={},lexer.performAction=function anonymous(yy,yy_,$avoiding_name_collisions,YY_START){function strip(start,end){return yy_.yytext=yy_.yytext.substr(start,yy_.yyleng-end)}switch($avoiding_name_collisions){case 0:if("\\\\"===yy_.yytext.slice(-2)?(strip(0,1),this.begin("mu")):"\\"===yy_.yytext.slice(-1)?(strip(0,1),this.begin("emu")):this.begin("mu"),yy_.yytext)return 15;break;case 1:return 15;case 2:return this.popState(),15;case 3:return this.begin("raw"),15;case 4:return this.popState(),"raw"===this.conditionStack[this.conditionStack.length-1]?15:(yy_.yytext=yy_.yytext.substr(5,yy_.yyleng-9),"END_RAW_BLOCK");case 5:return 15;case 6:return this.popState(),14;case 7:return 65;case 8:return 68;case 9:return 19;case 10:return this.popState(),this.begin("raw"),23;case 11:return 55;case 12:return 60;case 13:return 29;case 14:return 47;case 15:return this.popState(),44;case 16:return this.popState(),44;case 17:return 34;case 18:return 39;case 19:return 51;case 20:return 48;case 21:this.unput(yy_.yytext),this.popState(),this.begin("com");break;case 22:return this.popState(),14;case 23:return 48;case 24:return 73;case 25:return 72;case 26:return 72;case 27:return 87;case 28:break;case 29:return this.popState(),54;case 30:return this.popState(),33;case 31:return yy_.yytext=strip(1,2).replace(/\\"/g,'"'),80;case 32:return yy_.yytext=strip(1,2).replace(/\\'/g,"'"),80;case 33:return 85;case 34:return 82;case 35:return 82;case 36:return 83;case 37:return 84;case 38:return 81;case 39:return 75;case 40:return 77;case 41:return 72;case 42:return yy_.yytext=yy_.yytext.replace(/\\([\\\]])/g,"$1"),72;case 43:return"INVALID";case 44:return 5}},lexer.rules=[/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/,/^(?:\{\{\{\{(?=[^\/]))/,/^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/,/^(?:[^\x00]*?(?=(\{\{\{\{)))/,/^(?:[\s\S]*?--(~)?\}\})/,/^(?:\()/,/^(?:\))/,/^(?:\{\{\{\{)/,/^(?:\}\}\}\})/,/^(?:\{\{(~)?>)/,/^(?:\{\{(~)?#>)/,/^(?:\{\{(~)?#\*?)/,/^(?:\{\{(~)?\/)/,/^(?:\{\{(~)?\^\s*(~)?\}\})/,/^(?:\{\{(~)?\s*else\s*(~)?\}\})/,/^(?:\{\{(~)?\^)/,/^(?:\{\{(~)?\s*else\b)/,/^(?:\{\{(~)?\{)/,/^(?:\{\{(~)?&)/,/^(?:\{\{(~)?!--)/,/^(?:\{\{(~)?![\s\S]*?\}\})/,/^(?:\{\{(~)?\*?)/,/^(?:=)/,/^(?:\.\.)/,/^(?:\.(?=([=~}\s\/.)|])))/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}(~)?\}\})/,/^(?:(~)?\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=([~}\s)])))/,/^(?:false(?=([~}\s)])))/,/^(?:undefined(?=([~}\s)])))/,/^(?:null(?=([~}\s)])))/,/^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/,/^(?:as\s+\|)/,/^(?:\|)/,/^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/,/^(?:\[(\\\]|[^\]])*\])/,/^(?:.)/,/^(?:$)/],lexer.conditions={mu:{rules:[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],inclusive:!1},emu:{rules:[2],inclusive:!1},com:{rules:[6],inclusive:!1},raw:{rules:[3,4,5],inclusive:!1},INITIAL:{rules:[0,1,44],inclusive:!0}},lexer}();return parser.lexer=lexer,Parser.prototype=parser,parser.Parser=Parser,new Parser}();exports.__esModule=!0,exports.default=handlebars},function(module,exports,__webpack_require__){"use strict";function WhitespaceControl(){var options=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];this.options=options}function isPrevWhitespace(body,i,isRoot){void 0===i&&(i=body.length);var prev=body[i-1],sibling=body[i-2];return prev?"ContentStatement"===prev.type?(sibling||!isRoot?/\r?\n\s*?$/:/(^|\r?\n)\s*?$/).test(prev.original):void 0:isRoot}function isNextWhitespace(body,i,isRoot){void 0===i&&(i=-1);var next=body[i+1],sibling=body[i+2];return next?"ContentStatement"===next.type?(sibling||!isRoot?/^\s*?\r?\n/:/^\s*?(\r?\n|$)/).test(next.original):void 0:isRoot}function omitRight(body,i,multiple){var current=body[null==i?0:i+1];if(current&&"ContentStatement"===current.type&&(multiple||!current.rightStripped)){var original=current.value;current.value=current.value.replace(multiple?/^\s+/:/^[ \t]*\r?\n?/,""),current.rightStripped=current.value!==original}}function omitLeft(body,i,multiple){var current=body[null==i?body.length-1:i-1];if(current&&"ContentStatement"===current.type&&(multiple||!current.leftStripped)){var original=current.value;return current.value=current.value.replace(multiple?/\s+$/:/[ \t]+$/,""),current.leftStripped=current.value!==original,current.leftStripped}}var _interopRequireDefault=__webpack_require__(1).default;exports.__esModule=!0;var _visitor=__webpack_require__(25),_visitor2=_interopRequireDefault(_visitor);WhitespaceControl.prototype=new _visitor2.default,WhitespaceControl.prototype.Program=function(program){var doStandalone=!this.options.ignoreStandalone,isRoot=!this.isRootSeen;this.isRootSeen=!0;for(var body=program.body,i=0,l=body.length;i<l;i++){var current=body[i],strip=this.accept(current);if(strip){var _isPrevWhitespace=isPrevWhitespace(body,i,isRoot),_isNextWhitespace=isNextWhitespace(body,i,isRoot),openStandalone=strip.openStandalone&&_isPrevWhitespace,closeStandalone=strip.closeStandalone&&_isNextWhitespace,inlineStandalone=strip.inlineStandalone&&_isPrevWhitespace&&_isNextWhitespace;strip.close&&omitRight(body,i,!0),strip.open&&omitLeft(body,i,!0),doStandalone&&inlineStandalone&&(omitRight(body,i),omitLeft(body,i)&&"PartialStatement"===current.type&&(current.indent=/([ \t]+$)/.exec(body[i-1].original)[1])),doStandalone&&openStandalone&&(omitRight((current.program||current.inverse).body),omitLeft(body,i)),doStandalone&&closeStandalone&&(omitRight(body,i),omitLeft((current.inverse||current.program).body))}}return program},WhitespaceControl.prototype.BlockStatement=WhitespaceControl.prototype.DecoratorBlock=WhitespaceControl.prototype.PartialBlockStatement=function(block){this.accept(block.program),this.accept(block.inverse);var program=block.program||block.inverse,inverse=block.program&&block.inverse,firstInverse=inverse,lastInverse=inverse;if(inverse&&inverse.chained)for(firstInverse=inverse.body[0].program;lastInverse.chained;)lastInverse=lastInverse.body[lastInverse.body.length-1].program;var strip={open:block.openStrip.open,close:block.closeStrip.close,openStandalone:isNextWhitespace(program.body),closeStandalone:isPrevWhitespace((firstInverse||program).body)};if(block.openStrip.close&&omitRight(program.body,null,!0),inverse){var inverseStrip=block.inverseStrip;inverseStrip.open&&omitLeft(program.body,null,!0),inverseStrip.close&&omitRight(firstInverse.body,null,!0),block.closeStrip.open&&omitLeft(lastInverse.body,null,!0),!this.options.ignoreStandalone&&isPrevWhitespace(program.body)&&isNextWhitespace(firstInverse.body)&&(omitLeft(program.body),omitRight(firstInverse.body))}else block.closeStrip.open&&omitLeft(program.body,null,!0);return strip},WhitespaceControl.prototype.Decorator=WhitespaceControl.prototype.MustacheStatement=function(mustache){return mustache.strip},WhitespaceControl.prototype.PartialStatement=WhitespaceControl.prototype.CommentStatement=function(node){var strip=node.strip||{};return{inlineStandalone:!0,open:strip.open,close:strip.close}},exports.default=WhitespaceControl,module.exports=exports.default},function(module,exports,__webpack_require__){"use strict";function Visitor(){this.parents=[]}function visitSubExpression(mustache){this.acceptRequired(mustache,"path"),this.acceptArray(mustache.params),this.acceptKey(mustache,"hash")}function visitBlock(block){visitSubExpression.call(this,block),this.acceptKey(block,"program"),this.acceptKey(block,"inverse")}function visitPartial(partial){this.acceptRequired(partial,"name"),this.acceptArray(partial.params),this.acceptKey(partial,"hash")}var _interopRequireDefault=__webpack_require__(1).default;exports.__esModule=!0;var _exception=__webpack_require__(6),_exception2=_interopRequireDefault(_exception);Visitor.prototype={constructor:Visitor,mutating:!1,acceptKey:function acceptKey(node,name){var value=this.accept(node[name]);if(this.mutating){if(value&&!Visitor.prototype[value.type])throw new _exception2.default('Unexpected node type "'+value.type+'" found when accepting '+name+" on "+node.type);node[name]=value}},acceptRequired:function acceptRequired(node,name){if(this.acceptKey(node,name),!node[name])throw new _exception2.default(node.type+" requires "+name)},acceptArray:function acceptArray(array){for(var i=0,l=array.length;i<l;i++)this.acceptKey(array,i),array[i]||(array.splice(i,1),i--,l--)},accept:function accept(object){if(object){if(!this[object.type])throw new _exception2.default("Unknown type: "+object.type,object);this.current&&this.parents.unshift(this.current),this.current=object;var ret=this[object.type](object);return this.current=this.parents.shift(),!this.mutating||ret?ret:ret!==!1?object:void 0}},Program:function Program(program){this.acceptArray(program.body)},MustacheStatement:visitSubExpression,Decorator:visitSubExpression,BlockStatement:visitBlock,DecoratorBlock:visitBlock,PartialStatement:visitPartial,PartialBlockStatement:function PartialBlockStatement(partial){visitPartial.call(this,partial),this.acceptKey(partial,"program")},ContentStatement:function ContentStatement(){},CommentStatement:function CommentStatement(){},SubExpression:visitSubExpression,PathExpression:function PathExpression(){},StringLiteral:function StringLiteral(){},NumberLiteral:function NumberLiteral(){},BooleanLiteral:function BooleanLiteral(){},UndefinedLiteral:function UndefinedLiteral(){},NullLiteral:function NullLiteral(){},Hash:function Hash(hash){this.acceptArray(hash.pairs)},HashPair:function HashPair(pair){this.acceptRequired(pair,"value")}},exports.default=Visitor,module.exports=exports.default},function(module,exports,__webpack_require__){"use strict";function validateClose(open,close){if(close=close.path?close.path.original:close,open.path.original!==close){var errorNode={loc:open.path.loc};throw new _exception2.default(open.path.original+" doesn't match "+close,errorNode)}}function SourceLocation(source,locInfo){this.source=source,this.start={line:locInfo.first_line,column:locInfo.first_column},this.end={line:locInfo.last_line,column:locInfo.last_column}}function id(token){return/^\[.*\]$/.test(token)?token.substr(1,token.length-2):token}function stripFlags(open,close){return{open:"~"===open.charAt(2),close:"~"===close.charAt(close.length-3)}}function stripComment(comment){return comment.replace(/^\{\{~?\!-?-?/,"").replace(/-?-?~?\}\}$/,"")}function preparePath(data,parts,loc){loc=this.locInfo(loc);for(var original=data?"@":"",dig=[],depth=0,depthString="",i=0,l=parts.length;i<l;i++){var part=parts[i].part,isLiteral=parts[i].original!==part;if(original+=(parts[i].separator||"")+part,isLiteral||".."!==part&&"."!==part&&"this"!==part)dig.push(part);else{if(dig.length>0)throw new _exception2.default("Invalid path: "+original,{loc:loc});".."===part&&(depth++,depthString+="../")}}return{type:"PathExpression",data:data,depth:depth,parts:dig,original:original,loc:loc}}function prepareMustache(path,params,hash,open,strip,locInfo){var escapeFlag=open.charAt(3)||open.charAt(2),escaped="{"!==escapeFlag&&"&"!==escapeFlag,decorator=/\*/.test(open);return{type:decorator?"Decorator":"MustacheStatement",path:path,params:params,hash:hash,escaped:escaped,strip:strip,loc:this.locInfo(locInfo)}}function prepareRawBlock(openRawBlock,contents,close,locInfo){validateClose(openRawBlock,close),locInfo=this.locInfo(locInfo);var program={type:"Program",body:contents,strip:{},loc:locInfo};return{type:"BlockStatement",path:openRawBlock.path,params:openRawBlock.params,hash:openRawBlock.hash,program:program,openStrip:{},inverseStrip:{},closeStrip:{},loc:locInfo}}function prepareBlock(openBlock,program,inverseAndProgram,close,inverted,locInfo){close&&close.path&&validateClose(openBlock,close);var decorator=/\*/.test(openBlock.open);program.blockParams=openBlock.blockParams;var inverse=void 0,inverseStrip=void 0;if(inverseAndProgram){if(decorator)throw new _exception2.default("Unexpected inverse block on decorator",inverseAndProgram);inverseAndProgram.chain&&(inverseAndProgram.program.body[0].closeStrip=close.strip),inverseStrip=inverseAndProgram.strip,inverse=inverseAndProgram.program}return inverted&&(inverted=inverse,inverse=program,program=inverted),{type:decorator?"DecoratorBlock":"BlockStatement",path:openBlock.path,params:openBlock.params,hash:openBlock.hash,program:program,inverse:inverse,openStrip:openBlock.strip,inverseStrip:inverseStrip,closeStrip:close&&close.strip,loc:this.locInfo(locInfo)}}function prepareProgram(statements,loc){if(!loc&&statements.length){var firstLoc=statements[0].loc,lastLoc=statements[statements.length-1].loc;firstLoc&&lastLoc&&(loc={source:firstLoc.source,start:{line:firstLoc.start.line,column:firstLoc.start.column},end:{line:lastLoc.end.line,column:lastLoc.end.column}})}return{type:"Program",body:statements,strip:{},loc:loc}}function preparePartialBlock(open,program,close,locInfo){return validateClose(open,close),{type:"PartialBlockStatement",name:open.path,params:open.params,hash:open.hash,program:program,openStrip:open.strip,closeStrip:close&&close.strip,loc:this.locInfo(locInfo)}}var _interopRequireDefault=__webpack_require__(1).default;exports.__esModule=!0,exports.SourceLocation=SourceLocation,exports.id=id,exports.stripFlags=stripFlags,exports.stripComment=stripComment,exports.preparePath=preparePath,exports.prepareMustache=prepareMustache,exports.prepareRawBlock=prepareRawBlock,exports.prepareBlock=prepareBlock,exports.prepareProgram=prepareProgram,exports.preparePartialBlock=preparePartialBlock;var _exception=__webpack_require__(6),_exception2=_interopRequireDefault(_exception)},function(module,exports,__webpack_require__){"use strict";function Compiler(){}function precompile(input,options,env){if(null==input||"string"!=typeof input&&"Program"!==input.type)throw new _exception2.default("You must pass a string or Handlebars AST to Handlebars.precompile. You passed "+input);options=options||{},"data"in options||(options.data=!0),options.compat&&(options.useDepths=!0);var ast=env.parse(input,options),environment=(new env.Compiler).compile(ast,options);return(new env.JavaScriptCompiler).compile(environment,options)}function compile(input,options,env){function compileInput(){var ast=env.parse(input,options),environment=(new env.Compiler).compile(ast,options),templateSpec=(new env.JavaScriptCompiler).compile(environment,options,void 0,!0);return env.template(templateSpec)}function ret(context,execOptions){return compiled||(compiled=compileInput()),compiled.call(this,context,execOptions)}if(void 0===options&&(options={}),null==input||"string"!=typeof input&&"Program"!==input.type)throw new _exception2.default("You must pass a string or Handlebars AST to Handlebars.compile. You passed "+input);"data"in options||(options.data=!0),options.compat&&(options.useDepths=!0);var compiled=void 0;return ret._setup=function(setupOptions){return compiled||(compiled=compileInput()),compiled._setup(setupOptions)},ret._child=function(i,data,blockParams,depths){return compiled||(compiled=compileInput()),compiled._child(i,data,blockParams,depths)},ret}function argEquals(a,b){if(a===b)return!0;if(_utils.isArray(a)&&_utils.isArray(b)&&a.length===b.length){for(var i=0;i<a.length;i++)if(!argEquals(a[i],b[i]))return!1;return!0}}function transformLiteralToPath(sexpr){if(!sexpr.path.parts){var literal=sexpr.path;sexpr.path={type:"PathExpression",data:!1,depth:0,parts:[literal.original+""],original:literal.original+"",loc:literal.loc}}}var _interopRequireDefault=__webpack_require__(1).default;exports.__esModule=!0,exports.Compiler=Compiler,exports.precompile=precompile,exports.compile=compile;var _exception=__webpack_require__(6),_exception2=_interopRequireDefault(_exception),_utils=__webpack_require__(5),_ast=__webpack_require__(21),_ast2=_interopRequireDefault(_ast),slice=[].slice;Compiler.prototype={compiler:Compiler,equals:function equals(other){var len=this.opcodes.length;if(other.opcodes.length!==len)return!1;for(var i=0;i<len;i++){var opcode=this.opcodes[i],otherOpcode=other.opcodes[i];if(opcode.opcode!==otherOpcode.opcode||!argEquals(opcode.args,otherOpcode.args))return!1}len=this.children.length;for(var i=0;i<len;i++)if(!this.children[i].equals(other.children[i]))return!1;return!0},guid:0,compile:function compile(program,options){this.sourceNode=[],this.opcodes=[],this.children=[],this.options=options,this.stringParams=options.stringParams,this.trackIds=options.trackIds,options.blockParams=options.blockParams||[];var knownHelpers=options.knownHelpers;if(options.knownHelpers={helperMissing:!0,blockHelperMissing:!0,each:!0,if:!0,unless:!0,with:!0,log:!0,lookup:!0},knownHelpers)for(var _name in knownHelpers)_name in knownHelpers&&(options.knownHelpers[_name]=knownHelpers[_name]);return this.accept(program)},compileProgram:function compileProgram(program){var childCompiler=new this.compiler,result=childCompiler.compile(program,this.options),guid=this.guid++;return this.usePartial=this.usePartial||result.usePartial,this.children[guid]=result,this.useDepths=this.useDepths||result.useDepths,guid},accept:function accept(node){if(!this[node.type])throw new _exception2.default("Unknown type: "+node.type,node);this.sourceNode.unshift(node);var ret=this[node.type](node);return this.sourceNode.shift(),ret},Program:function Program(program){this.options.blockParams.unshift(program.blockParams);for(var body=program.body,bodyLength=body.length,i=0;i<bodyLength;i++)this.accept(body[i]);return this.options.blockParams.shift(),this.isSimple=1===bodyLength,this.blockParams=program.blockParams?program.blockParams.length:0,this},BlockStatement:function BlockStatement(block){transformLiteralToPath(block);var program=block.program,inverse=block.inverse;program=program&&this.compileProgram(program),inverse=inverse&&this.compileProgram(inverse);var type=this.classifySexpr(block);"helper"===type?this.helperSexpr(block,program,inverse):"simple"===type?(this.simpleSexpr(block),this.opcode("pushProgram",program),this.opcode("pushProgram",inverse),this.opcode("emptyHash"),this.opcode("blockValue",block.path.original)):(this.ambiguousSexpr(block,program,inverse),this.opcode("pushProgram",program),this.opcode("pushProgram",inverse),this.opcode("emptyHash"),this.opcode("ambiguousBlockValue")),this.opcode("append")},DecoratorBlock:function DecoratorBlock(decorator){var program=decorator.program&&this.compileProgram(decorator.program),params=this.setupFullMustacheParams(decorator,program,void 0),path=decorator.path;this.useDecorators=!0,this.opcode("registerDecorator",params.length,path.original)},PartialStatement:function PartialStatement(partial){this.usePartial=!0;var program=partial.program;program&&(program=this.compileProgram(partial.program));var params=partial.params;if(params.length>1)throw new _exception2.default("Unsupported number of partial arguments: "+params.length,partial);params.length||(this.options.explicitPartialContext?this.opcode("pushLiteral","undefined"):params.push({type:"PathExpression",parts:[],depth:0}));var partialName=partial.name.original,isDynamic="SubExpression"===partial.name.type;isDynamic&&this.accept(partial.name),this.setupFullMustacheParams(partial,program,void 0,!0);var indent=partial.indent||"";this.options.preventIndent&&indent&&(this.opcode("appendContent",indent),indent=""),this.opcode("invokePartial",isDynamic,partialName,indent),this.opcode("append")},PartialBlockStatement:function PartialBlockStatement(partialBlock){this.PartialStatement(partialBlock)},MustacheStatement:function MustacheStatement(mustache){this.SubExpression(mustache),mustache.escaped&&!this.options.noEscape?this.opcode("appendEscaped"):this.opcode("append")},Decorator:function Decorator(decorator){this.DecoratorBlock(decorator)},ContentStatement:function ContentStatement(content){content.value&&this.opcode("appendContent",content.value)},CommentStatement:function CommentStatement(){},SubExpression:function SubExpression(sexpr){
transformLiteralToPath(sexpr);var type=this.classifySexpr(sexpr);"simple"===type?this.simpleSexpr(sexpr):"helper"===type?this.helperSexpr(sexpr):this.ambiguousSexpr(sexpr)},ambiguousSexpr:function ambiguousSexpr(sexpr,program,inverse){var path=sexpr.path,name=path.parts[0],isBlock=null!=program||null!=inverse;this.opcode("getContext",path.depth),this.opcode("pushProgram",program),this.opcode("pushProgram",inverse),path.strict=!0,this.accept(path),this.opcode("invokeAmbiguous",name,isBlock)},simpleSexpr:function simpleSexpr(sexpr){var path=sexpr.path;path.strict=!0,this.accept(path),this.opcode("resolvePossibleLambda")},helperSexpr:function helperSexpr(sexpr,program,inverse){var params=this.setupFullMustacheParams(sexpr,program,inverse),path=sexpr.path,name=path.parts[0];if(this.options.knownHelpers[name])this.opcode("invokeKnownHelper",params.length,name);else{if(this.options.knownHelpersOnly)throw new _exception2.default("You specified knownHelpersOnly, but used the unknown helper "+name,sexpr);path.strict=!0,path.falsy=!0,this.accept(path),this.opcode("invokeHelper",params.length,path.original,_ast2.default.helpers.simpleId(path))}},PathExpression:function PathExpression(path){this.addDepth(path.depth),this.opcode("getContext",path.depth);var name=path.parts[0],scoped=_ast2.default.helpers.scopedId(path),blockParamId=!path.depth&&!scoped&&this.blockParamIndex(name);blockParamId?this.opcode("lookupBlockParam",blockParamId,path.parts):name?path.data?(this.options.data=!0,this.opcode("lookupData",path.depth,path.parts,path.strict)):this.opcode("lookupOnContext",path.parts,path.falsy,path.strict,scoped):this.opcode("pushContext")},StringLiteral:function StringLiteral(string){this.opcode("pushString",string.value)},NumberLiteral:function NumberLiteral(number){this.opcode("pushLiteral",number.value)},BooleanLiteral:function BooleanLiteral(bool){this.opcode("pushLiteral",bool.value)},UndefinedLiteral:function UndefinedLiteral(){this.opcode("pushLiteral","undefined")},NullLiteral:function NullLiteral(){this.opcode("pushLiteral","null")},Hash:function Hash(hash){var pairs=hash.pairs,i=0,l=pairs.length;for(this.opcode("pushHash");i<l;i++)this.pushParam(pairs[i].value);for(;i--;)this.opcode("assignToHash",pairs[i].key);this.opcode("popHash")},opcode:function opcode(name){this.opcodes.push({opcode:name,args:slice.call(arguments,1),loc:this.sourceNode[0].loc})},addDepth:function addDepth(depth){depth&&(this.useDepths=!0)},classifySexpr:function classifySexpr(sexpr){var isSimple=_ast2.default.helpers.simpleId(sexpr.path),isBlockParam=isSimple&&!!this.blockParamIndex(sexpr.path.parts[0]),isHelper=!isBlockParam&&_ast2.default.helpers.helperExpression(sexpr),isEligible=!isBlockParam&&(isHelper||isSimple);if(isEligible&&!isHelper){var _name2=sexpr.path.parts[0],options=this.options;options.knownHelpers[_name2]?isHelper=!0:options.knownHelpersOnly&&(isEligible=!1)}return isHelper?"helper":isEligible?"ambiguous":"simple"},pushParams:function pushParams(params){for(var i=0,l=params.length;i<l;i++)this.pushParam(params[i])},pushParam:function pushParam(val){var value=null!=val.value?val.value:val.original||"";if(this.stringParams)value.replace&&(value=value.replace(/^(\.?\.\/)*/g,"").replace(/\//g,".")),val.depth&&this.addDepth(val.depth),this.opcode("getContext",val.depth||0),this.opcode("pushStringParam",value,val.type),"SubExpression"===val.type&&this.accept(val);else{if(this.trackIds){var blockParamIndex=void 0;if(!val.parts||_ast2.default.helpers.scopedId(val)||val.depth||(blockParamIndex=this.blockParamIndex(val.parts[0])),blockParamIndex){var blockParamChild=val.parts.slice(1).join(".");this.opcode("pushId","BlockParam",blockParamIndex,blockParamChild)}else value=val.original||value,value.replace&&(value=value.replace(/^this(?:\.|$)/,"").replace(/^\.\//,"").replace(/^\.$/,"")),this.opcode("pushId",val.type,value)}this.accept(val)}},setupFullMustacheParams:function setupFullMustacheParams(sexpr,program,inverse,omitEmpty){var params=sexpr.params;return this.pushParams(params),this.opcode("pushProgram",program),this.opcode("pushProgram",inverse),sexpr.hash?this.accept(sexpr.hash):this.opcode("emptyHash",omitEmpty),params},blockParamIndex:function blockParamIndex(name){for(var depth=0,len=this.options.blockParams.length;depth<len;depth++){var blockParams=this.options.blockParams[depth],param=blockParams&&_utils.indexOf(blockParams,name);if(blockParams&&param>=0)return[depth,param]}}}},function(module,exports,__webpack_require__){"use strict";function Literal(value){this.value=value}function JavaScriptCompiler(){}function strictLookup(requireTerminal,compiler,parts,type){var stack=compiler.popStack(),i=0,len=parts.length;for(requireTerminal&&len--;i<len;i++)stack=compiler.nameLookup(stack,parts[i],type);return requireTerminal?[compiler.aliasable("container.strict"),"(",stack,", ",compiler.quotedString(parts[i]),")"]:stack}var _interopRequireDefault=__webpack_require__(1).default;exports.__esModule=!0;var _base=__webpack_require__(4),_exception=__webpack_require__(6),_exception2=_interopRequireDefault(_exception),_utils=__webpack_require__(5),_codeGen=__webpack_require__(29),_codeGen2=_interopRequireDefault(_codeGen);JavaScriptCompiler.prototype={nameLookup:function nameLookup(parent,name){return JavaScriptCompiler.isValidJavaScriptVariableName(name)?[parent,".",name]:[parent,"[",JSON.stringify(name),"]"]},depthedLookup:function depthedLookup(name){return[this.aliasable("container.lookup"),'(depths, "',name,'")']},compilerInfo:function compilerInfo(){var revision=_base.COMPILER_REVISION,versions=_base.REVISION_CHANGES[revision];return[revision,versions]},appendToBuffer:function appendToBuffer(source,location,explicit){return _utils.isArray(source)||(source=[source]),source=this.source.wrap(source,location),this.environment.isSimple?["return ",source,";"]:explicit?["buffer += ",source,";"]:(source.appendToBuffer=!0,source)},initializeBuffer:function initializeBuffer(){return this.quotedString("")},compile:function compile(environment,options,context,asObject){this.environment=environment,this.options=options,this.stringParams=this.options.stringParams,this.trackIds=this.options.trackIds,this.precompile=!asObject,this.name=this.environment.name,this.isChild=!!context,this.context=context||{decorators:[],programs:[],environments:[]},this.preamble(),this.stackSlot=0,this.stackVars=[],this.aliases={},this.registers={list:[]},this.hashes=[],this.compileStack=[],this.inlineStack=[],this.blockParams=[],this.compileChildren(environment,options),this.useDepths=this.useDepths||environment.useDepths||environment.useDecorators||this.options.compat,this.useBlockParams=this.useBlockParams||environment.useBlockParams;var opcodes=environment.opcodes,opcode=void 0,firstLoc=void 0,i=void 0,l=void 0;for(i=0,l=opcodes.length;i<l;i++)opcode=opcodes[i],this.source.currentLocation=opcode.loc,firstLoc=firstLoc||opcode.loc,this[opcode.opcode].apply(this,opcode.args);if(this.source.currentLocation=firstLoc,this.pushSource(""),this.stackSlot||this.inlineStack.length||this.compileStack.length)throw new _exception2.default("Compile completed with content left on stack");this.decorators.isEmpty()?this.decorators=void 0:(this.useDecorators=!0,this.decorators.prepend("var decorators = container.decorators;\n"),this.decorators.push("return fn;"),asObject?this.decorators=Function.apply(this,["fn","props","container","depth0","data","blockParams","depths",this.decorators.merge()]):(this.decorators.prepend("function(fn, props, container, depth0, data, blockParams, depths) {\n"),this.decorators.push("}\n"),this.decorators=this.decorators.merge()));var fn=this.createFunctionContext(asObject);if(this.isChild)return fn;var ret={compiler:this.compilerInfo(),main:fn};this.decorators&&(ret.main_d=this.decorators,ret.useDecorators=!0);var _context=this.context,programs=_context.programs,decorators=_context.decorators;for(i=0,l=programs.length;i<l;i++)programs[i]&&(ret[i]=programs[i],decorators[i]&&(ret[i+"_d"]=decorators[i],ret.useDecorators=!0));return this.environment.usePartial&&(ret.usePartial=!0),this.options.data&&(ret.useData=!0),this.useDepths&&(ret.useDepths=!0),this.useBlockParams&&(ret.useBlockParams=!0),this.options.compat&&(ret.compat=!0),asObject?ret.compilerOptions=this.options:(ret.compiler=JSON.stringify(ret.compiler),this.source.currentLocation={start:{line:1,column:0}},ret=this.objectLiteral(ret),options.srcName?(ret=ret.toStringWithSourceMap({file:options.destName}),ret.map=ret.map&&ret.map.toString()):ret=ret.toString()),ret},preamble:function preamble(){this.lastContext=0,this.source=new _codeGen2.default(this.options.srcName),this.decorators=new _codeGen2.default(this.options.srcName)},createFunctionContext:function createFunctionContext(asObject){var varDeclarations="",locals=this.stackVars.concat(this.registers.list);locals.length>0&&(varDeclarations+=", "+locals.join(", "));var aliasCount=0;for(var alias in this.aliases){var node=this.aliases[alias];this.aliases.hasOwnProperty(alias)&&node.children&&node.referenceCount>1&&(varDeclarations+=", alias"+ ++aliasCount+"="+alias,node.children[0]="alias"+aliasCount)}var params=["container","depth0","helpers","partials","data"];(this.useBlockParams||this.useDepths)&&params.push("blockParams"),this.useDepths&&params.push("depths");var source=this.mergeSource(varDeclarations);return asObject?(params.push(source),Function.apply(this,params)):this.source.wrap(["function(",params.join(","),") {\n  ",source,"}"])},mergeSource:function mergeSource(varDeclarations){var isSimple=this.environment.isSimple,appendOnly=!this.forceBuffer,appendFirst=void 0,sourceSeen=void 0,bufferStart=void 0,bufferEnd=void 0;return this.source.each(function(line){line.appendToBuffer?(bufferStart?line.prepend("  + "):bufferStart=line,bufferEnd=line):(bufferStart&&(sourceSeen?bufferStart.prepend("buffer += "):appendFirst=!0,bufferEnd.add(";"),bufferStart=bufferEnd=void 0),sourceSeen=!0,isSimple||(appendOnly=!1))}),appendOnly?bufferStart?(bufferStart.prepend("return "),bufferEnd.add(";")):sourceSeen||this.source.push('return "";'):(varDeclarations+=", buffer = "+(appendFirst?"":this.initializeBuffer()),bufferStart?(bufferStart.prepend("return buffer + "),bufferEnd.add(";")):this.source.push("return buffer;")),varDeclarations&&this.source.prepend("var "+varDeclarations.substring(2)+(appendFirst?"":";\n")),this.source.merge()},blockValue:function blockValue(name){var blockHelperMissing=this.aliasable("helpers.blockHelperMissing"),params=[this.contextName(0)];this.setupHelperArgs(name,0,params);var blockName=this.popStack();params.splice(1,0,blockName),this.push(this.source.functionCall(blockHelperMissing,"call",params))},ambiguousBlockValue:function ambiguousBlockValue(){var blockHelperMissing=this.aliasable("helpers.blockHelperMissing"),params=[this.contextName(0)];this.setupHelperArgs("",0,params,!0),this.flushInline();var current=this.topStack();params.splice(1,0,current),this.pushSource(["if (!",this.lastHelper,") { ",current," = ",this.source.functionCall(blockHelperMissing,"call",params),"}"])},appendContent:function appendContent(content){this.pendingContent?content=this.pendingContent+content:this.pendingLocation=this.source.currentLocation,this.pendingContent=content},append:function append(){if(this.isInline())this.replaceStack(function(current){return[" != null ? ",current,' : ""']}),this.pushSource(this.appendToBuffer(this.popStack()));else{var local=this.popStack();this.pushSource(["if (",local," != null) { ",this.appendToBuffer(local,void 0,!0)," }"]),this.environment.isSimple&&this.pushSource(["else { ",this.appendToBuffer("''",void 0,!0)," }"])}},appendEscaped:function appendEscaped(){this.pushSource(this.appendToBuffer([this.aliasable("container.escapeExpression"),"(",this.popStack(),")"]))},getContext:function getContext(depth){this.lastContext=depth},pushContext:function pushContext(){this.pushStackLiteral(this.contextName(this.lastContext))},lookupOnContext:function lookupOnContext(parts,falsy,strict,scoped){var i=0;scoped||!this.options.compat||this.lastContext?this.pushContext():this.push(this.depthedLookup(parts[i++])),this.resolvePath("context",parts,i,falsy,strict)},lookupBlockParam:function lookupBlockParam(blockParamId,parts){this.useBlockParams=!0,this.push(["blockParams[",blockParamId[0],"][",blockParamId[1],"]"]),this.resolvePath("context",parts,1)},lookupData:function lookupData(depth,parts,strict){depth?this.pushStackLiteral("container.data(data, "+depth+")"):this.pushStackLiteral("data"),this.resolvePath("data",parts,0,!0,strict)},resolvePath:function resolvePath(type,parts,i,falsy,strict){var _this=this;if(this.options.strict||this.options.assumeObjects)return void this.push(strictLookup(this.options.strict&&strict,this,parts,type));for(var len=parts.length;i<len;i++)this.replaceStack(function(current){var lookup=_this.nameLookup(current,parts[i],type);return falsy?[" && ",lookup]:[" != null ? ",lookup," : ",current]})},resolvePossibleLambda:function resolvePossibleLambda(){this.push([this.aliasable("container.lambda"),"(",this.popStack(),", ",this.contextName(0),")"])},pushStringParam:function pushStringParam(string,type){this.pushContext(),this.pushString(type),"SubExpression"!==type&&("string"==typeof string?this.pushString(string):this.pushStackLiteral(string))},emptyHash:function emptyHash(omitEmpty){this.trackIds&&this.push("{}"),this.stringParams&&(this.push("{}"),this.push("{}")),this.pushStackLiteral(omitEmpty?"undefined":"{}")},pushHash:function pushHash(){this.hash&&this.hashes.push(this.hash),this.hash={values:[],types:[],contexts:[],ids:[]}},popHash:function popHash(){var hash=this.hash;this.hash=this.hashes.pop(),this.trackIds&&this.push(this.objectLiteral(hash.ids)),this.stringParams&&(this.push(this.objectLiteral(hash.contexts)),this.push(this.objectLiteral(hash.types))),this.push(this.objectLiteral(hash.values))},pushString:function pushString(string){this.pushStackLiteral(this.quotedString(string))},pushLiteral:function pushLiteral(value){this.pushStackLiteral(value)},pushProgram:function pushProgram(guid){null!=guid?this.pushStackLiteral(this.programExpression(guid)):this.pushStackLiteral(null)},registerDecorator:function registerDecorator(paramSize,name){var foundDecorator=this.nameLookup("decorators",name,"decorator"),options=this.setupHelperArgs(name,paramSize);this.decorators.push(["fn = ",this.decorators.functionCall(foundDecorator,"",["fn","props","container",options])," || fn;"])},invokeHelper:function invokeHelper(paramSize,name,isSimple){var nonHelper=this.popStack(),helper=this.setupHelper(paramSize,name),simple=isSimple?[helper.name," || "]:"",lookup=["("].concat(simple,nonHelper);this.options.strict||lookup.push(" || ",this.aliasable("helpers.helperMissing")),lookup.push(")"),this.push(this.source.functionCall(lookup,"call",helper.callParams))},invokeKnownHelper:function invokeKnownHelper(paramSize,name){var helper=this.setupHelper(paramSize,name);this.push(this.source.functionCall(helper.name,"call",helper.callParams))},invokeAmbiguous:function invokeAmbiguous(name,helperCall){this.useRegister("helper");var nonHelper=this.popStack();this.emptyHash();var helper=this.setupHelper(0,name,helperCall),helperName=this.lastHelper=this.nameLookup("helpers",name,"helper"),lookup=["(","(helper = ",helperName," || ",nonHelper,")"];this.options.strict||(lookup[0]="(helper = ",lookup.push(" != null ? helper : ",this.aliasable("helpers.helperMissing"))),this.push(["(",lookup,helper.paramsInit?["),(",helper.paramsInit]:[],"),","(typeof helper === ",this.aliasable('"function"')," ? ",this.source.functionCall("helper","call",helper.callParams)," : helper))"])},invokePartial:function invokePartial(isDynamic,name,indent){var params=[],options=this.setupParams(name,1,params);isDynamic&&(name=this.popStack(),delete options.name),indent&&(options.indent=JSON.stringify(indent)),options.helpers="helpers",options.partials="partials",options.decorators="container.decorators",isDynamic?params.unshift(name):params.unshift(this.nameLookup("partials",name,"partial")),this.options.compat&&(options.depths="depths"),options=this.objectLiteral(options),params.push(options),this.push(this.source.functionCall("container.invokePartial","",params))},assignToHash:function assignToHash(key){var value=this.popStack(),context=void 0,type=void 0,id=void 0;this.trackIds&&(id=this.popStack()),this.stringParams&&(type=this.popStack(),context=this.popStack());var hash=this.hash;context&&(hash.contexts[key]=context),type&&(hash.types[key]=type),id&&(hash.ids[key]=id),hash.values[key]=value},pushId:function pushId(type,name,child){"BlockParam"===type?this.pushStackLiteral("blockParams["+name[0]+"].path["+name[1]+"]"+(child?" + "+JSON.stringify("."+child):"")):"PathExpression"===type?this.pushString(name):"SubExpression"===type?this.pushStackLiteral("true"):this.pushStackLiteral("null")},compiler:JavaScriptCompiler,compileChildren:function compileChildren(environment,options){for(var children=environment.children,child=void 0,compiler=void 0,i=0,l=children.length;i<l;i++){child=children[i],compiler=new this.compiler;var index=this.matchExistingProgram(child);null==index?(this.context.programs.push(""),index=this.context.programs.length,child.index=index,child.name="program"+index,this.context.programs[index]=compiler.compile(child,options,this.context,!this.precompile),this.context.decorators[index]=compiler.decorators,this.context.environments[index]=child,this.useDepths=this.useDepths||compiler.useDepths,this.useBlockParams=this.useBlockParams||compiler.useBlockParams):(child.index=index,child.name="program"+index,this.useDepths=this.useDepths||child.useDepths,this.useBlockParams=this.useBlockParams||child.useBlockParams)}},matchExistingProgram:function matchExistingProgram(child){for(var i=0,len=this.context.environments.length;i<len;i++){var environment=this.context.environments[i];if(environment&&environment.equals(child))return i}},programExpression:function programExpression(guid){var child=this.environment.children[guid],programParams=[child.index,"data",child.blockParams];return(this.useBlockParams||this.useDepths)&&programParams.push("blockParams"),this.useDepths&&programParams.push("depths"),"container.program("+programParams.join(", ")+")"},useRegister:function useRegister(name){this.registers[name]||(this.registers[name]=!0,this.registers.list.push(name))},push:function push(expr){return expr instanceof Literal||(expr=this.source.wrap(expr)),this.inlineStack.push(expr),expr},pushStackLiteral:function pushStackLiteral(item){this.push(new Literal(item))},pushSource:function pushSource(source){this.pendingContent&&(this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent),this.pendingLocation)),this.pendingContent=void 0),source&&this.source.push(source)},replaceStack:function replaceStack(callback){var prefix=["("],stack=void 0,createdStack=void 0,usedLiteral=void 0;if(!this.isInline())throw new _exception2.default("replaceStack on non-inline");var top=this.popStack(!0);if(top instanceof Literal)stack=[top.value],prefix=["(",stack],usedLiteral=!0;else{createdStack=!0;var _name=this.incrStack();prefix=["((",this.push(_name)," = ",top,")"],stack=this.topStack()}var item=callback.call(this,stack);usedLiteral||this.popStack(),createdStack&&this.stackSlot--,this.push(prefix.concat(item,")"))},incrStack:function incrStack(){return this.stackSlot++,this.stackSlot>this.stackVars.length&&this.stackVars.push("stack"+this.stackSlot),this.topStackName()},topStackName:function topStackName(){return"stack"+this.stackSlot},flushInline:function flushInline(){var inlineStack=this.inlineStack;this.inlineStack=[];for(var i=0,len=inlineStack.length;i<len;i++){var entry=inlineStack[i];if(entry instanceof Literal)this.compileStack.push(entry);else{var stack=this.incrStack();this.pushSource([stack," = ",entry,";"]),this.compileStack.push(stack)}}},isInline:function isInline(){return this.inlineStack.length},popStack:function popStack(wrapped){var inline=this.isInline(),item=(inline?this.inlineStack:this.compileStack).pop();if(!wrapped&&item instanceof Literal)return item.value;if(!inline){if(!this.stackSlot)throw new _exception2.default("Invalid stack pop");this.stackSlot--}return item},topStack:function topStack(){var stack=this.isInline()?this.inlineStack:this.compileStack,item=stack[stack.length-1];return item instanceof Literal?item.value:item},contextName:function contextName(context){return this.useDepths&&context?"depths["+context+"]":"depth"+context},quotedString:function quotedString(str){return this.source.quotedString(str)},objectLiteral:function objectLiteral(obj){return this.source.objectLiteral(obj)},aliasable:function aliasable(name){var ret=this.aliases[name];return ret?(ret.referenceCount++,ret):(ret=this.aliases[name]=this.source.wrap(name),ret.aliasable=!0,ret.referenceCount=1,ret)},setupHelper:function setupHelper(paramSize,name,blockHelper){var params=[],paramsInit=this.setupHelperArgs(name,paramSize,params,blockHelper),foundHelper=this.nameLookup("helpers",name,"helper"),callContext=this.aliasable(this.contextName(0)+" != null ? "+this.contextName(0)+" : {}");return{params:params,paramsInit:paramsInit,name:foundHelper,callParams:[callContext].concat(params)}},setupParams:function setupParams(helper,paramSize,params){var options={},contexts=[],types=[],ids=[],objectArgs=!params,param=void 0;objectArgs&&(params=[]),options.name=this.quotedString(helper),options.hash=this.popStack(),this.trackIds&&(options.hashIds=this.popStack()),this.stringParams&&(options.hashTypes=this.popStack(),options.hashContexts=this.popStack());var inverse=this.popStack(),program=this.popStack();(program||inverse)&&(options.fn=program||"container.noop",options.inverse=inverse||"container.noop");for(var i=paramSize;i--;)param=this.popStack(),params[i]=param,this.trackIds&&(ids[i]=this.popStack()),this.stringParams&&(types[i]=this.popStack(),contexts[i]=this.popStack());return objectArgs&&(options.args=this.source.generateArray(params)),this.trackIds&&(options.ids=this.source.generateArray(ids)),this.stringParams&&(options.types=this.source.generateArray(types),options.contexts=this.source.generateArray(contexts)),this.options.data&&(options.data="data"),this.useBlockParams&&(options.blockParams="blockParams"),options},setupHelperArgs:function setupHelperArgs(helper,paramSize,params,useRegister){var options=this.setupParams(helper,paramSize,params);return options=this.objectLiteral(options),useRegister?(this.useRegister("options"),params.push("options"),["options=",options]):params?(params.push(options),""):options}},function(){for(var reservedWords="break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield await null true false".split(" "),compilerWords=JavaScriptCompiler.RESERVED_WORDS={},i=0,l=reservedWords.length;i<l;i++)compilerWords[reservedWords[i]]=!0}(),JavaScriptCompiler.isValidJavaScriptVariableName=function(name){return!JavaScriptCompiler.RESERVED_WORDS[name]&&/^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name)},exports.default=JavaScriptCompiler,module.exports=exports.default},function(module,exports,__webpack_require__){"use strict";function castChunk(chunk,codeGen,loc){if(_utils.isArray(chunk)){for(var ret=[],i=0,len=chunk.length;i<len;i++)ret.push(codeGen.wrap(chunk[i],loc));return ret}return"boolean"==typeof chunk||"number"==typeof chunk?chunk+"":chunk}function CodeGen(srcFile){this.srcFile=srcFile,this.source=[]}exports.__esModule=!0;var _utils=__webpack_require__(5),SourceNode=void 0;try{}catch(err){}SourceNode||(SourceNode=function(line,column,srcFile,chunks){this.src="",chunks&&this.add(chunks)},SourceNode.prototype={add:function add(chunks){_utils.isArray(chunks)&&(chunks=chunks.join("")),this.src+=chunks},prepend:function prepend(chunks){_utils.isArray(chunks)&&(chunks=chunks.join("")),this.src=chunks+this.src},toStringWithSourceMap:function toStringWithSourceMap(){return{code:this.toString()}},toString:function toString(){return this.src}}),CodeGen.prototype={isEmpty:function isEmpty(){return!this.source.length},prepend:function prepend(source,loc){this.source.unshift(this.wrap(source,loc))},push:function push(source,loc){this.source.push(this.wrap(source,loc))},merge:function merge(){var source=this.empty();return this.each(function(line){source.add(["  ",line,"\n"])}),source},each:function each(iter){for(var i=0,len=this.source.length;i<len;i++)iter(this.source[i])},empty:function empty(){var loc=this.currentLocation||{start:{}};return new SourceNode(loc.start.line,loc.start.column,this.srcFile)},wrap:function wrap(chunk){var loc=arguments.length<=1||void 0===arguments[1]?this.currentLocation||{start:{}}:arguments[1];return chunk instanceof SourceNode?chunk:(chunk=castChunk(chunk,this,loc),new SourceNode(loc.start.line,loc.start.column,this.srcFile,chunk))},functionCall:function functionCall(fn,type,params){return params=this.generateList(params),this.wrap([fn,type?"."+type+"(":"(",params,")"])},quotedString:function quotedString(str){return'"'+(str+"").replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")+'"'},objectLiteral:function objectLiteral(obj){var pairs=[];for(var key in obj)if(obj.hasOwnProperty(key)){var value=castChunk(obj[key],this);"undefined"!==value&&pairs.push([this.quotedString(key),":",value])}var ret=this.generateList(pairs);return ret.prepend("{"),ret.add("}"),ret},generateList:function generateList(entries){for(var ret=this.empty(),i=0,len=entries.length;i<len;i++)i&&ret.add(","),ret.add(castChunk(entries[i],this));return ret},generateArray:function generateArray(entries){var ret=this.generateList(entries);return ret.prepend("["),ret.add("]"),ret}},exports.default=CodeGen,module.exports=exports.default}])})},function(module,exports,__webpack_require__){"use strict";var falzy=__webpack_require__(110),harden=__webpack_require__(85),protype=__webpack_require__(90),truly=__webpack_require__(100),realign=function realign(string){if(!protype(string,STRING))throw new Error("invalid string");if(falzy(string))return string;string=string.split(realign.NEWLINE_PATTERN).map(function(line){return line.replace(realign.SPACE_LINE_PATTERN,"")}).filter(truly).join("\n").replace(realign.TRAILING_SPACE_PATTERN,"").split(realign.NEWLINE_PATTERN);var space=(string[0].match(realign.SPACE_PATTERN)||[])[0]||"",spacePattern=new RegExp("^"+space);return string.map(function(line){return line.replace(spacePattern,"")}).join("\n")};harden.bind(realign)("NEWLINE_PATTERN",/\n/).harden("SPACE_PATTERN",/\s{2,}/g).harden("SPACE_LINE_PATTERN",/^\s+$/).harden("TRAILING_SPACE_PATTERN",/^[\n\r]+|[\n\r\s]+$/gm),module.exports=realign},function(module,exports,__webpack_require__){"use strict";var falzy=__webpack_require__(110),harden=__webpack_require__(85),protype=__webpack_require__(90),titlelize=__webpack_require__(116),llamalize=function llamalize(text,formal){return falzy(text)||!protype(text,STRING)?text:(text=titlelize(text).replace(llamalize.DROP_PATTERN,"").replace(llamalize.SPACE_PATTERN,""),formal?text:text.replace(llamalize.INFORMAL_PATTERN,function onReplace(match){return match.toLowerCase()}))};harden.bind(llamalize)("DROP_PATTERN",/^[0-9]+/),harden.bind(llamalize)("SPACE_PATTERN",/\s+/g),harden.bind(llamalize)("INFORMAL_PATTERN",/^[A-Z]/),module.exports=llamalize},function(module,exports,__webpack_require__){"use strict";var disdo=__webpack_require__(117),falzy=__webpack_require__(110),harden=__webpack_require__(85),protype=__webpack_require__(90),titlelize=function titlelize(text){return falzy(text)||!protype(text,STRING)?text:disdo(text).toLowerCase().replace(titlelize.TERM_PATTERN,function onReplace(match){return match.toUpperCase()})};harden.bind(titlelize)("TERM_PATTERN",/^[a-z]|\s[a-z]/g),module.exports=titlelize},function(module,exports,__webpack_require__){"use strict";var falzy=__webpack_require__(110),harden=__webpack_require__(85),protype=__webpack_require__(90),disdo=function disdo(text){return falzy(text)||!protype(text,STRING)?text:text.replace(disdo.CLEAN_PATTERN," ").replace(disdo.UPPERCASE_PATTERN,function onReplace(match){return match.replace(match," "+match)}).replace(disdo.SPACE_PATTERN," ").replace(disdo.DROP_PATTERN,"")};harden.bind(disdo)("CLEAN_PATTERN",/[^a-zA-Z0-9]+/g).harden("UPPERCASE_PATTERN",/[A-Z]+/g).harden("SPACE_PATTERN",/\s+/g).harden("DROP_PATTERN",/^[^a-zA-Z0-9]+|[^a-zA-Z0-9]+$/g),module.exports=disdo},function(module,exports,__webpack_require__){"use strict";var doubt=__webpack_require__(48),falze=__webpack_require__(119),harden=__webpack_require__(85),optall=__webpack_require__(121),protype=__webpack_require__(90),zelf=__webpack_require__(123);harden("BOOLEAN","boolean"),harden("FUNCTION","function"),harden("NUMBER","number"),harden("OBJECT","object"),harden("STRING","string"),harden("UNDEFINED","undefined"),harden("SYMBOL","symbol");var optfor=function optfor(list,condition,modifier){if(!doubt(list,AS_ARRAY))throw new Error("invalid list");if(falze(condition))throw new Error("invalid condition");var self=zelf(this),element=optall.bind(self)(list,condition,modifier)[0],modifierType=protype(modifier);return modifierType.FUNCTION?modifier.bind(self)(element):element};module.exports=optfor},function(module,exports,__webpack_require__){"use strict";var arid=__webpack_require__(106),doubt=__webpack_require__(48),empt=__webpack_require__(120),falzy=__webpack_require__(110),protype=__webpack_require__(90),falze=function falze(entity){return doubt(entity).AS_ARRAY?arid(entity):protype(entity,OBJECT)?empt(entity):falzy(entity)};module.exports=falze},function(module,exports,__webpack_require__){"use strict";var doubt=__webpack_require__(48),kount=__webpack_require__(1),protype=__webpack_require__(90),empt=function empt(object){if(doubt(object).AS_ARRAY||!protype(object,OBJECT))throw new Error("invalid object");return null===object||0==kount(object)};module.exports=empt},function(module,exports,__webpack_require__){"use strict";var doubt=__webpack_require__(48),falze=__webpack_require__(119),harden=__webpack_require__(85),protype=__webpack_require__(90),pyck=__webpack_require__(122),zelf=__webpack_require__(123);harden("BOOLEAN","boolean"),harden("FUNCTION","function"),harden("NUMBER","number"),harden("OBJECT","object"),harden("STRING","string"),harden("UNDEFINED","undefined"),harden("SYMBOL","symbol");var optall=function optall(list,condition,modifier){if(!doubt(list,AS_ARRAY))throw new Error("invalid list");if(falze(condition))throw new Error("invalid condition");var self=zelf(this),modifierType=protype(modifier),result=[];return result=modifierType.BOOLEAN?pyck.bind(self)(list,condition,modifier):pyck.bind(self)(list,condition),modifierType.FUNCTION?result.map(modifier):result};module.exports=optall},function(module,exports,__webpack_require__){"use strict";var doubt=__webpack_require__(48),falze=__webpack_require__(119),falzy=__webpack_require__(110),harden=__webpack_require__(85),protype=__webpack_require__(90),raze=__webpack_require__(103),truu=__webpack_require__(101),zelf=__webpack_require__(123);harden("BOOLEAN","boolean"),harden("FUNCTION","function"),harden("NUMBER","number"),harden("OBJECT","object"),harden("STRING","string"),harden("UNDEFINED","undefined"),harden("SYMBOL","symbol");var pyck=function pyck(list,condition,state){if(doubt(condition).ARRAY)return condition.reduce(function onEachCondition(accumulant,condition){return accumulant.concat(pyck(list,condition))},[]);if(falzy(condition))throw new Error("invalid condition");var self=zelf(this),conditionType=protype(condition);return raze(list).filter(function onEachElement(element,index){
try{if(element===condition)return!0;if(conditionType.STRING&&(condition==BOOLEAN||condition==FUNCTION||condition==NUMBER||condition==OBJECT||condition==STRING||condition==UNDEFINED||condition==SYMBOL)){var result=protype(element,condition);return!(state!==!0||!truu(element)||!result)||state!==!0&&(!(state!==!1||!falze(element))||state!==!1&&result)}if(conditionType.FUNCTION&&/^[A-Z]/.test(condition.name))return element instanceof condition;if(conditionType.FUNCTION){var _result=condition.bind(self)(element,index);if(protype(_result,BOOLEAN))return _result;throw new Error("invalid condition result, "+_result)}}catch(error){throw new Error("error testing condition, "+element+", "+index+", "+error)}})};module.exports=pyck},function(module,exports,__webpack_require__){(function(global){"use strict";var asea=__webpack_require__(124),zelf=function zelf(self){return self=self||this,!asea.server||self!==global&&"undefined"!=typeof self&&null!==self?!asea.client||self!==window&&"undefined"!=typeof self&&null!==self?asea.server&&"undefined"==typeof self?global:asea.client&&"undefined"==typeof self?window:self:window:global};module.exports=zelf}).call(exports,function(){return this}())},function(module,exports,__webpack_require__){(function(global){"use strict";var harden=__webpack_require__(85);harden("CLIENT","client"),harden("SERVER","server"),harden("UNKNOWN","unknown");var asea=function asea(){return asea.client?CLIENT:asea.server?SERVER:UNKNOWN};harden("client","undefined"!=typeof window&&"undefined"!=typeof document&&"function"==typeof window.constructor&&"function"==typeof document.constructor&&"Window"==window.constructor.name&&"HTMLDocument"==document.constructor.name,asea),harden("server","undefined"!=typeof module&&"undefined"!=typeof global&&!!module.exports&&!!global.process&&!!global.process.env,asea),harden("unknown",asea.client===!1&&asea.server===!1,asea),module.exports=asea}).call(exports,function(){return this}())},function(module,exports,__webpack_require__){"use strict";var arid=__webpack_require__(106),decrease=__webpack_require__(126),doubt=__webpack_require__(48),harden=__webpack_require__(85),raze=__webpack_require__(103),plough=function plough(array){array=raze(arguments),arid(array)&&(array=doubt(this).ARRAY?this:[]),doubt(this).ARRAY&&array!=this&&(array=this.concat(array));var list=decrease(array,function flatten(previous,current){var element=doubt(current).AS_ARRAY?plough.apply(null,current):current;return previous.concat(element)},[]);return harden("plough",plough.bind(list),list),list};module.exports=plough},function(module,exports,__webpack_require__){"use strict";var doubt=__webpack_require__(48),harden=__webpack_require__(85),protype=__webpack_require__(90),raze=__webpack_require__(103),truly=__webpack_require__(100);Array.prototype.reduce||(Array.prototype.reduce=function(r){if(null==this)throw new TypeError("Array.prototype.reduce called on null or undefined");if("function"!=typeof r)throw new TypeError(r+" is not a function");var e,t=Object(this),n=t.length>>>0,o=0;if(2==arguments.length)e=arguments[1];else{for(;n>o&&!(o in t);)o++;if(o>=n)throw new TypeError("Reduce of empty array with no initial value");e=t[o++]}for(;n>o;o++)o in t&&(e=r(e,t[o],o,t));return e});var decrease=function decrease(array,method,value){var parameter=raze(arguments);return array=doubt(parameter[0]).ARRAY?parameter[0]:doubt(this).ARRAY?this:[],array=[].concat(array),method=protype(parameter[0],FUNCTION)?parameter[0]:protype(parameter[1],FUNCTION)?parameter[1]:function reduce(previous,current,index,array){return index==array.length-1?(array.pop(),array):current},value=truly(value)?value:array[0],value=array.reduce(method,value),doubt(value).ARRAY||(value=[value]),harden("decrease",decrease.bind(value),value),value};module.exports=decrease}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy9kZWVxdWFsLmRlcGxveS5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgMzI3ZmNjMTJkYzMyZjYxYzA5ZWMiLCJ3ZWJwYWNrOi8vL2RlZXF1YWwuanMiLCJ3ZWJwYWNrOi8vL2tvdW50LmpzIiwid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWluZGV4LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy9sb29zZW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy9kb3VidC5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fa2V5b2YuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vY2VtZW50by5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZnJlZXplLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9mcmVlemUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZS5qcyIsIndlYnBhY2s6Ly8vaGFyZGVuLmpzIiwid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly8vcHJvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9hcnJheS9mcm9tLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L2ZuL2FycmF5L2Zyb20uanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIndlYnBhY2s6Ly8vdHJ1bHkuanMiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy90cnV1L3RydXUuc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2ZpbGxlZC9maWxsZWQuc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3JhemUvcmF6ZS5zdXBwb3J0LmpzIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvc3R1ZmZlZC9zdHVmZmVkLnN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vL3UyMDBiLmpzIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvYXJpZC9hcmlkLnN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9jbGF6b2YvY2xhem9mLnN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vL2Vlbi5qcyIsIndlYnBhY2s6Ly8va2Vpbi5qcyIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2ZhbHp5L2ZhbHp5LnN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vL2RpYXRvbS5qcyIsIndlYnBhY2s6Ly8va29tZW50by5qcyIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2hhbmRsZWJhcnMvaGFuZGxlYmFycy5qcyIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3JlYWxpZ24vcmVhbGlnbi5zdXBwb3J0LmpzIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvbGxhbWFsaXplL2xsYW1hbGl6ZS5zdXBwb3J0LmpzIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvdGl0bGVsaXplL3RpdGxlbGl6ZS5zdXBwb3J0LmpzIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvZGlzZG8vZGlzZG8uc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL29wdGZvci9vcHRmb3Iuc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2ZhbHplL2ZhbHplLnN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9lbXB0L2VtcHQuc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL29wdGFsbC9vcHRhbGwuc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3B5Y2svcHljay5zdXBwb3J0LmpzIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvemVsZi96ZWxmLnN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9hc2VhL2FzZWEuc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3Bsb3VnaC9wbG91Z2guc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2RlY3JlYXNlL2RlY3JlYXNlLnN1cHBvcnQuanMiXSwibmFtZXMiOlsid2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJ0aGlzIiwibW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImluc3RhbGxlZE1vZHVsZXMiLCJpZCIsImxvYWRlZCIsImNhbGwiLCJtIiwiYyIsInAiLCJrb3VudCIsImxvb3NlbiIsInByb3R5cGUiLCJkZWVxdWFsIiwic291cmNlIiwidGFyZ2V0IiwiT0JKRUNUIiwiRlVOQ1RJT04iLCJ0b1N0cmluZyIsImVycm9yIiwicHJvcGVydHkiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX2dldE93blByb3BlcnR5RGVzY3JpcHRvcjIiLCJfZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9nZXRPd25Qcm9wZXJ0eU5hbWVzMiIsImVudGl0eSIsImZpbHRlciIsImVudW1lcmFibGUiLCJsZW5ndGgiLCIkT2JqZWN0IiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiaXQiLCJrZXkiLCJ0b0lPYmplY3QiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZiIsIklPYmplY3QiLCJkZWZpbmVkIiwiY29mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzcGxpdCIsInNsaWNlIiwidW5kZWZpbmVkIiwiVHlwZUVycm9yIiwicElFIiwiY3JlYXRlRGVzYyIsInRvUHJpbWl0aXZlIiwiaGFzIiwiSUU4X0RPTV9ERUZJTkUiLCJnT1BEIiwiTyIsIlAiLCJlIiwiYml0bWFwIiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImlzT2JqZWN0IiwiUyIsImZuIiwidmFsIiwidmFsdWVPZiIsImhhc093blByb3BlcnR5IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJhIiwiZXhlYyIsImRvY3VtZW50IiwiaXMiLCJjcmVhdGVFbGVtZW50IiwiZ2xvYmFsIiwid2luZG93IiwiTWF0aCIsInNlbGYiLCJGdW5jdGlvbiIsIl9fZyIsIiRleHBvcnQiLCJjb3JlIiwiZmFpbHMiLCJLRVkiLCJleHAiLCJGIiwiY3R4IiwiaGlkZSIsIlBST1RPVFlQRSIsInR5cGUiLCJuYW1lIiwib3duIiwib3V0IiwiSVNfRk9SQ0VEIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIklTX1BST1RPIiwiSVNfQklORCIsIkIiLCJJU19XUkFQIiwiVyIsImV4cFByb3RvIiwiQyIsImIiLCJhcmd1bWVudHMiLCJhcHBseSIsInZpcnR1YWwiLCJSIiwiVSIsInZlcnNpb24iLCJfX2UiLCJhRnVuY3Rpb24iLCJ0aGF0IiwiZFAiLCJvYmplY3QiLCJhbk9iamVjdCIsIkF0dHJpYnV0ZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ09QTiIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCIka2V5cyIsImhpZGRlbktleXMiLCJjb25jYXQiLCJhcnJheUluZGV4T2YiLCJJRV9QUk9UTyIsIm5hbWVzIiwiaSIsInJlc3VsdCIsInB1c2giLCJ0b0xlbmd0aCIsInRvSW5kZXgiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiZWwiLCJmcm9tSW5kZXgiLCJpbmRleCIsInRvSW50ZWdlciIsIm1pbiIsImNlaWwiLCJmbG9vciIsImlzTmFOIiwibWF4Iiwic2hhcmVkIiwidWlkIiwiU0hBUkVEIiwic3RvcmUiLCJweCIsInJhbmRvbSIsIl9rZXlzIiwiX2tleXMyIiwiZG91YnQiLCJoYXJkZW4iLCJ0cnVseSIsInRydXUiLCJVMjAwYiIsIkxPT1NFTkVEIiwiUkVGRVJFTkNFX1BBVFRFUk4iLCJBQ0NVTVVMQVRPUl9QQVRURVJOIiwicGF0aCIsImNhY2hlIiwiRXJyb3IiLCJTVFJJTkciLCJlbGVtZW50IiwiQVJSQVkiLCJqb2luIiwicmVwbGFjZSIsImxpc3QiLCJkYXRhIiwiZm9yRWFjaCIsIm9uRWFjaEtleSIsImtleXMiLCJ0b09iamVjdCIsImVudW1CdWdLZXlzIiwiX2l0ZXJhdG9yIiwiX2l0ZXJhdG9yMiIsIl9zeW1ib2wiLCJfc3ltYm9sMiIsImNlbWVudG8iLCJBcnJheSIsImlzQXJyYXkiLCJyIiwicHJvdG90eXBlIiwiYXJyYXkiLCJjb25kaXRpb24iLCJjb25kaXRpb25UeXBlIiwiQVNfQVJSQVkiLCJBUkdVTUVOVFMiLCJBUlJBWV9MSUtFIiwiSVRFUkFCTEUiLCJhcnJheVR5cGUiLCJOVU1CRVIiLCJCT09MRUFOIiwiVU5ERUZJTkVEIiwiU1lNQk9MIiwidGVzdCIsInNvbWUiLCJvbkVhY2hJbmRleCIsIiRhdCIsIlN0cmluZyIsIml0ZXJhdGVkIiwiX3QiLCJfaSIsInBvaW50IiwiZG9uZSIsIlRPX1NUUklORyIsInBvcyIsInMiLCJsIiwiY2hhckNvZGVBdCIsImNoYXJBdCIsIkxJQlJBUlkiLCJyZWRlZmluZSIsIkl0ZXJhdG9ycyIsIiRpdGVyQ3JlYXRlIiwic2V0VG9TdHJpbmdUYWciLCJnZXRQcm90b3R5cGVPZiIsIklURVJBVE9SIiwiQlVHR1kiLCJGRl9JVEVSQVRPUiIsIktFWVMiLCJWQUxVRVMiLCJyZXR1cm5UaGlzIiwiQmFzZSIsIk5BTUUiLCJDb25zdHJ1Y3RvciIsIm5leHQiLCJERUZBVUxUIiwiSVNfU0VUIiwiRk9SQ0VEIiwibWV0aG9kcyIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0TWV0aG9kIiwia2luZCIsInByb3RvIiwidmFsdWVzIiwiZW50cmllcyIsIlRBRyIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiY3JlYXRlIiwiZGVzY3JpcHRvciIsImRQcyIsIkVtcHR5IiwiY3JlYXRlRGljdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwibHQiLCJndCIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwic3JjIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJ3cml0ZSIsImNsb3NlIiwiUHJvcGVydGllcyIsImdldEtleXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZG9jdW1lbnRFbGVtZW50IiwiZGVmIiwidGFnIiwic3RhdCIsIlN5bWJvbCIsIlVTRV9TWU1CT0wiLCIkZXhwb3J0cyIsIk9iamVjdFByb3RvIiwiY29uc3RydWN0b3IiLCJUT19TVFJJTkdfVEFHIiwiY29sbGVjdGlvbnMiLCJDb2xsZWN0aW9uIiwiYWRkVG9VbnNjb3BhYmxlcyIsInN0ZXAiLCJfayIsIkFyZ3VtZW50cyIsIkRFU0NSSVBUT1JTIiwiTUVUQSIsIiRmYWlscyIsIndrcyIsIndrc0V4dCIsIndrc0RlZmluZSIsImtleU9mIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRHT1BEIiwiJERQIiwiJFN5bWJvbCIsIiRKU09OIiwiSlNPTiIsIl9zdHJpbmdpZnkiLCJzdHJpbmdpZnkiLCJISURERU4iLCJUT19QUklNSVRJVkUiLCJpc0VudW0iLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJVU0VfTkFUSVZFIiwiUU9iamVjdCIsInNldHRlciIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJEIiwicHJvdG9EZXNjIiwid3JhcCIsInN5bSIsImlzU3ltYm9sIiwiaXRlcmF0b3IiLCIkZGVmaW5lUHJvcGVydHkiLCIkZGVmaW5lUHJvcGVydGllcyIsIiRjcmVhdGUiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJFIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCIkc2V0Iiwic2V0Iiwic3ltYm9scyIsImZvciIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsInJlcGxhY2VyIiwiJHJlcGxhY2VyIiwiYXJncyIsInNldERlc2MiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3IiwiZmFzdEtleSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsIm1ldGEiLCJORUVEIiwiZ09QUyIsImdldFN5bWJvbHMiLCJhcmciLCJfZnJlZXplIiwiX2ZyZWV6ZTIiLCJmcmVlemUiLCIkZnJlZXplIiwiX2RlZmluZVByb3BlcnR5IiwiX2RlZmluZVByb3BlcnR5MiIsIl90eXBlb2YyIiwiX3R5cGVvZjMiLCJiaW5kIiwiZGVzYyIsIl90eXBlb2YiLCJfZnJvbSIsIl9mcm9tMiIsImZyb20iLCJuIiwidCIsIk51bWJlciIsImlzRmluaXRlIiwiYWJzIiwicG93IiwibyIsInUiLCJoIiwiZXZhbHVhdG9yIiwidGhpc0FyZyIsImV2YWwiLCJyZWR1Y2UiLCJfYXJndW1lbnRzIiwiX3JldCIsImZsYXR0ZW4iLCJjdXJyZW50IiwicHJldmlvdXMiLCJ2Iiwic3BsaWNlIiwiaXNBcnJheUl0ZXIiLCJjcmVhdGVQcm9wZXJ0eSIsImdldEl0ZXJGbiIsIml0ZXIiLCJhcnJheUxpa2UiLCJhTGVuIiwibWFwZm4iLCJtYXBwaW5nIiwiaXRlckZuIiwicmV0IiwiQXJyYXlQcm90byIsImNsYXNzb2YiLCJnZXRJdGVyYXRvck1ldGhvZCIsIkFSRyIsInRyeUdldCIsIlQiLCJjYWxsZWUiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsInNraXBDbG9zaW5nIiwic2FmZSIsImFyciIsInZhbHVlVHlwZSIsImZpbGxlZCIsInN0dWZmZWQiLCJyYXplIiwiX24iLCJtYXAiLCJhcmlkIiwiY2xhem9mIiwiZGlhdG9tIiwib3B0Zm9yIiwicGxvdWdoIiwiaW5pdGlhbGl6ZSIsInN0cmluZyIsInRleHQiLCJwYXJhbWV0ZXIiLCJoaXN0b3J5IiwiYmFzZSIsIlUyMDBCIiwiaWRlbnRpZnkiLCJVMjAwQl9CQVNFMTYiLCJSZWdFeHAiLCJzZXBhcmF0ZSIsInJlbGVhc2UiLCJpbnNlcnQiLCJzZXBhcmF0b3IiLCJyYXciLCJhcHBlbmQiLCJvbkVhY2hUb2tlbiIsInRva2VuIiwiQVBQRU5EIiwicHJlcGVuZCIsIlBSRVBFTkQiLCJwYXR0ZXJuIiwib25FYWNoUGFyYW1ldGVyIiwidGVtcGxhdGUiLCJJTlNFUlQiLCJjbGVhciIsImVlbiIsImJsdWVwcmludCIsIl9jb25zdHJ1Y3RvciIsIm9uRWFjaENvbnN0cnVjdG9yIiwiX2NvbnN0cnVjdG9yMiIsIl9wb2ludCIsIl9fcHJvdG9fXyIsImtlaW4iLCJjb21wYXJhdG9yIiwiaXRlbSIsImZhbHp5Iiwia29tZW50byIsImxsYW1hbGl6ZSIsImhhbmRsZWJhciIsInJlYWxpZ24iLCJjb21tZW50Iiwib3B0aW9uIiwibWF0Y2giLCJNVUxUSVBMRV9MSU5FX0NPTU1FTlRfUEFUVEVSTiIsIlNJTkdMRV9MSU5FX0NPTU1FTlRfUEFUVEVSTiIsImNvbXBpbGUiLCJoYiIsImlucHV0Iiwib3B0aW9ucyIsIl9oYW5kbGViYXJzQ29tcGlsZXJDb21waWxlciIsInByZWNvbXBpbGUiLCJBU1QiLCJfaGFuZGxlYmFyc0NvbXBpbGVyQXN0MiIsIkNvbXBpbGVyIiwiSmF2YVNjcmlwdENvbXBpbGVyIiwiX2hhbmRsZWJhcnNDb21waWxlckphdmFzY3JpcHRDb21waWxlcjIiLCJQYXJzZXIiLCJfaGFuZGxlYmFyc0NvbXBpbGVyQmFzZSIsInBhcnNlciIsInBhcnNlIiwiX2hhbmRsZWJhcnNSdW50aW1lIiwiX2hhbmRsZWJhcnNSdW50aW1lMiIsIl9oYW5kbGViYXJzQ29tcGlsZXJBc3QiLCJfaGFuZGxlYmFyc0NvbXBpbGVySmF2YXNjcmlwdENvbXBpbGVyIiwiX2hhbmRsZWJhcnNDb21waWxlclZpc2l0b3IiLCJfaGFuZGxlYmFyc0NvbXBpbGVyVmlzaXRvcjIiLCJfaGFuZGxlYmFyc05vQ29uZmxpY3QiLCJfaGFuZGxlYmFyc05vQ29uZmxpY3QyIiwiaW5zdCIsIlZpc2l0b3IiLCJIYW5kbGViYXJzRW52aXJvbm1lbnQiLCJVdGlscyIsImV4dGVuZCIsIlNhZmVTdHJpbmciLCJfaGFuZGxlYmFyc1NhZmVTdHJpbmcyIiwiRXhjZXB0aW9uIiwiX2hhbmRsZWJhcnNFeGNlcHRpb24yIiwiZXNjYXBlRXhwcmVzc2lvbiIsIlZNIiwicnVudGltZSIsInNwZWMiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9oYW5kbGViYXJzQmFzZSIsIl9oYW5kbGViYXJzU2FmZVN0cmluZyIsIl9oYW5kbGViYXJzRXhjZXB0aW9uIiwiX2hhbmRsZWJhcnNVdGlscyIsIm5ld09iaiIsImhlbHBlcnMiLCJwYXJ0aWFscyIsImRlY29yYXRvcnMiLCJfaGVscGVycyIsInJlZ2lzdGVyRGVmYXVsdEhlbHBlcnMiLCJfZGVjb3JhdG9ycyIsInJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnMiLCJfdXRpbHMiLCJfZXhjZXB0aW9uIiwiX2V4Y2VwdGlvbjIiLCJfbG9nZ2VyIiwiX2xvZ2dlcjIiLCJWRVJTSU9OIiwiQ09NUElMRVJfUkVWSVNJT04iLCJSRVZJU0lPTl9DSEFOR0VTIiwiMSIsIjIiLCIzIiwiNCIsIjUiLCI2IiwiNyIsIm9iamVjdFR5cGUiLCJsb2dnZXIiLCJsb2ciLCJyZWdpc3RlckhlbHBlciIsInVucmVnaXN0ZXJIZWxwZXIiLCJyZWdpc3RlclBhcnRpYWwiLCJwYXJ0aWFsIiwidW5yZWdpc3RlclBhcnRpYWwiLCJyZWdpc3RlckRlY29yYXRvciIsInVucmVnaXN0ZXJEZWNvcmF0b3IiLCJjcmVhdGVGcmFtZSIsImVzY2FwZUNoYXIiLCJjaHIiLCJlc2NhcGUiLCJpbmRleE9mIiwibGVuIiwidG9IVE1MIiwicG9zc2libGUiLCJiYWRDaGFycyIsImlzRW1wdHkiLCJmcmFtZSIsIl9wYXJlbnQiLCJibG9ja1BhcmFtcyIsInBhcmFtcyIsImlkcyIsImFwcGVuZENvbnRleHRQYXRoIiwiY29udGV4dFBhdGgiLCImIiwiPCIsIj4iLCJcIiIsIiciLCJgIiwiPSIsImlzRnVuY3Rpb24iLCJtZXNzYWdlIiwibm9kZSIsImxvYyIsImxpbmUiLCJjb2x1bW4iLCJzdGFydCIsInRtcCIsImlkeCIsImVycm9yUHJvcHMiLCJjYXB0dXJlU3RhY2tUcmFjZSIsImxpbmVOdW1iZXIiLCJpbnN0YW5jZSIsIl9oZWxwZXJzQmxvY2tIZWxwZXJNaXNzaW5nMiIsIl9oZWxwZXJzRWFjaDIiLCJfaGVscGVyc0hlbHBlck1pc3NpbmcyIiwiX2hlbHBlcnNJZjIiLCJfaGVscGVyc0xvZzIiLCJfaGVscGVyc0xvb2t1cDIiLCJfaGVscGVyc1dpdGgyIiwiX2hlbHBlcnNCbG9ja0hlbHBlck1pc3NpbmciLCJfaGVscGVyc0VhY2giLCJfaGVscGVyc0hlbHBlck1pc3NpbmciLCJfaGVscGVyc0lmIiwiX2hlbHBlcnNMb2ciLCJfaGVscGVyc0xvb2t1cCIsIl9oZWxwZXJzV2l0aCIsImNvbnRleHQiLCJpbnZlcnNlIiwiZWFjaCIsImV4ZWNJdGVyYXRpb24iLCJmaWVsZCIsImxhc3QiLCJmaXJzdCIsImoiLCJwcmlvcktleSIsImNvbmRpdGlvbmFsIiwiaGFzaCIsImluY2x1ZGVaZXJvIiwibGV2ZWwiLCJfZGVjb3JhdG9yc0lubGluZTIiLCJfZGVjb3JhdG9yc0lubGluZSIsInByb3BzIiwiY29udGFpbmVyIiwib3JpZ2luYWwiLCJtZXRob2RNYXAiLCJsb29rdXBMZXZlbCIsImxldmVsTWFwIiwidG9Mb3dlckNhc2UiLCJwYXJzZUludCIsImNvbnNvbGUiLCJtZXRob2QiLCJfbGVuIiwiX2tleSIsImNoZWNrUmV2aXNpb24iLCJjb21waWxlckluZm8iLCJjb21waWxlclJldmlzaW9uIiwiY3VycmVudFJldmlzaW9uIiwiX2Jhc2UiLCJydW50aW1lVmVyc2lvbnMiLCJjb21waWxlclZlcnNpb25zIiwidGVtcGxhdGVTcGVjIiwiZW52IiwiaW52b2tlUGFydGlhbFdyYXBwZXIiLCJyZXNvbHZlUGFydGlhbCIsImludm9rZVBhcnRpYWwiLCJjb21waWxlck9wdGlvbnMiLCJpbmRlbnQiLCJsaW5lcyIsIm1haW4iLCJkZXB0aHMiLCJfc2V0dXAiLCJ1c2VEYXRhIiwiaW5pdERhdGEiLCJ1c2VCbG9ja1BhcmFtcyIsInVzZURlcHRocyIsImV4ZWN1dGVEZWNvcmF0b3JzIiwiZGVjb3JhdG9yIiwibWFpbl9kIiwiY29tcGlsZXIiLCJzdHJpY3QiLCJsb29rdXAiLCJsYW1iZGEiLCJwcm9ncmFtcyIsInByb2dyYW0iLCJkZWNsYXJlZEJsb2NrUGFyYW1zIiwicHJvZ3JhbVdyYXBwZXIiLCJ3cmFwUHJvZ3JhbSIsImRlcHRoIiwibWVyZ2UiLCJwYXJhbSIsImNvbW1vbiIsIm5vb3AiLCJpc1RvcCIsInVzZVBhcnRpYWwiLCJ1c2VEZWNvcmF0b3JzIiwiX2NoaWxkIiwicHJvZyIsImN1cnJlbnREZXB0aHMiLCJwYXJ0aWFsQmxvY2siLCJIYW5kbGViYXJzIiwiJEhhbmRsZWJhcnMiLCJub0NvbmZsaWN0IiwiaGVscGVyRXhwcmVzc2lvbiIsInNjb3BlZElkIiwic2ltcGxlSWQiLCJwYXJ0cyIsIl9wYXJzZXIyIiwieXkiLCJsb2NJbmZvIiwiU291cmNlTG9jYXRpb24iLCJzcmNOYW1lIiwic3RyaXAiLCJfd2hpdGVzcGFjZUNvbnRyb2wyIiwiYWNjZXB0IiwiX3BhcnNlciIsIl93aGl0ZXNwYWNlQ29udHJvbCIsIkhlbHBlcnMiLCJoYW5kbGViYXJzIiwidHJhY2UiLCJzeW1ib2xzXyIsIkVPRiIsInByb2dyYW1fcmVwZXRpdGlvbjAiLCJzdGF0ZW1lbnQiLCJtdXN0YWNoZSIsImJsb2NrIiwicmF3QmxvY2siLCJjb250ZW50IiwiQ09NTUVOVCIsIkNPTlRFTlQiLCJvcGVuUmF3QmxvY2siLCJyYXdCbG9ja19yZXBldGl0aW9uX3BsdXMwIiwiRU5EX1JBV19CTE9DSyIsIk9QRU5fUkFXX0JMT0NLIiwiaGVscGVyTmFtZSIsIm9wZW5SYXdCbG9ja19yZXBldGl0aW9uMCIsIm9wZW5SYXdCbG9ja19vcHRpb24wIiwiQ0xPU0VfUkFXX0JMT0NLIiwib3BlbkJsb2NrIiwiYmxvY2tfb3B0aW9uMCIsImNsb3NlQmxvY2siLCJvcGVuSW52ZXJzZSIsImJsb2NrX29wdGlvbjEiLCJPUEVOX0JMT0NLIiwib3BlbkJsb2NrX3JlcGV0aXRpb24wIiwib3BlbkJsb2NrX29wdGlvbjAiLCJvcGVuQmxvY2tfb3B0aW9uMSIsIkNMT1NFIiwiT1BFTl9JTlZFUlNFIiwib3BlbkludmVyc2VfcmVwZXRpdGlvbjAiLCJvcGVuSW52ZXJzZV9vcHRpb24wIiwib3BlbkludmVyc2Vfb3B0aW9uMSIsIm9wZW5JbnZlcnNlQ2hhaW4iLCJPUEVOX0lOVkVSU0VfQ0hBSU4iLCJvcGVuSW52ZXJzZUNoYWluX3JlcGV0aXRpb24wIiwib3BlbkludmVyc2VDaGFpbl9vcHRpb24wIiwib3BlbkludmVyc2VDaGFpbl9vcHRpb24xIiwiaW52ZXJzZUFuZFByb2dyYW0iLCJJTlZFUlNFIiwiaW52ZXJzZUNoYWluIiwiaW52ZXJzZUNoYWluX29wdGlvbjAiLCJPUEVOX0VOREJMT0NLIiwiT1BFTiIsIm11c3RhY2hlX3JlcGV0aXRpb24wIiwibXVzdGFjaGVfb3B0aW9uMCIsIk9QRU5fVU5FU0NBUEVEIiwibXVzdGFjaGVfcmVwZXRpdGlvbjEiLCJtdXN0YWNoZV9vcHRpb24xIiwiQ0xPU0VfVU5FU0NBUEVEIiwiT1BFTl9QQVJUSUFMIiwicGFydGlhbE5hbWUiLCJwYXJ0aWFsX3JlcGV0aXRpb24wIiwicGFydGlhbF9vcHRpb24wIiwib3BlblBhcnRpYWxCbG9jayIsIk9QRU5fUEFSVElBTF9CTE9DSyIsIm9wZW5QYXJ0aWFsQmxvY2tfcmVwZXRpdGlvbjAiLCJvcGVuUGFydGlhbEJsb2NrX29wdGlvbjAiLCJzZXhwciIsIk9QRU5fU0VYUFIiLCJzZXhwcl9yZXBldGl0aW9uMCIsInNleHByX29wdGlvbjAiLCJDTE9TRV9TRVhQUiIsImhhc2hfcmVwZXRpdGlvbl9wbHVzMCIsImhhc2hTZWdtZW50IiwiSUQiLCJFUVVBTFMiLCJPUEVOX0JMT0NLX1BBUkFNUyIsImJsb2NrUGFyYW1zX3JlcGV0aXRpb25fcGx1czAiLCJDTE9TRV9CTE9DS19QQVJBTVMiLCJkYXRhTmFtZSIsIk5VTEwiLCJEQVRBIiwicGF0aFNlZ21lbnRzIiwiU0VQIiwiJGFjY2VwdCIsIiRlbmQiLCJ0ZXJtaW5hbHNfIiwiMTQiLCIxNSIsIjE4IiwiMTkiLCIyMyIsIjI5IiwiMzMiLCIzNCIsIjM5IiwiNDQiLCI0NyIsIjQ4IiwiNTEiLCI1NCIsIjU1IiwiNjAiLCI2NSIsIjY4IiwiNzIiLCI3MyIsIjc1IiwiNzciLCI4MCIsIjgxIiwiODIiLCI4MyIsIjg0IiwiODUiLCI4NyIsInByb2R1Y3Rpb25zXyIsInBlcmZvcm1BY3Rpb24iLCJhbm9ueW1vdXMiLCJ5eXRleHQiLCJ5eWxlbmciLCJ5eWxpbmVubyIsInl5c3RhdGUiLCIkJCIsIl8kIiwiJDAiLCIkIiwicHJlcGFyZVByb2dyYW0iLCJzdHJpcENvbW1lbnQiLCJzdHJpcEZsYWdzIiwicHJlcGFyZVJhd0Jsb2NrIiwicHJlcGFyZUJsb2NrIiwiY2hhaW5lZCIsImNoYWluIiwicHJlcGFyZU11c3RhY2hlIiwicHJlcGFyZVBhcnRpYWxCbG9jayIsInBhaXJzIiwicHJlcGFyZVBhdGgiLCJwYXJ0IiwidGFibGUiLCI4IiwiOSIsIjEwIiwiMTEiLCIxMiIsIjEzIiwiMTYiLCIyNCIsIjI3IiwiNTkiLCIyMCIsIjc4IiwiNzkiLCI4NiIsIjE3IiwiNTYiLCI2NCIsIjQ5IiwiNTIiLCIyNSIsIjM4IiwiNDMiLCI0NSIsIjI4IiwiNTciLCIyNiIsIjMwIiwiMzUiLCIyMSIsIjYxIiwiNTAiLCI2MyIsIjY5IiwiNzAiLCI3MSIsIjUzIiwiNTgiLCI2NiIsIjMxIiwiMzYiLCIyMiIsIjYyIiwiNDYiLCI0MCIsIjY3IiwiMzIiLCI3NCIsIjM3IiwiNDEiLCI3NiIsIjQyIiwiZGVmYXVsdEFjdGlvbnMiLCI5MSIsIjEwMiIsIjEwNSIsIjExMSIsIjExMiIsIjExNyIsIjEyMCIsIjEyMyIsIjEyNCIsIjEzNiIsIjEzNyIsInBhcnNlRXJyb3IiLCJzdHIiLCJsZXgiLCJsZXhlciIsInN0YWNrIiwidnN0YWNrIiwibHN0YWNrIiwicmVjb3ZlcmluZyIsInNldElucHV0IiwieXlsbG9jIiwieXlsb2MiLCJyYW5nZXMiLCJzeW1ib2wiLCJwcmVFcnJvclN5bWJvbCIsInN0YXRlIiwiYWN0aW9uIiwibmV3U3RhdGUiLCJleHBlY3RlZCIsInl5dmFsIiwiZXJyU3RyIiwic2hvd1Bvc2l0aW9uIiwiZmlyc3RfbGluZSIsImxhc3RfbGluZSIsImZpcnN0X2NvbHVtbiIsImxhc3RfY29sdW1uIiwicmFuZ2UiLCJfaW5wdXQiLCJfbW9yZSIsIl9sZXNzIiwibWF0Y2hlZCIsImNvbmRpdGlvblN0YWNrIiwib2Zmc2V0IiwiY2giLCJ1bnB1dCIsInN1YnN0ciIsIm9sZExpbmVzIiwibW9yZSIsImxlc3MiLCJwYXN0SW5wdXQiLCJwYXN0IiwidXBjb21pbmdJbnB1dCIsInByZSIsInRlbXBNYXRjaCIsInJ1bGVzIiwiX2N1cnJlbnRSdWxlcyIsImZsZXgiLCJtYXRjaGVzIiwiYmVnaW4iLCJwb3BTdGF0ZSIsInBvcCIsImNvbmRpdGlvbnMiLCJ0b3BTdGF0ZSIsInB1c2hTdGF0ZSIsInl5XyIsIiRhdm9pZGluZ19uYW1lX2NvbGxpc2lvbnMiLCJZWV9TVEFSVCIsImVuZCIsIm11IiwiaW5jbHVzaXZlIiwiZW11IiwiY29tIiwiSU5JVElBTCIsIldoaXRlc3BhY2VDb250cm9sIiwiaXNQcmV2V2hpdGVzcGFjZSIsImJvZHkiLCJpc1Jvb3QiLCJwcmV2Iiwic2libGluZyIsImlzTmV4dFdoaXRlc3BhY2UiLCJvbWl0UmlnaHQiLCJtdWx0aXBsZSIsInJpZ2h0U3RyaXBwZWQiLCJvbWl0TGVmdCIsImxlZnRTdHJpcHBlZCIsIl92aXNpdG9yIiwiX3Zpc2l0b3IyIiwiUHJvZ3JhbSIsImRvU3RhbmRhbG9uZSIsImlnbm9yZVN0YW5kYWxvbmUiLCJpc1Jvb3RTZWVuIiwiX2lzUHJldldoaXRlc3BhY2UiLCJfaXNOZXh0V2hpdGVzcGFjZSIsIm9wZW5TdGFuZGFsb25lIiwiY2xvc2VTdGFuZGFsb25lIiwiaW5saW5lU3RhbmRhbG9uZSIsIkJsb2NrU3RhdGVtZW50IiwiRGVjb3JhdG9yQmxvY2siLCJQYXJ0aWFsQmxvY2tTdGF0ZW1lbnQiLCJmaXJzdEludmVyc2UiLCJsYXN0SW52ZXJzZSIsIm9wZW5TdHJpcCIsImNsb3NlU3RyaXAiLCJpbnZlcnNlU3RyaXAiLCJEZWNvcmF0b3IiLCJNdXN0YWNoZVN0YXRlbWVudCIsIlBhcnRpYWxTdGF0ZW1lbnQiLCJDb21tZW50U3RhdGVtZW50IiwicGFyZW50cyIsInZpc2l0U3ViRXhwcmVzc2lvbiIsImFjY2VwdFJlcXVpcmVkIiwiYWNjZXB0QXJyYXkiLCJhY2NlcHRLZXkiLCJ2aXNpdEJsb2NrIiwidmlzaXRQYXJ0aWFsIiwibXV0YXRpbmciLCJ1bnNoaWZ0Iiwic2hpZnQiLCJDb250ZW50U3RhdGVtZW50IiwiU3ViRXhwcmVzc2lvbiIsIlBhdGhFeHByZXNzaW9uIiwiU3RyaW5nTGl0ZXJhbCIsIk51bWJlckxpdGVyYWwiLCJCb29sZWFuTGl0ZXJhbCIsIlVuZGVmaW5lZExpdGVyYWwiLCJOdWxsTGl0ZXJhbCIsIkhhc2giLCJIYXNoUGFpciIsInBhaXIiLCJ2YWxpZGF0ZUNsb3NlIiwiZXJyb3JOb2RlIiwiZGlnIiwiZGVwdGhTdHJpbmciLCJpc0xpdGVyYWwiLCJlc2NhcGVGbGFnIiwiZXNjYXBlZCIsImNvbnRlbnRzIiwiaW52ZXJ0ZWQiLCJzdGF0ZW1lbnRzIiwiZmlyc3RMb2MiLCJsYXN0TG9jIiwiY29tcGF0IiwiYXN0IiwiZW52aXJvbm1lbnQiLCJjb21waWxlSW5wdXQiLCJleGVjT3B0aW9ucyIsImNvbXBpbGVkIiwic2V0dXBPcHRpb25zIiwiYXJnRXF1YWxzIiwidHJhbnNmb3JtTGl0ZXJhbFRvUGF0aCIsImxpdGVyYWwiLCJfYXN0IiwiX2FzdDIiLCJlcXVhbHMiLCJvdGhlciIsIm9wY29kZXMiLCJvcGNvZGUiLCJvdGhlck9wY29kZSIsImNoaWxkcmVuIiwiZ3VpZCIsInNvdXJjZU5vZGUiLCJzdHJpbmdQYXJhbXMiLCJ0cmFja0lkcyIsImtub3duSGVscGVycyIsImhlbHBlck1pc3NpbmciLCJibG9ja0hlbHBlck1pc3NpbmciLCJpZiIsInVubGVzcyIsIndpdGgiLCJfbmFtZSIsImNvbXBpbGVQcm9ncmFtIiwiY2hpbGRDb21waWxlciIsImJvZHlMZW5ndGgiLCJpc1NpbXBsZSIsImNsYXNzaWZ5U2V4cHIiLCJoZWxwZXJTZXhwciIsInNpbXBsZVNleHByIiwiYW1iaWd1b3VzU2V4cHIiLCJzZXR1cEZ1bGxNdXN0YWNoZVBhcmFtcyIsImV4cGxpY2l0UGFydGlhbENvbnRleHQiLCJpc0R5bmFtaWMiLCJwcmV2ZW50SW5kZW50Iiwibm9Fc2NhcGUiLCJpc0Jsb2NrIiwia25vd25IZWxwZXJzT25seSIsImZhbHN5IiwiYWRkRGVwdGgiLCJzY29wZWQiLCJibG9ja1BhcmFtSWQiLCJibG9ja1BhcmFtSW5kZXgiLCJudW1iZXIiLCJib29sIiwicHVzaFBhcmFtIiwiaXNCbG9ja1BhcmFtIiwiaXNIZWxwZXIiLCJpc0VsaWdpYmxlIiwiX25hbWUyIiwicHVzaFBhcmFtcyIsImJsb2NrUGFyYW1DaGlsZCIsIm9taXRFbXB0eSIsIkxpdGVyYWwiLCJzdHJpY3RMb29rdXAiLCJyZXF1aXJlVGVybWluYWwiLCJwb3BTdGFjayIsIm5hbWVMb29rdXAiLCJhbGlhc2FibGUiLCJxdW90ZWRTdHJpbmciLCJfY29kZUdlbiIsIl9jb2RlR2VuMiIsInBhcmVudCIsImlzVmFsaWRKYXZhU2NyaXB0VmFyaWFibGVOYW1lIiwiZGVwdGhlZExvb2t1cCIsInJldmlzaW9uIiwidmVyc2lvbnMiLCJhcHBlbmRUb0J1ZmZlciIsImxvY2F0aW9uIiwiZXhwbGljaXQiLCJpbml0aWFsaXplQnVmZmVyIiwiYXNPYmplY3QiLCJpc0NoaWxkIiwiZW52aXJvbm1lbnRzIiwicHJlYW1ibGUiLCJzdGFja1Nsb3QiLCJzdGFja1ZhcnMiLCJhbGlhc2VzIiwicmVnaXN0ZXJzIiwiaGFzaGVzIiwiY29tcGlsZVN0YWNrIiwiaW5saW5lU3RhY2siLCJjb21waWxlQ2hpbGRyZW4iLCJjdXJyZW50TG9jYXRpb24iLCJwdXNoU291cmNlIiwiY3JlYXRlRnVuY3Rpb25Db250ZXh0IiwiX2NvbnRleHQiLCJvYmplY3RMaXRlcmFsIiwidG9TdHJpbmdXaXRoU291cmNlTWFwIiwiZmlsZSIsImRlc3ROYW1lIiwibGFzdENvbnRleHQiLCJ2YXJEZWNsYXJhdGlvbnMiLCJsb2NhbHMiLCJhbGlhc0NvdW50IiwiYWxpYXMiLCJyZWZlcmVuY2VDb3VudCIsIm1lcmdlU291cmNlIiwiYXBwZW5kT25seSIsImZvcmNlQnVmZmVyIiwiYXBwZW5kRmlyc3QiLCJzb3VyY2VTZWVuIiwiYnVmZmVyU3RhcnQiLCJidWZmZXJFbmQiLCJhZGQiLCJzdWJzdHJpbmciLCJibG9ja1ZhbHVlIiwiY29udGV4dE5hbWUiLCJzZXR1cEhlbHBlckFyZ3MiLCJibG9ja05hbWUiLCJmdW5jdGlvbkNhbGwiLCJhbWJpZ3VvdXNCbG9ja1ZhbHVlIiwiZmx1c2hJbmxpbmUiLCJ0b3BTdGFjayIsImxhc3RIZWxwZXIiLCJhcHBlbmRDb250ZW50IiwicGVuZGluZ0NvbnRlbnQiLCJwZW5kaW5nTG9jYXRpb24iLCJpc0lubGluZSIsInJlcGxhY2VTdGFjayIsImxvY2FsIiwiYXBwZW5kRXNjYXBlZCIsImdldENvbnRleHQiLCJwdXNoQ29udGV4dCIsInB1c2hTdGFja0xpdGVyYWwiLCJsb29rdXBPbkNvbnRleHQiLCJyZXNvbHZlUGF0aCIsImxvb2t1cEJsb2NrUGFyYW0iLCJsb29rdXBEYXRhIiwiX3RoaXMiLCJhc3N1bWVPYmplY3RzIiwicmVzb2x2ZVBvc3NpYmxlTGFtYmRhIiwicHVzaFN0cmluZ1BhcmFtIiwicHVzaFN0cmluZyIsImVtcHR5SGFzaCIsInB1c2hIYXNoIiwidHlwZXMiLCJjb250ZXh0cyIsInBvcEhhc2giLCJwdXNoTGl0ZXJhbCIsInB1c2hQcm9ncmFtIiwicHJvZ3JhbUV4cHJlc3Npb24iLCJwYXJhbVNpemUiLCJmb3VuZERlY29yYXRvciIsImludm9rZUhlbHBlciIsIm5vbkhlbHBlciIsImhlbHBlciIsInNldHVwSGVscGVyIiwic2ltcGxlIiwiY2FsbFBhcmFtcyIsImludm9rZUtub3duSGVscGVyIiwiaW52b2tlQW1iaWd1b3VzIiwiaGVscGVyQ2FsbCIsInVzZVJlZ2lzdGVyIiwicGFyYW1zSW5pdCIsInNldHVwUGFyYW1zIiwiYXNzaWduVG9IYXNoIiwicHVzaElkIiwiY2hpbGQiLCJtYXRjaEV4aXN0aW5nUHJvZ3JhbSIsInByb2dyYW1QYXJhbXMiLCJleHByIiwiY2FsbGJhY2siLCJwcmVmaXgiLCJjcmVhdGVkU3RhY2siLCJ1c2VkTGl0ZXJhbCIsInRvcCIsImluY3JTdGFjayIsInRvcFN0YWNrTmFtZSIsImVudHJ5Iiwid3JhcHBlZCIsImlubGluZSIsImJsb2NrSGVscGVyIiwiZm91bmRIZWxwZXIiLCJjYWxsQ29udGV4dCIsIm9iamVjdEFyZ3MiLCJoYXNoSWRzIiwiaGFzaFR5cGVzIiwiaGFzaENvbnRleHRzIiwiZ2VuZXJhdGVBcnJheSIsInJlc2VydmVkV29yZHMiLCJjb21waWxlcldvcmRzIiwiUkVTRVJWRURfV09SRFMiLCJjYXN0Q2h1bmsiLCJjaHVuayIsImNvZGVHZW4iLCJDb2RlR2VuIiwic3JjRmlsZSIsIlNvdXJjZU5vZGUiLCJlcnIiLCJjaHVua3MiLCJjb2RlIiwiZW1wdHkiLCJnZW5lcmF0ZUxpc3QiLCJORVdMSU5FX1BBVFRFUk4iLCJTUEFDRV9MSU5FX1BBVFRFUk4iLCJUUkFJTElOR19TUEFDRV9QQVRURVJOIiwic3BhY2UiLCJTUEFDRV9QQVRURVJOIiwic3BhY2VQYXR0ZXJuIiwidGl0bGVsaXplIiwiZm9ybWFsIiwiRFJPUF9QQVRURVJOIiwiSU5GT1JNQUxfUEFUVEVSTiIsIm9uUmVwbGFjZSIsImRpc2RvIiwiVEVSTV9QQVRURVJOIiwidG9VcHBlckNhc2UiLCJDTEVBTl9QQVRURVJOIiwiVVBQRVJDQVNFX1BBVFRFUk4iLCJmYWx6ZSIsIm9wdGFsbCIsInplbGYiLCJtb2RpZmllciIsIm1vZGlmaWVyVHlwZSIsImVtcHQiLCJweWNrIiwib25FYWNoQ29uZGl0aW9uIiwiYWNjdW11bGFudCIsIm9uRWFjaEVsZW1lbnQiLCJfcmVzdWx0IiwiYXNlYSIsInNlcnZlciIsImNsaWVudCIsIkNMSUVOVCIsIlNFUlZFUiIsIlVOS05PV04iLCJwcm9jZXNzIiwiZGVjcmVhc2UiXSwibWFwcGluZ3MiOiJDQUFBLFFBQUFBLGtDQUFBQyxLQUFBQyxTQUNBLGdCQUFBQyxVQUFBLGdCQUFBQyxRQUNBQSxPQUFBRCxRQUFBRCxVQUNBLGtCQUFBRyxnQkFBQUMsSUFDQUQsVUFBQUgsU0FDQSxnQkFBQUMsU0FDQUEsUUFBQSxRQUFBRCxVQUVBRCxLQUFBLFFBQUFDLFdBQ0NLLEtBQUEsV0FDRCxNQ0FnQixVQUFVQyxTQ04xQixRQUFBQyxxQkFBQUMsVUFHQSxHQUFBQyxpQkFBQUQsVUFDQSxNQUFBQyxrQkFBQUQsVUFBQVAsT0FHQSxJQUFBQyxRQUFBTyxpQkFBQUQsV0FDQVAsV0FDQVMsR0FBQUYsU0FDQUcsUUFBQSxFQVVBLE9BTkFMLFNBQUFFLFVBQUFJLEtBQUFWLE9BQUFELFFBQUFDLGNBQUFELFFB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QUMsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQXVDLEdBQUEsS0FBK0hILEdBQUEsR0FBQTdDLElBQUEsTUFBQThDLEdBQUEsR0FBQUMsR0FBQSxHQUFBM0MsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQXVDLEdBQUEsS0FBK0hILEdBQUEsR0FBQUssR0FBQSxHQUFBQyxHQUFBLEdBQUFyRCxJQUFBLE1BQUFFLElBQUEsTUFBQThDLEdBQUEsR0FBQUMsR0FBQSxHQUFBM0MsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQXVDLEdBQUEsS0FBNEo1RCxJQUFBLE1BQUFnRSxHQUFBLEdBQUF0RCxJQUFBLE1BQUFFLElBQUEsTUFBQUksSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsUUFBaUl2QixJQUFBLE1BQUFFLElBQUEsTUFBQU8sSUFBQSxNQUFBRyxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxNQUFBRSxJQUFBLE1BQUFFLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLFFBQTZLdkIsSUFBQSxNQUFBRSxJQUFBLE1BQUFPLElBQUEsTUFBQUcsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQUUsSUFBQSxNQUFBRSxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxRQUE2S3ZCLElBQUEsTUFBQUUsSUFBQSxNQUFBTyxJQUFBLE1BQUFHLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLE1BQUFFLElBQUEsTUFBQUUsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsUUFBNkt2QixJQUFBLE1BQUFFLElBQUEsTUFBQU8sSUFBQSxNQUFBRyxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxNQUFBRSxJQUFBLE1BQUFFLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLFFBQTZLdkIsSUFBQSxNQUFBRSxJQUFBLE1BQUFPLElBQUEsTUFBQUcsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQUUsSUFBQSxNQUFBRSxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxRQUE2S3ZCLElBQUEsTUFBQUUsSUFBQSxNQUFBTyxJQUFBLE1BQUFHLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLE1BQUFFLElBQUEsTUFBQUUsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsUUFBNkt2QixJQUFBLE1BQUFFLElBQUEsTUFBQU8sSUFBQSxNQUFBRyxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxNQUFBRSxJQUFBLE1BQUFFLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLFFBQTZLdkIsSUFBQSxNQUFBRSxJQUFBLE1BQUFPLElBQUEsTUFBQUcsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQUUsSUFBQSxNQUFBRSxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLFFBQTBMVixJQUFBLE1BQUFnRCxHQUFBLEtBQXlCOUQsSUFBQSxNQUFBRSxJQUFBLE1BQUFPLElBQUEsTUFBQUcsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQUUsSUFBQSxNQUFBRSxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLFFBQTBMMkMs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R0FoVSxNQUFBZ0csTUFBQWhHLGFBQUE4SCxNQUFBLEdBRUE5SCxNQUFBOEgsTUFBQThMLE9BQUE0TyxPQUFBeGlCLE9BRUE4RixNQUFBOUYsT0FBQTJHLFFBQ0EzRyxlQUdBK0YsT0FBQSxXQUFBMmpDLFNBQUFoM0IsS0FBQTFTLGNBRUFBLE1BR0EvRCxRQUFBRCxRQUFBMHRDIiwiZmlsZSI6ImRlZXF1YWwuZGVwbG95LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiZGVlcXVhbFwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJkZWVxdWFsXCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImRlZXF1YWxcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiZGVlcXVhbFwiXSA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHQvKjtcblx0XHRAbW9kdWxlLWxpY2Vuc2U6XG5cdFx0XHRUaGUgTUlUIExpY2Vuc2UgKE1JVClcblx0XHRcdEBtaXQtbGljZW5zZVxuXHRcblx0XHRcdENvcHlyaWdodCAoQGMpIDIwMTcgUmljaGV2ZSBTaW9kaW5hIEJlYmVkb3Jcblx0XHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXHRcblx0XHRcdFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcblx0XHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRcdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0XHRcdHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcblx0XHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdFx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblx0XG5cdFx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRcdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cdFxuXHRcdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdFx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdFx0XHRGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcblx0XHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRcdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdFx0XHRPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuXHRcdFx0U09GVFdBUkUuXG5cdFx0QGVuZC1tb2R1bGUtbGljZW5zZVxuXHRcblx0XHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0XHR7XG5cdFx0XHRcdFwicGFja2FnZVwiOiBcImRlZXF1YWxcIixcblx0XHRcdFx0XCJwYXRoXCI6IFwiZGVlcXVhbC9kZWVxdWFsLmpzXCIsXG5cdFx0XHRcdFwiZmlsZVwiOiBcImRlZXF1YWwuanNcIixcblx0XHRcdFx0XCJtb2R1bGVcIjogXCJkZWVxdWFsXCIsXG5cdFx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcdFwiZU1haWxcIjogXCJyaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXCIsXG5cdFx0XHRcdFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b2xrb3Zhc3lzdGVtcy9kZWVxdWFsLmdpdFwiLFxuXHRcdFx0XHRcImdsb2JhbFwiOiB0cnVlLFxuXHRcdFx0XHRcImNsYXNzXCI6IHRydWVcblx0XHRcdH1cblx0XHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cdFxuXHRcdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRcdERlZXAgZXF1YWwuXG5cdFx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXHRcblx0XHRAaW5jbHVkZTpcblx0XHRcdHtcblx0XHRcdFx0XCJrb3VudFwiOiBcImtvdW50XCIsXG5cdFx0XHRcdFwibG9vc2VuXCI6IFwibG9vc2VuXCIsXG5cdFx0XHRcdFwicHJvdHlwZVwiOiBcInByb3R5cGVcIlxuXHRcdFx0fVxuXHRcdEBlbmQtaW5jbHVkZVxuXHQqL1xuXHRcblx0dmFyIGtvdW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0dmFyIGxvb3NlbiA9IF9fd2VicGFja19yZXF1aXJlX18oNDIpO1xuXHR2YXIgcHJvdHlwZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTApO1xuXHRcblx0dmFyIGRlZXF1YWwgPSBmdW5jdGlvbiBkZWVxdWFsKHNvdXJjZSwgdGFyZ2V0KSB7XG5cdFx0Lyo7XG5cdCBcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdCBcdFx0e1xuXHQgXHRcdFx0XCJzb3VyY2U6cmVxdWlyZWRcIjogW1xuXHQgXHRcdFx0XHRcIm9iamVjdFwiLFxuXHQgXHRcdFx0XHRBcnJheVxuXHQgXHRcdFx0XSxcblx0IFx0XHRcdFwidGFyZ2V0OnJlcXVpcmVkXCI6IFtcblx0IFx0XHRcdFx0XCJvYmplY3RcIixcblx0IFx0XHRcdFx0QXJyYXlcblx0IFx0XHRcdF1cblx0IFx0XHR9XG5cdCBcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG5cdCAqL1xuXHRcblx0XHRpZiAoIXByb3R5cGUoc291cmNlLCBPQkpFQ1QpIHx8ICFwcm90eXBlKHRhcmdldCwgT0JKRUNUKSkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0aWYgKHByb3R5cGUoc291cmNlLCBGVU5DVElPTikgJiYgcHJvdHlwZSh0YXJnZXQsIEZVTkNUSU9OKSkge1xuXHRcdFx0XHRcdHJldHVybiBzb3VyY2UgPT09IHRhcmdldCB8fCBzb3VyY2UudG9TdHJpbmcoKSA9PSB0YXJnZXQudG9TdHJpbmcoKTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0cmV0dXJuIHNvdXJjZSA9PT0gdGFyZ2V0O1xuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0c291cmNlID0gbG9vc2VuKHNvdXJjZSk7XG5cdFx0Zm9yICh2YXIgcHJvcGVydHkgaW4gc291cmNlKSB7XG5cdFx0XHRpZiAocHJvdHlwZShzb3VyY2VbcHJvcGVydHldLCBPQkpFQ1QpKSB7XG5cdFx0XHRcdGRlbGV0ZSBzb3VyY2VbcHJvcGVydHldO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0dGFyZ2V0ID0gbG9vc2VuKHRhcmdldCk7XG5cdFx0Zm9yICh2YXIgX3Byb3BlcnR5IGluIHRhcmdldCkge1xuXHRcdFx0aWYgKHByb3R5cGUodGFyZ2V0W19wcm9wZXJ0eV0sIE9CSkVDVCkpIHtcblx0XHRcdFx0ZGVsZXRlIHRhcmdldFtfcHJvcGVydHldO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdFx0Lyo7XG5cdCBcdEBub3RlOlxuXHQgXHRcdENoZWNrcyBmb3IgdmFsdWUgZXF1YWxpdHkuXG5cdCBcdEBlbmQtbm90ZVxuXHQgKi9cblx0XHRmb3IgKHZhciBfcHJvcGVydHkyIGluIHNvdXJjZSkge1xuXHRcdFx0aWYgKHNvdXJjZVtfcHJvcGVydHkyXSAhPT0gdGFyZ2V0W19wcm9wZXJ0eTJdKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdC8qO1xuXHQgXHRAbm90ZTpcblx0IFx0XHRDaGVja3MgZm9yIGtleSBjb3VudCBlcXVhbGl0eS5cblx0IFx0QGVuZC1ub3RlXG5cdCAqL1xuXHRcdHJldHVybiBrb3VudChzb3VyY2UpID09PSBrb3VudCh0YXJnZXQpO1xuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBkZWVxdWFsO1xuXG5cbi8qKiovIH0sXG4vKiAxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdC8qO1xuXHRcdEBtb2R1bGUtbGljZW5zZTpcblx0XHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdFx0QG1pdC1saWNlbnNlXG5cdFxuXHRcdFx0Q29weXJpZ2h0IChAYykgMjAxNyBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cdFxuXHRcdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdFx0aW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuXHRcdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0XHRmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXHRcblx0XHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdFx0Y29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblx0XG5cdFx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0XHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0XHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdFx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0XHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0XHRTT0ZUV0FSRS5cblx0XHRAZW5kLW1vZHVsZS1saWNlbnNlXG5cdFxuXHRcdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHRcdHtcblx0XHRcdFx0XCJwYWNrYWdlXCI6IFwia291bnRcIixcblx0XHRcdFx0XCJwYXRoXCI6IFwia291bnQva291bnQuanNcIixcblx0XHRcdFx0XCJmaWxlXCI6IFwia291bnQuanNcIixcblx0XHRcdFx0XCJtb2R1bGVcIjogXCJrb3VudFwiLFxuXHRcdFx0XHRcImF1dGhvclwiOiBcIlJpY2hldmUgUy4gQmViZWRvclwiLFxuXHRcdFx0XHRcImNvbnRyaWJ1dG9yc1wiOiBbXG5cdFx0XHRcdFx0XCJKb2huIExlbm9uIE1hZ2hhbm95IDxqb2hubGVub25tYWdoYW5veUBnbWFpbC5jb20+XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJlTWFpbFwiOiBcInJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cIixcblx0XHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZvbGtvdmFzeXN0ZW1zL2tvdW50LmdpdFwiLFxuXHRcdFx0XHRcInRlc3RcIjogXCJrb3VudC10ZXN0LmpzXCIsXG5cdFx0XHRcdFwiZ2xvYmFsXCI6IHRydWVcblx0XHRcdH1cblx0XHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cdFxuXHRcdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRcdENvdW50IG9iamVjdCdzIGtleXMuXG5cdFxuXHRcdFx0VGhpcyB3aWxsIG9ubHkgY291bnQgb2JqZWN0J3Mgb3duZWQgZW51bWJlcmFibGUgcHJvcGVydGllcy5cblx0XHRAZW5kLW1vZHVsZS1kb2N1bWVudGF0aW9uXG5cdCovXG5cdFxuXHR2YXIgX2dldE93blByb3BlcnR5RGVzY3JpcHRvciA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX2dldE93blByb3BlcnR5RGVzY3JpcHRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IpO1xuXHRcblx0dmFyIF9nZXRPd25Qcm9wZXJ0eU5hbWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7XG5cdFxuXHR2YXIgX2dldE93blByb3BlcnR5TmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0T3duUHJvcGVydHlOYW1lcyk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0dmFyIGtvdW50ID0gZnVuY3Rpb24ga291bnQoZW50aXR5KSB7XG5cdFx0Lyo7XG5cdCBcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdCBcdFx0e1xuXHQgXHRcdFx0XCJlbnRpdHk6cmVxdWlyZWRcIjogXCJvYmplY3RcIlxuXHQgXHRcdH1cblx0IFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cblx0ICovXG5cdFxuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gKDAsIF9nZXRPd25Qcm9wZXJ0eU5hbWVzMi5kZWZhdWx0KShlbnRpdHkpLmZpbHRlcihmdW5jdGlvbiAocHJvcGVydHkpIHtcblx0XHRcdFx0cmV0dXJuICgwLCBfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yMi5kZWZhdWx0KShlbnRpdHksIHByb3BlcnR5KS5lbnVtZXJhYmxlO1xuXHRcdFx0fSkubGVuZ3RoO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGtvdW50O1xuXG5cbi8qKiovIH0sXG4vKiAyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IF9fd2VicGFja19yZXF1aXJlX18oMyksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuLyoqKi8gfSxcbi8qIDMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdHZhciAkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMikuT2JqZWN0O1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXtcblx0ICByZXR1cm4gJE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSk7XG5cdH07XG5cbi8qKiovIH0sXG4vKiA0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG5cdHZhciB0b0lPYmplY3QgICAgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KVxuXHQgICwgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IF9fd2VicGFja19yZXF1aXJlX18oOSkuZjtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oMjApKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbigpe1xuXHQgIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSl7XG5cdCAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuXHQgIH07XG5cdH0pO1xuXG4vKioqLyB9LFxuLyogNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG5cdHZhciBJT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KVxuXHQgICwgZGVmaW5lZCA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuXHQgIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5cdHZhciBjb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24oaXQpe1xuXHQgIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdHZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG5cdCAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuXHQgIGlmKGl0ID09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG5cdCAgcmV0dXJuIGl0O1xuXHR9O1xuXG4vKioqLyB9LFxuLyogOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIHBJRSAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMClcblx0ICAsIGNyZWF0ZURlc2MgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSlcblx0ICAsIHRvSU9iamVjdCAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KVxuXHQgICwgdG9QcmltaXRpdmUgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKVxuXHQgICwgaGFzICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KVxuXHQgICwgSUU4X0RPTV9ERUZJTkUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KVxuXHQgICwgZ09QRCAgICAgICAgICAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXHRcblx0ZXhwb3J0cy5mID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNikgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApe1xuXHQgIE8gPSB0b0lPYmplY3QoTyk7XG5cdCAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuXHQgIGlmKElFOF9ET01fREVGSU5FKXRyeSB7XG5cdCAgICByZXR1cm4gZ09QRChPLCBQKTtcblx0ICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG5cdCAgaWYoaGFzKE8sIFApKXJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDEwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqKi8gfSxcbi8qIDExICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGJpdG1hcCwgdmFsdWUpe1xuXHQgIHJldHVybiB7XG5cdCAgICBlbnVtZXJhYmxlICA6ICEoYml0bWFwICYgMSksXG5cdCAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG5cdCAgICB3cml0YWJsZSAgICA6ICEoYml0bWFwICYgNCksXG5cdCAgICB2YWx1ZSAgICAgICA6IHZhbHVlXG5cdCAgfTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDEyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcblx0dmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cdC8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG5cdC8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIFMpe1xuXHQgIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIGl0O1xuXHQgIHZhciBmbiwgdmFsO1xuXHQgIGlmKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcblx0ICBpZih0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG5cdCAgaWYoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcblx0ICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG5cdH07XG5cbi8qKiovIH0sXG4vKiAxMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG5cdCAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcblx0fTtcblxuLyoqKi8gfSxcbi8qIDE0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHR2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwga2V5KXtcblx0ICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDE1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9ICFfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXygxNykoZnVuY3Rpb24oKXtcblx0ICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19yZXF1aXJlX18oMTgpKCdkaXYnKSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNztcblx0fSk7XG5cbi8qKiovIH0sXG4vKiAxNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxuXHRtb2R1bGUuZXhwb3J0cyA9ICFfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KShmdW5jdGlvbigpe1xuXHQgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH19KS5hICE9IDc7XG5cdH0pO1xuXG4vKioqLyB9LFxuLyogMTcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYyl7XG5cdCAgdHJ5IHtcblx0ICAgIHJldHVybiAhIWV4ZWMoKTtcblx0ICB9IGNhdGNoKGUpe1xuXHQgICAgcmV0dXJuIHRydWU7XG5cdCAgfVxuXHR9O1xuXG4vKioqLyB9LFxuLyogMTggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpXG5cdCAgLCBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpLmRvY3VtZW50XG5cdCAgLy8gaW4gb2xkIElFIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnXG5cdCAgLCBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG5cdCAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDE5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxuXHR2YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcblx0ICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdGlmKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cbi8qKiovIH0sXG4vKiAyMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG5cdHZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSlcblx0ICAsIGNvcmUgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKVxuXHQgICwgZmFpbHMgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgZXhlYyl7XG5cdCAgdmFyIGZuICA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXVxuXHQgICAgLCBleHAgPSB7fTtcblx0ICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuXHQgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24oKXsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDIxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgZ2xvYmFsICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSlcblx0ICAsIGNvcmUgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjIpXG5cdCAgLCBjdHggICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKVxuXHQgICwgaGlkZSAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSlcblx0ICAsIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXHRcblx0dmFyICRleHBvcnQgPSBmdW5jdGlvbih0eXBlLCBuYW1lLCBzb3VyY2Upe1xuXHQgIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GXG5cdCAgICAsIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkdcblx0ICAgICwgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuU1xuXHQgICAgLCBJU19QUk9UTyAgPSB0eXBlICYgJGV4cG9ydC5QXG5cdCAgICAsIElTX0JJTkQgICA9IHR5cGUgJiAkZXhwb3J0LkJcblx0ICAgICwgSVNfV1JBUCAgID0gdHlwZSAmICRleHBvcnQuV1xuXHQgICAgLCBleHBvcnRzICAgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KVxuXHQgICAgLCBleHBQcm90byAgPSBleHBvcnRzW1BST1RPVFlQRV1cblx0ICAgICwgdGFyZ2V0ICAgID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXVxuXHQgICAgLCBrZXksIG93biwgb3V0O1xuXHQgIGlmKElTX0dMT0JBTClzb3VyY2UgPSBuYW1lO1xuXHQgIGZvcihrZXkgaW4gc291cmNlKXtcblx0ICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuXHQgICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcblx0ICAgIGlmKG93biAmJiBrZXkgaW4gZXhwb3J0cyljb250aW51ZTtcblx0ICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG5cdCAgICBvdXQgPSBvd24gPyB0YXJnZXRba2V5XSA6IHNvdXJjZVtrZXldO1xuXHQgICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG5cdCAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuXHQgICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcblx0ICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG5cdCAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuXHQgICAgOiBJU19XUkFQICYmIHRhcmdldFtrZXldID09IG91dCA/IChmdW5jdGlvbihDKXtcblx0ICAgICAgdmFyIEYgPSBmdW5jdGlvbihhLCBiLCBjKXtcblx0ICAgICAgICBpZih0aGlzIGluc3RhbmNlb2YgQyl7XG5cdCAgICAgICAgICBzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCl7XG5cdCAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDO1xuXHQgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQyhhKTtcblx0ICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEMoYSwgYik7XG5cdCAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcblx0ICAgICAgICB9IHJldHVybiBDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgIH07XG5cdCAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcblx0ICAgICAgcmV0dXJuIEY7XG5cdCAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcblx0ICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcblx0ICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5tZXRob2RzLiVOQU1FJVxuXHQgICAgaWYoSVNfUFJPVE8pe1xuXHQgICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7XG5cdCAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG5cdCAgICAgIGlmKHR5cGUgJiAkZXhwb3J0LlIgJiYgZXhwUHJvdG8gJiYgIWV4cFByb3RvW2tleV0paGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuXHQgICAgfVxuXHQgIH1cblx0fTtcblx0Ly8gdHlwZSBiaXRtYXBcblx0JGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcblx0JGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcblx0JGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcblx0JGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuXHQkZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcblx0JGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG5cdCRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuXHQkZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWAgXG5cdG1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcblxuLyoqKi8gfSxcbi8qIDIyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHR2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0ge3ZlcnNpb246ICcyLjQuMCd9O1xuXHRpZih0eXBlb2YgX19lID09ICdudW1iZXInKV9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuLyoqKi8gfSxcbi8qIDIzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcblx0dmFyIGFGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCB0aGF0LCBsZW5ndGgpe1xuXHQgIGFGdW5jdGlvbihmbik7XG5cdCAgaWYodGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjtcblx0ICBzd2l0Y2gobGVuZ3RoKXtcblx0ICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKGEpe1xuXHQgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcblx0ICAgIH07XG5cdCAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbihhLCBiKXtcblx0ICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG5cdCAgICB9O1xuXHQgICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24oYSwgYiwgYyl7XG5cdCAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuXHQgICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG5cdCAgfTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDI0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcblx0ICBpZih0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJyl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuXHQgIHJldHVybiBpdDtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDI1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgZFAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpXG5cdCAgLCBjcmVhdGVEZXNjID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNikgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuXHQgIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG5cdH0gOiBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuXHQgIG9iamVjdFtrZXldID0gdmFsdWU7XG5cdCAgcmV0dXJuIG9iamVjdDtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDI2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgYW5PYmplY3QgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KVxuXHQgICwgSUU4X0RPTV9ERUZJTkUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KVxuXHQgICwgdG9QcmltaXRpdmUgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKVxuXHQgICwgZFAgICAgICAgICAgICAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cdFxuXHRleHBvcnRzLmYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpe1xuXHQgIGFuT2JqZWN0KE8pO1xuXHQgIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcblx0ICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcblx0ICBpZihJRThfRE9NX0RFRklORSl0cnkge1xuXHQgICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuXHQgIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cblx0ICBpZignZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcblx0ICBpZigndmFsdWUnIGluIEF0dHJpYnV0ZXMpT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG5cdCAgcmV0dXJuIE87XG5cdH07XG5cbi8qKiovIH0sXG4vKiAyNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuXHQgIGlmKCFpc09iamVjdChpdCkpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuXHQgIHJldHVybiBpdDtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDI4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IF9fd2VicGFja19yZXF1aXJlX18oMjkpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cbi8qKiovIH0sXG4vKiAyOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0X193ZWJwYWNrX3JlcXVpcmVfXygzMCk7XG5cdHZhciAkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMikuT2JqZWN0O1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpe1xuXHQgIHJldHVybiAkT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaXQpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMzAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5cdF9fd2VicGFja19yZXF1aXJlX18oMjApKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24oKXtcblx0ICByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygzMSkuZjtcblx0fSk7XG5cbi8qKiovIH0sXG4vKiAzMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xuXHR2YXIgdG9JT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KVxuXHQgICwgZ09QTiAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMikuZlxuXHQgICwgdG9TdHJpbmcgID0ge30udG9TdHJpbmc7XG5cdFxuXHR2YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuXHQgID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXHRcblx0dmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24oaXQpe1xuXHQgIHRyeSB7XG5cdCAgICByZXR1cm4gZ09QTihpdCk7XG5cdCAgfSBjYXRjaChlKXtcblx0ICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuXHQgIH1cblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KXtcblx0ICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xuXHR9O1xuXG5cbi8qKiovIH0sXG4vKiAzMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuXHR2YXIgJGtleXMgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzMpXG5cdCAgLCBoaWRkZW5LZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSkuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cdFxuXHRleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pe1xuXHQgIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDMzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgaGFzICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNClcblx0ICAsIHRvSU9iamVjdCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNSlcblx0ICAsIGFycmF5SW5kZXhPZiA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpKGZhbHNlKVxuXHQgICwgSUVfUFJPVE8gICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOCkoJ0lFX1BST1RPJyk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgbmFtZXMpe1xuXHQgIHZhciBPICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KVxuXHQgICAgLCBpICAgICAgPSAwXG5cdCAgICAsIHJlc3VsdCA9IFtdXG5cdCAgICAsIGtleTtcblx0ICBmb3Ioa2V5IGluIE8paWYoa2V5ICE9IElFX1BST1RPKWhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG5cdCAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuXHQgIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpaWYoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKXtcblx0ICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG5cdCAgfVxuXHQgIHJldHVybiByZXN1bHQ7XG5cdH07XG5cbi8qKiovIH0sXG4vKiAzNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuXHQvLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xuXHR2YXIgdG9JT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KVxuXHQgICwgdG9MZW5ndGggID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNSlcblx0ICAsIHRvSW5kZXggICA9IF9fd2VicGFja19yZXF1aXJlX18oMzcpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKElTX0lOQ0xVREVTKXtcblx0ICByZXR1cm4gZnVuY3Rpb24oJHRoaXMsIGVsLCBmcm9tSW5kZXgpe1xuXHQgICAgdmFyIE8gICAgICA9IHRvSU9iamVjdCgkdGhpcylcblx0ICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcblx0ICAgICAgLCBpbmRleCAgPSB0b0luZGV4KGZyb21JbmRleCwgbGVuZ3RoKVxuXHQgICAgICAsIHZhbHVlO1xuXHQgICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuXHQgICAgaWYoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpd2hpbGUobGVuZ3RoID4gaW5kZXgpe1xuXHQgICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG5cdCAgICAgIGlmKHZhbHVlICE9IHZhbHVlKXJldHVybiB0cnVlO1xuXHQgICAgLy8gQXJyYXkjdG9JbmRleCBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuXHQgICAgfSBlbHNlIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTyl7XG5cdCAgICAgIGlmKE9baW5kZXhdID09PSBlbClyZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcblx0ICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcblx0ICB9O1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMzUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIDcuMS4xNSBUb0xlbmd0aFxuXHR2YXIgdG9JbnRlZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNilcblx0ICAsIG1pbiAgICAgICA9IE1hdGgubWluO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcblx0ICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxuXHR9O1xuXG4vKioqLyB9LFxuLyogMzYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8vIDcuMS40IFRvSW50ZWdlclxuXHR2YXIgY2VpbCAgPSBNYXRoLmNlaWxcblx0ICAsIGZsb29yID0gTWF0aC5mbG9vcjtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG5cdCAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG5cdH07XG5cbi8qKiovIH0sXG4vKiAzNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIHRvSW50ZWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpXG5cdCAgLCBtYXggICAgICAgPSBNYXRoLm1heFxuXHQgICwgbWluICAgICAgID0gTWF0aC5taW47XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaW5kZXgsIGxlbmd0aCl7XG5cdCAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuXHQgIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMzggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBzaGFyZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KSgna2V5cycpXG5cdCAgLCB1aWQgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKTtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuXHQgIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG5cdH07XG5cbi8qKiovIH0sXG4vKiAzOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpXG5cdCAgLCBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJ1xuXHQgICwgc3RvcmUgID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG5cdCAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7XG5cdH07XG5cbi8qKiovIH0sXG4vKiA0MCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0dmFyIGlkID0gMFxuXHQgICwgcHggPSBNYXRoLnJhbmRvbSgpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG5cdCAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDQxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5cdG1vZHVsZS5leHBvcnRzID0gKFxuXHQgICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG5cdCkuc3BsaXQoJywnKTtcblxuLyoqKi8gfSxcbi8qIDQyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdC8qO1xuXHRcdEBtb2R1bGUtbGljZW5zZTpcblx0XHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdFx0QG1pdC1saWNlbnNlXG5cdFxuXHRcdFx0Q29weXJpZ2h0IChAYykgMjAxNyBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cdFxuXHRcdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdFx0aW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuXHRcdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0XHRmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXHRcblx0XHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdFx0Y29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblx0XG5cdFx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0XHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0XHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdFx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0XHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0XHRTT0ZUV0FSRS5cblx0XHRAZW5kLW1vZHVsZS1saWNlbnNlXG5cdFxuXHRcdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHRcdHtcblx0XHRcdFx0XCJwYWNrYWdlXCI6IFwibG9vc2VuXCIsXG5cdFx0XHRcdFwicGF0aFwiOiBcImxvb3Nlbi9sb29zZW4uanNcIixcblx0XHRcdFx0XCJmaWxlXCI6IFwibG9vc2VuLmpzXCIsXG5cdFx0XHRcdFwibW9kdWxlXCI6IFwibG9vc2VuXCIsXG5cdFx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcdFwiY29udHJpYnV0b3JzXCI6IFtcblx0XHRcdFx0XHRcIkpvaG4gTGVub24gTWFnaGFub3kgPGpvaG5sZW5vbm1hZ2hhbm95QGdtYWlsLmNvbT5cIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XHRcInJlcG9zaXRvcnlcIjogXCJodHRwczovL2dpdGh1Yi5jb20vdm9sa292YXN5c3RlbXMvbG9vc2VuLmdpdFwiLFxuXHRcdFx0XHRcInRlc3RcIjogXCJsb29zZW4tdGVzdC5qc1wiLFxuXHRcdFx0XHRcImdsb2JhbFwiOiB0cnVlXG5cdFx0XHR9XG5cdFx0QGVuZC1tb2R1bGUtY29uZmlndXJhdGlvblxuXHRcblx0XHRAbW9kdWxlLWRvY3VtZW50YXRpb246XG5cdFx0XHRUcmFuc2Zvcm0gZGVlcCBvYmplY3QgaW50byBzaGFsbG93IG9iamVjdC5cblx0XHRAZW5kLW1vZHVsZS1kb2N1bWVudGF0aW9uXG5cdFxuXHRcdEBpbmNsdWRlOlxuXHRcdFx0e1xuXHRcdFx0XHRcImRvdWJ0XCI6IFwiZG91YnRcIixcblx0XHRcdFx0XCJoYXJkZW5cIjogXCJoYXJkZW5cIixcblx0XHRcdFx0XCJwcm90eXBlXCI6IFwicHJvdHlwZVwiLFxuXHRcdFx0XHRcInRydWx5XCI6IFwidHJ1bHlcIixcblx0XHRcdFx0XCJVMjAwYlwiOiBcInUyMDBiXCJcblx0XHRcdH1cblx0XHRAZW5kLWluY2x1ZGVcblx0Ki9cblx0XG5cdHZhciBfa2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpO1xuXHRcblx0dmFyIF9rZXlzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleXMpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciBkb3VidCA9IF9fd2VicGFja19yZXF1aXJlX18oNDgpO1xuXHR2YXIgaGFyZGVuID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NSk7XG5cdHZhciBwcm90eXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MCk7XG5cdHZhciB0cnVseSA9IF9fd2VicGFja19yZXF1aXJlX18oMTAwKTtcblx0dmFyIHRydXUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMSk7XG5cdHZhciBVMjAwYiA9IF9fd2VicGFja19yZXF1aXJlX18oMTA1KTtcblx0XG5cdHZhciBMT09TRU5FRCA9IFwibG9vc2VuZWRcIjtcblx0dmFyIFJFRkVSRU5DRV9QQVRURVJOID0gL15cXC4vO1xuXHR2YXIgQUNDVU1VTEFUT1JfUEFUVEVSTiA9IC9eXFwuLztcblx0XG5cdHZhciBsb29zZW4gPSBmdW5jdGlvbiBsb29zZW4oZW50aXR5LCBwYXRoLCBjYWNoZSkge1xuXHRcdC8qO1xuXHQgXHRAbWV0YS1jb25maWd1cmF0aW9uOlxuXHQgXHRcdHtcblx0IFx0XHRcdFwiZW50aXR5OnJlcXVpcmVkXCI6IFtcblx0IFx0XHRcdFx0QXJyYXksXG5cdCBcdFx0XHRcdFwib2JqZWN0XCJcblx0IFx0XHRcdF0sXG5cdCBcdFx0XHRcInBhdGhcIjogXCJzdHJpbmdcIixcblx0IFx0XHRcdFwiY2FjaGVcIjogXCJvYmplY3RcIlxuXHQgXHRcdH1cblx0IFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cblx0ICovXG5cdFxuXHRcdGlmICghcHJvdHlwZShlbnRpdHksIE9CSkVDVCkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZW50aXR5XCIpO1xuXHRcdH1cblx0XG5cdFx0aWYgKHRydWx5KHBhdGgpICYmICFwcm90eXBlKHBhdGgsIFNUUklORykpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImludmFsaWQgcGF0aFwiKTtcblx0XHR9XG5cdFxuXHRcdGlmICh0cnV1KGNhY2hlKSAmJiAhcHJvdHlwZShjYWNoZSwgT0JKRUNUKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjYWNoZVwiKTtcblx0XHR9XG5cdFxuXHRcdGVudGl0eSA9IGVudGl0eSB8fCB7fTtcblx0XG5cdFx0aWYgKGVudGl0eS5MT09TRU5FRCA9PT0gTE9PU0VORUQpIHtcblx0XHRcdHJldHVybiBlbnRpdHk7XG5cdFx0fVxuXHRcblx0XHRjYWNoZSA9IGNhY2hlIHx8IHt9O1xuXHRcblx0XHRwYXRoID0gcGF0aCB8fCBcIlwiO1xuXHRcblx0XHR2YXIgZWxlbWVudCA9IG51bGw7XG5cdFx0aWYgKGRvdWJ0KGVudGl0eSwgQVJSQVkpKSB7XG5cdFx0XHR2YXIga2V5ID0gXCJcIjtcblx0XG5cdFx0XHRmb3IgKHZhciBpbmRleCA9IDAsIGxlbmd0aCA9IGVudGl0eS5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0XHRcdGtleSA9IFUyMDBiKHBhdGgsIGluZGV4KS5qb2luKFwiLlwiKS5yZXBsYWNlKFJFRkVSRU5DRV9QQVRURVJOLCBcIlwiKTtcblx0XG5cdFx0XHRcdGVsZW1lbnQgPSBlbnRpdHlbaW5kZXhdO1xuXHRcblx0XHRcdFx0Y2FjaGVba2V5XSA9IGVsZW1lbnQ7XG5cdFxuXHRcdFx0XHRpZiAocHJvdHlwZShlbGVtZW50LCBPQkpFQ1QpKSB7XG5cdFx0XHRcdFx0bG9vc2VuKGVsZW1lbnQsIGtleSwgY2FjaGUpO1xuXHRcblx0XHRcdFx0XHRmb3IgKHZhciBwcm9wZXJ0eSBpbiBlbGVtZW50KSB7XG5cdFx0XHRcdFx0XHR2YXIgX2tleSA9IFUyMDBiKHBhdGgsIHByb3BlcnR5KS5qb2luKFwiLi4uXCIpLnJlcGxhY2UoQUNDVU1VTEFUT1JfUEFUVEVSTiwgXCJcIik7XG5cdFxuXHRcdFx0XHRcdFx0dmFyIGxpc3QgPSBjYWNoZVtfa2V5XSA9IGNhY2hlW19rZXldIHx8IFtdO1xuXHRcblx0XHRcdFx0XHRcdHZhciBkYXRhID0gZWxlbWVudFtwcm9wZXJ0eV07XG5cdFx0XHRcdFx0XHRsaXN0LnB1c2goZGF0YSk7XG5cdFxuXHRcdFx0XHRcdFx0aWYgKHByb3R5cGUoZGF0YSwgT0JKRUNUKSkge1xuXHRcdFx0XHRcdFx0XHRsb29zZW4oZGF0YSwgX2tleSwgY2FjaGUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAocHJvdHlwZShlbnRpdHksIE9CSkVDVCkpIHtcblx0XHRcdCgwLCBfa2V5czIuZGVmYXVsdCkoZW50aXR5KS5mb3JFYWNoKGZ1bmN0aW9uIG9uRWFjaEtleShrZXkpIHtcblx0XHRcdFx0ZWxlbWVudCA9IGVudGl0eVtrZXldO1xuXHRcblx0XHRcdFx0a2V5ID0gVTIwMGIocGF0aCwga2V5KS5qb2luKFwiLlwiKS5yZXBsYWNlKFJFRkVSRU5DRV9QQVRURVJOLCBcIlwiKTtcblx0XG5cdFx0XHRcdGNhY2hlW2tleV0gPSBlbGVtZW50O1xuXHRcblx0XHRcdFx0aWYgKHByb3R5cGUoZWxlbWVudCwgT0JKRUNUKSkge1xuXHRcdFx0XHRcdGxvb3NlbihlbGVtZW50LCBrZXksIGNhY2hlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcblx0XHRoYXJkZW4oXCJMT09TRU5FRFwiLCBMT09TRU5FRCwgY2FjaGUpO1xuXHRcblx0XHRyZXR1cm4gY2FjaGU7XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGxvb3NlbjtcblxuXG4vKioqLyB9LFxuLyogNDMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg0NCksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuLyoqKi8gfSxcbi8qIDQ0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1KTtcblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKS5PYmplY3Qua2V5cztcblxuLyoqKi8gfSxcbi8qIDQ1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcblx0dmFyIHRvT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nilcblx0ICAsICRrZXlzICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nyk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKSgna2V5cycsIGZ1bmN0aW9uKCl7XG5cdCAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpe1xuXHQgICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG5cdCAgfTtcblx0fSk7XG5cbi8qKiovIH0sXG4vKiA0NiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxuXHR2YXIgZGVmaW5lZCA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuXHQgIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogNDcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxuXHR2YXIgJGtleXMgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKVxuXHQgICwgZW51bUJ1Z0tleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKXtcblx0ICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogNDggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0Lyo7XG5cdFx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFx0VGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cdFx0XHRAbWl0LWxpY2Vuc2Vcblx0XG5cdFx0XHRDb3B5cmlnaHQgKEBjKSAyMDE3IFJpY2hldmUgU2lvZGluYSBCZWJlZG9yXG5cdFx0XHRAZW1haWw6IHJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cblx0XG5cdFx0XHRQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5cdFx0XHRvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5cdFx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0XHR0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5cdFx0XHRjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcblx0XHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cdFxuXHRcdFx0VGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5cdFx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXHRcblx0XHRcdFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcblx0XHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdFx0RklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5cdFx0XHRBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5cdFx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdFx0T1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblx0XHRcdFNPRlRXQVJFLlxuXHRcdEBlbmQtbW9kdWxlLWxpY2Vuc2Vcblx0XG5cdFx0QG1vZHVsZS1jb25maWd1cmF0aW9uOlxuXHRcdFx0e1xuXHRcdFx0XHRcInBhY2thZ2VcIjogXCJkb3VidFwiLFxuXHRcdFx0XHRcInBhdGhcIjogXCJkb3VidC9kb3VidC5qc1wiLFxuXHRcdFx0XHRcImZpbGVcIjogXCJkb3VidC5qc1wiLFxuXHRcdFx0XHRcIm1vZHVsZVwiOiBcImRvdWJ0XCIsXG5cdFx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcdFwiY29udHJpYnV0b3JzXCI6IFtcblx0XHRcdFx0XHRcIkpvaG4gTGVub24gTWFnaGFub3kgPGpvaG5sZW5vbm1hZ2hhbm95QGdtYWlsLmNvbT5cIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XHRcInJlcG9zaXRvcnlcIjogXCJodHRwczovL2dpdGh1Yi5jb20vdm9sa292YXN5c3RlbXMvZG91YnQuZ2l0XCIsXG5cdFx0XHRcdFwidGVzdFwiOiBcImRvdWJ0LXRlc3QuanNcIixcblx0XHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdFx0fVxuXHRcdEBlbmQtbW9kdWxlLWNvbmZpZ3VyYXRpb25cblx0XG5cdFx0QG1vZHVsZS1kb2N1bWVudGF0aW9uOlxuXHRcdFx0RmluYWxseSwgdGhlIG9uZSB0aGF0IHdpbGwgZml4IHlvdXIgZG91YnRzIGlmIGFycmF5IGlzIGFuIGFycmF5LFxuXHRcdFx0XHRhcmd1bWVudHMsIGl0ZXJhYmxlIG9yIGFycmF5LWxpa2UuXG5cdFx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXHRcblx0XHRAaW5jbHVkZTpcblx0XHRcdHtcblx0XHRcdFx0XCJjZW1lbnRvXCI6IFwiY2VtZW50b1wiLFxuXHRcdFx0XHRcImhhcmRlblwiOiBcImhhcmRlblwiLFxuXHRcdFx0XHRcInByb3R5cGVcIjogXCJwcm90eXBlXCJcblx0XHRcdH1cblx0XHRAZW5kLWluY2x1ZGVcblx0Ki9cblx0XG5cdHZhciBfaXRlcmF0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5KTtcblx0XG5cdHZhciBfaXRlcmF0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXRlcmF0b3IpO1xuXHRcblx0dmFyIF9zeW1ib2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5KTtcblx0XG5cdHZhciBfc3ltYm9sMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N5bWJvbCk7XG5cdFxuXHR2YXIgX2tleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzKTtcblx0XG5cdHZhciBfa2V5czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9rZXlzKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgY2VtZW50byA9IF9fd2VicGFja19yZXF1aXJlX18oODEpO1xuXHR2YXIgaGFyZGVuID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NSk7XG5cdHZhciBwcm90eXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MCk7XG5cdFxuXHQvLzogQHN1cHBvcnQtbW9kdWxlOlxuXHQvLzogQHJlZmVyZW5jZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvaXNBcnJheVxuXHRBcnJheS5pc0FycmF5IHx8IChBcnJheS5pc0FycmF5ID0gZnVuY3Rpb24gKHIpIHtcblx0XHRyZXR1cm4gXCJbb2JqZWN0IEFycmF5XVwiID09PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocik7XG5cdH0pO1xuXHQvLzogQGVuZC1zdXBwb3J0LW1vZHVsZVxuXHRcblx0aGFyZGVuKFwiQVJSQVlcIiwgXCJhcnJheVwiKTtcblx0aGFyZGVuKFwiQVNfQVJSQVlcIiwgXCJhcy1hcnJheVwiKTtcblx0aGFyZGVuKFwiQVJHVU1FTlRTXCIsIFwiYXJndW1lbnRzXCIpO1xuXHRoYXJkZW4oXCJBUlJBWV9MSUtFXCIsIFwiYXJyYXktbGlrZVwiKTtcblx0aGFyZGVuKFwiSVRFUkFCTEVcIiwgXCJpdGVyYWJsZVwiKTtcblx0XG5cdHZhciBkb3VidCA9IGZ1bmN0aW9uIGRvdWJ0KGFycmF5LCBjb25kaXRpb24pIHtcblx0XHQvKjtcblx0IFx0QG1ldGEtY29uZmlndXJhdGlvbjpcblx0IFx0XHR7XG5cdCBcdFx0XHRcImFycmF5OnJlcXVpcmVkXCI6IFtcblx0IFx0XHRcdFx0XCJbKl1cIixcblx0IFx0XHRcdFx0XCJBcnJheVwiLFxuXHQgXHRcdFx0XHRcIkFyZ3VtZW50c1wiXG5cdCBcdFx0XHRdLFxuXHQgXHRcdFx0XCJjb25kaXRpb25cIjogXCJzdHJpbmdcIlxuXHQgXHRcdH1cblx0IFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cblx0ICovXG5cdFxuXHRcdHZhciBjb25kaXRpb25UeXBlID0gcHJvdHlwZShjb25kaXRpb24pO1xuXHRcdGlmIChjb25kaXRpb25UeXBlLlNUUklORyAmJiBjb25kaXRpb24gIT0gQVJSQVkgJiYgY29uZGl0aW9uICE9IEFTX0FSUkFZICYmIGNvbmRpdGlvbiAhPSBBUkdVTUVOVFMgJiYgY29uZGl0aW9uICE9IEFSUkFZX0xJS0UgJiYgY29uZGl0aW9uICE9IElURVJBQkxFKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNvbmRpdGlvblwiKTtcblx0XHR9XG5cdFxuXHRcdGlmIChjb25kaXRpb25UeXBlLlNUUklORykge1xuXHRcdFx0dmFyIGFycmF5VHlwZSA9IHByb3R5cGUoYXJyYXkpO1xuXHRcdFx0aWYgKGFycmF5VHlwZS5TVFJJTkcgfHwgYXJyYXlUeXBlLk5VTUJFUiB8fCBhcnJheVR5cGUuQk9PTEVBTiB8fCBhcnJheVR5cGUuVU5ERUZJTkVEIHx8IGFycmF5VHlwZS5TWU1CT0wgfHwgYXJyYXkgPT09IG51bGwpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmIChjb25kaXRpb24gPT0gQVJSQVkpIHtcblx0XHRcdFx0cmV0dXJuIEFycmF5LmlzQXJyYXkoYXJyYXkpO1xuXHRcdFx0fSBlbHNlIGlmIChjb25kaXRpb24gPT0gQVNfQVJSQVkpIHtcblx0XHRcdFx0cmV0dXJuIGRvdWJ0KGFycmF5LCBBUlJBWSkgfHwgZG91YnQoYXJyYXksIEFSR1VNRU5UUykgfHwgZG91YnQoYXJyYXksIEFSUkFZX0xJS0UpIHx8IGRvdWJ0KGFycmF5LCBJVEVSQUJMRSk7XG5cdFx0XHR9IGVsc2UgaWYgKGNvbmRpdGlvbiA9PSBBUkdVTUVOVFMpIHtcblx0XHRcdFx0cmV0dXJuIHByb3R5cGUoYXJyYXkpLk9CSkVDVCAmJiAvQXJndW1lbnRzLy50ZXN0KGFycmF5LnRvU3RyaW5nKCkpO1xuXHRcdFx0fSBlbHNlIGlmIChjb25kaXRpb24gPT0gQVJSQVlfTElLRSkge1xuXHRcdFx0XHRyZXR1cm4gcHJvdHlwZShhcnJheS5sZW5ndGgsIE5VTUJFUikgJiYgISEoMCwgX2tleXMyLmRlZmF1bHQpKGFycmF5KS5sZW5ndGggJiYgKDAsIF9rZXlzMi5kZWZhdWx0KShhcnJheSkuc29tZShmdW5jdGlvbiBvbkVhY2hJbmRleChpbmRleCkge1xuXHRcdFx0XHRcdHJldHVybiBwcm90eXBlKGluZGV4LCBOVU1CRVIpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSBpZiAoY29uZGl0aW9uID09IElURVJBQkxFKSB7XG5cdFx0XHRcdHJldHVybiBwcm90eXBlKF9zeW1ib2wyLmRlZmF1bHQsIEZVTkNUSU9OKSAmJiBwcm90eXBlKF9pdGVyYXRvcjIuZGVmYXVsdCwgU1lNQk9MKSAmJiAhIWFycmF5W19pdGVyYXRvcjIuZGVmYXVsdF07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBjZW1lbnRvKHtcblx0XHRcdFx0XCJBUlJBWVwiOiBkb3VidChhcnJheSwgQVJSQVkpLFxuXHRcdFx0XHRcIkFTX0FSUkFZXCI6IGRvdWJ0KGFycmF5LCBBU19BUlJBWSksXG5cdFx0XHRcdFwiQVJHVU1FTlRTXCI6IGRvdWJ0KGFycmF5LCBBUkdVTUVOVFMpLFxuXHRcdFx0XHRcIkFSUkFZX0xJS0VcIjogZG91YnQoYXJyYXksIEFSUkFZX0xJS0UpLFxuXHRcdFx0XHRcIklURVJBQkxFXCI6IGRvdWJ0KGFycmF5LCBJVEVSQUJMRSlcblx0XHRcdH0pO1xuXHRcdH1cblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZG91YnQ7XG5cblxuLyoqKi8gfSxcbi8qIDQ5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IF9fd2VicGFja19yZXF1aXJlX18oNTApLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cbi8qKiovIH0sXG4vKiA1MCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0X193ZWJwYWNrX3JlcXVpcmVfXyg1MSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oNjQpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNjgpLmYoJ2l0ZXJhdG9yJyk7XG5cbi8qKiovIH0sXG4vKiA1MSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHR2YXIgJGF0ICA9IF9fd2VicGFja19yZXF1aXJlX18oNTIpKHRydWUpO1xuXHRcblx0Ly8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDUzKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbihpdGVyYXRlZCl7XG5cdCAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuXHQgIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG5cdC8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcblx0fSwgZnVuY3Rpb24oKXtcblx0ICB2YXIgTyAgICAgPSB0aGlzLl90XG5cdCAgICAsIGluZGV4ID0gdGhpcy5faVxuXHQgICAgLCBwb2ludDtcblx0ICBpZihpbmRleCA+PSBPLmxlbmd0aClyZXR1cm4ge3ZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWV9O1xuXHQgIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcblx0ICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcblx0ICByZXR1cm4ge3ZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2V9O1xuXHR9KTtcblxuLyoqKi8gfSxcbi8qIDUyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgdG9JbnRlZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNilcblx0ICAsIGRlZmluZWQgICA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdC8vIHRydWUgIC0+IFN0cmluZyNhdFxuXHQvLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUT19TVFJJTkcpe1xuXHQgIHJldHVybiBmdW5jdGlvbih0aGF0LCBwb3Mpe1xuXHQgICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSlcblx0ICAgICAgLCBpID0gdG9JbnRlZ2VyKHBvcylcblx0ICAgICAgLCBsID0gcy5sZW5ndGhcblx0ICAgICAgLCBhLCBiO1xuXHQgICAgaWYoaSA8IDAgfHwgaSA+PSBsKXJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcblx0ICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG5cdCAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuXHQgICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuXHQgICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcblx0ICB9O1xuXHR9O1xuXG4vKioqLyB9LFxuLyogNTMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0dmFyIExJQlJBUlkgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NClcblx0ICAsICRleHBvcnQgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSlcblx0ICAsIHJlZGVmaW5lICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NSlcblx0ICAsIGhpZGUgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSlcblx0ICAsIGhhcyAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNClcblx0ICAsIEl0ZXJhdG9ycyAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Nilcblx0ICAsICRpdGVyQ3JlYXRlICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Nylcblx0ICAsIHNldFRvU3RyaW5nVGFnID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MSlcblx0ICAsIGdldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Mylcblx0ICAsIElURVJBVE9SICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MikoJ2l0ZXJhdG9yJylcblx0ICAsIEJVR0dZICAgICAgICAgID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpIC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcblx0ICAsIEZGX0lURVJBVE9SICAgID0gJ0BAaXRlcmF0b3InXG5cdCAgLCBLRVlTICAgICAgICAgICA9ICdrZXlzJ1xuXHQgICwgVkFMVUVTICAgICAgICAgPSAndmFsdWVzJztcblx0XG5cdHZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCl7XG5cdCAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuXHQgIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbihraW5kKXtcblx0ICAgIGlmKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKXJldHVybiBwcm90b1traW5kXTtcblx0ICAgIHN3aXRjaChraW5kKXtcblx0ICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuXHQgICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuXHQgICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuXHQgIH07XG5cdCAgdmFyIFRBRyAgICAgICAgPSBOQU1FICsgJyBJdGVyYXRvcidcblx0ICAgICwgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTXG5cdCAgICAsIFZBTFVFU19CVUcgPSBmYWxzZVxuXHQgICAgLCBwcm90byAgICAgID0gQmFzZS5wcm90b3R5cGVcblx0ICAgICwgJG5hdGl2ZSAgICA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXVxuXHQgICAgLCAkZGVmYXVsdCAgID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVClcblx0ICAgICwgJGVudHJpZXMgICA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWRcblx0ICAgICwgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmVcblx0ICAgICwgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcblx0ICAvLyBGaXggbmF0aXZlXG5cdCAgaWYoJGFueU5hdGl2ZSl7XG5cdCAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSkpO1xuXHQgICAgaWYoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpe1xuXHQgICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG5cdCAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuXHQgICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcblx0ICAgICAgaWYoIUxJQlJBUlkgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKWhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuXHQgIGlmKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUyl7XG5cdCAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcblx0ICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG5cdCAgfVxuXHQgIC8vIERlZmluZSBpdGVyYXRvclxuXHQgIGlmKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKXtcblx0ICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG5cdCAgfVxuXHQgIC8vIFBsdWcgZm9yIGxpYnJhcnlcblx0ICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcblx0ICBJdGVyYXRvcnNbVEFHXSAgPSByZXR1cm5UaGlzO1xuXHQgIGlmKERFRkFVTFQpe1xuXHQgICAgbWV0aG9kcyA9IHtcblx0ICAgICAgdmFsdWVzOiAgREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG5cdCAgICAgIGtleXM6ICAgIElTX1NFVCAgICAgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcblx0ICAgICAgZW50cmllczogJGVudHJpZXNcblx0ICAgIH07XG5cdCAgICBpZihGT1JDRUQpZm9yKGtleSBpbiBtZXRob2RzKXtcblx0ICAgICAgaWYoIShrZXkgaW4gcHJvdG8pKXJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG5cdCAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuXHQgIH1cblx0ICByZXR1cm4gbWV0aG9kcztcblx0fTtcblxuLyoqKi8gfSxcbi8qIDU0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHRydWU7XG5cbi8qKiovIH0sXG4vKiA1NSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1KTtcblxuLyoqKi8gfSxcbi8qIDU2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vKioqLyB9LFxuLyogNTcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0dmFyIGNyZWF0ZSAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1OClcblx0ICAsIGRlc2NyaXB0b3IgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSlcblx0ICAsIHNldFRvU3RyaW5nVGFnID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MSlcblx0ICAsIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cdFxuXHQvLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDI1KShJdGVyYXRvclByb3RvdHlwZSwgX193ZWJwYWNrX3JlcXVpcmVfXyg2MikoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9KTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpe1xuXHQgIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwge25leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCl9KTtcblx0ICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDU4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcblx0dmFyIGFuT2JqZWN0ICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNylcblx0ICAsIGRQcyAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1OSlcblx0ICAsIGVudW1CdWdLZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSlcblx0ICAsIElFX1BST1RPICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOCkoJ0lFX1BST1RPJylcblx0ICAsIEVtcHR5ICAgICAgID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfVxuXHQgICwgUFJPVE9UWVBFICAgPSAncHJvdG90eXBlJztcblx0XG5cdC8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcblx0dmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbigpe1xuXHQgIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG5cdCAgdmFyIGlmcmFtZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpKCdpZnJhbWUnKVxuXHQgICAgLCBpICAgICAgPSBlbnVtQnVnS2V5cy5sZW5ndGhcblx0ICAgICwgbHQgICAgID0gJzwnXG5cdCAgICAsIGd0ICAgICA9ICc+J1xuXHQgICAgLCBpZnJhbWVEb2N1bWVudDtcblx0ICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0ICBfX3dlYnBhY2tfcmVxdWlyZV9fKDYwKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuXHQgIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcblx0ICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuXHQgIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcblx0ICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuXHQgIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcblx0ICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG5cdCAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcblx0ICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcblx0ICB3aGlsZShpLS0pZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG5cdCAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcyl7XG5cdCAgdmFyIHJlc3VsdDtcblx0ICBpZihPICE9PSBudWxsKXtcblx0ICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcblx0ICAgIHJlc3VsdCA9IG5ldyBFbXB0eTtcblx0ICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuXHQgICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuXHQgICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG5cdCAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcblx0ICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG5cdH07XG5cblxuLyoqKi8gfSxcbi8qIDU5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgZFAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KVxuXHQgICwgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KVxuXHQgICwgZ2V0S2V5cyAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3KTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNikgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcyl7XG5cdCAgYW5PYmplY3QoTyk7XG5cdCAgdmFyIGtleXMgICA9IGdldEtleXMoUHJvcGVydGllcylcblx0ICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcblx0ICAgICwgaSA9IDBcblx0ICAgICwgUDtcblx0ICB3aGlsZShsZW5ndGggPiBpKWRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG5cdCAgcmV0dXJuIE87XG5cdH07XG5cbi8qKiovIH0sXG4vKiA2MCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KS5kb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbi8qKiovIH0sXG4vKiA2MSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGRlZiA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpLmZcblx0ICAsIGhhcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpXG5cdCAgLCBUQUcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYyKSgndG9TdHJpbmdUYWcnKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIHRhZywgc3RhdCl7XG5cdCAgaWYoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSlkZWYoaXQsIFRBRywge2NvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZ30pO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogNjIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBzdG9yZSAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSkoJ3drcycpXG5cdCAgLCB1aWQgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MClcblx0ICAsIFN5bWJvbCAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KS5TeW1ib2xcblx0ICAsIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cdFxuXHR2YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpe1xuXHQgIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuXHQgICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcblx0fTtcblx0XG5cdCRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG5cbi8qKiovIH0sXG4vKiA2MyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcblx0dmFyIGhhcyAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNClcblx0ICAsIHRvT2JqZWN0ICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nilcblx0ICAsIElFX1BST1RPICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOCkoJ0lFX1BST1RPJylcblx0ICAsIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uKE8pe1xuXHQgIE8gPSB0b09iamVjdChPKTtcblx0ICBpZihoYXMoTywgSUVfUFJPVE8pKXJldHVybiBPW0lFX1BST1RPXTtcblx0ICBpZih0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKXtcblx0ICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblx0ICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogNjQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdF9fd2VicGFja19yZXF1aXJlX18oNjUpO1xuXHR2YXIgZ2xvYmFsICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpXG5cdCAgLCBoaWRlICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSlcblx0ICAsIEl0ZXJhdG9ycyAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU2KVxuXHQgICwgVE9fU1RSSU5HX1RBRyA9IF9fd2VicGFja19yZXF1aXJlX18oNjIpKCd0b1N0cmluZ1RhZycpO1xuXHRcblx0Zm9yKHZhciBjb2xsZWN0aW9ucyA9IFsnTm9kZUxpc3QnLCAnRE9NVG9rZW5MaXN0JywgJ01lZGlhTGlzdCcsICdTdHlsZVNoZWV0TGlzdCcsICdDU1NSdWxlTGlzdCddLCBpID0gMDsgaSA8IDU7IGkrKyl7XG5cdCAgdmFyIE5BTUUgICAgICAgPSBjb2xsZWN0aW9uc1tpXVxuXHQgICAgLCBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdXG5cdCAgICAsIHByb3RvICAgICAgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuXHQgIGlmKHByb3RvICYmICFwcm90b1tUT19TVFJJTkdfVEFHXSloaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcblx0ICBJdGVyYXRvcnNbTkFNRV0gPSBJdGVyYXRvcnMuQXJyYXk7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDY1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdHZhciBhZGRUb1Vuc2NvcGFibGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Nilcblx0ICAsIHN0ZXAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY3KVxuXHQgICwgSXRlcmF0b3JzICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNTYpXG5cdCAgLCB0b0lPYmplY3QgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0XG5cdC8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcblx0Ly8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcblx0Ly8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuXHQvLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUzKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24oaXRlcmF0ZWQsIGtpbmQpe1xuXHQgIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcblx0ICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuXHQgIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG5cdC8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxuXHR9LCBmdW5jdGlvbigpe1xuXHQgIHZhciBPICAgICA9IHRoaXMuX3Rcblx0ICAgICwga2luZCAgPSB0aGlzLl9rXG5cdCAgICAsIGluZGV4ID0gdGhpcy5faSsrO1xuXHQgIGlmKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKXtcblx0ICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG5cdCAgICByZXR1cm4gc3RlcCgxKTtcblx0ICB9XG5cdCAgaWYoa2luZCA9PSAna2V5cycgIClyZXR1cm4gc3RlcCgwLCBpbmRleCk7XG5cdCAgaWYoa2luZCA9PSAndmFsdWVzJylyZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG5cdCAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xuXHR9LCAndmFsdWVzJyk7XG5cdFxuXHQvLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5cdEl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cdFxuXHRhZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5cdGFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuXHRhZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG5cbi8qKiovIH0sXG4vKiA2NiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9O1xuXG4vKioqLyB9LFxuLyogNjcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZG9uZSwgdmFsdWUpe1xuXHQgIHJldHVybiB7dmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmV9O1xuXHR9O1xuXG4vKioqLyB9LFxuLyogNjggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdGV4cG9ydHMuZiA9IF9fd2VicGFja19yZXF1aXJlX18oNjIpO1xuXG4vKioqLyB9LFxuLyogNjkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg3MCksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuLyoqKi8gfSxcbi8qIDcwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDcxKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg3OCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oNzkpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDgwKTtcblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKS5TeW1ib2w7XG5cbi8qKiovIH0sXG4vKiA3MSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHQvLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG5cdHZhciBnbG9iYWwgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpXG5cdCAgLCBoYXMgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpXG5cdCAgLCBERVNDUklQVE9SUyAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpXG5cdCAgLCAkZXhwb3J0ICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpXG5cdCAgLCByZWRlZmluZSAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNTUpXG5cdCAgLCBNRVRBICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNzIpLktFWVxuXHQgICwgJGZhaWxzICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KVxuXHQgICwgc2hhcmVkICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KVxuXHQgICwgc2V0VG9TdHJpbmdUYWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYxKVxuXHQgICwgdWlkICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKVxuXHQgICwgd2tzICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYyKVxuXHQgICwgd2tzRXh0ICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY4KVxuXHQgICwgd2tzRGVmaW5lICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDczKVxuXHQgICwga2V5T2YgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0KVxuXHQgICwgZW51bUtleXMgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc1KVxuXHQgICwgaXNBcnJheSAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc3KVxuXHQgICwgYW5PYmplY3QgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KVxuXHQgICwgdG9JT2JqZWN0ICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpXG5cdCAgLCB0b1ByaW1pdGl2ZSAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpXG5cdCAgLCBjcmVhdGVEZXNjICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpXG5cdCAgLCBfY3JlYXRlICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNTgpXG5cdCAgLCBnT1BORXh0ICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzEpXG5cdCAgLCAkR09QRCAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOSlcblx0ICAsICREUCAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNilcblx0ICAsICRrZXlzICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nylcblx0ICAsIGdPUEQgICAgICAgICAgID0gJEdPUEQuZlxuXHQgICwgZFAgICAgICAgICAgICAgPSAkRFAuZlxuXHQgICwgZ09QTiAgICAgICAgICAgPSBnT1BORXh0LmZcblx0ICAsICRTeW1ib2wgICAgICAgID0gZ2xvYmFsLlN5bWJvbFxuXHQgICwgJEpTT04gICAgICAgICAgPSBnbG9iYWwuSlNPTlxuXHQgICwgX3N0cmluZ2lmeSAgICAgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnlcblx0ICAsIFBST1RPVFlQRSAgICAgID0gJ3Byb3RvdHlwZSdcblx0ICAsIEhJRERFTiAgICAgICAgID0gd2tzKCdfaGlkZGVuJylcblx0ICAsIFRPX1BSSU1JVElWRSAgID0gd2tzKCd0b1ByaW1pdGl2ZScpXG5cdCAgLCBpc0VudW0gICAgICAgICA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlXG5cdCAgLCBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jylcblx0ICAsIEFsbFN5bWJvbHMgICAgID0gc2hhcmVkKCdzeW1ib2xzJylcblx0ICAsIE9QU3ltYm9scyAgICAgID0gc2hhcmVkKCdvcC1zeW1ib2xzJylcblx0ICAsIE9iamVjdFByb3RvICAgID0gT2JqZWN0W1BST1RPVFlQRV1cblx0ICAsIFVTRV9OQVRJVkUgICAgID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJ1xuXHQgICwgUU9iamVjdCAgICAgICAgPSBnbG9iYWwuUU9iamVjdDtcblx0Ly8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG5cdHZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXHRcblx0Ly8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG5cdHZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uKCl7XG5cdCAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuXHQgICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7dmFsdWU6IDd9KS5hOyB9XG5cdCAgfSkpLmEgIT0gNztcblx0fSkgPyBmdW5jdGlvbihpdCwga2V5LCBEKXtcblx0ICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcblx0ICBpZihwcm90b0Rlc2MpZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG5cdCAgZFAoaXQsIGtleSwgRCk7XG5cdCAgaWYocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bylkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xuXHR9IDogZFA7XG5cdFxuXHR2YXIgd3JhcCA9IGZ1bmN0aW9uKHRhZyl7XG5cdCAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcblx0ICBzeW0uX2sgPSB0YWc7XG5cdCAgcmV0dXJuIHN5bTtcblx0fTtcblx0XG5cdHZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbihpdCl7XG5cdCAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcblx0fSA6IGZ1bmN0aW9uKGl0KXtcblx0ICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xuXHR9O1xuXHRcblx0dmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpe1xuXHQgIGlmKGl0ID09PSBPYmplY3RQcm90bykkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuXHQgIGFuT2JqZWN0KGl0KTtcblx0ICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuXHQgIGFuT2JqZWN0KEQpO1xuXHQgIGlmKGhhcyhBbGxTeW1ib2xzLCBrZXkpKXtcblx0ICAgIGlmKCFELmVudW1lcmFibGUpe1xuXHQgICAgICBpZighaGFzKGl0LCBISURERU4pKWRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcblx0ICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGlmKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0paXRbSElEREVOXVtrZXldID0gZmFsc2U7XG5cdCAgICAgIEQgPSBfY3JlYXRlKEQsIHtlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKX0pO1xuXHQgICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcblx0ICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcblx0fTtcblx0dmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCl7XG5cdCAgYW5PYmplY3QoaXQpO1xuXHQgIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSlcblx0ICAgICwgaSAgICA9IDBcblx0ICAgICwgbCA9IGtleXMubGVuZ3RoXG5cdCAgICAsIGtleTtcblx0ICB3aGlsZShsID4gaSkkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcblx0ICByZXR1cm4gaXQ7XG5cdH07XG5cdHZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKXtcblx0ICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG5cdH07XG5cdHZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpe1xuXHQgIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG5cdCAgaWYodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpcmV0dXJuIGZhbHNlO1xuXHQgIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcblx0fTtcblx0dmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSl7XG5cdCAgaXQgID0gdG9JT2JqZWN0KGl0KTtcblx0ICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuXHQgIGlmKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSlyZXR1cm47XG5cdCAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuXHQgIGlmKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSlELmVudW1lcmFibGUgPSB0cnVlO1xuXHQgIHJldHVybiBEO1xuXHR9O1xuXHR2YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KXtcblx0ICB2YXIgbmFtZXMgID0gZ09QTih0b0lPYmplY3QoaXQpKVxuXHQgICAgLCByZXN1bHQgPSBbXVxuXHQgICAgLCBpICAgICAgPSAwXG5cdCAgICAsIGtleTtcblx0ICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKXtcblx0ICAgIGlmKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSlyZXN1bHQucHVzaChrZXkpO1xuXHQgIH0gcmV0dXJuIHJlc3VsdDtcblx0fTtcblx0dmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpe1xuXHQgIHZhciBJU19PUCAgPSBpdCA9PT0gT2JqZWN0UHJvdG9cblx0ICAgICwgbmFtZXMgID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpXG5cdCAgICAsIHJlc3VsdCA9IFtdXG5cdCAgICAsIGkgICAgICA9IDBcblx0ICAgICwga2V5O1xuXHQgIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpe1xuXHQgICAgaWYoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKXJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG5cdCAgfSByZXR1cm4gcmVzdWx0O1xuXHR9O1xuXHRcblx0Ly8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5cdGlmKCFVU0VfTkFUSVZFKXtcblx0ICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCl7XG5cdCAgICBpZih0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCl0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcblx0ICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuXHQgICAgdmFyICRzZXQgPSBmdW5jdGlvbih2YWx1ZSl7XG5cdCAgICAgIGlmKHRoaXMgPT09IE9iamVjdFByb3RvKSRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcblx0ICAgICAgaWYoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSl0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuXHQgICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuXHQgICAgfTtcblx0ICAgIGlmKERFU0NSSVBUT1JTICYmIHNldHRlcilzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHtjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldH0pO1xuXHQgICAgcmV0dXJuIHdyYXAodGFnKTtcblx0ICB9O1xuXHQgIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKXtcblx0ICAgIHJldHVybiB0aGlzLl9rO1xuXHQgIH0pO1xuXHRcblx0ICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblx0ICAkRFAuZiAgID0gJGRlZmluZVByb3BlcnR5O1xuXHQgIF9fd2VicGFja19yZXF1aXJlX18oMzIpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcblx0ICBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKS5mICA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcblx0ICBfX3dlYnBhY2tfcmVxdWlyZV9fKDc2KS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblx0XG5cdCAgaWYoREVTQ1JJUFRPUlMgJiYgIV9fd2VicGFja19yZXF1aXJlX18oNTQpKXtcblx0ICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuXHQgIH1cblx0XG5cdCAgd2tzRXh0LmYgPSBmdW5jdGlvbihuYW1lKXtcblx0ICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG5cdCAgfVxuXHR9XG5cdFxuXHQkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7U3ltYm9sOiAkU3ltYm9sfSk7XG5cdFxuXHRmb3IodmFyIHN5bWJvbHMgPSAoXG5cdCAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcblx0ICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG5cdCkuc3BsaXQoJywnKSwgaSA9IDA7IHN5bWJvbHMubGVuZ3RoID4gaTsgKXdrcyhzeW1ib2xzW2krK10pO1xuXHRcblx0Zm9yKHZhciBzeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgaSA9IDA7IHN5bWJvbHMubGVuZ3RoID4gaTsgKXdrc0RlZmluZShzeW1ib2xzW2krK10pO1xuXHRcblx0JGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcblx0ICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcblx0ICAnZm9yJzogZnVuY3Rpb24oa2V5KXtcblx0ICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcblx0ICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG5cdCAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcblx0ICB9LFxuXHQgIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuXHQgIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKGtleSl7XG5cdCAgICBpZihpc1N5bWJvbChrZXkpKXJldHVybiBrZXlPZihTeW1ib2xSZWdpc3RyeSwga2V5KTtcblx0ICAgIHRocm93IFR5cGVFcnJvcihrZXkgKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcblx0ICB9LFxuXHQgIHVzZVNldHRlcjogZnVuY3Rpb24oKXsgc2V0dGVyID0gdHJ1ZTsgfSxcblx0ICB1c2VTaW1wbGU6IGZ1bmN0aW9uKCl7IHNldHRlciA9IGZhbHNlOyB9XG5cdH0pO1xuXHRcblx0JGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcblx0ICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG5cdCAgY3JlYXRlOiAkY3JlYXRlLFxuXHQgIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuXHQgIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG5cdCAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcblx0ICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcblx0ICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG5cdCAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuXHQgIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5cdCAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG5cdCAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuXHQgIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xuXHR9KTtcblx0XG5cdC8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuXHQkSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24oKXtcblx0ICB2YXIgUyA9ICRTeW1ib2woKTtcblx0ICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuXHQgIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuXHQgIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG5cdCAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHthOiBTfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcblx0fSkpLCAnSlNPTicsIHtcblx0ICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCl7XG5cdCAgICBpZihpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSlyZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcblx0ICAgIHZhciBhcmdzID0gW2l0XVxuXHQgICAgICAsIGkgICAgPSAxXG5cdCAgICAgICwgcmVwbGFjZXIsICRyZXBsYWNlcjtcblx0ICAgIHdoaWxlKGFyZ3VtZW50cy5sZW5ndGggPiBpKWFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG5cdCAgICByZXBsYWNlciA9IGFyZ3NbMV07XG5cdCAgICBpZih0eXBlb2YgcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykkcmVwbGFjZXIgPSByZXBsYWNlcjtcblx0ICAgIGlmKCRyZXBsYWNlciB8fCAhaXNBcnJheShyZXBsYWNlcikpcmVwbGFjZXIgPSBmdW5jdGlvbihrZXksIHZhbHVlKXtcblx0ICAgICAgaWYoJHJlcGxhY2VyKXZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG5cdCAgICAgIGlmKCFpc1N5bWJvbCh2YWx1ZSkpcmV0dXJuIHZhbHVlO1xuXHQgICAgfTtcblx0ICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcblx0ICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcblx0ICB9XG5cdH0pO1xuXHRcblx0Ly8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuXHQkU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1KSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuXHQvLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5cdHNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcblx0Ly8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuXHRzZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuXHQvLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuXHRzZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcblxuLyoqKi8gfSxcbi8qIDcyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgTUVUQSAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKSgnbWV0YScpXG5cdCAgLCBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpXG5cdCAgLCBoYXMgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpXG5cdCAgLCBzZXREZXNjICA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpLmZcblx0ICAsIGlkICAgICAgID0gMDtcblx0dmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24oKXtcblx0ICByZXR1cm4gdHJ1ZTtcblx0fTtcblx0dmFyIEZSRUVaRSA9ICFfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KShmdW5jdGlvbigpe1xuXHQgIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG5cdH0pO1xuXHR2YXIgc2V0TWV0YSA9IGZ1bmN0aW9uKGl0KXtcblx0ICBzZXREZXNjKGl0LCBNRVRBLCB7dmFsdWU6IHtcblx0ICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuXHQgICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcblx0ICB9fSk7XG5cdH07XG5cdHZhciBmYXN0S2V5ID0gZnVuY3Rpb24oaXQsIGNyZWF0ZSl7XG5cdCAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuXHQgIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcblx0ICBpZighaGFzKGl0LCBNRVRBKSl7XG5cdCAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuXHQgICAgaWYoIWlzRXh0ZW5zaWJsZShpdCkpcmV0dXJuICdGJztcblx0ICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG5cdCAgICBpZighY3JlYXRlKXJldHVybiAnRSc7XG5cdCAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuXHQgICAgc2V0TWV0YShpdCk7XG5cdCAgLy8gcmV0dXJuIG9iamVjdCBJRFxuXHQgIH0gcmV0dXJuIGl0W01FVEFdLmk7XG5cdH07XG5cdHZhciBnZXRXZWFrID0gZnVuY3Rpb24oaXQsIGNyZWF0ZSl7XG5cdCAgaWYoIWhhcyhpdCwgTUVUQSkpe1xuXHQgICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3Rcblx0ICAgIGlmKCFpc0V4dGVuc2libGUoaXQpKXJldHVybiB0cnVlO1xuXHQgICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcblx0ICAgIGlmKCFjcmVhdGUpcmV0dXJuIGZhbHNlO1xuXHQgICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcblx0ICAgIHNldE1ldGEoaXQpO1xuXHQgIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG5cdCAgfSByZXR1cm4gaXRbTUVUQV0udztcblx0fTtcblx0Ly8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG5cdHZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uKGl0KXtcblx0ICBpZihGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpc2V0TWV0YShpdCk7XG5cdCAgcmV0dXJuIGl0O1xuXHR9O1xuXHR2YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuXHQgIEtFWTogICAgICBNRVRBLFxuXHQgIE5FRUQ6ICAgICBmYWxzZSxcblx0ICBmYXN0S2V5OiAgZmFzdEtleSxcblx0ICBnZXRXZWFrOiAgZ2V0V2Vhayxcblx0ICBvbkZyZWV6ZTogb25GcmVlemVcblx0fTtcblxuLyoqKi8gfSxcbi8qIDczICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgZ2xvYmFsICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KVxuXHQgICwgY29yZSAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKVxuXHQgICwgTElCUkFSWSAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU0KVxuXHQgICwgd2tzRXh0ICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY4KVxuXHQgICwgZGVmaW5lUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KS5mO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpe1xuXHQgIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG5cdCAgaWYobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSlkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7dmFsdWU6IHdrc0V4dC5mKG5hbWUpfSk7XG5cdH07XG5cbi8qKiovIH0sXG4vKiA3NCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGdldEtleXMgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDcpXG5cdCAgLCB0b0lPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgZWwpe1xuXHQgIHZhciBPICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KVxuXHQgICAgLCBrZXlzICAgPSBnZXRLZXlzKE8pXG5cdCAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG5cdCAgICAsIGluZGV4ICA9IDBcblx0ICAgICwga2V5O1xuXHQgIHdoaWxlKGxlbmd0aCA+IGluZGV4KWlmKE9ba2V5ID0ga2V5c1tpbmRleCsrXV0gPT09IGVsKXJldHVybiBrZXk7XG5cdH07XG5cbi8qKiovIH0sXG4vKiA3NSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcblx0dmFyIGdldEtleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3KVxuXHQgICwgZ09QUyAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNzYpXG5cdCAgLCBwSUUgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuXHQgIHZhciByZXN1bHQgICAgID0gZ2V0S2V5cyhpdClcblx0ICAgICwgZ2V0U3ltYm9scyA9IGdPUFMuZjtcblx0ICBpZihnZXRTeW1ib2xzKXtcblx0ICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdClcblx0ICAgICAgLCBpc0VudW0gID0gcElFLmZcblx0ICAgICAgLCBpICAgICAgID0gMFxuXHQgICAgICAsIGtleTtcblx0ICAgIHdoaWxlKHN5bWJvbHMubGVuZ3RoID4gaSlpZihpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSlyZXN1bHQucHVzaChrZXkpO1xuXHQgIH0gcmV0dXJuIHJlc3VsdDtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDc2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKioqLyB9LFxuLyogNzcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG5cdHZhciBjb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpe1xuXHQgIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogNzggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cblxuLyoqKi8gfSxcbi8qIDc5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDczKSgnYXN5bmNJdGVyYXRvcicpO1xuXG4vKioqLyB9LFxuLyogODAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdF9fd2VicGFja19yZXF1aXJlX18oNzMpKCdvYnNlcnZhYmxlJyk7XG5cbi8qKiovIH0sXG4vKiA4MSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHQvKjtcblx0XHRAbW9kdWxlLWxpY2Vuc2U6XG5cdFx0XHRUaGUgTUlUIExpY2Vuc2UgKE1JVClcblx0XHRcdEBtaXQtbGljZW5zZVxuXHRcblx0XHRcdENvcHlyaWdodCAoQGMpIDIwMTcgUmljaGV2ZSBTaW9kaW5hIEJlYmVkb3Jcblx0XHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXHRcblx0XHRcdFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcblx0XHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRcdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0XHRcdHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcblx0XHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdFx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblx0XG5cdFx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRcdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cdFxuXHRcdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdFx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdFx0XHRGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcblx0XHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRcdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdFx0XHRPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuXHRcdFx0U09GVFdBUkUuXG5cdFx0QGVuZC1tb2R1bGUtbGljZW5zZVxuXHRcblx0XHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0XHR7XG5cdFx0XHRcdFwicGFja2FnZVwiOiBcImNlbWVudG9cIixcblx0XHRcdFx0XCJwYXRoXCI6IFwiY2VtZW50by9jZW1lbnRvLmpzXCIsXG5cdFx0XHRcdFwiZmlsZVwiOiBcImNlbWVudG8uanNcIixcblx0XHRcdFx0XCJtb2R1bGVcIjogXCJjZW1lbnRvXCIsXG5cdFx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcdFwiY29udHJpYnV0b3JzXCI6IFtcblx0XHRcdFx0XHRcIkpvaG4gTGVub24gTWFnaGFub3kgPGpvaG5sZW5vbm1hZ2hhbm95QGdtYWlsLmNvbT5cIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XHRcInJlcG9zaXRvcnlcIjogXCJodHRwczovL2dpdGh1Yi5jb20vdm9sa292YXN5c3RlbXMvY2VtZW50by5naXRcIixcblx0XHRcdFx0XCJ0ZXN0XCI6IFwiY2VtZW50by10ZXN0LmpzXCIsXG5cdFx0XHRcdFwiZ2xvYmFsXCI6IHRydWVcblx0XHRcdH1cblx0XHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cdFxuXHRcdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRcdEhhcmRlbiBwcm9wZXJ0aWVzIG9mIGVudGl0eS5cblx0XG5cdFx0XHRUaGlzIHdpbGwgcmVwbGFjZSBlbnVtZXJhYmxlIHByb3BlcnRpZXMgd2l0aCBub24tZW51bWVyYWJsZS5cblx0XG5cdFx0XHRUaGlzIHdpbGwgZnJlZXplIHRoZSBvYmplY3QuXG5cdFx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXHRcblx0XHRAaW5jbHVkZTpcblx0XHRcdHtcblx0XHRcdFx0XCJoYXJkZW5cIjogXCJoYXJkZW5cIlxuXHRcdFx0fVxuXHRcdEBlbmQtaW5jbHVkZVxuXHQqL1xuXHRcblx0dmFyIF9mcmVlemUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgyKTtcblx0XG5cdHZhciBfZnJlZXplMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZyZWV6ZSk7XG5cdFxuXHR2YXIgX2dldE93blByb3BlcnR5TmFtZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KTtcblx0XG5cdHZhciBfZ2V0T3duUHJvcGVydHlOYW1lczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRPd25Qcm9wZXJ0eU5hbWVzKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgaGFyZGVuID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NSk7XG5cdFxuXHR2YXIgY2VtZW50byA9IGZ1bmN0aW9uIGNlbWVudG8oZW50aXR5KSB7XG5cdFx0Lyo7XG5cdCBcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdCBcdFx0e1xuXHQgXHRcdFx0XCJlbnRpdHk6cmVxdWlyZWRcIjogXCIqXCJcblx0IFx0XHR9XG5cdCBcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG5cdCAqL1xuXHRcblx0XHRpZiAodHlwZW9mIGVudGl0eSA9PSBcInVuZGVmaW5lZFwiIHx8ICFlbnRpdHkgfHwgKDAsIF9nZXRPd25Qcm9wZXJ0eU5hbWVzMi5kZWZhdWx0KShlbnRpdHkpLmxlbmd0aCA9PSAwKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGVudGl0eVwiKTtcblx0XHR9XG5cdFxuXHRcdGZvciAodmFyIHByb3BlcnR5IGluIGVudGl0eSkge1xuXHRcdFx0aWYgKGVudGl0eS5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcblx0XHRcdFx0dmFyIHZhbHVlID0gZW50aXR5W3Byb3BlcnR5XTtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRkZWxldGUgZW50aXR5W3Byb3BlcnR5XTtcblx0XHRcdFx0fSBjYXRjaCAoZXJyb3IpIHt9XG5cdFxuXHRcdFx0XHRlbnRpdHkgPSBlbnRpdHkuaGFyZGVuICYmIHR5cGVvZiBlbnRpdHkuaGFyZGVuID09IFwiZnVuY3Rpb25cIiA/IGVudGl0eS5oYXJkZW4ocHJvcGVydHksIHZhbHVlKSA6IGhhcmRlbihwcm9wZXJ0eSwgdmFsdWUsIGVudGl0eSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gKDAsIF9mcmVlemUyLmRlZmF1bHQpKGVudGl0eSk7XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGNlbWVudG87XG5cblxuLyoqKi8gfSxcbi8qIDgyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IF9fd2VicGFja19yZXF1aXJlX18oODMpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cbi8qKiovIH0sXG4vKiA4MyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0X193ZWJwYWNrX3JlcXVpcmVfXyg4NCk7XG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMikuT2JqZWN0LmZyZWV6ZTtcblxuLyoqKi8gfSxcbi8qIDg0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG5cdHZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpXG5cdCAgLCBtZXRhICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNzIpLm9uRnJlZXplO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXygyMCkoJ2ZyZWV6ZScsIGZ1bmN0aW9uKCRmcmVlemUpe1xuXHQgIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpe1xuXHQgICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcblx0ICB9O1xuXHR9KTtcblxuLyoqKi8gfSxcbi8qIDg1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHQvKjtcblx0XHRAbW9kdWxlLWxpY2Vuc2U6XG5cdFx0XHRUaGUgTUlUIExpY2Vuc2UgKE1JVClcblx0XHRcdEBtaXQtbGljZW5zZVxuXHRcblx0XHRcdENvcHlyaWdodCAoQGMpIDIwMTcgUmljaGV2ZSBTaW9kaW5hIEJlYmVkb3Jcblx0XHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXHRcblx0XHRcdFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcblx0XHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRcdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0XHRcdHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcblx0XHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdFx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblx0XG5cdFx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRcdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cdFxuXHRcdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdFx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdFx0XHRGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcblx0XHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRcdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdFx0XHRPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuXHRcdFx0U09GVFdBUkUuXG5cdFx0QGVuZC1tb2R1bGUtbGljZW5zZVxuXHRcblx0XHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0XHR7XG5cdFx0XHRcdFwicGFja2FnZVwiOiBcImhhcmRlblwiLFxuXHRcdFx0XHRcInBhdGhcIjogXCJoYXJkZW4vaGFyZGVuLmpzXCIsXG5cdFx0XHRcdFwiZmlsZVwiOiBcImhhcmRlbi5qc1wiLFxuXHRcdFx0XHRcIm1vZHVsZVwiOiBcImhhcmRlblwiLFxuXHRcdFx0XHRcImF1dGhvclwiOiBcIlJpY2hldmUgUy4gQmViZWRvclwiLFxuXHRcdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XHRcInJlcG9zaXRvcnlcIjogXCJodHRwczovL2dpdGh1Yi5jb20vdm9sa292YXN5c3RlbXMvaGFyZGVuLmdpdFwiLFxuXHRcdFx0XHRcInRlc3RcIjogXCJoYXJkZW4tdGVzdC5qc1wiLFxuXHRcdFx0XHRcImdsb2JhbFwiOiB0cnVlXG5cdFx0XHR9XG5cdFx0QGVuZC1tb2R1bGUtY29uZmlndXJhdGlvblxuXHRcblx0XHRAbW9kdWxlLWRvY3VtZW50YXRpb246XG5cdFx0XHRNYWtlcyB5b3VyIHByb3BlcnR5LXZhbHVlIG5vbi1lbnVtZXJhYmxlLCBub24tY29uZmlndXJhYmxlIGFuZCBub24td3JpdGFibGUuXG5cdFxuXHRcdFx0SWYgZW50aXR5IGlzIGdpdmVuLCB0aGUgcHJvcGVydHkgd2lsbCBiZSBib3VuZCB0byB0aGUgZW50aXR5LlxuXHRcblx0XHRcdEVsc2UsIGlmIHRoaXMgbW9kdWxlIGlzIHVzZWQgaW4gdGhlIGJyb3dzZXIsIHRoZSBlbnRpdHkgZGVmYXVsdHMgdG8gdGhlIEBjb2RlOndpbmRvdzsuXG5cdFxuXHRcdFx0RWxzZSwgaWYgdGhpcyBtb2R1bGUgaXMgdXNlZCBpbiBhIE5vZGVKUyBlbnZpcm9ubWVudCwgdGhlIGVudGl0eSBkZWZhdWx0cyB0byBAY29kZTpnbG9iYWw7LlxuXHRcblx0XHRcdE5vdGUgdGhhdCBpZiB0aGUgZW50aXR5IGlzIGhhcmRlbmVkLCB5b3UgY2Fubm90IHVzZSBAY29kZTpkZWxldGU7IG9uIGl0LlxuXHRcdEBlbmQtbW9kdWxlLWRvY3VtZW50YXRpb25cblx0Ki9cblx0XG5cdHZhciBfZGVmaW5lUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg2KTtcblx0XG5cdHZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmaW5lUHJvcGVydHkpO1xuXHRcblx0dmFyIF90eXBlb2YyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4OSk7XG5cdFxuXHR2YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgaGFyZGVuID0gZnVuY3Rpb24gaGFyZGVuKHByb3BlcnR5LCB2YWx1ZSwgZW50aXR5KSB7XG5cdFx0Lyo7XG5cdCBcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdCBcdFx0e1xuXHQgXHRcdFx0XCJwcm9wZXJ0eTpyZXF1aXJlZFwiOiBbXG5cdCBcdFx0XHRcdFwic3RyaW5nXCIsXG5cdCBcdFx0XHRcdFwic3ltYm9sXCIsXG5cdCBcdFx0XHRcdFwibnVtYmVyXCJcblx0IFx0XHRcdF0sXG5cdCBcdFx0XHRcInZhbHVlOnJlcXVpcmVkXCI6IFwiKlwiLFxuXHQgXHRcdFx0XCJlbnRpdHk6b3B0aW9uYWxcIjogXCJvYmplY3RcIlxuXHQgXHRcdH1cblx0IFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cblx0ICovXG5cdFxuXHRcdGlmIChwcm9wZXJ0eSA9PT0gXCJcIiB8fCB0eXBlb2YgcHJvcGVydHkgIT0gXCJzdHJpbmdcIiAmJiAodHlwZW9mIHByb3BlcnR5ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShwcm9wZXJ0eSkpICE9IFwic3ltYm9sXCIgJiYgdHlwZW9mIHByb3BlcnR5ICE9IFwibnVtYmVyXCIpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImludmFsaWQgcHJvcGVydHlcIik7XG5cdFx0fVxuXHRcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0aWYgKHR5cGVvZiBlbnRpdHkgIT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0c2VsZiA9IGVudGl0eTtcblx0XHR9IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT0gXCJ1bmRlZmluZWRcIiAmJiB0aGlzID09PSBnbG9iYWwpIHtcblx0XHRcdHNlbGYgPSBnbG9iYWw7XG5cdFx0fSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9IFwidW5kZWZpbmVkXCIgJiYgdGhpcyA9PT0gd2luZG93KSB7XG5cdFx0XHRzZWxmID0gd2luZG93O1xuXHRcdH1cblx0XG5cdFx0ZW50aXR5ID0gZW50aXR5IHx8IHNlbGY7XG5cdFxuXHRcdGlmICh0eXBlb2YgZW50aXR5ID09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIGdsb2JhbCAhPSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRlbnRpdHkgPSBnbG9iYWw7XG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgZW50aXR5ID09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdyAhPSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRlbnRpdHkgPSB3aW5kb3c7XG5cdFx0fVxuXHRcblx0XHRpZiAodHlwZW9mIGVudGl0eVtwcm9wZXJ0eV0gIT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0cmV0dXJuIGVudGl0eTtcblx0XHR9XG5cdFxuXHRcdHRyeSB7XG5cdFx0XHQoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShlbnRpdHksIHByb3BlcnR5LCB7XG5cdFx0XHRcdFwiZW51bWVyYWJsZVwiOiBmYWxzZSxcblx0XHRcdFx0XCJjb25maWd1cmFibGVcIjogZmFsc2UsXG5cdFx0XHRcdFwid3JpdGFibGVcIjogZmFsc2UsXG5cdFx0XHRcdFwidmFsdWVcIjogdmFsdWVcblx0XHRcdH0pO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgaGFyZGVuIHByb3BlcnR5LCBcIiArIHByb3BlcnR5ICsgXCIsIGVycm9yLCBcIiArIGVycm9yKTtcblx0XHR9XG5cdFxuXHRcdGlmICgodHlwZW9mIGdsb2JhbCAhPSBcInVuZGVmaW5lZFwiICYmIGVudGl0eSAhPT0gZ2xvYmFsIHx8IHR5cGVvZiB3aW5kb3cgIT0gXCJ1bmRlZmluZWRcIiAmJiBlbnRpdHkgIT09IHdpbmRvdykgJiYgdHlwZW9mIGVudGl0eS5oYXJkZW4gPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGVudGl0eSwgXCJoYXJkZW5cIiwge1xuXHRcdFx0XHRcdFwiZW51bWVyYWJsZVwiOiBmYWxzZSxcblx0XHRcdFx0XHRcImNvbmZpZ3VyYWJsZVwiOiBmYWxzZSxcblx0XHRcdFx0XHRcIndyaXRhYmxlXCI6IGZhbHNlLFxuXHRcdFx0XHRcdFwidmFsdWVcIjogaGFyZGVuLmJpbmQoc2VsZilcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgYmluZCBoYXJkZW4sIGVycm9yLCBcIiArIGVycm9yKTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdHJldHVybiBlbnRpdHk7XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGhhcmRlbjtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KCkpKSlcblxuLyoqKi8gfSxcbi8qIDg2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IF9fd2VicGFja19yZXF1aXJlX18oODcpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cbi8qKiovIH0sXG4vKiA4NyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0X193ZWJwYWNrX3JlcXVpcmVfXyg4OCk7XG5cdHZhciAkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMikuT2JqZWN0O1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2Mpe1xuXHQgIHJldHVybiAkT2JqZWN0LmRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2MpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogODggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG5cdC8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG5cdCRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIV9fd2VicGFja19yZXF1aXJlX18oMTYpLCAnT2JqZWN0Jywge2RlZmluZVByb3BlcnR5OiBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KS5mfSk7XG5cbi8qKiovIH0sXG4vKiA4OSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHRcblx0dmFyIF9pdGVyYXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oNDkpO1xuXHRcblx0dmFyIF9pdGVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pdGVyYXRvcik7XG5cdFxuXHR2YXIgX3N5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oNjkpO1xuXHRcblx0dmFyIF9zeW1ib2wyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3ltYm9sKTtcblx0XG5cdHZhciBfdHlwZW9mID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgX2l0ZXJhdG9yMi5kZWZhdWx0ID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCAmJiBvYmogIT09IF9zeW1ib2wyLmRlZmF1bHQucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBfdHlwZW9mKF9pdGVyYXRvcjIuZGVmYXVsdCkgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xuXHR9IDogZnVuY3Rpb24gKG9iaikge1xuXHQgIHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgJiYgb2JqICE9PSBfc3ltYm9sMi5kZWZhdWx0LnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDkwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdC8qO1xuXHRcdEBtb2R1bGUtbGljZW5zZTpcblx0XHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdFx0QG1pdC1saWNlbnNlXG5cdFxuXHRcdFx0Q29weXJpZ2h0IChAYykgMjAxNyBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cdFxuXHRcdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdFx0aW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuXHRcdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0XHRmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXHRcblx0XHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdFx0Y29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblx0XG5cdFx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0XHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0XHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdFx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0XHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0XHRTT0ZUV0FSRS5cblx0XHRAZW5kLW1vZHVsZS1saWNlbnNlXG5cdFxuXHRcdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHRcdHtcblx0XHRcdFx0XCJwYWNrYWdlXCI6IFwicHJvdHlwZVwiLFxuXHRcdFx0XHRcInBhdGhcIjogXCJwcm90eXBlL3Byb3R5cGUuanNcIixcblx0XHRcdFx0XCJmaWxlXCI6IFwicHJvdHlwZS5qc1wiLFxuXHRcdFx0XHRcIm1vZHVsZVwiOiBcInByb3R5cGVcIixcblx0XHRcdFx0XCJhdXRob3JcIjogXCJSaWNoZXZlIFMuIEJlYmVkb3JcIixcblx0XHRcdFx0XCJjb250cmlidXRvcnNcIjogW1xuXHRcdFx0XHRcdFwiSm9obiBMZW5vbiBNYWdoYW5veSA8am9obmxlbm9ubWFnaGFub3lAZ21haWwuY29tPlwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZU1haWxcIjogXCJyaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXCIsXG5cdFx0XHRcdFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b2xrb3Zhc3lzdGVtcy9wcm90eXBlLmdpdFwiLFxuXHRcdFx0XHRcInRlc3RcIjogXCJwcm90eXBlLXRlc3QuanNcIixcblx0XHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdFx0fVxuXHRcdEBlbmQtbW9kdWxlLWNvbmZpZ3VyYXRpb25cblx0XG5cdFx0QG1vZHVsZS1kb2N1bWVudGF0aW9uOlxuXHRcdFx0RGV0ZXJtaW5lIHR5cGUgb2YgcHJvcGVydHkuXG5cdFxuXHRcdFx0UGFzc2luZyBtdWx0aXBsZSB0eXBlIHdpbGwgZG8gdHJ5IHRvIG1hdGNoIGFueSBvbmUgb2YgaXQuXG5cdFx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXHRcblx0XHRAaW5jbHVkZTpcblx0XHRcdHtcblx0XHRcdFx0XCJjZW1lbnRvXCI6IFwiY2VtZW50b1wiLFxuXHRcdFx0XHRcImhhcmRlblwiOiBcImhhcmRlblwiXG5cdFx0XHR9XG5cdFx0QGVuZC1pbmNsdWRlXG5cdCovXG5cdFxuXHR2YXIgX3R5cGVvZjIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg5KTtcblx0XG5cdHZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXHRcblx0dmFyIF9mcm9tID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MSk7XG5cdFxuXHR2YXIgX2Zyb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZnJvbSk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0dmFyIGNlbWVudG8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgxKTtcblx0dmFyIGhhcmRlbiA9IF9fd2VicGFja19yZXF1aXJlX18oODUpO1xuXHRcblx0Ly86IEBzdXBwb3J0LW1vZHVsZTpcblx0Ly86IEByZWZlcmVuY2U6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2lzQXJyYXlcblx0QXJyYXkuaXNBcnJheSB8fCAoQXJyYXkuaXNBcnJheSA9IGZ1bmN0aW9uIChyKSB7XG5cdFx0cmV0dXJuIFwiW29iamVjdCBBcnJheV1cIiA9PT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHIpO1xuXHR9KTtcblx0Ly86IEBlbmQtc3VwcG9ydC1tb2R1bGVcblx0XG5cdC8vOiBAc3VwcG9ydC1tb2R1bGU6XG5cdC8vOiBAcmVmZXJlbmNlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9mcm9tXG5cdF9mcm9tMi5kZWZhdWx0IHx8IChBcnJheS5mcm9tID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciByID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxcblx0XHQgICAgbiA9IGZ1bmN0aW9uIG4oX24pIHtcblx0XHRcdHJldHVybiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIF9uIHx8IFwiW29iamVjdCBGdW5jdGlvbl1cIiA9PT0gci5jYWxsKF9uKTtcblx0XHR9LFxuXHRcdCAgICB0ID0gZnVuY3Rpb24gdChyKSB7XG5cdFx0XHR2YXIgbiA9IE51bWJlcihyKTtcblx0XHRcdHJldHVybiBpc05hTihuKSA/IDAgOiAwICE9PSBuICYmIGlzRmluaXRlKG4pID8gKG4gPiAwID8gMSA6IC0xKSAqIE1hdGguZmxvb3IoTWF0aC5hYnMobikpIDogbjtcblx0XHR9LFxuXHRcdCAgICBlID0gTWF0aC5wb3coMiwgNTMpIC0gMSxcblx0XHQgICAgbyA9IGZ1bmN0aW9uIG8ocikge1xuXHRcdFx0dmFyIG4gPSB0KHIpO3JldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCAwKSwgZSk7XG5cdFx0fTtcblx0XHRyZXR1cm4gZnVuY3Rpb24gKHIpIHtcblx0XHRcdHZhciB0ID0gdGhpcyxcblx0XHRcdCAgICBlID0gT2JqZWN0KHIpO1xuXHRcdFx0aWYgKG51bGwgPT0gcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFycmF5LmZyb20gcmVxdWlyZXMgYW4gYXJyYXktbGlrZSBvYmplY3QgLSBub3QgbnVsbCBvciB1bmRlZmluZWRcIik7XG5cdFx0XHR2YXIgYSxcblx0XHRcdCAgICB1ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB2b2lkIDA7aWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHUpIHtcblx0XHRcdFx0aWYgKCFuKHUpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJyYXkuZnJvbTogd2hlbiBwcm92aWRlZCwgdGhlIHNlY29uZCBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG5cdFx0XHRcdGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIChhID0gYXJndW1lbnRzWzJdKTtcblx0XHRcdH1mb3IgKHZhciBpLCBmID0gbyhlLmxlbmd0aCksIGMgPSBuKHQpID8gT2JqZWN0KG5ldyB0KGYpKSA6IG5ldyBBcnJheShmKSwgaCA9IDA7IGYgPiBoOykge1xuXHRcdFx0XHRpID0gZVtoXSwgdSA/IGNbaF0gPSBcInVuZGVmaW5lZFwiID09IHR5cGVvZiBhID8gdShpLCBoKSA6IHUuY2FsbChhLCBpLCBoKSA6IGNbaF0gPSBpLCBoICs9IDE7XG5cdFx0XHR9cmV0dXJuIGMubGVuZ3RoID0gZiwgYztcblx0XHR9O1xuXHR9KCkpO1xuXHQvLzogQGVuZC1zdXBwb3J0LW1vZHVsZVxuXHRcblx0Ly87IEBzdXBwb3J0LW1vZHVsZTpcblx0Ly86IEByZWZlcmVuY2U6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L3NvbWVcblx0QXJyYXkucHJvdG90eXBlLnNvbWUgPSBBcnJheS5wcm90b3R5cGUuc29tZSB8fCBmdW5jdGlvbiAoZXZhbHVhdG9yLCB0aGlzQXJnKSB7XG5cdFx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRcdGlmICghdGhpcykgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFycmF5LnByb3RvdHlwZS5zb21lIGNhbGxlZCBvbiBudWxsIG9yIHVuZGVmaW5lZFwiKTtcblx0XHRpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBldmFsdWF0b3IpIHtcblx0XHRcdGlmIChcInN0cmluZ1wiICE9IHR5cGVvZiBldmFsdWF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcblx0XHRcdGlmICghKGV2YWx1YXRvciA9IGV2YWwoZXZhbHVhdG9yKSkpIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcblx0XHR9dmFyIGk7XG5cdFx0aWYgKHZvaWQgMCA9PT0gdGhpc0FyZykge1xuXHRcdFx0Zm9yIChpIGluIHRoaXMpIHtcblx0XHRcdFx0aWYgKGV2YWx1YXRvcih0aGlzW2ldLCBpLCB0aGlzKSkgcmV0dXJuICEwO1xuXHRcdFx0fXJldHVybiAhMTtcblx0XHR9XG5cdFx0Zm9yIChpIGluIHRoaXMpIHtcblx0XHRcdGlmIChldmFsdWF0b3IuY2FsbCh0aGlzQXJnLCB0aGlzW2ldLCBpLCB0aGlzKSkgcmV0dXJuICEwO1xuXHRcdH1yZXR1cm4gITE7XG5cdH07XG5cdC8vOyBAZW5kLXN1cHBvcnQtbW9kdWxlXG5cdFxuXHQvLzogQHN1cHBvcnQtbW9kdWxlOlxuXHQvLzogQHJlZmVyZW5jZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvcmVkdWNlXG5cdEFycmF5LnByb3RvdHlwZS5yZWR1Y2UgfHwgKEFycmF5LnByb3RvdHlwZS5yZWR1Y2UgPSBmdW5jdGlvbiAocikge1xuXHRcdFwidXNlIHN0cmljdFwiO1xuXHRcblx0XHRpZiAobnVsbCA9PSB0aGlzKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJyYXkucHJvdG90eXBlLnJlZHVjZSBjYWxsZWQgb24gbnVsbCBvciB1bmRlZmluZWRcIik7XG5cdFx0aWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgcikgdGhyb3cgbmV3IFR5cGVFcnJvcihyICsgXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7XG5cdFx0dmFyIGUsXG5cdFx0ICAgIHQgPSBPYmplY3QodGhpcyksXG5cdFx0ICAgIG4gPSB0Lmxlbmd0aCA+Pj4gMCxcblx0XHQgICAgbyA9IDA7aWYgKDIgPT0gYXJndW1lbnRzLmxlbmd0aCkgZSA9IGFyZ3VtZW50c1sxXTtlbHNlIHtcblx0XHRcdGZvciAoOyBuID4gbyAmJiAhKG8gaW4gdCk7KSB7XG5cdFx0XHRcdG8rKztcblx0XHRcdH1pZiAobyA+PSBuKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZVwiKTtcblx0XHRcdGUgPSB0W28rK107XG5cdFx0fWZvciAoOyBuID4gbzsgbysrKSB7XG5cdFx0XHRvIGluIHQgJiYgKGUgPSByKGUsIHRbb10sIG8sIHQpKTtcblx0XHR9cmV0dXJuIGU7XG5cdH0pO1xuXHQvLzogQGVuZC1zdXBwb3J0LW1vZHVsZVxuXHRcblx0aGFyZGVuKFwiU1RSSU5HXCIsIFwic3RyaW5nXCIpO1xuXHRoYXJkZW4oXCJOVU1CRVJcIiwgXCJudW1iZXJcIik7XG5cdGhhcmRlbihcIkJPT0xFQU5cIiwgXCJib29sZWFuXCIpO1xuXHRoYXJkZW4oXCJGVU5DVElPTlwiLCBcImZ1bmN0aW9uXCIpO1xuXHRoYXJkZW4oXCJPQkpFQ1RcIiwgXCJvYmplY3RcIik7XG5cdGhhcmRlbihcIlVOREVGSU5FRFwiLCBcInVuZGVmaW5lZFwiKTtcblx0aGFyZGVuKFwiU1lNQk9MXCIsIFwic3ltYm9sXCIpO1xuXHRcblx0dmFyIHByb3R5cGUgPSBmdW5jdGlvbiBwcm90eXBlKHByb3BlcnR5LCB0eXBlKSB7XG5cdFx0dmFyIF9hcmd1bWVudHMgPSBhcmd1bWVudHM7XG5cdFxuXHRcdC8qO1xuXHQgXHRAbWV0YS1jb25maWd1cmF0aW9uOlxuXHQgXHRcdHtcblx0IFx0XHRcdFwicHJvcGVydHk6cmVxdWlyZWRcIjogXCIqXCIsXG5cdCBcdFx0XHRcInR5cGVcIjogW1xuXHQgXHRcdFx0XHRcInN0cmluZ1wiLFxuXHQgXHRcdFx0XHRTVFJJTkcsXG5cdCBcdFx0XHRcdE5VTUJFUixcblx0IFx0XHRcdFx0Qk9PTEVBTixcblx0IFx0XHRcdFx0RlVOQ1RJT04sXG5cdCBcdFx0XHRcdE9CSkVDVCxcblx0IFx0XHRcdFx0VU5ERUZJTkVELFxuXHQgXHRcdFx0XHRTWU1CT0wsXG5cdCBcdFx0XHRcdFwiLi4uXCIsXG5cdCBcdFx0XHRcdEFycmF5XG5cdCBcdFx0XHRdXG5cdCBcdFx0fVxuXHQgXHRAZW5kLW1ldGEtY29uZmlndXJhdGlvblxuXHQgKi9cblx0XG5cdFx0aWYgKHR5cGUgJiYgdHlwZW9mIHR5cGUgPT0gXCJzdHJpbmdcIiAmJiB0eXBlICE9IFNUUklORyAmJiB0eXBlICE9IE5VTUJFUiAmJiB0eXBlICE9IEJPT0xFQU4gJiYgdHlwZSAhPSBGVU5DVElPTiAmJiB0eXBlICE9IE9CSkVDVCAmJiB0eXBlICE9IFVOREVGSU5FRCAmJiB0eXBlICE9IFNZTUJPTCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCB0eXBlXCIpO1xuXHRcdH1cblx0XG5cdFx0aWYgKHR5cGUpIHtcblx0XHRcdHZhciBfcmV0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR2YXIgZmxhdHRlbiA9IGZ1bmN0aW9uIGZsYXR0ZW4oY3VycmVudCkge1xuXHRcdFx0XHRcdHJldHVybiBjdXJyZW50LnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXMsIGN1cnJlbnQpIHtcblx0XHRcdFx0XHRcdHZhciBlbGVtZW50ID0gQXJyYXkuaXNBcnJheShjdXJyZW50KSA/IGZsYXR0ZW4oY3VycmVudCkgOiBjdXJyZW50O1xuXHRcblx0XHRcdFx0XHRcdHJldHVybiBwcmV2aW91cy5jb25jYXQoZWxlbWVudCk7XG5cdFx0XHRcdFx0fSwgW10pO1xuXHRcdFx0XHR9O1xuXHRcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR2OiAoMCwgX2Zyb20yLmRlZmF1bHQpKF9hcmd1bWVudHMpLnNwbGljZSgxKS5yZWR1Y2UoZnVuY3Rpb24gKHByZXZpb3VzLCBjdXJyZW50KSB7XG5cdFx0XHRcdFx0XHR2YXIgZWxlbWVudCA9IEFycmF5LmlzQXJyYXkoY3VycmVudCkgPyBmbGF0dGVuKGN1cnJlbnQpIDogY3VycmVudDtcblx0XG5cdFx0XHRcdFx0XHRyZXR1cm4gcHJldmlvdXMuY29uY2F0KGVsZW1lbnQpO1xuXHRcdFx0XHRcdH0sIFtdKS5maWx0ZXIoZnVuY3Rpb24gKHR5cGUpIHtcblx0XHRcdFx0XHRcdHJldHVybiAodHlwZW9mIHR5cGUgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHR5cGUpKSA9PSBTVFJJTkc7XG5cdFx0XHRcdFx0fSkuZmlsdGVyKGZ1bmN0aW9uICh0eXBlKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHlwZSA9PSBTVFJJTkcgfHwgdHlwZSA9PSBOVU1CRVIgfHwgdHlwZSA9PSBCT09MRUFOIHx8IHR5cGUgPT0gRlVOQ1RJT04gfHwgdHlwZSA9PSBPQkpFQ1QgfHwgdHlwZSA9PSBVTkRFRklORUQgfHwgdHlwZSA9PSBTWU1CT0w7XG5cdFx0XHRcdFx0fSkuc29tZShmdW5jdGlvbiAodHlwZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuICh0eXBlb2YgcHJvcGVydHkgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHByb3BlcnR5KSkgPT0gdHlwZTtcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHR9O1xuXHRcdFx0fSgpO1xuXHRcblx0XHRcdGlmICgodHlwZW9mIF9yZXQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKF9yZXQpKSA9PT0gXCJvYmplY3RcIikgcmV0dXJuIF9yZXQudjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGNlbWVudG8oe1xuXHRcdFx0XHRcIlNUUklOR1wiOiBwcm90eXBlKHByb3BlcnR5LCBTVFJJTkcpLFxuXHRcdFx0XHRcIk5VTUJFUlwiOiBwcm90eXBlKHByb3BlcnR5LCBOVU1CRVIpLFxuXHRcdFx0XHRcIkJPT0xFQU5cIjogcHJvdHlwZShwcm9wZXJ0eSwgQk9PTEVBTiksXG5cdFx0XHRcdFwiRlVOQ1RJT05cIjogcHJvdHlwZShwcm9wZXJ0eSwgRlVOQ1RJT04pLFxuXHRcdFx0XHRcIk9CSkVDVFwiOiBwcm90eXBlKHByb3BlcnR5LCBPQkpFQ1QpLFxuXHRcdFx0XHRcIlVOREVGSU5FRFwiOiBwcm90eXBlKHByb3BlcnR5LCBVTkRFRklORUQpLFxuXHRcdFx0XHRcIlNZTUJPTFwiOiBwcm90eXBlKHByb3BlcnR5LCBTWU1CT0wpLFxuXHRcdFx0XHRcInR5cGVcIjogdHlwZW9mIHByb3BlcnR5ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShwcm9wZXJ0eSlcblx0XHRcdH0pO1xuXHRcdH1cblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gcHJvdHlwZTtcblxuXG4vKioqLyB9LFxuLyogOTEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg5MiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuLyoqKi8gfSxcbi8qIDkyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDUxKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg5Myk7XG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMikuQXJyYXkuZnJvbTtcblxuLyoqKi8gfSxcbi8qIDkzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdHZhciBjdHggICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpXG5cdCAgLCAkZXhwb3J0ICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpXG5cdCAgLCB0b09iamVjdCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDYpXG5cdCAgLCBjYWxsICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOTQpXG5cdCAgLCBpc0FycmF5SXRlciAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOTUpXG5cdCAgLCB0b0xlbmd0aCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpXG5cdCAgLCBjcmVhdGVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oOTYpXG5cdCAgLCBnZXRJdGVyRm4gICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOTcpO1xuXHRcblx0JGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhX193ZWJwYWNrX3JlcXVpcmVfXyg5OSkoZnVuY3Rpb24oaXRlcil7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG5cdCAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuXHQgIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlLyosIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKi8pe1xuXHQgICAgdmFyIE8gICAgICAgPSB0b09iamVjdChhcnJheUxpa2UpXG5cdCAgICAgICwgQyAgICAgICA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXlcblx0ICAgICAgLCBhTGVuICAgID0gYXJndW1lbnRzLmxlbmd0aFxuXHQgICAgICAsIG1hcGZuICAgPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZFxuXHQgICAgICAsIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkXG5cdCAgICAgICwgaW5kZXggICA9IDBcblx0ICAgICAgLCBpdGVyRm4gID0gZ2V0SXRlckZuKE8pXG5cdCAgICAgICwgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuXHQgICAgaWYobWFwcGluZyltYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuXHQgICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG5cdCAgICBpZihpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSl7XG5cdCAgICAgIGZvcihpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQzsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKXtcblx0ICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcblx0ICAgICAgZm9yKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKXtcblx0ICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuXHQgICAgcmV0dXJuIHJlc3VsdDtcblx0ICB9XG5cdH0pO1xuXG5cbi8qKiovIH0sXG4vKiA5NCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxuXHR2YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKXtcblx0ICB0cnkge1xuXHQgICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcblx0ICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuXHQgIH0gY2F0Y2goZSl7XG5cdCAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuXHQgICAgaWYocmV0ICE9PSB1bmRlZmluZWQpYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcblx0ICAgIHRocm93IGU7XG5cdCAgfVxuXHR9O1xuXG4vKioqLyB9LFxuLyogOTUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3Jcblx0dmFyIEl0ZXJhdG9ycyAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU2KVxuXHQgICwgSVRFUkFUT1IgICA9IF9fd2VicGFja19yZXF1aXJlX18oNjIpKCdpdGVyYXRvcicpXG5cdCAgLCBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG5cdCAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDk2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdHZhciAkZGVmaW5lUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KVxuXHQgICwgY3JlYXRlRGVzYyAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgaW5kZXgsIHZhbHVlKXtcblx0ICBpZihpbmRleCBpbiBvYmplY3QpJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuXHQgIGVsc2Ugb2JqZWN0W2luZGV4XSA9IHZhbHVlO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogOTcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBjbGFzc29mICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk4KVxuXHQgICwgSVRFUkFUT1IgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MikoJ2l0ZXJhdG9yJylcblx0ICAsIEl0ZXJhdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oNTYpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMjIpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24oaXQpe1xuXHQgIGlmKGl0ICE9IHVuZGVmaW5lZClyZXR1cm4gaXRbSVRFUkFUT1JdXG5cdCAgICB8fCBpdFsnQEBpdGVyYXRvciddXG5cdCAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogOTggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG5cdHZhciBjb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpXG5cdCAgLCBUQUcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYyKSgndG9TdHJpbmdUYWcnKVxuXHQgIC8vIEVTMyB3cm9uZyBoZXJlXG5cdCAgLCBBUkcgPSBjb2YoZnVuY3Rpb24oKXsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblx0XG5cdC8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG5cdHZhciB0cnlHZXQgPSBmdW5jdGlvbihpdCwga2V5KXtcblx0ICB0cnkge1xuXHQgICAgcmV0dXJuIGl0W2tleV07XG5cdCAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG5cdCAgdmFyIE8sIFQsIEI7XG5cdCAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG5cdCAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2Vcblx0ICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcblx0ICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuXHQgICAgOiBBUkcgPyBjb2YoTylcblx0ICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcblx0ICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogOTkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBJVEVSQVRPUiAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYyKSgnaXRlcmF0b3InKVxuXHQgICwgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cdFxuXHR0cnkge1xuXHQgIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcblx0ICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbigpeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuXHQgIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uKCl7IHRocm93IDI7IH0pO1xuXHR9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMsIHNraXBDbG9zaW5nKXtcblx0ICBpZighc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORylyZXR1cm4gZmFsc2U7XG5cdCAgdmFyIHNhZmUgPSBmYWxzZTtcblx0ICB0cnkge1xuXHQgICAgdmFyIGFyciAgPSBbN11cblx0ICAgICAgLCBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuXHQgICAgaXRlci5uZXh0ID0gZnVuY3Rpb24oKXsgcmV0dXJuIHtkb25lOiBzYWZlID0gdHJ1ZX07IH07XG5cdCAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24oKXsgcmV0dXJuIGl0ZXI7IH07XG5cdCAgICBleGVjKGFycik7XG5cdCAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuXHQgIHJldHVybiBzYWZlO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMTAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdC8qO1xuXHRcdEBtb2R1bGUtbGljZW5zZTpcblx0XHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdFx0QG1pdC1saWNlbnNlXG5cdFxuXHRcdFx0Q29weXJpZ2h0IChAYykgMjAxNyBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cdFxuXHRcdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdFx0aW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuXHRcdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0XHRmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXHRcblx0XHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdFx0Y29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblx0XG5cdFx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0XHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0XHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdFx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0XHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0XHRTT0ZUV0FSRS5cblx0XHRAZW5kLW1vZHVsZS1saWNlbnNlXG5cdFxuXHRcdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHRcdHtcblx0XHRcdFx0XCJwYWNrYWdlXCI6IFwidHJ1bHlcIixcblx0XHRcdFx0XCJwYXRoXCI6IFwidHJ1bHkvdHJ1bHkuanNcIixcblx0XHRcdFx0XCJmaWxlXCI6IFwidHJ1bHkuanNcIixcblx0XHRcdFx0XCJtb2R1bGVcIjogXCJ0cnVseVwiLFxuXHRcdFx0XHRcImF1dGhvclwiOiBcIlJpY2hldmUgUy4gQmViZWRvclwiLFxuXHRcdFx0XHRcImNvbnRyaWJ1dG9yc1wiOiBbXG5cdFx0XHRcdFx0XCJKb2huIExlbm9uIE1hZ2hhbm95IDxqb2hubGVub25tYWdoYW5veUBnbWFpbC5jb20+XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJlTWFpbFwiOiBcInJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cIixcblx0XHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZvbGtvdmFzeXN0ZW1zL3RydWx5LmdpdFwiLFxuXHRcdFx0XHRcInRlc3RcIjogXCJ0cnVseS10ZXN0LmpzXCIsXG5cdFx0XHRcdFwiZ2xvYmFsXCI6IHRydWVcblx0XHRcdH1cblx0XHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cdFxuXHRcdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRcdENoZWNrIGlmIHRoZSB2YWx1ZSBpcyBub3QgdW5kZWZpbmVkLCBudWxsLCBlbXB0eSBzdHJpbmcsIE5hTiBhbmQgSW5maW5pdHkuXG5cdFx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXHRcblx0XHRAaW5jbHVkZTpcblx0XHRcdHtcblx0XHRcdFx0XCJwcm90eXBlXCI6IFwicHJvdHlwZVwiXG5cdFx0XHR9XG5cdFx0QGVuZC1pbmNsdWRlXG5cdCovXG5cdFxuXHR2YXIgcHJvdHlwZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTApO1xuXHRcblx0dmFyIHRydWx5ID0gZnVuY3Rpb24gdHJ1bHkodmFsdWUpIHtcblx0XHQvKjtcblx0IFx0QG1ldGEtY29uZmlndXJhdGlvbjpcblx0IFx0XHR7XG5cdCBcdFx0XHRcInZhbHVlOnJlcXVpcmVkXCI6IFwiKlwiXG5cdCBcdFx0fVxuXHQgXHRAZW5kLW1ldGEtY29uZmlndXJhdGlvblxuXHQgKi9cblx0XG5cdFx0dmFyIHZhbHVlVHlwZSA9IHByb3R5cGUodmFsdWUpO1xuXHRcdGlmICh2YWx1ZVR5cGUuTlVNQkVSKSB7XG5cdFx0XHRyZXR1cm4gIWlzTmFOKHZhbHVlKSAmJiBpc0Zpbml0ZSh2YWx1ZSk7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gIXZhbHVlVHlwZS5VTkRFRklORUQgJiYgdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IFwiXCI7XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IHRydWx5O1xuXG5cbi8qKiovIH0sXG4vKiAxMDEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0Lyo7XG5cdFx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFx0VGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cdFx0XHRAbWl0LWxpY2Vuc2Vcblx0XG5cdFx0XHRDb3B5cmlnaHQgKEBjKSAyMDE2IFJpY2hldmUgU2lvZGluYSBCZWJlZG9yXG5cdFx0XHRAZW1haWw6IHJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cblx0XG5cdFx0XHRQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5cdFx0XHRvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5cdFx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0XHR0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5cdFx0XHRjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcblx0XHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cdFxuXHRcdFx0VGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5cdFx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXHRcblx0XHRcdFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcblx0XHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdFx0RklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5cdFx0XHRBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5cdFx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdFx0T1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblx0XHRcdFNPRlRXQVJFLlxuXHRcdEBlbmQtbW9kdWxlLWxpY2Vuc2Vcblx0XG5cdFx0QG1vZHVsZS1jb25maWd1cmF0aW9uOlxuXHRcdFx0e1xuXHRcdFx0XHRcInBhY2thZ2VcIjogXCJ0cnV1XCIsXG5cdFx0XHRcdFwicGF0aFwiOiBcInRydXUvdHJ1dS5qc1wiLFxuXHRcdFx0XHRcImZpbGVcIjogXCJ0cnV1LmpzXCIsXG5cdFx0XHRcdFwibW9kdWxlXCI6IFwidHJ1dVwiLFxuXHRcdFx0XHRcImF1dGhvclwiOiBcIlJpY2hldmUgUy4gQmViZWRvclwiLFxuXHRcdFx0XHRcImNvbnRyaWJ1dG9yc1wiOiBbXG5cdFx0XHRcdFx0XCJKb2huIExlbm9uIE1hZ2hhbm95IDxqb2hubGVub25tYWdoYW5veUBnbWFpbC5jb20+XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJlTWFpbFwiOiBcInJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cIixcblx0XHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZvbGtvdmFzeXN0ZW1zL3RydXUuZ2l0XCIsXG5cdFx0XHRcdFwidGVzdFwiOiBcInRydXUtdGVzdC5qc1wiLFxuXHRcdFx0XHRcImdsb2JhbFwiOiB0cnVlXG5cdFx0XHR9XG5cdFx0QGVuZC1tb2R1bGUtY29uZmlndXJhdGlvblxuXHRcblx0XHRAbW9kdWxlLWRvY3VtZW50YXRpb246XG5cdFx0XHRDaGVjayBpZiBlbnRpdHkgaXMgZmFsc3kgb3IgZW1wdHkuXG5cdFx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXHRcblx0XHRAaW5jbHVkZTpcblx0XHRcdHtcblx0XHRcdFx0XCJkb3VidFwiOiBcImRvdWJ0XCIsXG5cdFx0XHRcdFwiZmlsbGVkXCI6IFwiZmlsbGVkXCIsXG5cdFx0XHRcdFwicHJvdHlwZVwiOiBcInByb3R5cGVcIixcblx0XHRcdFx0XCJzdHVmZmVkXCI6IFwic3R1ZmZlZFwiLFxuXHRcdFx0XHRcInRydWx5XCI6IFwidHJ1bHlcIlxuXHRcdFx0fVxuXHRcdEBlbmQtaW5jbHVkZVxuXHQqL1xuXHRcblx0dmFyIGRvdWJ0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OCk7XG5cdHZhciBmaWxsZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMik7XG5cdHZhciBwcm90eXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MCk7XG5cdHZhciBzdHVmZmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDQpO1xuXHR2YXIgdHJ1bHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMCk7XG5cdFxuXHR2YXIgdHJ1dSA9IGZ1bmN0aW9uIHRydXUoZW50aXR5KSB7XG5cdFx0Lyo7XG5cdCBcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdCBcdFx0e1xuXHQgXHRcdFx0XCJlbnRpdHk6cmVxdWlyZWRcIjogXCIqXCJcblx0IFx0XHR9XG5cdCBcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG5cdCAqL1xuXHRcblx0XHRpZiAoZG91YnQoZW50aXR5KS5BU19BUlJBWSkge1xuXHRcdFx0cmV0dXJuIGZpbGxlZChlbnRpdHkpO1xuXHRcdH1cblx0XG5cdFx0aWYgKHByb3R5cGUoZW50aXR5LCBPQkpFQ1QpKSB7XG5cdFx0XHRyZXR1cm4gc3R1ZmZlZChlbnRpdHkpO1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIHRydWx5KGVudGl0eSk7XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IHRydXU7XG5cblxuLyoqKi8gfSxcbi8qIDEwMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHQvKjtcblx0XHRAbW9kdWxlLWxpY2Vuc2U6XG5cdFx0XHRUaGUgTUlUIExpY2Vuc2UgKE1JVClcblx0XHRcdEBtaXQtbGljZW5zZVxuXHRcblx0XHRcdENvcHlyaWdodCAoQGMpIDIwMTYgUmljaGV2ZSBTaW9kaW5hIEJlYmVkb3Jcblx0XHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXHRcblx0XHRcdFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcblx0XHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRcdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0XHRcdHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcblx0XHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdFx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblx0XG5cdFx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRcdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cdFxuXHRcdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdFx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdFx0XHRGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcblx0XHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRcdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdFx0XHRPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuXHRcdFx0U09GVFdBUkUuXG5cdFx0QGVuZC1tb2R1bGUtbGljZW5zZVxuXHRcblx0XHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0XHR7XG5cdFx0XHRcdFwicGFja2FnZVwiOiBcImZpbGxlZFwiLFxuXHRcdFx0XHRcInBhdGhcIjogXCJmaWxsZWQvZmlsbGVkLmpzXCIsXG5cdFx0XHRcdFwiZmlsZVwiOiBcImZpbGxlZC5qc1wiLFxuXHRcdFx0XHRcIm1vZHVsZVwiOiBcImZpbGxlZFwiLFxuXHRcdFx0XHRcImF1dGhvclwiOiBcIlJpY2hldmUgUy4gQmViZWRvclwiLFxuXHRcdFx0XHRcImNvbnRyaWJ1dG9yc1wiOiBbXG5cdFx0XHRcdFx0XCJKb2huIExlbm9uIE1hZ2hhbm95IDxqb2hubGVub25tYWdoYW5veUBnbWFpbC5jb20+XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJlTWFpbFwiOiBcInJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cIixcblx0XHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZvbGtvdmFzeXN0ZW1zL2ZpbGxlZC5naXRcIixcblx0XHRcdFx0XCJ0ZXN0XCI6IFwiZmlsbGVkLXRlc3QuanNcIixcblx0XHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdFx0fVxuXHRcdEBlbmQtbW9kdWxlLWNvbmZpZ3VyYXRpb25cblx0XG5cdFx0QG1vZHVsZS1kb2N1bWVudGF0aW9uOlxuXHRcdFx0Q2hlY2sgaWYgYXJyYXkgY29udGFpbnMgc29tZXRoaW5nLlxuXHRcdEBlbmQtbW9kdWxlLWRvY3VtZW50YXRpb25cblx0XG5cdFx0QGluY2x1ZGU6XG5cdFx0XHR7XG5cdFx0XHRcdFwiZG91YnRcIjogXCJkb3VidFwiLFxuXHRcdFx0XHRcInJhemVcIjogXCJyYXplXCIsXG5cdFx0XHRcdFwidHJ1bHlcIjogXCJ0cnVseVwiXG5cdFx0XHR9XG5cdFx0QGVuZC1pbmNsdWRlXG5cdCovXG5cdFxuXHR2YXIgZG91YnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4KTtcblx0dmFyIHJhemUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMyk7XG5cdHZhciB0cnVseSA9IF9fd2VicGFja19yZXF1aXJlX18oMTAwKTtcblx0XG5cdHZhciBmaWxsZWQgPSBmdW5jdGlvbiBmaWxsZWQoYXJyYXkpIHtcblx0XHQvKjtcblx0IFx0QG1ldGEtY29uZmlndXJhdGlvbjpcblx0IFx0XHR7XG5cdCBcdFx0XHRcImFycmF5OnJlcXVpcmVkXCI6IFwiWypdXCJcblx0IFx0XHR9XG5cdCBcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG5cdCAqL1xuXHRcblx0XHRpZiAoIWRvdWJ0KGFycmF5KS5BU19BUlJBWSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBhcnJheVwiKTtcblx0XHR9XG5cdFxuXHRcdGFycmF5ID0gcmF6ZShhcnJheSk7XG5cdFxuXHRcdHJldHVybiBhcnJheS5sZW5ndGggIT0gMCAmJiBhcnJheS5maWx0ZXIodHJ1bHkpLmxlbmd0aCAhPSAwO1xuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmaWxsZWQ7XG5cblxuLyoqKi8gfSxcbi8qIDEwMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHQvKjtcblx0XHRAbW9kdWxlLWxpY2Vuc2U6XG5cdFx0XHRUaGUgTUlUIExpY2Vuc2UgKE1JVClcblx0XHRcdEBtaXQtbGljZW5zZVxuXHRcblx0XHRcdENvcHlyaWdodCAoQGMpIDIwMTYgUmljaGV2ZSBTaW9kaW5hIEJlYmVkb3Jcblx0XHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXHRcblx0XHRcdFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcblx0XHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRcdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0XHRcdHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcblx0XHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdFx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblx0XG5cdFx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRcdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cdFxuXHRcdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdFx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdFx0XHRGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcblx0XHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRcdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdFx0XHRPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuXHRcdFx0U09GVFdBUkUuXG5cdFx0QGVuZC1tb2R1bGUtbGljZW5zZVxuXHRcblx0XHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0XHR7XG5cdFx0XHRcdFwicGFja2FnZVwiOiBcInJhemVcIixcblx0XHRcdFx0XCJwYXRoXCI6IFwicmF6ZS9yYXplLmpzXCIsXG5cdFx0XHRcdFwiZmlsZVwiOiBcInJhemUuanNcIixcblx0XHRcdFx0XCJtb2R1bGVcIjogXCJyYXplXCIsXG5cdFx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcdFwiY29udHJpYnV0b3JzXCI6IFtcblx0XHRcdFx0XHRcIkpvaG4gTGVub24gTWFnaGFub3kgPGpvaG5sZW5vbm1hZ2hhbm95QGdtYWlsLmNvbT5cIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XHRcInJlcG9zaXRvcnlcIjogXCJodHRwczovL2dpdGh1Yi5jb20vdm9sa292YXN5c3RlbXMvcmF6ZS5naXRcIixcblx0XHRcdFx0XCJ0ZXN0XCI6IFwicmF6ZS10ZXN0LmpzXCIsXG5cdFx0XHRcdFwiZ2xvYmFsXCI6IHRydWVcblx0XHRcdH1cblx0XHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cdFxuXHRcdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRcdERlbGVnYXRlIGltcGxlbWVudGF0aW9uIG9mIEBjb2RlOkFycmF5LmZyb207XG5cdFxuXHRcdFx0VGhpcyBtb2R1bGUgbG9hZHMgQGNvZGU6QXJyYXkuZnJvbTsgc3VwcG9ydCBtb2R1bGUuXG5cdFxuXHRcdFx0V2hlbiBhbiBhcnJheSBvciBhcnJheS1saWtlIGVudGl0eSBpcyByYXplLCBpdCB3aWxsIGF0dGFjaCBhIHJhemUgYm91bmQgdG8gaXQgc2VsZi5cblx0XG5cdFx0XHRJZiB0aGUgYSByYXplZCBhcnJheSByYXplIGFub3RoZXIgYXJyYXkgaXQgd2lsbCBhcHBlbmQgZWxlbWVudHMuXG5cdFxuXHRcdFx0T3RoZXIgcGFyYW1ldGVycyBmb2xsb3cgdGhlIGRvY3VtZW50YXRpb24gZm9yIEBjb2RlOkFycmF5LmZyb207XG5cdFx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXHRcblx0XHRAaW5jbHVkZTpcblx0XHRcdHtcblx0XHRcdFx0XCJkb3VidFwiOiBcImRvdWJ0XCIsXG5cdFx0XHRcdFwiaGFyZGVuXCI6IFwiaGFyZGVuXCJcblx0XHRcdH1cblx0XHRAZW5kLWluY2x1ZGVcblx0Ki9cblx0XG5cdHZhciBfZnJvbSA9IF9fd2VicGFja19yZXF1aXJlX18oOTEpO1xuXHRcblx0dmFyIF9mcm9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Zyb20pO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciBkb3VidCA9IF9fd2VicGFja19yZXF1aXJlX18oNDgpO1xuXHR2YXIgaGFyZGVuID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NSk7XG5cdFxuXHQvLzogQHN1cHBvcnQtbW9kdWxlOlxuXHQvLzogQHJlZmVyZW5jZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZnJvbVxuXHRfZnJvbTIuZGVmYXVsdCB8fCAoQXJyYXkuZnJvbSA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsXG5cdFx0ICAgIG4gPSBmdW5jdGlvbiBuKF9uKSB7XG5cdFx0XHRyZXR1cm4gXCJmdW5jdGlvblwiID09IHR5cGVvZiBfbiB8fCBcIltvYmplY3QgRnVuY3Rpb25dXCIgPT09IHIuY2FsbChfbik7XG5cdFx0fSxcblx0XHQgICAgdCA9IGZ1bmN0aW9uIHQocikge1xuXHRcdFx0dmFyIG4gPSBOdW1iZXIocik7XG5cdFx0XHRyZXR1cm4gaXNOYU4obikgPyAwIDogMCAhPT0gbiAmJiBpc0Zpbml0ZShuKSA/IChuID4gMCA/IDEgOiAtMSkgKiBNYXRoLmZsb29yKE1hdGguYWJzKG4pKSA6IG47XG5cdFx0fSxcblx0XHQgICAgZSA9IE1hdGgucG93KDIsIDUzKSAtIDEsXG5cdFx0ICAgIG8gPSBmdW5jdGlvbiBvKHIpIHtcblx0XHRcdHZhciBuID0gdChyKTtyZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgMCksIGUpO1xuXHRcdH07XG5cdFx0cmV0dXJuIGZ1bmN0aW9uIChyKSB7XG5cdFx0XHR2YXIgdCA9IHRoaXMsXG5cdFx0XHQgICAgZSA9IE9iamVjdChyKTtcblx0XHRcdGlmIChudWxsID09IHIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBcnJheS5mcm9tIHJlcXVpcmVzIGFuIGFycmF5LWxpa2Ugb2JqZWN0IC0gbm90IG51bGwgb3IgdW5kZWZpbmVkXCIpO1xuXHRcdFx0dmFyIGEsXG5cdFx0XHQgICAgdSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdm9pZCAwO2lmIChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB1KSB7XG5cdFx0XHRcdGlmICghbih1KSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFycmF5LmZyb206IHdoZW4gcHJvdmlkZWQsIHRoZSBzZWNvbmQgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuXHRcdFx0XHRhcmd1bWVudHMubGVuZ3RoID4gMiAmJiAoYSA9IGFyZ3VtZW50c1syXSk7XG5cdFx0XHR9Zm9yICh2YXIgaSwgZiA9IG8oZS5sZW5ndGgpLCBjID0gbih0KSA/IE9iamVjdChuZXcgdChmKSkgOiBuZXcgQXJyYXkoZiksIGggPSAwOyBmID4gaDspIHtcblx0XHRcdFx0aSA9IGVbaF0sIHUgPyBjW2hdID0gXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2YgYSA/IHUoaSwgaCkgOiB1LmNhbGwoYSwgaSwgaCkgOiBjW2hdID0gaSwgaCArPSAxO1xuXHRcdFx0fXJldHVybiBjLmxlbmd0aCA9IGYsIGM7XG5cdFx0fTtcblx0fSgpKTtcblx0Ly86IEBlbmQtc3VwcG9ydC1tb2R1bGVcblx0XG5cdHZhciByYXplID0gZnVuY3Rpb24gcmF6ZShhcnJheSwgbWFwLCBlbnRpdHkpIHtcblx0XHQvKjtcblx0IFx0QG1ldGEtY29uZmlndXJhdGlvbjpcblx0IFx0XHR7XG5cdCBcdFx0XHRcImFycmF5OnJlcXVpcmVkXCI6IFwiWypdXCIsXG5cdCBcdFx0XHRcIm1hcDpvcHRpb25hbFwiOiBcImZ1bmN0aW9uXCIsXG5cdCBcdFx0XHRcImVudGl0eTpvcHRpb25hbFwiOiBcIm9iamVjdFwiXG5cdCBcdFx0fVxuXHQgXHRAZW5kLW1ldGEtY29uZmlndXJhdGlvblxuXHQgKi9cblx0XG5cdFx0YXJyYXkgPSBkb3VidChhcnJheSkuQVNfQVJSQVkgPyBhcnJheSA6IGRvdWJ0KHRoaXMpLkFTX0FSUkFZID8gdGhpcyA6IFtdO1xuXHRcblx0XHR2YXIgbGlzdCA9ICgwLCBfZnJvbTIuZGVmYXVsdCkoYXJyYXksIG1hcCwgZW50aXR5KTtcblx0XG5cdFx0aWYgKGFycmF5ICE9PSB0aGlzICYmIGRvdWJ0KHRoaXMpLkFSUkFZKSB7XG5cdFx0XHRsaXN0ID0gbGlzdC5jb25jYXQodGhpcyk7XG5cdFx0fVxuXHRcblx0XHRoYXJkZW4oXCJyYXplXCIsIHJhemUuYmluZChsaXN0KSwgbGlzdCk7XG5cdFxuXHRcdHJldHVybiBsaXN0O1xuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSByYXplO1xuXG5cbi8qKiovIH0sXG4vKiAxMDQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0Lyo7XG5cdFx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFx0VGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cdFx0XHRAbWl0LWxpY2Vuc2Vcblx0XG5cdFx0XHRDb3B5cmlnaHQgKEBjKSAyMDE2IFJpY2hldmUgU2lvZGluYSBCZWJlZG9yXG5cdFx0XHRAZW1haWw6IHJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cblx0XG5cdFx0XHRQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5cdFx0XHRvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5cdFx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0XHR0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5cdFx0XHRjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcblx0XHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cdFxuXHRcdFx0VGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5cdFx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXHRcblx0XHRcdFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcblx0XHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdFx0RklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5cdFx0XHRBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5cdFx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdFx0T1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblx0XHRcdFNPRlRXQVJFLlxuXHRcdEBlbmQtbW9kdWxlLWxpY2Vuc2Vcblx0XG5cdFx0QG1vZHVsZS1jb25maWd1cmF0aW9uOlxuXHRcdFx0e1xuXHRcdFx0XHRcInBhY2thZ2VcIjogXCJzdHVmZmVkXCIsXG5cdFx0XHRcdFwicGF0aFwiOiBcInN0dWZmZWQvc3R1ZmZlZC5qc1wiLFxuXHRcdFx0XHRcImZpbGVcIjogXCJzdHVmZmVkLmpzXCIsXG5cdFx0XHRcdFwibW9kdWxlXCI6IFwic3R1ZmZlZFwiLFxuXHRcdFx0XHRcImF1dGhvclwiOiBcIlJpY2hldmUgUy4gQmViZWRvclwiLFxuXHRcdFx0XHRcImNvbnRyaWJ1dG9yc1wiOiBbXG5cdFx0XHRcdFx0XCJKb2huIExlbm9uIE1hZ2hhbm95IDxqb2hubGVub25tYWdoYW5veUBnbWFpbC5jb20+XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJlTWFpbFwiOiBcInJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cIixcblx0XHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZvbGtvdmFzeXN0ZW1zL3N0dWZmZWQuZ2l0XCIsXG5cdFx0XHRcdFwidGVzdFwiOiBcInN0dWZmZWQtdGVzdC5qc1wiLFxuXHRcdFx0XHRcImdsb2JhbFwiOiB0cnVlXG5cdFx0XHR9XG5cdFx0QGVuZC1tb2R1bGUtY29uZmlndXJhdGlvblxuXHRcblx0XHRAbW9kdWxlLWRvY3VtZW50YXRpb246XG5cdFx0XHRDaGVjayBpZiBvYmplY3QgY29udGFpbnMgc29tZXRoaW5nLlxuXHRcdEBlbmQtbW9kdWxlLWRvY3VtZW50YXRpb25cblx0XG5cdFx0QGluY2x1ZGU6XG5cdFx0XHR7XG5cdFx0XHRcdFwiZG91YnRcIjogXCJkb3VidFwiLFxuXHRcdFx0XHRcImtvdW50XCI6IFwia291bnRcIixcblx0XHRcdFx0XCJwcm90eXBlXCI6IFwicHJvdHlwZVwiLFxuXHRcdFx0XHRcInRydWx5XCI6IFwidHJ1bHlcIlxuXHRcdFx0fVxuXHRcdEBlbmQtaW5jbHVkZVxuXHQqL1xuXHRcblx0dmFyIGRvdWJ0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OCk7XG5cdHZhciBrb3VudCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdHZhciBwcm90eXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MCk7XG5cdHZhciB0cnVseSA9IF9fd2VicGFja19yZXF1aXJlX18oMTAwKTtcblx0XG5cdHZhciBzdHVmZmVkID0gZnVuY3Rpb24gc3R1ZmZlZChvYmplY3QpIHtcblx0XHQvKjtcblx0IFx0QG1ldGEtY29uZmlndXJhdGlvbjpcblx0IFx0XHR7XG5cdCBcdFx0XHRcIm9iamVjdDpyZXF1aXJlZFwiOiBcIm9iamVjdFwiXG5cdCBcdFx0fVxuXHQgXHRAZW5kLW1ldGEtY29uZmlndXJhdGlvblxuXHQgKi9cblx0XG5cdFx0aWYgKGRvdWJ0KG9iamVjdCkuQVNfQVJSQVkgfHwgIXByb3R5cGUob2JqZWN0LCBPQkpFQ1QpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIG9iamVjdFwiKTtcblx0XHR9XG5cdFxuXHRcdHJldHVybiB0cnVseShvYmplY3QpICYmIGtvdW50KG9iamVjdCkgIT0gMDtcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gc3R1ZmZlZDtcblxuXG4vKioqLyB9LFxuLyogMTA1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdC8qO1xuXHRcdEBtb2R1bGUtbGljZW5zZTpcblx0XHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdFx0QG1pdC1saWNlbnNlXG5cdFxuXHRcdFx0Q29weXJpZ2h0IChAYykgMjAxNyBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cdFxuXHRcdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdFx0aW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuXHRcdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0XHRmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXHRcblx0XHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdFx0Y29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblx0XG5cdFx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0XHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0XHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdFx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0XHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0XHRTT0ZUV0FSRS5cblx0XHRAZW5kLW1vZHVsZS1saWNlbnNlXG5cdFxuXHRcdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHRcdHtcblx0XHRcdFx0XCJwYWNrYWdlXCI6IFwidTIwMGJcIixcblx0XHRcdFx0XCJwYXRoXCI6IFwidTIwMGIvdTIwMGIuanNcIixcblx0XHRcdFx0XCJmaWxlXCI6IFwidTIwMGIuanNcIixcblx0XHRcdFx0XCJtb2R1bGVcIjogXCJ1MjAwYlwiLFxuXHRcdFx0XHRcImF1dGhvclwiOiBcIlJpY2hldmUgUy4gQmViZWRvclwiLFxuXHRcdFx0XHRcImNvbnRyaWJ1dG9yc1wiOiBbXG5cdFx0XHRcdFx0XCJKb2huIExlbm9uIE1hZ2hhbm95IDxqb2hubGVub25tYWdoYW5veUBnbWFpbC5jb20+XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJlTWFpbFwiOiBcInJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cIixcblx0XHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZvbGtvdmFzeXN0ZW1zL3UyMDBiLmdpdFwiLFxuXHRcdFx0XHRcImdsb2JhbFwiOiB0cnVlLFxuXHRcdFx0XHRcImNsYXNzXCI6IHRydWVcblx0XHRcdH1cblx0XHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cdFxuXHRcdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRcdEFwcGVuZCwgcHJlcGVuZCwgYW5kIGluc2VydCB6ZXJvLXdpZHRoIHNwYWNlIHRvIG5vbi1lbXB0eSBzdHJpbmcuXG5cdFxuXHRcdFx0VGhlIG1haW4gcHVycG9zZSBvZiB0aGlzIGlzIHRvIG1ha2UgdGhlIHN0cmluZyB2aXNpYmxlIGFzIGl0IGlzXG5cdFx0XHRcdGJ1dCB3ZSBjYW4gc3RpbGwgZGl2aWRlIGl0IHRoZSB3YXkgd2Ugd2FudCBpdCB0byBiZSBkaXZpZGVkLlxuXHRcdEBlbmQtbW9kdWxlLWRvY3VtZW50YXRpb25cblx0XG5cdFx0QGluY2x1ZGU6XG5cdFx0XHR7XG5cdFx0XHRcdFwiYXJpZFwiOiBcImFyaWRcIixcblx0XHRcdFx0XCJkaWF0b21cIjogXCJkaWF0b21cIixcblx0XHRcdFx0XCJoYXJkZW5cIjogXCJoYXJkZW5cIixcblx0XHRcdFx0XCJvcHRmb3JcIjogXCJvcHRmb3JcIixcblx0XHRcdFx0XCJwbG91Z2hcIjogXCJwbG91Z2hcIixcblx0XHRcdFx0XCJwcm90eXBlXCI6IFwicHJvdHlwZVwiLFxuXHRcdFx0XHRcInRydWx5XCI6IFwidHJ1bHlcIlxuXHRcdFx0fVxuXHRcdEBlbmQtaW5jbHVkZVxuXHQqL1xuXHRcblx0dmFyIGFyaWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwNik7XG5cdHZhciBjbGF6b2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwNyk7XG5cdHZhciBkaWF0b20gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMSk7XG5cdHZhciBoYXJkZW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1KTtcblx0dmFyIG9wdGZvciA9IF9fd2VicGFja19yZXF1aXJlX18oMTE4KTtcblx0dmFyIHBsb3VnaCA9IF9fd2VicGFja19yZXF1aXJlX18oMTI1KTtcblx0dmFyIHByb3R5cGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkwKTtcblx0dmFyIHRydWx5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDApO1xuXHRcblx0dmFyIFUyMDBiID0gZGlhdG9tKFwiVTIwMGJcIik7XG5cdFxuXHRoYXJkZW4oXCJVMjAwQlwiLCBcIlxcdTIwMEJcIik7XG5cdGhhcmRlbihcIlUyMDBCX0JBU0UxNlwiLCBcImZmZmZmZmZmMDAwMDIwMGJmZmZmZmZmZlwiKTtcblx0aGFyZGVuKFwiSU5TRVJUXCIsIFwiaW5zZXJ0XCIpO1xuXHRoYXJkZW4oXCJQUkVQRU5EXCIsIFwicHJlcGVuZFwiKTtcblx0aGFyZGVuKFwiQVBQRU5EXCIsIFwiYXBwZW5kXCIpO1xuXHRcblx0VTIwMGIucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiBpbml0aWFsaXplKHN0cmluZykge1xuXHRcdC8qO1xuXHQgXHRAbWV0YS1jb25maWd1cmF0aW9uOlxuXHQgXHRcdHtcblx0IFx0XHRcdFwic3RyaW5nXCI6IFtcblx0IFx0XHRcdFx0XCJzdHJpbmdcIixcblx0IFx0XHRcdFx0XCJbc3RyaW5nXVwiLFxuXHQgXHRcdFx0XHRcIi4uLlwiXG5cdCBcdFx0XHRdXG5cdCBcdFx0fVxuXHQgXHRAZW5kLW1ldGEtY29uZmlndXJhdGlvblxuXHQgKi9cblx0XG5cdFx0dmFyIHRleHQgPSBwbG91Z2goYXJndW1lbnRzKS5tYXAoZnVuY3Rpb24gKHBhcmFtZXRlcikge1xuXHRcdFx0cmV0dXJuIHBhcmFtZXRlci50b1N0cmluZygpO1xuXHRcdH0pLmZpbHRlcih0cnVseSk7XG5cdFxuXHRcdC8vOiBUaGlzIHdpbGwgaGFuZGxlIHRoZSBtb2RpZmljYXRpb24gZG9uZSB0byB0aGUgc3RyaW5ncy5cblx0XHR0aGlzLmhpc3RvcnkgPSB0aGlzLmhpc3RvcnkgfHwgW107XG5cdFxuXHRcdC8vOiBDcmVhdGUgYW4gb3JpZ2luYWwgY29weS5cblx0XHR0aGlzLnRleHQgPSBbXS5jb25jYXQodGV4dCk7XG5cdFxuXHRcdHRoaXMuc3RyaW5nID0gdGV4dDtcblx0XG5cdFx0dGhpcy5iYXNlKFUyMDBCKTtcblx0XG5cdFx0dGhpcy5pZGVudGlmeSgpO1xuXHRcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblx0XG5cdC8qO1xuXHRcdEBtZXRob2QtZG9jdW1lbnRhdGlvbjpcblx0XHRcdFRoaXMgd2lsbCBzZXQgdGhlIGRlZmF1bHQgYmFzZSB0eXBlIG9mIFUyMDBCXG5cdFx0XHRcdHRvIGFueSBiYXNlIHR5cGUgYXMgbG9uZyBhcyBpdCBpcyBzdXBwb3J0ZWQuXG5cdFxuXHRcdFx0U2V0dGluZyB0byB1c2UgVTIwMEJfQkFTRTE2IHdpbGwgbWFrZSB0aGUgc3RyaW5nIHNpemUgYmlnZ2VyLlxuXHRcdEBlbmQtbWV0aG9kLWRvY3VtZW50YXRpb25cblx0Ki9cblx0VTIwMGIucHJvdG90eXBlLmJhc2UgPSBmdW5jdGlvbiBiYXNlKHR5cGUpIHtcblx0XHQvKjtcblx0IFx0QG1ldGEtY29uZmlndXJhdGlvbjpcblx0IFx0XHR7XG5cdCBcdFx0XHRcInR5cGU6cmVxdWlyZWRcIjogW1xuXHQgXHRcdFx0XHRVMjAwQixcblx0IFx0XHRcdFx0VTIwMEJfQkFTRTE2XG5cdCBcdFx0XHRdXG5cdCBcdFx0fVxuXHQgXHRAZW5kLW1ldGEtY29uZmlndXJhdGlvblxuXHQgKi9cblx0XG5cdFx0aWYgKHR5cGUgIT09IFUyMDBCICYmIHR5cGUgIT09IFUyMDBCX0JBU0UxNikge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBiYXNlIHR5cGVcIik7XG5cdFx0fVxuXHRcblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXHRcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblx0XG5cdC8qO1xuXHRcdEBtZXRob2QtZG9jdW1lbnRhdGlvbjpcblx0XHRcdFRoaXMgd2lsbCBhdXRvLWlkZW50aWZ5IHRoZSBiYXNlIHR5cGUuXG5cdFx0QGVuZC1tZXRob2QtZG9jdW1lbnRhdGlvblxuXHQqL1xuXHRVMjAwYi5wcm90b3R5cGUuaWRlbnRpZnkgPSBmdW5jdGlvbiBpZGVudGlmeSgpIHtcblx0XHR2YXIgc3RyaW5nID0gdGhpcy5zdHJpbmcuam9pbihcIlwiKTtcblx0XG5cdFx0aWYgKG5ldyBSZWdFeHAoVTIwMEIsIFwiZ1wiKS50ZXN0KHN0cmluZykpIHtcblx0XHRcdHRoaXMudHlwZSA9IFUyMDBCO1xuXHRcdH0gZWxzZSBpZiAobmV3IFJlZ0V4cChVMjAwQl9CQVNFMTYsIFwiZ1wiKS50ZXN0KHN0cmluZykpIHtcblx0XHRcdHRoaXMudHlwZSA9IFUyMDBCX0JBU0UxNjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy50eXBlID0gVTIwMEI7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblx0XG5cdFUyMDBiLnByb3RvdHlwZS5zZXBhcmF0ZSA9IGZ1bmN0aW9uIHNlcGFyYXRlKCkge1xuXHRcdHJldHVybiB0aGlzLnN0cmluZy5qb2luKFwiXCIpLnNwbGl0KHRoaXMudHlwZSk7XG5cdH07XG5cdFxuXHRVMjAwYi5wcm90b3R5cGUucmVsZWFzZSA9IGZ1bmN0aW9uIHJlbGVhc2UoKSB7XG5cdFx0Ly86IElmIHRoZXJlIGFyZSBubyBtb2RpZmljYXRpb25zIGRvIHRoZSBkZWZhdWx0IGluc2VydC5cblx0XHRpZiAoYXJpZCh0aGlzLmhpc3RvcnkpKSB7XG5cdFx0XHR0aGlzLmluc2VydCgpO1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIFtdLmNvbmNhdCh0aGlzLnN0cmluZyk7XG5cdH07XG5cdFxuXHRVMjAwYi5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG5cdFx0cmV0dXJuIHRoaXMucmVsZWFzZSgpLmpvaW4oc2VwYXJhdG9yIHx8IFwiXCIpO1xuXHR9O1xuXHRcblx0VTIwMGIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMuam9pbigpO1xuXHR9O1xuXHRcblx0VTIwMGIucHJvdG90eXBlLnZhbHVlT2YgPSBmdW5jdGlvbiB2YWx1ZU9mKCkge1xuXHRcdHJldHVybiB0aGlzLnJlbGVhc2UoKTtcblx0fTtcblx0XG5cdFUyMDBiLnByb3RvdHlwZS5yYXcgPSBmdW5jdGlvbiByYXcoKSB7XG5cdFx0cmV0dXJuIHRoaXMudG9TdHJpbmcoKS5yZXBsYWNlKG5ldyBSZWdFeHAodGhpcy50eXBlLCBcImdcIiksIFwiXCIpO1xuXHR9O1xuXHRcblx0Lyo7XG5cdFx0QG1ldGhvZC1kb2N1bWVudGF0aW9uOlxuXHRcdFx0QXBwZW5kIHplcm8td2lkdGggc3BhY2Ugb24gZXZlcnkgZW5kIG9mIHRoZSBzdHJpbmcuXG5cdFxuXHRcdFx0SWYgbmV3IHN0cmluZ3MgcHJvY2VlZHMgdGhlIG9sZCBzZXQgc3RyaW5nc1xuXHRcdFx0XHR0aGV5IHdpbGwgYmUgYXBwZW5kZWQgYW5kIGFwcGxpZWQgd2l0aCB6ZXJvLXdpZHRoIHNwYWNlLlxuXHRcdEBlbmQtbWV0aG9kLWRvY3VtZW50YXRpb25cblx0Ki9cblx0VTIwMGIucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZChzdHJpbmcpIHtcblx0XHQvKjtcblx0IFx0QG1ldGEtY29uZmlndXJhdGlvbjpcblx0IFx0XHR7XG5cdCBcdFx0XHRcInN0cmluZ1wiOiBbXG5cdCBcdFx0XHRcdFwic3RyaW5nXCIsXG5cdCBcdFx0XHRcdFwiW3N0cmluZ11cIixcblx0IFx0XHRcdFx0XCIuLi5cIlxuXHQgXHRcdFx0XVxuXHQgXHRcdH1cblx0IFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cblx0ICovXG5cdFxuXHRcdHZhciB0ZXh0ID0gcGxvdWdoKGFyZ3VtZW50cykubWFwKGZ1bmN0aW9uIChwYXJhbWV0ZXIpIHtcblx0XHRcdHJldHVybiBwYXJhbWV0ZXIudG9TdHJpbmcoKTtcblx0XHR9KS5maWx0ZXIodHJ1bHkpIHx8IFtdO1xuXHRcblx0XHR0aGlzLnN0cmluZyA9IHRoaXMuc3RyaW5nLmNvbmNhdCh0ZXh0KS5tYXAoZnVuY3Rpb24gb25FYWNoVG9rZW4odG9rZW4pIHtcblx0XHRcdHJldHVybiB0b2tlbiArIHRoaXMudHlwZTtcblx0XHR9LmJpbmQodGhpcykpO1xuXHRcblx0XHR0aGlzLmhpc3RvcnkucHVzaChBUFBFTkQpO1xuXHRcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblx0XG5cdC8qO1xuXHRcdEBtZXRob2QtZG9jdW1lbnRhdGlvbjpcblx0XHRcdFByZXBlbmQgemVyby13aWR0aCBzcGFjZSBvbiBldmVyeSBzdGFydCBvZiB0aGUgc3RyaW5nLlxuXHRcblx0XHRcdElmIG5ldyBzdHJpbmdzIHByZWNlZWRzIHRoZSBvbGQgc2V0IHN0cmluZ3Ncblx0XHRcdFx0dGhleSB3aWxsIGJlIHByZXBlbmRlZCBhbmQgYXBwbGllZCB3aXRoIHplcm8td2lkdGggc3BhY2UuXG5cdFx0QGVuZC1tZXRob2QtZG9jdW1lbnRhdGlvblxuXHQqL1xuXHRVMjAwYi5wcm90b3R5cGUucHJlcGVuZCA9IGZ1bmN0aW9uIHByZXBlbmQoc3RyaW5nKSB7XG5cdFx0Lyo7XG5cdCBcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdCBcdFx0e1xuXHQgXHRcdFx0XCJzdHJpbmdcIjogW1xuXHQgXHRcdFx0XHRcInN0cmluZ1wiLFxuXHQgXHRcdFx0XHRcIltzdHJpbmddXCIsXG5cdCBcdFx0XHRcdFwiLi4uXCJcblx0IFx0XHRcdF1cblx0IFx0XHR9XG5cdCBcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG5cdCAqL1xuXHRcblx0XHR2YXIgdGV4dCA9IHBsb3VnaChhcmd1bWVudHMpLm1hcChmdW5jdGlvbiAocGFyYW1ldGVyKSB7XG5cdFx0XHRyZXR1cm4gcGFyYW1ldGVyLnRvU3RyaW5nKCk7XG5cdFx0fSkuZmlsdGVyKHRydWx5KSB8fCBbXTtcblx0XG5cdFx0dGhpcy5zdHJpbmcgPSB0ZXh0LmNvbmNhdCh0aGlzLnN0cmluZykubWFwKGZ1bmN0aW9uIG9uRWFjaFRva2VuKHRva2VuKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy50eXBlICsgdG9rZW47XG5cdFx0fS5iaW5kKHRoaXMpKTtcblx0XG5cdFx0dGhpcy5oaXN0b3J5LnB1c2goUFJFUEVORCk7XG5cdFxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXHRcblx0Lyo7XG5cdFx0QG1ldGhvZC1kb2N1bWVudGF0aW9uOlxuXHRcdFx0SW5zZXJ0cyB6ZXJvLXdpZHRoIHNwYWNlIG9uIGV2ZXJ5IGdhcCBvZiB0aGUgc3RyaW5nLlxuXHRcblx0XHRcdElmIG5ldyBzdHJpbmdzIGFyZSBpbnNlcnRlZCB3aXRoIHRoZSBvbGQgc2V0IHN0cmluZ3MsXG5cdFx0XHRcdHplcm8td2lkdGggc3BhY2Ugd2lsbCBiZSBhcHBsaWVkIGFsc28uXG5cdFxuXHRcdFx0SWYgYSBwYXR0ZXJuIGlzIHN1cHBsaWVkLCBpdCB3aWxsIGluc2VydCB6ZXJvLXdpZHRoIHNwYWNlXG5cdFx0XHRcdG9uIGV2ZXJ5IG9jY3VycmVuY2Ugb2YgdGhlIHBhdHRlcm4gb24gdGhlIHN0cmluZy5cblx0XHRAZW5kLW1ldGhvZC1kb2N1bWVudGF0aW9uXG5cdCovXG5cdFUyMDBiLnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbiBpbnNlcnQoc3RyaW5nLCBwYXR0ZXJuKSB7XG5cdFx0Lyo7XG5cdCBcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdCBcdFx0e1xuXHQgXHRcdFx0XCJzdHJpbmdcIjogW1xuXHQgXHRcdFx0XHRcInN0cmluZ1wiLFxuXHQgXHRcdFx0XHRcIltzdHJpbmddXCIsXG5cdCBcdFx0XHRcdFwiLi4uXCJcblx0IFx0XHRcdF0sXG5cdCBcdFx0XHRcInBhdHRlcm5cIjogXCJSZWdFeHBcIlxuXHQgXHRcdH1cblx0IFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cblx0ICovXG5cdFxuXHRcdHZhciB0ZXh0ID0gcGxvdWdoKGFyZ3VtZW50cykubWFwKGZ1bmN0aW9uIG9uRWFjaFBhcmFtZXRlcihwYXJhbWV0ZXIpIHtcblx0XHRcdGlmIChjbGF6b2YocGFyYW1ldGVyLCBSZWdFeHApKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiBwYXJhbWV0ZXIudG9TdHJpbmcoKTtcblx0XHR9KS5maWx0ZXIodHJ1bHkpIHx8IFtdO1xuXHRcblx0XHR2YXIgdGVtcGxhdGUgPSBvcHRmb3IoYXJndW1lbnRzLCBSZWdFeHApO1xuXHRcblx0XHRpZiAodHJ1bHkodGVtcGxhdGUpKSB7XG5cdFx0XHR0aGlzLnN0cmluZyA9IHRoaXMuc3RyaW5nLmNvbmNhdCh0ZXh0KS5tYXAoZnVuY3Rpb24gb25FYWNoVG9rZW4odG9rZW4pIHtcblx0XHRcdFx0cmV0dXJuIHRva2VuLnJlcGxhY2UodGVtcGxhdGUsIHRoaXMudHlwZSk7XG5cdFx0XHR9LmJpbmQodGhpcykpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnN0cmluZyA9IHRoaXMuc3RyaW5nLmNvbmNhdCh0ZXh0KS5qb2luKHRoaXMudHlwZSArIFwiWyxdXCIpLnNwbGl0KFwiWyxdXCIpO1xuXHRcdH1cblx0XG5cdFx0dGhpcy5oaXN0b3J5LnB1c2goSU5TRVJUKTtcblx0XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cdFxuXHQvKjtcblx0XHRAbWV0aG9kLWRvY3VtZW50YXRpb246XG5cdFx0XHRSZXZlcnRzIHRvIHRoZSBvcmlnaW5hbCBzdHJpbmcuXG5cdFxuXHRcdFx0Q2xlYXJzIGhpc3RvcnkuXG5cdFxuXHRcdFx0VGhpcyBkb2VzIG5vdCBpbmNsdWRlIGFwcGVuZGVkLCBwcmVwZW5kZWQgb3IgaW5zZXJ0ZWQgc3RyaW5ncy5cblx0XHRcdFx0U28gdGhlIG9yaWdpbmFsIHN0cmluZyBpcyB0aGUgb25lIHlvdSBpbml0aWFsaXplLlxuXHRcdEBlbmQtbWV0aG9kLWRvY3VtZW50YXRpb25cblx0Ki9cblx0VTIwMGIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG5cdFx0dGhpcy5zdHJpbmcgPSB0aGlzLnRleHQ7XG5cdFxuXHRcdHRoaXMuaGlzdG9yeSA9IFtdO1xuXHRcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gVTIwMGI7XG5cblxuLyoqKi8gfSxcbi8qIDEwNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHQvKjtcblx0XHRAbW9kdWxlLWxpY2Vuc2U6XG5cdFx0XHRUaGUgTUlUIExpY2Vuc2UgKE1JVClcblx0XHRcdEBtaXQtbGljZW5zZVxuXHRcblx0XHRcdENvcHlyaWdodCAoQGMpIDIwMTYgUmljaGV2ZSBTaW9kaW5hIEJlYmVkb3Jcblx0XHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXHRcblx0XHRcdFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcblx0XHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRcdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0XHRcdHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcblx0XHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdFx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblx0XG5cdFx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRcdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cdFxuXHRcdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdFx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdFx0XHRGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcblx0XHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRcdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdFx0XHRPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuXHRcdFx0U09GVFdBUkUuXG5cdFx0QGVuZC1tb2R1bGUtbGljZW5zZVxuXHRcblx0XHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0XHR7XG5cdFx0XHRcdFwicGFja2FnZVwiOiBcImFyaWRcIixcblx0XHRcdFx0XCJwYXRoXCI6IFwiYXJpZC9hcmlkLmpzXCIsXG5cdFx0XHRcdFwiZmlsZVwiOiBcImFyaWQuanNcIixcblx0XHRcdFx0XCJtb2R1bGVcIjogXCJhcmlkXCIsXG5cdFx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcdFwiY29udHJpYnV0b3JzXCI6IFtcblx0XHRcdFx0XHRcIkpvaG4gTGVub24gTWFnaGFub3kgPGpvaG5sZW5vbm1hZ2hhbm95QGdtYWlsLmNvbT5cIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XHRcInJlcG9zaXRvcnlcIjogXCJodHRwczovL2dpdGh1Yi5jb20vdm9sa292YXN5c3RlbXMvYXJpZC5naXRcIixcblx0XHRcdFx0XCJ0ZXN0XCI6IFwiYXJpZC10ZXN0LmpzXCIsXG5cdFx0XHRcdFwiZ2xvYmFsXCI6IHRydWVcblx0XHRcdH1cblx0XHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cdFxuXHRcdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRcdENoZWNrIGlmIGFycmF5IGlzIGFic29sdXRlbHkgZW1wdHkuXG5cdFxuXHRcdFx0QXJyYXkgY29udGFpbmluZyBmYWxzeSB2YWx1ZXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBlbXB0eS5cblx0XHRAZW5kLW1vZHVsZS1kb2N1bWVudGF0aW9uXG5cdFxuXHRcdEBpbmNsdWRlOlxuXHRcdFx0e1xuXHRcdFx0XHRcImRvdWJ0XCI6IFwiZG91YnRcIixcblx0XHRcdFx0XCJ0cnVseVwiOiBcInRydWx5XCJcblx0XHRcdH1cblx0XHRAZW5kLWluY2x1ZGVcblx0Ki9cblx0XG5cdHZhciBkb3VidCA9IF9fd2VicGFja19yZXF1aXJlX18oNDgpO1xuXHR2YXIgdHJ1bHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMCk7XG5cdFxuXHR2YXIgYXJpZCA9IGZ1bmN0aW9uIGFyaWQoYXJyYXkpIHtcblx0XHQvKjtcblx0IFx0QG1ldGEtY29uZmlndXJhdGlvbjpcblx0IFx0XHR7XG5cdCBcdFx0XHRcImFycmF5OnJlcXVpcmVkXCI6IFwiWypdXCJcblx0IFx0XHR9XG5cdCBcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG5cdCAqL1xuXHRcblx0XHRpZiAoIWRvdWJ0KGFycmF5KS5BUlJBWSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBhcnJheVwiKTtcblx0XHR9XG5cdFxuXHRcdHJldHVybiBhcnJheS5sZW5ndGggPT0gMCB8fCBhcnJheS5maWx0ZXIodHJ1bHkpLmxlbmd0aCA9PSAwO1xuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBhcmlkO1xuXG5cbi8qKiovIH0sXG4vKiAxMDcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0Lyo7XG5cdFx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFx0VGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cdFx0XHRAbWl0LWxpY2Vuc2Vcblx0XG5cdFx0XHRDb3B5cmlnaHQgKEBjKSAyMDE3IFJpY2hldmUgU2lvZGluYSBCZWJlZG9yXG5cdFx0XHRAZW1haWw6IHJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cblx0XG5cdFx0XHRQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5cdFx0XHRvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5cdFx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0XHR0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5cdFx0XHRjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcblx0XHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cdFxuXHRcdFx0VGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5cdFx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXHRcblx0XHRcdFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcblx0XHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdFx0RklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5cdFx0XHRBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5cdFx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdFx0T1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblx0XHRcdFNPRlRXQVJFLlxuXHRcdEBlbmQtbW9kdWxlLWxpY2Vuc2Vcblx0XG5cdFx0QG1vZHVsZS1jb25maWd1cmF0aW9uOlxuXHRcdFx0e1xuXHRcdFx0XHRcInBhY2thZ2VcIjogXCJjbGF6b2ZcIixcblx0XHRcdFx0XCJwYXRoXCI6IFwiY2xhem9mL2NsYXpvZi5qc1wiLFxuXHRcdFx0XHRcImZpbGVcIjogXCJjbGF6b2YuanNcIixcblx0XHRcdFx0XCJtb2R1bGVcIjogXCJjbGF6b2ZcIixcblx0XHRcdFx0XCJhdXRob3JcIjogXCJSaWNoZXZlIFMuIEJlYmVkb3JcIixcblx0XHRcdFx0XCJjb250cmlidXRvcnNcIjogW1xuXHRcdFx0XHRcdFwiSm9obiBMZW5vbiBNYWdoYW5veSA8am9obmxlbm9ubWFnaGFub3lAZ21haWwuY29tPlwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZU1haWxcIjogXCJyaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXCIsXG5cdFx0XHRcdFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b2xrb3Zhc3lzdGVtcy9jbGF6b2YuZ2l0XCIsXG5cdFx0XHRcdFwidGVzdFwiOiBcImNsYXpvZi10ZXN0LmpzXCIsXG5cdFx0XHRcdFwiZ2xvYmFsXCI6IHRydWVcblx0XHRcdH1cblx0XHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cdFxuXHRcdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRcdEZ1bmN0aW9uYWwgaW5zdGFuY2VvZi5cblx0XG5cdFx0XHRUaGlzIHdpbGwgd2FsayB0aGUgaW5oZXJpdGFuY2UgdHJlZS5cblx0XHRAZW5kLW1vZHVsZS1kb2N1bWVudGF0aW9uXG5cdFxuXHRcdEBpbmNsdWRlOlxuXHRcdFx0e1xuXHRcdFx0XHRcImVlblwiOiBcImVlblwiLFxuXHRcdFx0XHRcInByb3R5cGVcIjogXCJwcm90eXBlXCJcblx0XHRcdH1cblx0XHRAZW5kLWluY2x1ZGVcblx0Ki9cblx0XG5cdHZhciBlZW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwOCk7XG5cdHZhciBwcm90eXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MCk7XG5cdFxuXHQvLzsgQHN1cHBvcnQtbW9kdWxlOlxuXHQvLzogQHJlZmVyZW5jZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvc29tZVxuXHRBcnJheS5wcm90b3R5cGUuc29tZSA9IEFycmF5LnByb3RvdHlwZS5zb21lIHx8IGZ1bmN0aW9uIChldmFsdWF0b3IsIHRoaXNBcmcpIHtcblx0XHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdFx0aWYgKCF0aGlzKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJyYXkucHJvdG90eXBlLnNvbWUgY2FsbGVkIG9uIG51bGwgb3IgdW5kZWZpbmVkXCIpO1xuXHRcdGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGV2YWx1YXRvcikge1xuXHRcdFx0aWYgKFwic3RyaW5nXCIgIT0gdHlwZW9mIGV2YWx1YXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuXHRcdFx0aWYgKCEoZXZhbHVhdG9yID0gZXZhbChldmFsdWF0b3IpKSkgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuXHRcdH12YXIgaTtcblx0XHRpZiAodm9pZCAwID09PSB0aGlzQXJnKSB7XG5cdFx0XHRmb3IgKGkgaW4gdGhpcykge1xuXHRcdFx0XHRpZiAoZXZhbHVhdG9yKHRoaXNbaV0sIGksIHRoaXMpKSByZXR1cm4gITA7XG5cdFx0XHR9cmV0dXJuICExO1xuXHRcdH1cblx0XHRmb3IgKGkgaW4gdGhpcykge1xuXHRcdFx0aWYgKGV2YWx1YXRvci5jYWxsKHRoaXNBcmcsIHRoaXNbaV0sIGksIHRoaXMpKSByZXR1cm4gITA7XG5cdFx0fXJldHVybiAhMTtcblx0fTtcblx0Ly87IEBlbmQtc3VwcG9ydC1tb2R1bGVcblx0XG5cdHZhciBjbGF6b2YgPSBmdW5jdGlvbiBjbGF6b2YoZW50aXR5LCBibHVlcHJpbnQpIHtcblx0XHQvKjtcblx0IFx0QG1ldGEtY29uZmlndXJhdGlvbjpcblx0IFx0XHR7XG5cdCBcdFx0XHRcImVudGl0eTpyZXF1aXJlZFwiOiBcIipcIixcblx0IFx0XHRcdFwiYmx1ZXByaW50OnJlcXVpcmVkXCI6IFwiZnVuY3Rpb25cIlxuXHQgXHRcdH1cblx0IFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cblx0ICovXG5cdFxuXHRcdGlmICghcHJvdHlwZShibHVlcHJpbnQsIEZVTkNUSU9OKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBibHVlcHJpbnRcIik7XG5cdFx0fVxuXHRcblx0XHRpZiAocHJvdHlwZShlbnRpdHksIE9CSkVDVCkpIHtcblx0XHRcdHZhciByZXN1bHQgPSBlbnRpdHkgaW5zdGFuY2VvZiBibHVlcHJpbnQ7XG5cdFxuXHRcdFx0Lyo7XG5cdCAgXHRAdG9kbzpcblx0ICBcdFx0SWYgd2UgY2FuIHNlcGFyYXRlIHRoaXMgdG8gYW5vdGhlciBtb2R1bGUgdGhhdCBqdXN0IHdhbGsgdGhlIGluaGVyaXRhbmNlIHRyZWUuXG5cdCAgXHRAZW5kLXRvZG9cblx0ICAqL1xuXHRcdFx0aWYgKCFyZXN1bHQpIHtcblx0XHRcdFx0dmFyIF9jb25zdHJ1Y3RvciA9IFtdO1xuXHRcdFx0XHR2YXIgcG9pbnQgPSBlbnRpdHk7XG5cdFx0XHRcdHdoaWxlIChlZW4oX2NvbnN0cnVjdG9yLCBwb2ludC5jb25zdHJ1Y3RvcikpIHtcblx0XHRcdFx0XHRfY29uc3RydWN0b3IucHVzaChwb2ludC5jb25zdHJ1Y3Rvcik7XG5cdFx0XHRcdFx0cG9pbnQgPSBwb2ludC5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdHJlc3VsdCA9IF9jb25zdHJ1Y3Rvci5zb21lKGZ1bmN0aW9uIG9uRWFjaENvbnN0cnVjdG9yKGNvbnN0cnVjdG9yKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNsYXpvZihjb25zdHJ1Y3RvciwgYmx1ZXByaW50KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKCFyZXN1bHQpIHtcblx0XHRcdFx0dmFyIF9jb25zdHJ1Y3RvcjIgPSBbXTtcblx0XHRcdFx0dmFyIF9wb2ludCA9IGVudGl0eS5jb25zdHJ1Y3Rvcjtcblx0XHRcdFx0d2hpbGUgKGVlbihfY29uc3RydWN0b3IyLCBfcG9pbnQuX19wcm90b19fKSkge1xuXHRcdFx0XHRcdF9jb25zdHJ1Y3RvcjIucHVzaChfcG9pbnQuX19wcm90b19fKTtcblx0XHRcdFx0XHRfcG9pbnQgPSBfcG9pbnQuX19wcm90b19fO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRyZXN1bHQgPSBfY29uc3RydWN0b3IyLnNvbWUoZnVuY3Rpb24gb25FYWNoQ29uc3RydWN0b3IoY29uc3RydWN0b3IpIHtcblx0XHRcdFx0XHRyZXR1cm4gY2xhem9mKGNvbnN0cnVjdG9yLCBibHVlcHJpbnQpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH0gZWxzZSBpZiAocHJvdHlwZShlbnRpdHksIEZVTkNUSU9OKSkge1xuXHRcdFx0ZW50aXR5Lm5hbWUgPT09IGJsdWVwcmludC5uYW1lICYmIGVudGl0eS50b1N0cmluZygpID09PSBibHVlcHJpbnQudG9TdHJpbmcoKTtcblx0XHR9XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGNsYXpvZjtcblxuXG4vKioqLyB9LFxuLyogMTA4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdC8qO1xuXHRcdEBtb2R1bGUtbGljZW5zZTpcblx0XHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdFx0QG1pdC1saWNlbnNlXG5cdFxuXHRcdFx0Q29weXJpZ2h0IChAYykgMjAxNyBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cdFxuXHRcdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdFx0aW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuXHRcdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0XHRmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXHRcblx0XHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdFx0Y29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblx0XG5cdFx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0XHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0XHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdFx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0XHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0XHRTT0ZUV0FSRS5cblx0XHRAZW5kLW1vZHVsZS1saWNlbnNlXG5cdFxuXHRcdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHRcdHtcblx0XHRcdFx0XCJwYWNrYWdlXCI6IFwiZWVuXCIsXG5cdFx0XHRcdFwicGF0aFwiOiBcImVlbi9lZW4uanNcIixcblx0XHRcdFx0XCJmaWxlXCI6IFwiZWVuLmpzXCIsXG5cdFx0XHRcdFwibW9kdWxlXCI6IFwiZWVuXCIsXG5cdFx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcdFwiZU1haWxcIjogXCJyaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXCIsXG5cdFx0XHRcdFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b2xrb3Zhc3lzdGVtcy9lZW4uZ2l0XCIsXG5cdFx0XHRcdFwidGVzdFwiOiBcImVlbi10ZXN0LmpzXCIsXG5cdFx0XHRcdFwiZ2xvYmFsXCI6IHRydWVcblx0XHRcdH1cblx0XHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cdFxuXHRcdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRcdENoZWNrcyBpZiBhcnJheSBjb250YWlucyB0aGUgZ2l2ZW4gdmFsdWUuXG5cdFx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXHRcblx0XHRAaW5jbHVkZTpcblx0XHRcdHtcblx0XHRcdFx0XCJkb3VidFwiOiBcImRvdWJ0XCIsXG5cdFx0XHRcdFwia2VpblwiOiBcImtlaW5cIixcblx0XHRcdFx0XCJwcm90eXBlXCI6IFwicHJvdHlwZVwiLFxuXHRcdFx0XHRcInRydWx5XCI6IFwidHJ1bHlcIlxuXHRcdFx0fVxuXHRcdEBlbmQtaW5jbHVkZVxuXHQqL1xuXHRcblx0dmFyIGRvdWJ0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OCk7XG5cdHZhciBrZWluID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDkpO1xuXHR2YXIgcHJvdHlwZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTApO1xuXHR2YXIgdHJ1bHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMCk7XG5cdFxuXHQvLzsgQHN1cHBvcnQtbW9kdWxlOlxuXHQvLzogQHJlZmVyZW5jZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvc29tZVxuXHRBcnJheS5wcm90b3R5cGUuc29tZSA9IEFycmF5LnByb3RvdHlwZS5zb21lIHx8IGZ1bmN0aW9uIChldmFsdWF0b3IsIHRoaXNBcmcpIHtcblx0XHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdFx0aWYgKCF0aGlzKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJyYXkucHJvdG90eXBlLnNvbWUgY2FsbGVkIG9uIG51bGwgb3IgdW5kZWZpbmVkXCIpO1xuXHRcdGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGV2YWx1YXRvcikge1xuXHRcdFx0aWYgKFwic3RyaW5nXCIgIT0gdHlwZW9mIGV2YWx1YXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuXHRcdFx0aWYgKCEoZXZhbHVhdG9yID0gZXZhbChldmFsdWF0b3IpKSkgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuXHRcdH12YXIgaTtcblx0XHRpZiAodm9pZCAwID09PSB0aGlzQXJnKSB7XG5cdFx0XHRmb3IgKGkgaW4gdGhpcykge1xuXHRcdFx0XHRpZiAoZXZhbHVhdG9yKHRoaXNbaV0sIGksIHRoaXMpKSByZXR1cm4gITA7XG5cdFx0XHR9cmV0dXJuICExO1xuXHRcdH1cblx0XHRmb3IgKGkgaW4gdGhpcykge1xuXHRcdFx0aWYgKGV2YWx1YXRvci5jYWxsKHRoaXNBcmcsIHRoaXNbaV0sIGksIHRoaXMpKSByZXR1cm4gITA7XG5cdFx0fXJldHVybiAhMTtcblx0fTtcblx0Ly87IEBlbmQtc3VwcG9ydC1tb2R1bGVcblx0XG5cdHZhciBlZW4gPSBmdW5jdGlvbiBlZW4oYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG5cdFx0Lyo7XG5cdCBcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdCBcdFx0e1xuXHQgXHRcdFx0XCJhcnJheTpyZXF1aXJlZFwiOiBcIkFycmF5XCIsXG5cdCBcdFx0XHRcInZhbHVlOnJlcXVpcmVkXCI6IFwiKlwiLFxuXHQgXHRcdFx0XCJjb21wYXJhdG9yXCI6IFwiZnVuY3Rpb25cIlxuXHQgXHRcdH1cblx0IFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cblx0ICovXG5cdFxuXHRcdGlmICghZG91YnQoYXJyYXksIEFTX0FSUkFZKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBhcnJheVwiKTtcblx0XHR9XG5cdFxuXHRcdGlmICh0cnVseShjb21wYXJhdG9yKSAmJiAhcHJvdHlwZShjb21wYXJhdG9yLCBGVU5DVElPTikpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY29tcGFyYXRvclwiKTtcblx0XHR9XG5cdFxuXHRcdGNvbXBhcmF0b3IgPSBjb21wYXJhdG9yIHx8IGZ1bmN0aW9uIGNvbXBhcmF0b3IoaXRlbSwgdmFsdWUpIHtcblx0XHRcdGlmIChwcm90eXBlKGl0ZW0sIE9CSkVDVCkgJiYga2VpbihpdGVtLCBcInRvU3RyaW5nXCIpICYmIGtlaW4odmFsdWUsIFwidG9TdHJpbmdcIikpIHtcblx0XHRcdFx0cmV0dXJuIGl0ZW0udG9TdHJpbmcoKSA9PT0gdmFsdWUudG9TdHJpbmcoKSB8fCBpdGVtID09PSB2YWx1ZTtcblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gaXRlbSA9PT0gdmFsdWU7XG5cdFx0fTtcblx0XG5cdFx0cmV0dXJuIGFycmF5LnNvbWUoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyYXRvcihpdGVtLCB2YWx1ZSwgaW5kZXgpO1xuXHRcdH0pO1xuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBlZW47XG5cblxuLyoqKi8gfSxcbi8qIDEwOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHQvKjtcblx0XHRAbW9kdWxlLWxpY2Vuc2U6XG5cdFx0XHRUaGUgTUlUIExpY2Vuc2UgKE1JVClcblx0XHRcdEBtaXQtbGljZW5zZVxuXHRcblx0XHRcdENvcHlyaWdodCAoQGMpIDIwMTcgUmljaGV2ZSBTaW9kaW5hIEJlYmVkb3Jcblx0XHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXHRcblx0XHRcdFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcblx0XHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRcdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0XHRcdHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcblx0XHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdFx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblx0XG5cdFx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRcdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cdFxuXHRcdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdFx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdFx0XHRGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcblx0XHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRcdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdFx0XHRPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuXHRcdFx0U09GVFdBUkUuXG5cdFx0QGVuZC1tb2R1bGUtbGljZW5zZVxuXHRcblx0XHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0XHR7XG5cdFx0XHRcdFwicGFja2FnZVwiOiBcImtlaW5cIixcblx0XHRcdFx0XCJwYXRoXCI6IFwia2Vpbi9rZWluLmpzXCIsXG5cdFx0XHRcdFwiZmlsZVwiOiBcImtlaW4uanNcIixcblx0XHRcdFx0XCJtb2R1bGVcIjogXCJrZWluXCIsXG5cdFx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcdFwiZU1haWxcIjogXCJyaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXCIsXG5cdFx0XHRcdFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b2xrb3Zhc3lzdGVtcy9rZWluLmdpdFwiLFxuXHRcdFx0XHRcInRlc3RcIjogXCJrZWluLXRlc3QuanNcIixcblx0XHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdFx0fVxuXHRcdEBlbmQtbW9kdWxlLWNvbmZpZ3VyYXRpb25cblx0XG5cdFx0QG1vZHVsZS1kb2N1bWVudGF0aW9uOlxuXHRcdFx0Q2hlY2sgaWYga2V5IGV4aXN0cyBvbiB0aGUgZW50aXR5LlxuXHRcdEBlbmQtbW9kdWxlLWRvY3VtZW50YXRpb25cblx0XG5cdFx0QGluY2x1ZGU6XG5cdFx0XHR7XG5cdFx0XHRcdFwiZmFsenlcIjogXCJmYWx6eVwiLFxuXHRcdFx0XHRcInByb3R5cGVcIjogXCJwcm90eXBlXCJcblx0XHRcdH1cblx0XHRAZW5kLWluY2x1ZGVcblx0Ki9cblx0XG5cdHZhciBmYWx6eSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEwKTtcblx0dmFyIHByb3R5cGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkwKTtcblx0XG5cdHZhciBrZWluID0gZnVuY3Rpb24ga2VpbihlbnRpdHksIGtleSkge1xuXHRcdC8qO1xuXHQgXHRAbWV0YS1jb25maWd1cmF0aW9uOlxuXHQgXHRcdHtcblx0IFx0XHRcdFwiZW50aXR5OnJlcXVpcmVkXCI6IFtcblx0IFx0XHRcdFx0XCJvYmplY3RcIixcblx0IFx0XHRcdFx0XCJmdW5jdGlvblwiXG5cdCBcdFx0XHRdLFxuXHQgXHRcdFx0XCJrZXk6cmVxdWlyZWRcIjogW1xuXHQgXHRcdFx0XHRcInN0cmluZ1wiLFxuXHQgXHRcdFx0XHRcIm51bWJlclwiLFxuXHQgXHRcdFx0XHRcInN5bWJvbFwiXG5cdCBcdFx0XHRdXG5cdCBcdFx0fVxuXHQgXHRAZW5kLW1ldGEtY29uZmlndXJhdGlvblxuXHQgKi9cblx0XG5cdFx0aWYgKCFwcm90eXBlKGVudGl0eSwgT0JKRUNULCBGVU5DVElPTikgfHwgZmFsenkoZW50aXR5KSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBlbnRpdHlcIik7XG5cdFx0fVxuXHRcblx0XHRpZiAoZmFsenkoa2V5KSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBrZXlcIik7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gZW50aXR5W2tleV0gIT09IHVuZGVmaW5lZDtcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0ga2VpbjtcblxuXG4vKioqLyB9LFxuLyogMTEwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdC8qO1xuXHRcdEBtb2R1bGUtbGljZW5zZTpcblx0XHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdFx0QG1pdC1saWNlbnNlXG5cdFxuXHRcdFx0Q29weXJpZ2h0IChAYykgMjAxNiBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cdFxuXHRcdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdFx0aW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuXHRcdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0XHRmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXHRcblx0XHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdFx0Y29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblx0XG5cdFx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0XHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0XHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdFx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0XHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0XHRTT0ZUV0FSRS5cblx0XHRAZW5kLW1vZHVsZS1saWNlbnNlXG5cdFxuXHRcdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHRcdHtcblx0XHRcdFx0XCJwYWNrYWdlXCI6IFwiZmFsenlcIixcblx0XHRcdFx0XCJwYXRoXCI6IFwiZmFsenkvZmFsenkuanNcIixcblx0XHRcdFx0XCJmaWxlXCI6IFwiZmFsenkuanNcIixcblx0XHRcdFx0XCJtb2R1bGVcIjogXCJmYWx6eVwiLFxuXHRcdFx0XHRcImF1dGhvclwiOiBcIlJpY2hldmUgUy4gQmViZWRvclwiLFxuXHRcdFx0XHRcImNvbnRyaWJ1dG9yc1wiOiBbXG5cdFx0XHRcdFx0XCJKb2huIExlbm9uIE1hZ2hhbm95IDxqb2hubGVub25tYWdoYW5veUBnbWFpbC5jb20+XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJlTWFpbFwiOiBcInJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cIixcblx0XHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZvbGtvdmFzeXN0ZW1zL2ZhbHp5LmdpdFwiLFxuXHRcdFx0XHRcInRlc3RcIjogXCJmYWx6eS10ZXN0LmpzXCIsXG5cdFx0XHRcdFwiZ2xvYmFsXCI6IHRydWVcblx0XHRcdH1cblx0XHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cdFxuXHRcdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRcdENoZWNrIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG51bGwsIGVtcHR5IHN0cmluZywgTmFOIGFuZCBJbmZpbml0eS5cblx0XHRAZW5kLW1vZHVsZS1kb2N1bWVudGF0aW9uXG5cdFxuXHRcdEBpbmNsdWRlOlxuXHRcdFx0e1xuXHRcdFx0XHRcInByb3R5cGVcIjogXCJwcm90eXBlXCJcblx0XHRcdH1cblx0XHRAZW5kLWluY2x1ZGVcblx0Ki9cblx0XG5cdHZhciBwcm90eXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MCk7XG5cdFxuXHR2YXIgZmFsenkgPSBmdW5jdGlvbiBmYWx6eSh2YWx1ZSkge1xuXHRcdC8qO1xuXHQgXHRAbWV0YS1jb25maWd1cmF0aW9uOlxuXHQgXHRcdHtcblx0IFx0XHRcdFwidmFsdWU6cmVxdWlyZWRcIjogXCIqXCJcblx0IFx0XHR9XG5cdCBcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG5cdCAqL1xuXHRcblx0XHR2YXIgdmFsdWVUeXBlID0gcHJvdHlwZSh2YWx1ZSk7XG5cdFx0aWYgKHZhbHVlVHlwZS5OVU1CRVIpIHtcblx0XHRcdHJldHVybiBpc05hTih2YWx1ZSkgfHwgIWlzRmluaXRlKHZhbHVlKTtcblx0XHR9XG5cdFxuXHRcdHJldHVybiB2YWx1ZVR5cGUuVU5ERUZJTkVEIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSBcIlwiO1xuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmYWx6eTtcblxuXG4vKioqLyB9LFxuLyogMTExICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBfZnJvbSA9IF9fd2VicGFja19yZXF1aXJlX18oOTEpO1xuXHRcblx0dmFyIF9mcm9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Zyb20pO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdC8qO1xuXHRcdEBtb2R1bGUtbGljZW5zZTpcblx0XHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdFx0QG1pdC1saWNlbnNlXG5cdFxuXHRcdFx0Q29weXJpZ2h0IChAYykgMjAxNiBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cdFxuXHRcdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdFx0aW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuXHRcdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0XHRmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXHRcblx0XHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdFx0Y29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblx0XG5cdFx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0XHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0XHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdFx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0XHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0XHRTT0ZUV0FSRS5cblx0XHRAZW5kLW1vZHVsZS1saWNlbnNlXG5cdFxuXHRcdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHRcdHtcblx0XHRcdFx0XCJwYWNrYWdlXCI6IFwiZGlhdG9tXCIsXG5cdFx0XHRcdFwicGF0aFwiOiBcImRpYXRvbS9kaWF0b20uanNcIixcblx0XHRcdFx0XCJmaWxlXCI6IFwiZGlhdG9tLmpzXCIsXG5cdFx0XHRcdFwibW9kdWxlXCI6IFwiZGlhdG9tXCIsXG5cdFx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcdFwiY29udHJpYnV0b3JzXCI6IFtcblx0XHRcdFx0XHRcIkpvaG4gTGVub24gTWFnaGFub3kgPGpvaG5sZW5vbm1hZ2hhbm95QGdtYWlsLmNvbT5cIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XHRcInJlcG9zaXRvcnlcIjogXCJodHRwczovL2dpdGh1Yi5jb20vdm9sa292YXN5c3RlbXMvZGlhdG9tLmdpdFwiLFxuXHRcdFx0XHRcInRlc3RcIjogXCJkaWF0b20tdGVzdC5qc1wiLFxuXHRcdFx0XHRcImdsb2JhbFwiOiB0cnVlXG5cdFx0XHR9XG5cdFx0QGVuZC1tb2R1bGUtY29uZmlndXJhdGlvblxuXHRcblx0XHRAbW9kdWxlLWRvY3VtZW50YXRpb246XG5cdFx0XHRDbGFzcyBibHVlcHJpbnQuXG5cdFx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXHRcblx0XHRAaW5jbHVkZTpcblx0XHRcdHtcblx0XHRcdFx0XCJmYWx6eVwiOiBcImZhbHp5XCIsXG5cdFx0XHRcdFwia29tZW50b1wiOiBcImtvbWVudG9cIixcblx0XHRcdFx0XCJsbGFtYWxpemVcIjogXCJsbGFtYWxpemVcIixcblx0XHRcdFx0XCJwcm90eXBlXCI6IFwicHJvdHlwZVwiXG5cdFx0XHR9XG5cdFx0QGVuZC1pbmNsdWRlXG5cdCovXG5cdFxuXHR2YXIgZmFsenkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMCk7XG5cdHZhciBrb21lbnRvID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTIpO1xuXHR2YXIgbGxhbWFsaXplID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTUpO1xuXHR2YXIgcHJvdHlwZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTApO1xuXHRcblx0Ly86IEBzdXBwb3J0LW1vZHVsZTpcblx0Ly86IEByZWZlcmVuY2U6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2Zyb21cblx0X2Zyb20yLmRlZmF1bHQgfHwgKEFycmF5LmZyb20gPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLFxuXHRcdCAgICBuID0gZnVuY3Rpb24gbihfbikge1xuXHRcdFx0cmV0dXJuIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgX24gfHwgXCJbb2JqZWN0IEZ1bmN0aW9uXVwiID09PSByLmNhbGwoX24pO1xuXHRcdH0sXG5cdFx0ICAgIHQgPSBmdW5jdGlvbiB0KHIpIHtcblx0XHRcdHZhciBuID0gTnVtYmVyKHIpO1xuXHRcdFx0cmV0dXJuIGlzTmFOKG4pID8gMCA6IDAgIT09IG4gJiYgaXNGaW5pdGUobikgPyAobiA+IDAgPyAxIDogLTEpICogTWF0aC5mbG9vcihNYXRoLmFicyhuKSkgOiBuO1xuXHRcdH0sXG5cdFx0ICAgIGUgPSBNYXRoLnBvdygyLCA1MykgLSAxLFxuXHRcdCAgICBvID0gZnVuY3Rpb24gbyhyKSB7XG5cdFx0XHR2YXIgbiA9IHQocik7cmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIDApLCBlKTtcblx0XHR9O1xuXHRcdHJldHVybiBmdW5jdGlvbiAocikge1xuXHRcdFx0dmFyIHQgPSB0aGlzLFxuXHRcdFx0ICAgIGUgPSBPYmplY3Qocik7XG5cdFx0XHRpZiAobnVsbCA9PSByKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJyYXkuZnJvbSByZXF1aXJlcyBhbiBhcnJheS1saWtlIG9iamVjdCAtIG5vdCBudWxsIG9yIHVuZGVmaW5lZFwiKTtcblx0XHRcdHZhciBhLFxuXHRcdFx0ICAgIHUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHZvaWQgMDtpZiAoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgdSkge1xuXHRcdFx0XHRpZiAoIW4odSkpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBcnJheS5mcm9tOiB3aGVuIHByb3ZpZGVkLCB0aGUgc2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvblwiKTtcblx0XHRcdFx0YXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgKGEgPSBhcmd1bWVudHNbMl0pO1xuXHRcdFx0fWZvciAodmFyIGksIGYgPSBvKGUubGVuZ3RoKSwgYyA9IG4odCkgPyBPYmplY3QobmV3IHQoZikpIDogbmV3IEFycmF5KGYpLCBoID0gMDsgZiA+IGg7KSB7XG5cdFx0XHRcdGkgPSBlW2hdLCB1ID8gY1toXSA9IFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIGEgPyB1KGksIGgpIDogdS5jYWxsKGEsIGksIGgpIDogY1toXSA9IGksIGggKz0gMTtcblx0XHRcdH1yZXR1cm4gYy5sZW5ndGggPSBmLCBjO1xuXHRcdH07XG5cdH0oKSk7XG5cdC8vOiBAZW5kLXN1cHBvcnQtbW9kdWxlXG5cdFxuXHR2YXIgZGlhdG9tID0gZnVuY3Rpb24gZGlhdG9tKG5hbWUpIHtcblx0XHQvKjtcblx0IFx0QG1ldGEtY29uZmlndXJhdGlvbjpcblx0IFx0XHR7XG5cdCBcdFx0XHRcIm5hbWU6cmVxdWlyZWRcIjogXCJzdHJpbmdcIlxuXHQgXHRcdH1cblx0IFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cblx0ICovXG5cdFxuXHRcdGlmICghcHJvdHlwZShuYW1lLCBTVFJJTkcpIHx8IGZhbHp5KG5hbWUpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIG5hbWVcIik7XG5cdFx0fVxuXHRcblx0XHRpZiAoIS9eW0EtWl1bQS1aYS16MC05XSskLy50ZXN0KG5hbWUpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJuYW1lIGlzIG5vdCBzaW1wbGVcIik7XG5cdFx0fVxuXHRcblx0XHRuYW1lID0gbGxhbWFsaXplKG5hbWUsIHRydWUpO1xuXHRcblx0XHR0cnkge1xuXHRcdFx0dmFyIGJsdWVwcmludCA9IGtvbWVudG8oZnVuY3Rpb24gdGVtcGxhdGUoKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcblxcdFxcdFxcdFxcdGZ1bmN0aW9uIHt7bmFtZX19KCBvcHRpb24sIGNhbGxiYWNrICl7XFxuXFx0XFx0XFx0XFx0XFx0dmFyIHBhcmFtZXRlciA9IEFycmF5LmZyb20oIGFyZ3VtZW50cyApO1xcblxcblxcdFxcdFxcdFxcdFxcdHZhciB0ZW1wbGF0ZSA9IFxcXCIoIGZ1bmN0aW9uIGV2YWx1YXRlKCApeyB2YXIgcmVzdWx0ID0gdW5kZWZpbmVkOyBAYm9keSByZXR1cm4gcmVzdWx0OyB9ICkuYmluZCggQGJpbmQgKSggKVxcXCJcXG5cXHRcXHRcXHRcXHRcXHRcXHQucmVwbGFjZSggXFxcIkBiaW5kXFxcIiwgXFxcIiggdHlwZW9mIGdsb2JhbCAhPSAndW5kZWZpbmVkJyApPyBnbG9iYWwgOiAoIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgKT8gd2luZG93IDogdGhpc1xcXCIgKVxcblxcdFxcdFxcdFxcdFxcdFxcdC5yZXBsYWNlKCBcXFwiQGJvZHlcXFwiLCBcXFwidHJ5eyByZXN1bHQgPSAoIEBleHByZXNzaW9uICk7IH1jYXRjaCggZXJyb3IgKXsgQGVycm9yIH1cXFwiIClcXG5cXHRcXHRcXHRcXHRcXHRcXHQucmVwbGFjZSggXFxcIkBlcnJvclxcXCIsIFxcXCJ0aHJvdyBuZXcgRXJyb3IoICdlcnJvciBleGVjdXRpbmcgZXhwcmVzc2lvbiwgJyArIGVycm9yICk7XFxcIiApO1xcblxcblxcdFxcdFxcdFxcdFxcdGlmKCB0aGlzIGluc3RhbmNlb2Yge3tuYW1lfX0gJiYgcGFyYW1ldGVyLmxlbmd0aCApe1xcblxcdFxcdFxcdFxcdFxcdFxcdGlmKCB0eXBlb2YgdGhpcy5pbml0aWFsaXplID09IFxcXCJmdW5jdGlvblxcXCIgKXtcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHR0aGlzLmluaXRpYWxpemUuYXBwbHkoIHRoaXMsIHBhcmFtZXRlciApO1xcblxcdFxcdFxcdFxcdFxcdFxcdH1cXG5cXG5cXHRcXHRcXHRcXHRcXHRcXHRyZXR1cm4gdGhpcztcXG5cXG5cXHRcXHRcXHRcXHRcXHR9ZWxzZSBpZiggdGhpcyBpbnN0YW5jZW9mIHt7bmFtZX19ICYmICFwYXJhbWV0ZXIubGVuZ3RoICl7XFxuXFx0XFx0XFx0XFx0XFx0XFx0aWYoIHR5cGVvZiB0aGlzLmluaXRpYWxpemUgPT0gXFxcImZ1bmN0aW9uXFxcIiApe1xcblxcdFxcdFxcdFxcdFxcdFxcdFxcdHRoaXMuaW5pdGlhbGl6ZSggKTtcXG5cXHRcXHRcXHRcXHRcXHRcXHR9XFxuXFxuXFx0XFx0XFx0XFx0XFx0XFx0cmV0dXJuIHRoaXM7XFxuXFxuXFx0XFx0XFx0XFx0XFx0fWVsc2UgaWYoICEoIHRoaXMgaW5zdGFuY2VvZiB7e25hbWV9fSApICYmIHBhcmFtZXRlci5sZW5ndGggKXtcXG5cXHRcXHRcXHRcXHRcXHRcXHR2YXIgZXhwcmVzc2lvbiA9IFxcXCJmdW5jdGlvbiBkZWxlZ2F0ZSggQHBhcmFtZXRlciApeyByZXR1cm4gbmV3IHRoaXMoIEBwYXJhbWV0ZXIgKTsgfVxcXCJcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHQucmVwbGFjZSggL0BwYXJhbWV0ZXIvZyxcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRwYXJhbWV0ZXIubWFwKCBmdW5jdGlvbiBvbkVhY2hQYXJhbWV0ZXIoIGl0ZW0sIGluZGV4ICl7XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0cmV0dXJuIFxcXCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elxcXCJbIGluZGV4IF07XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0fSApLmpvaW4oIFxcXCIsXFxcIiApICk7XFxuXFxuXFx0XFx0XFx0XFx0XFx0XFx0ZXhwcmVzc2lvbiA9IHRlbXBsYXRlLnJlcGxhY2UoIFxcXCJAZXhwcmVzc2lvblxcXCIsIGV4cHJlc3Npb24gKTtcXG5cXG5cXHRcXHRcXHRcXHRcXHRcXHRyZXR1cm4gZXZhbCggZXhwcmVzc2lvbiApLmFwcGx5KCB7e25hbWV9fSwgcGFyYW1ldGVyICk7XFxuXFxuXFx0XFx0XFx0XFx0XFx0fWVsc2V7XFxuXFx0XFx0XFx0XFx0XFx0XFx0dmFyIGV4cHJlc3Npb24gPSBcXFwiZnVuY3Rpb24gZGVsZWdhdGUoICl7IHJldHVybiBuZXcgdGhpcyggKTsgfVxcXCI7XFxuXFxuXFx0XFx0XFx0XFx0XFx0XFx0ZXhwcmVzc2lvbiA9IHRlbXBsYXRlLnJlcGxhY2UoIFxcXCJAZXhwcmVzc2lvblxcXCIsIGV4cHJlc3Npb24gKTtcXG5cXG5cXHRcXHRcXHRcXHRcXHRcXHRyZXR1cm4gZXZhbCggZXhwcmVzc2lvbiApLmNhbGwoIHt7bmFtZX19ICk7XFxuXFx0XFx0XFx0XFx0XFx0fVxcblxcdFxcdFxcdFxcdH07XFxuXFx0XFx0XFx0XCI7XG5cdFx0XHR9LCB7IFwibmFtZVwiOiBuYW1lIH0pO1xuXHRcblx0XHRcdHJldHVybiBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gXCIgKyBibHVlcHJpbnQpKCk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImZ1bmN0aW9uIG5vdCBjcmVhdGVkIHByb3Blcmx5LCBcIiArIGVycm9yKTtcblx0XHR9XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGRpYXRvbTtcblxuXG4vKioqLyB9LFxuLyogMTEyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdC8qO1xuXHRcdEBtb2R1bGUtbGljZW5zZTpcblx0XHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdFx0QG1pdC1saWNlbnNlXG5cdFxuXHRcdFx0Q29weXJpZ2h0IChAYykgMjAxNiBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cdFxuXHRcdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdFx0aW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuXHRcdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0XHRmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXHRcblx0XHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdFx0Y29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblx0XG5cdFx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0XHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0XHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdFx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0XHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0XHRTT0ZUV0FSRS5cblx0XHRAZW5kLW1vZHVsZS1saWNlbnNlXG5cdFxuXHRcdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHRcdHtcblx0XHRcdFx0XCJwYWNrYWdlXCI6IFwia29tZW50b1wiLFxuXHRcdFx0XHRcInBhdGhcIjogXCJrb21lbnRvL2tvbWVudG8uanNcIixcblx0XHRcdFx0XCJmaWxlXCI6IFwia29tZW50by5qc1wiLFxuXHRcdFx0XHRcIm1vZHVsZVwiOiBcImtvbWVudG9cIixcblx0XHRcdFx0XCJhdXRob3JcIjogXCJSaWNoZXZlIFMuIEJlYmVkb3JcIixcblx0XHRcdFx0XCJjb250cmlidXRvcnNcIjogW1xuXHRcdFx0XHRcdFwiSm9obiBMZW5vbiBNYWdoYW5veSA8am9obmxlbm9ubWFnaGFub3lAZ21haWwuY29tPlwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZU1haWxcIjogXCJyaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXCIsXG5cdFx0XHRcdFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b2xrb3Zhc3lzdGVtcy9rb21lbnRvLmdpdFwiLFxuXHRcdFx0XHRcInRlc3RcIjogXCJrb21lbnRvLXRlc3QuanNcIixcblx0XHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdFx0fVxuXHRcdEBlbmQtbW9kdWxlLWNvbmZpZ3VyYXRpb25cblx0XG5cdFx0QG1vZHVsZS1kb2N1bWVudGF0aW9uOlxuXHRcdFx0UGFyc2VzIGNvbW1lbnRzIGluc2lkZSBqYXZhc2NyaXB0IGZ1bmN0aW9ucyBhbmQgY29udmVydHMgdGhlbSB0byBzdHJpbmcuXG5cdFx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXHRcblx0XHRAaW5jbHVkZTpcblx0XHRcdHtcblx0XHRcdFx0XCJoYW5kbGViYXJcIjogXCJoYW5kbGViYXJzXCIsXG5cdFx0XHRcdFwiaGFyZGVuXCI6IFwiaGFyZGVuXCIsXG5cdFx0XHRcdFwicHJvdHlwZVwiOiBcInByb3R5cGVcIixcblx0XHRcdFx0XCJyZWFsaWduXCI6IFwicmVhbGlnblwiLFxuXHRcdFx0XHRcInN0dWZmZWRcIjogXCJzdHVmZmVkXCIsXG5cdFx0XHRcdFwidHJ1bHlcIjogXCJ0cnVseVwiXG5cdFx0XHR9XG5cdFx0QGVuZC1pbmNsdWRlXG5cdCovXG5cdFxuXHR2YXIgaGFuZGxlYmFyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTMpO1xuXHR2YXIgaGFyZGVuID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NSk7XG5cdHZhciBwcm90eXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MCk7XG5cdHZhciByZWFsaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTQpO1xuXHR2YXIgc3R1ZmZlZCA9IF9fd2VicGFja19yZXF1aXJlX18oMTA0KTtcblx0dmFyIHRydWx5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDApO1xuXHRcblx0dmFyIGtvbWVudG8gPSBmdW5jdGlvbiBrb21lbnRvKGNvbW1lbnQsIG9wdGlvbikge1xuXHRcdC8qO1xuXHQgXHRAbWV0YS1jb25maWd1cmF0aW9uOlxuXHQgXHRcdHtcblx0IFx0XHRcdFwiY29tbWVudDpyZXF1aXJlZFwiOiBcImZ1bmN0aW9uXCIsXG5cdCBcdFx0XHRcIm9wdGlvblwiOiBcIm9iamVjdFwiXG5cdCBcdFx0fVxuXHQgXHRAZW5kLW1ldGEtY29uZmlndXJhdGlvblxuXHQgKi9cblx0XG5cdFx0aWYgKCFwcm90eXBlKGNvbW1lbnQsIEZVTkNUSU9OKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBmdW5jdGlvblwiKTtcblx0XHR9XG5cdFxuXHRcdHZhciBzdHJpbmcgPSAoY29tbWVudC50b1N0cmluZygpLm1hdGNoKGtvbWVudG8uTVVMVElQTEVfTElORV9DT01NRU5UX1BBVFRFUk4pIHx8IFtdKVsxXSB8fCAoY29tbWVudC50b1N0cmluZygpLm1hdGNoKGtvbWVudG8uU0lOR0xFX0xJTkVfQ09NTUVOVF9QQVRURVJOKSB8fCBbXSlbMV07XG5cdFxuXHRcdC8qO1xuXHQgXHRAbm90ZTpcblx0IFx0XHRJZiB0aGVyZSBhcmUgbm8gc3RyaW5nIGZyb20gdGhlIGNvbW1lbnQsXG5cdCBcdFx0XHR3ZSBjYW4gc2FmZSB0byBhc3N1bWUgdGhhdCBpdCBzaG91bGQgcmV0dXJuIGEgc3RyaW5nLlxuXHQgXHRAZW5kLW5vdGVcblx0ICovXG5cdFx0aWYgKCFzdHJpbmcpIHtcblx0XHRcdHN0cmluZyA9IGNvbW1lbnQoKTtcblx0XHR9XG5cdFxuXHRcdHN0cmluZyA9IHJlYWxpZ24oc3RyaW5nKTtcblx0XG5cdFx0aWYgKHRydWx5KHN0cmluZykgJiYgcHJvdHlwZShvcHRpb24sIE9CSkVDVCkgJiYgc3R1ZmZlZChvcHRpb24pKSB7XG5cdFx0XHRzdHJpbmcgPSBoYW5kbGViYXIuY29tcGlsZShzdHJpbmcpKG9wdGlvbik7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gc3RyaW5nO1xuXHR9O1xuXHRcblx0aGFyZGVuLmJpbmQoa29tZW50bykoXCJNVUxUSVBMRV9MSU5FX0NPTU1FTlRfUEFUVEVSTlwiLCAvXmZ1bmN0aW9uXFxzKlxcdypcXChbXlxcKFxcKV0qXFwpXFxzKlxce1xccypbXFxzXFxTXSpcXHMqXFwvXFwqXFwhPyhbXFxzXFxTXSp8Lip8W15dKilcXCpcXC9cXFMqXFxzKlxcfSQvbSkuaGFyZGVuKFwiU0lOR0xFX0xJTkVfQ09NTUVOVF9QQVRURVJOXCIsIC9eZnVuY3Rpb25cXHMqXFx3KlxcKFteXFwoXFwpXSpcXClcXHMqXFx7XFxzKltcXHNcXFNdKlxccypcXC9cXCpcXCE/KFtcXHNcXFNdKnwuKnxbXl0qKVxcKlxcL1xcUypcXHMqXFx9JC8pO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBrb21lbnRvO1xuXG5cbi8qKiovIH0sXG4vKiAxMTMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIVxuXHRcblx0IGhhbmRsZWJhcnMgdjQuMC41XG5cdFxuXHRDb3B5cmlnaHQgKEMpIDIwMTEtMjAxNSBieSBZZWh1ZGEgS2F0elxuXHRcblx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5cdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcblx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblx0XG5cdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5cdGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXHRcblx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0RklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5cdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0T1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuXHRUSEUgU09GVFdBUkUuXG5cdFxuXHRAbGljZW5zZVxuXHQqL1xuXHQoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRcdGlmKHRydWUpXG5cdFx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0XHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdFx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0XHRleHBvcnRzW1wiSGFuZGxlYmFyc1wiXSA9IGZhY3RvcnkoKTtcblx0XHRlbHNlXG5cdFx0XHRyb290W1wiSGFuZGxlYmFyc1wiXSA9IGZhY3RvcnkoKTtcblx0fSkodGhpcywgZnVuY3Rpb24oKSB7XG5cdHJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG5cdC8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuXHQvKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cdFxuXHQvKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5cdC8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHRcblx0LyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHQvKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG5cdC8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXHRcblx0LyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdC8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG5cdC8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuXHQvKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG5cdC8qKioqKiovIFx0XHRcdGxvYWRlZDogZmFsc2Vcblx0LyoqKioqKi8gXHRcdH07XG5cdFxuXHQvKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdC8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0XG5cdC8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdC8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblx0XG5cdC8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHQvKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuXHQvKioqKioqLyBcdH1cblx0XG5cdFxuXHQvKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5cdC8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblx0XG5cdC8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcblx0LyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXHRcblx0LyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuXHQvKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cdFxuXHQvKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuXHQvKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXHQvKioqKioqLyB9KVxuXHQvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXHQvKioqKioqLyAoW1xuXHQvKiAwICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXHRcblx0XHQndXNlIHN0cmljdCc7XG5cdFxuXHRcdHZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVsnZGVmYXVsdCddO1xuXHRcblx0XHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHRcblx0XHR2YXIgX2hhbmRsZWJhcnNSdW50aW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdFx0dmFyIF9oYW5kbGViYXJzUnVudGltZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oYW5kbGViYXJzUnVudGltZSk7XG5cdFxuXHRcdC8vIENvbXBpbGVyIGltcG9ydHNcblx0XG5cdFx0dmFyIF9oYW5kbGViYXJzQ29tcGlsZXJBc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblx0XG5cdFx0dmFyIF9oYW5kbGViYXJzQ29tcGlsZXJBc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFuZGxlYmFyc0NvbXBpbGVyQXN0KTtcblx0XG5cdFx0dmFyIF9oYW5kbGViYXJzQ29tcGlsZXJCYXNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG5cdFxuXHRcdHZhciBfaGFuZGxlYmFyc0NvbXBpbGVyQ29tcGlsZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblx0XG5cdFx0dmFyIF9oYW5kbGViYXJzQ29tcGlsZXJKYXZhc2NyaXB0Q29tcGlsZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KTtcblx0XG5cdFx0dmFyIF9oYW5kbGViYXJzQ29tcGlsZXJKYXZhc2NyaXB0Q29tcGlsZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFuZGxlYmFyc0NvbXBpbGVySmF2YXNjcmlwdENvbXBpbGVyKTtcblx0XG5cdFx0dmFyIF9oYW5kbGViYXJzQ29tcGlsZXJWaXNpdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7XG5cdFxuXHRcdHZhciBfaGFuZGxlYmFyc0NvbXBpbGVyVmlzaXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oYW5kbGViYXJzQ29tcGlsZXJWaXNpdG9yKTtcblx0XG5cdFx0dmFyIF9oYW5kbGViYXJzTm9Db25mbGljdCA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xuXHRcblx0XHR2YXIgX2hhbmRsZWJhcnNOb0NvbmZsaWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhbmRsZWJhcnNOb0NvbmZsaWN0KTtcblx0XG5cdFx0dmFyIF9jcmVhdGUgPSBfaGFuZGxlYmFyc1J1bnRpbWUyWydkZWZhdWx0J10uY3JlYXRlO1xuXHRcdGZ1bmN0aW9uIGNyZWF0ZSgpIHtcblx0XHQgIHZhciBoYiA9IF9jcmVhdGUoKTtcblx0XG5cdFx0ICBoYi5jb21waWxlID0gZnVuY3Rpb24gKGlucHV0LCBvcHRpb25zKSB7XG5cdFx0ICAgIHJldHVybiBfaGFuZGxlYmFyc0NvbXBpbGVyQ29tcGlsZXIuY29tcGlsZShpbnB1dCwgb3B0aW9ucywgaGIpO1xuXHRcdCAgfTtcblx0XHQgIGhiLnByZWNvbXBpbGUgPSBmdW5jdGlvbiAoaW5wdXQsIG9wdGlvbnMpIHtcblx0XHQgICAgcmV0dXJuIF9oYW5kbGViYXJzQ29tcGlsZXJDb21waWxlci5wcmVjb21waWxlKGlucHV0LCBvcHRpb25zLCBoYik7XG5cdFx0ICB9O1xuXHRcblx0XHQgIGhiLkFTVCA9IF9oYW5kbGViYXJzQ29tcGlsZXJBc3QyWydkZWZhdWx0J107XG5cdFx0ICBoYi5Db21waWxlciA9IF9oYW5kbGViYXJzQ29tcGlsZXJDb21waWxlci5Db21waWxlcjtcblx0XHQgIGhiLkphdmFTY3JpcHRDb21waWxlciA9IF9oYW5kbGViYXJzQ29tcGlsZXJKYXZhc2NyaXB0Q29tcGlsZXIyWydkZWZhdWx0J107XG5cdFx0ICBoYi5QYXJzZXIgPSBfaGFuZGxlYmFyc0NvbXBpbGVyQmFzZS5wYXJzZXI7XG5cdFx0ICBoYi5wYXJzZSA9IF9oYW5kbGViYXJzQ29tcGlsZXJCYXNlLnBhcnNlO1xuXHRcblx0XHQgIHJldHVybiBoYjtcblx0XHR9XG5cdFxuXHRcdHZhciBpbnN0ID0gY3JlYXRlKCk7XG5cdFx0aW5zdC5jcmVhdGUgPSBjcmVhdGU7XG5cdFxuXHRcdF9oYW5kbGViYXJzTm9Db25mbGljdDJbJ2RlZmF1bHQnXShpbnN0KTtcblx0XG5cdFx0aW5zdC5WaXNpdG9yID0gX2hhbmRsZWJhcnNDb21waWxlclZpc2l0b3IyWydkZWZhdWx0J107XG5cdFxuXHRcdGluc3RbJ2RlZmF1bHQnXSA9IGluc3Q7XG5cdFxuXHRcdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGluc3Q7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cdFxuXHQvKioqLyB9LFxuXHQvKiAxICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXHRcblx0XHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdFx0ZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBmdW5jdGlvbiAob2JqKSB7XG5cdFx0ICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuXHRcdCAgICBcImRlZmF1bHRcIjogb2JqXG5cdFx0ICB9O1xuXHRcdH07XG5cdFxuXHRcdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cdFxuXHQvKioqLyB9LFxuXHQvKiAyICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXHRcblx0XHQndXNlIHN0cmljdCc7XG5cdFxuXHRcdHZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IF9fd2VicGFja19yZXF1aXJlX18oMylbJ2RlZmF1bHQnXTtcblx0XG5cdFx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpWydkZWZhdWx0J107XG5cdFxuXHRcdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cdFxuXHRcdHZhciBfaGFuZGxlYmFyc0Jhc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHRcblx0XHR2YXIgYmFzZSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9oYW5kbGViYXJzQmFzZSk7XG5cdFxuXHRcdC8vIEVhY2ggb2YgdGhlc2UgYXVnbWVudCB0aGUgSGFuZGxlYmFycyBvYmplY3QuIE5vIG5lZWQgdG8gc2V0dXAgaGVyZS5cblx0XHQvLyAoVGhpcyBpcyBkb25lIHRvIGVhc2lseSBzaGFyZSBjb2RlIGJldHdlZW4gY29tbW9uanMgYW5kIGJyb3dzZSBlbnZzKVxuXHRcblx0XHR2YXIgX2hhbmRsZWJhcnNTYWZlU3RyaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG5cdFxuXHRcdHZhciBfaGFuZGxlYmFyc1NhZmVTdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFuZGxlYmFyc1NhZmVTdHJpbmcpO1xuXHRcblx0XHR2YXIgX2hhbmRsZWJhcnNFeGNlcHRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXHRcblx0XHR2YXIgX2hhbmRsZWJhcnNFeGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFuZGxlYmFyc0V4Y2VwdGlvbik7XG5cdFxuXHRcdHZhciBfaGFuZGxlYmFyc1V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0XG5cdFx0dmFyIFV0aWxzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2hhbmRsZWJhcnNVdGlscyk7XG5cdFxuXHRcdHZhciBfaGFuZGxlYmFyc1J1bnRpbWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcblx0XG5cdFx0dmFyIHJ1bnRpbWUgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfaGFuZGxlYmFyc1J1bnRpbWUpO1xuXHRcblx0XHR2YXIgX2hhbmRsZWJhcnNOb0NvbmZsaWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cdFxuXHRcdHZhciBfaGFuZGxlYmFyc05vQ29uZmxpY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFuZGxlYmFyc05vQ29uZmxpY3QpO1xuXHRcblx0XHQvLyBGb3IgY29tcGF0aWJpbGl0eSBhbmQgdXNhZ2Ugb3V0c2lkZSBvZiBtb2R1bGUgc3lzdGVtcywgbWFrZSB0aGUgSGFuZGxlYmFycyBvYmplY3QgYSBuYW1lc3BhY2Vcblx0XHRmdW5jdGlvbiBjcmVhdGUoKSB7XG5cdFx0ICB2YXIgaGIgPSBuZXcgYmFzZS5IYW5kbGViYXJzRW52aXJvbm1lbnQoKTtcblx0XG5cdFx0ICBVdGlscy5leHRlbmQoaGIsIGJhc2UpO1xuXHRcdCAgaGIuU2FmZVN0cmluZyA9IF9oYW5kbGViYXJzU2FmZVN0cmluZzJbJ2RlZmF1bHQnXTtcblx0XHQgIGhiLkV4Y2VwdGlvbiA9IF9oYW5kbGViYXJzRXhjZXB0aW9uMlsnZGVmYXVsdCddO1xuXHRcdCAgaGIuVXRpbHMgPSBVdGlscztcblx0XHQgIGhiLmVzY2FwZUV4cHJlc3Npb24gPSBVdGlscy5lc2NhcGVFeHByZXNzaW9uO1xuXHRcblx0XHQgIGhiLlZNID0gcnVudGltZTtcblx0XHQgIGhiLnRlbXBsYXRlID0gZnVuY3Rpb24gKHNwZWMpIHtcblx0XHQgICAgcmV0dXJuIHJ1bnRpbWUudGVtcGxhdGUoc3BlYywgaGIpO1xuXHRcdCAgfTtcblx0XG5cdFx0ICByZXR1cm4gaGI7XG5cdFx0fVxuXHRcblx0XHR2YXIgaW5zdCA9IGNyZWF0ZSgpO1xuXHRcdGluc3QuY3JlYXRlID0gY3JlYXRlO1xuXHRcblx0XHRfaGFuZGxlYmFyc05vQ29uZmxpY3QyWydkZWZhdWx0J10oaW5zdCk7XG5cdFxuXHRcdGluc3RbJ2RlZmF1bHQnXSA9IGluc3Q7XG5cdFxuXHRcdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGluc3Q7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cdFxuXHQvKioqLyB9LFxuXHQvKiAzICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXHRcblx0XHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdFx0ZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBmdW5jdGlvbiAob2JqKSB7XG5cdFx0ICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7XG5cdFx0ICAgIHJldHVybiBvYmo7XG5cdFx0ICB9IGVsc2Uge1xuXHRcdCAgICB2YXIgbmV3T2JqID0ge307XG5cdFxuXHRcdCAgICBpZiAob2JqICE9IG51bGwpIHtcblx0XHQgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG5cdFx0ICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTtcblx0XHQgICAgICB9XG5cdFx0ICAgIH1cblx0XG5cdFx0ICAgIG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7XG5cdFx0ICAgIHJldHVybiBuZXdPYmo7XG5cdFx0ICB9XG5cdFx0fTtcblx0XG5cdFx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDQgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XG5cdFx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpWydkZWZhdWx0J107XG5cdFxuXHRcdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cdFx0ZXhwb3J0cy5IYW5kbGViYXJzRW52aXJvbm1lbnQgPSBIYW5kbGViYXJzRW52aXJvbm1lbnQ7XG5cdFxuXHRcdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHRcblx0XHR2YXIgX2V4Y2VwdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cdFxuXHRcdHZhciBfZXhjZXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4Y2VwdGlvbik7XG5cdFxuXHRcdHZhciBfaGVscGVycyA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cdFxuXHRcdHZhciBfZGVjb3JhdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuXHRcblx0XHR2YXIgX2xvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXHRcblx0XHR2YXIgX2xvZ2dlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2dnZXIpO1xuXHRcblx0XHR2YXIgVkVSU0lPTiA9ICc0LjAuNSc7XG5cdFx0ZXhwb3J0cy5WRVJTSU9OID0gVkVSU0lPTjtcblx0XHR2YXIgQ09NUElMRVJfUkVWSVNJT04gPSA3O1xuXHRcblx0XHRleHBvcnRzLkNPTVBJTEVSX1JFVklTSU9OID0gQ09NUElMRVJfUkVWSVNJT047XG5cdFx0dmFyIFJFVklTSU9OX0NIQU5HRVMgPSB7XG5cdFx0ICAxOiAnPD0gMS4wLnJjLjInLCAvLyAxLjAucmMuMiBpcyBhY3R1YWxseSByZXYyIGJ1dCBkb2Vzbid0IHJlcG9ydCBpdFxuXHRcdCAgMjogJz09IDEuMC4wLXJjLjMnLFxuXHRcdCAgMzogJz09IDEuMC4wLXJjLjQnLFxuXHRcdCAgNDogJz09IDEueC54Jyxcblx0XHQgIDU6ICc9PSAyLjAuMC1hbHBoYS54Jyxcblx0XHQgIDY6ICc+PSAyLjAuMC1iZXRhLjEnLFxuXHRcdCAgNzogJz49IDQuMC4wJ1xuXHRcdH07XG5cdFxuXHRcdGV4cG9ydHMuUkVWSVNJT05fQ0hBTkdFUyA9IFJFVklTSU9OX0NIQU5HRVM7XG5cdFx0dmFyIG9iamVjdFR5cGUgPSAnW29iamVjdCBPYmplY3RdJztcblx0XG5cdFx0ZnVuY3Rpb24gSGFuZGxlYmFyc0Vudmlyb25tZW50KGhlbHBlcnMsIHBhcnRpYWxzLCBkZWNvcmF0b3JzKSB7XG5cdFx0ICB0aGlzLmhlbHBlcnMgPSBoZWxwZXJzIHx8IHt9O1xuXHRcdCAgdGhpcy5wYXJ0aWFscyA9IHBhcnRpYWxzIHx8IHt9O1xuXHRcdCAgdGhpcy5kZWNvcmF0b3JzID0gZGVjb3JhdG9ycyB8fCB7fTtcblx0XG5cdFx0ICBfaGVscGVycy5yZWdpc3RlckRlZmF1bHRIZWxwZXJzKHRoaXMpO1xuXHRcdCAgX2RlY29yYXRvcnMucmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyh0aGlzKTtcblx0XHR9XG5cdFxuXHRcdEhhbmRsZWJhcnNFbnZpcm9ubWVudC5wcm90b3R5cGUgPSB7XG5cdFx0ICBjb25zdHJ1Y3RvcjogSGFuZGxlYmFyc0Vudmlyb25tZW50LFxuXHRcblx0XHQgIGxvZ2dlcjogX2xvZ2dlcjJbJ2RlZmF1bHQnXSxcblx0XHQgIGxvZzogX2xvZ2dlcjJbJ2RlZmF1bHQnXS5sb2csXG5cdFxuXHRcdCAgcmVnaXN0ZXJIZWxwZXI6IGZ1bmN0aW9uIHJlZ2lzdGVySGVscGVyKG5hbWUsIGZuKSB7XG5cdFx0ICAgIGlmIChfdXRpbHMudG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuXHRcdCAgICAgIGlmIChmbikge1xuXHRcdCAgICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ0FyZyBub3Qgc3VwcG9ydGVkIHdpdGggbXVsdGlwbGUgaGVscGVycycpO1xuXHRcdCAgICAgIH1cblx0XHQgICAgICBfdXRpbHMuZXh0ZW5kKHRoaXMuaGVscGVycywgbmFtZSk7XG5cdFx0ICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgdGhpcy5oZWxwZXJzW25hbWVdID0gZm47XG5cdFx0ICAgIH1cblx0XHQgIH0sXG5cdFx0ICB1bnJlZ2lzdGVySGVscGVyOiBmdW5jdGlvbiB1bnJlZ2lzdGVySGVscGVyKG5hbWUpIHtcblx0XHQgICAgZGVsZXRlIHRoaXMuaGVscGVyc1tuYW1lXTtcblx0XHQgIH0sXG5cdFxuXHRcdCAgcmVnaXN0ZXJQYXJ0aWFsOiBmdW5jdGlvbiByZWdpc3RlclBhcnRpYWwobmFtZSwgcGFydGlhbCkge1xuXHRcdCAgICBpZiAoX3V0aWxzLnRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcblx0XHQgICAgICBfdXRpbHMuZXh0ZW5kKHRoaXMucGFydGlhbHMsIG5hbWUpO1xuXHRcdCAgICB9IGVsc2Uge1xuXHRcdCAgICAgIGlmICh0eXBlb2YgcGFydGlhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHQgICAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdBdHRlbXB0aW5nIHRvIHJlZ2lzdGVyIGEgcGFydGlhbCBjYWxsZWQgXCInICsgbmFtZSArICdcIiBhcyB1bmRlZmluZWQnKTtcblx0XHQgICAgICB9XG5cdFx0ICAgICAgdGhpcy5wYXJ0aWFsc1tuYW1lXSA9IHBhcnRpYWw7XG5cdFx0ICAgIH1cblx0XHQgIH0sXG5cdFx0ICB1bnJlZ2lzdGVyUGFydGlhbDogZnVuY3Rpb24gdW5yZWdpc3RlclBhcnRpYWwobmFtZSkge1xuXHRcdCAgICBkZWxldGUgdGhpcy5wYXJ0aWFsc1tuYW1lXTtcblx0XHQgIH0sXG5cdFxuXHRcdCAgcmVnaXN0ZXJEZWNvcmF0b3I6IGZ1bmN0aW9uIHJlZ2lzdGVyRGVjb3JhdG9yKG5hbWUsIGZuKSB7XG5cdFx0ICAgIGlmIChfdXRpbHMudG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuXHRcdCAgICAgIGlmIChmbikge1xuXHRcdCAgICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ0FyZyBub3Qgc3VwcG9ydGVkIHdpdGggbXVsdGlwbGUgZGVjb3JhdG9ycycpO1xuXHRcdCAgICAgIH1cblx0XHQgICAgICBfdXRpbHMuZXh0ZW5kKHRoaXMuZGVjb3JhdG9ycywgbmFtZSk7XG5cdFx0ICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgdGhpcy5kZWNvcmF0b3JzW25hbWVdID0gZm47XG5cdFx0ICAgIH1cblx0XHQgIH0sXG5cdFx0ICB1bnJlZ2lzdGVyRGVjb3JhdG9yOiBmdW5jdGlvbiB1bnJlZ2lzdGVyRGVjb3JhdG9yKG5hbWUpIHtcblx0XHQgICAgZGVsZXRlIHRoaXMuZGVjb3JhdG9yc1tuYW1lXTtcblx0XHQgIH1cblx0XHR9O1xuXHRcblx0XHR2YXIgbG9nID0gX2xvZ2dlcjJbJ2RlZmF1bHQnXS5sb2c7XG5cdFxuXHRcdGV4cG9ydHMubG9nID0gbG9nO1xuXHRcdGV4cG9ydHMuY3JlYXRlRnJhbWUgPSBfdXRpbHMuY3JlYXRlRnJhbWU7XG5cdFx0ZXhwb3J0cy5sb2dnZXIgPSBfbG9nZ2VyMlsnZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfSxcblx0LyogNSAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblx0XG5cdFx0J3VzZSBzdHJpY3QnO1xuXHRcblx0XHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHRcdGV4cG9ydHMuZXh0ZW5kID0gZXh0ZW5kO1xuXHRcdGV4cG9ydHMuaW5kZXhPZiA9IGluZGV4T2Y7XG5cdFx0ZXhwb3J0cy5lc2NhcGVFeHByZXNzaW9uID0gZXNjYXBlRXhwcmVzc2lvbjtcblx0XHRleHBvcnRzLmlzRW1wdHkgPSBpc0VtcHR5O1xuXHRcdGV4cG9ydHMuY3JlYXRlRnJhbWUgPSBjcmVhdGVGcmFtZTtcblx0XHRleHBvcnRzLmJsb2NrUGFyYW1zID0gYmxvY2tQYXJhbXM7XG5cdFx0ZXhwb3J0cy5hcHBlbmRDb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoO1xuXHRcdHZhciBlc2NhcGUgPSB7XG5cdFx0ICAnJic6ICcmYW1wOycsXG5cdFx0ICAnPCc6ICcmbHQ7Jyxcblx0XHQgICc+JzogJyZndDsnLFxuXHRcdCAgJ1wiJzogJyZxdW90OycsXG5cdFx0ICBcIidcIjogJyYjeDI3OycsXG5cdFx0ICAnYCc6ICcmI3g2MDsnLFxuXHRcdCAgJz0nOiAnJiN4M0Q7J1xuXHRcdH07XG5cdFxuXHRcdHZhciBiYWRDaGFycyA9IC9bJjw+XCInYD1dL2csXG5cdFx0ICAgIHBvc3NpYmxlID0gL1smPD5cIidgPV0vO1xuXHRcblx0XHRmdW5jdGlvbiBlc2NhcGVDaGFyKGNocikge1xuXHRcdCAgcmV0dXJuIGVzY2FwZVtjaHJdO1xuXHRcdH1cblx0XG5cdFx0ZnVuY3Rpb24gZXh0ZW5kKG9iaiAvKiAsIC4uLnNvdXJjZSAqLykge1xuXHRcdCAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHQgICAgZm9yICh2YXIga2V5IGluIGFyZ3VtZW50c1tpXSkge1xuXHRcdCAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXJndW1lbnRzW2ldLCBrZXkpKSB7XG5cdFx0ICAgICAgICBvYmpba2V5XSA9IGFyZ3VtZW50c1tpXVtrZXldO1xuXHRcdCAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgfVxuXHRcblx0XHQgIHJldHVybiBvYmo7XG5cdFx0fVxuXHRcblx0XHR2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXHRcblx0XHRleHBvcnRzLnRvU3RyaW5nID0gdG9TdHJpbmc7XG5cdFx0Ly8gU291cmNlZCBmcm9tIGxvZGFzaFxuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXN0aWVqcy9sb2Rhc2gvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHRcblx0XHQvKiBlc2xpbnQtZGlzYWJsZSBmdW5jLXN0eWxlICovXG5cdFx0dmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG5cdFx0ICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xuXHRcdH07XG5cdFx0Ly8gZmFsbGJhY2sgZm9yIG9sZGVyIHZlcnNpb25zIG9mIENocm9tZSBhbmQgU2FmYXJpXG5cdFx0LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0XHRpZiAoaXNGdW5jdGlvbigveC8pKSB7XG5cdFx0ICBleHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0ICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgJiYgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cdFx0ICB9O1xuXHRcdH1cblx0XHRleHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXHRcblx0XHQvKiBlc2xpbnQtZW5hYmxlIGZ1bmMtc3R5bGUgKi9cblx0XG5cdFx0LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0XHR2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0ICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyA/IHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBBcnJheV0nIDogZmFsc2U7XG5cdFx0fTtcblx0XG5cdFx0ZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblx0XHQvLyBPbGRlciBJRSB2ZXJzaW9ucyBkbyBub3QgZGlyZWN0bHkgc3VwcG9ydCBpbmRleE9mIHNvIHdlIG11c3QgaW1wbGVtZW50IG91ciBvd24sIHNhZGx5LlxuXHRcblx0XHRmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuXHRcdCAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0ICAgIGlmIChhcnJheVtpXSA9PT0gdmFsdWUpIHtcblx0XHQgICAgICByZXR1cm4gaTtcblx0XHQgICAgfVxuXHRcdCAgfVxuXHRcdCAgcmV0dXJuIC0xO1xuXHRcdH1cblx0XG5cdFx0ZnVuY3Rpb24gZXNjYXBlRXhwcmVzc2lvbihzdHJpbmcpIHtcblx0XHQgIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuXHRcdCAgICAvLyBkb24ndCBlc2NhcGUgU2FmZVN0cmluZ3MsIHNpbmNlIHRoZXkncmUgYWxyZWFkeSBzYWZlXG5cdFx0ICAgIGlmIChzdHJpbmcgJiYgc3RyaW5nLnRvSFRNTCkge1xuXHRcdCAgICAgIHJldHVybiBzdHJpbmcudG9IVE1MKCk7XG5cdFx0ICAgIH0gZWxzZSBpZiAoc3RyaW5nID09IG51bGwpIHtcblx0XHQgICAgICByZXR1cm4gJyc7XG5cdFx0ICAgIH0gZWxzZSBpZiAoIXN0cmluZykge1xuXHRcdCAgICAgIHJldHVybiBzdHJpbmcgKyAnJztcblx0XHQgICAgfVxuXHRcblx0XHQgICAgLy8gRm9yY2UgYSBzdHJpbmcgY29udmVyc2lvbiBhcyB0aGlzIHdpbGwgYmUgZG9uZSBieSB0aGUgYXBwZW5kIHJlZ2FyZGxlc3MgYW5kXG5cdFx0ICAgIC8vIHRoZSByZWdleCB0ZXN0IHdpbGwgZG8gdGhpcyB0cmFuc3BhcmVudGx5IGJlaGluZCB0aGUgc2NlbmVzLCBjYXVzaW5nIGlzc3VlcyBpZlxuXHRcdCAgICAvLyBhbiBvYmplY3QncyB0byBzdHJpbmcgaGFzIGVzY2FwZWQgY2hhcmFjdGVycyBpbiBpdC5cblx0XHQgICAgc3RyaW5nID0gJycgKyBzdHJpbmc7XG5cdFx0ICB9XG5cdFxuXHRcdCAgaWYgKCFwb3NzaWJsZS50ZXN0KHN0cmluZykpIHtcblx0XHQgICAgcmV0dXJuIHN0cmluZztcblx0XHQgIH1cblx0XHQgIHJldHVybiBzdHJpbmcucmVwbGFjZShiYWRDaGFycywgZXNjYXBlQ2hhcik7XG5cdFx0fVxuXHRcblx0XHRmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG5cdFx0ICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKSB7XG5cdFx0ICAgIHJldHVybiB0cnVlO1xuXHRcdCAgfSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApIHtcblx0XHQgICAgcmV0dXJuIHRydWU7XG5cdFx0ICB9IGVsc2Uge1xuXHRcdCAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICB9XG5cdFx0fVxuXHRcblx0XHRmdW5jdGlvbiBjcmVhdGVGcmFtZShvYmplY3QpIHtcblx0XHQgIHZhciBmcmFtZSA9IGV4dGVuZCh7fSwgb2JqZWN0KTtcblx0XHQgIGZyYW1lLl9wYXJlbnQgPSBvYmplY3Q7XG5cdFx0ICByZXR1cm4gZnJhbWU7XG5cdFx0fVxuXHRcblx0XHRmdW5jdGlvbiBibG9ja1BhcmFtcyhwYXJhbXMsIGlkcykge1xuXHRcdCAgcGFyYW1zLnBhdGggPSBpZHM7XG5cdFx0ICByZXR1cm4gcGFyYW1zO1xuXHRcdH1cblx0XG5cdFx0ZnVuY3Rpb24gYXBwZW5kQ29udGV4dFBhdGgoY29udGV4dFBhdGgsIGlkKSB7XG5cdFx0ICByZXR1cm4gKGNvbnRleHRQYXRoID8gY29udGV4dFBhdGggKyAnLicgOiAnJykgKyBpZDtcblx0XHR9XG5cdFxuXHQvKioqLyB9LFxuXHQvKiA2ICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXHRcblx0XHQndXNlIHN0cmljdCc7XG5cdFxuXHRcdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cdFxuXHRcdHZhciBlcnJvclByb3BzID0gWydkZXNjcmlwdGlvbicsICdmaWxlTmFtZScsICdsaW5lTnVtYmVyJywgJ21lc3NhZ2UnLCAnbmFtZScsICdudW1iZXInLCAnc3RhY2snXTtcblx0XG5cdFx0ZnVuY3Rpb24gRXhjZXB0aW9uKG1lc3NhZ2UsIG5vZGUpIHtcblx0XHQgIHZhciBsb2MgPSBub2RlICYmIG5vZGUubG9jLFxuXHRcdCAgICAgIGxpbmUgPSB1bmRlZmluZWQsXG5cdFx0ICAgICAgY29sdW1uID0gdW5kZWZpbmVkO1xuXHRcdCAgaWYgKGxvYykge1xuXHRcdCAgICBsaW5lID0gbG9jLnN0YXJ0LmxpbmU7XG5cdFx0ICAgIGNvbHVtbiA9IGxvYy5zdGFydC5jb2x1bW47XG5cdFxuXHRcdCAgICBtZXNzYWdlICs9ICcgLSAnICsgbGluZSArICc6JyArIGNvbHVtbjtcblx0XHQgIH1cblx0XG5cdFx0ICB2YXIgdG1wID0gRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG5cdFxuXHRcdCAgLy8gVW5mb3J0dW5hdGVseSBlcnJvcnMgYXJlIG5vdCBlbnVtZXJhYmxlIGluIENocm9tZSAoYXQgbGVhc3QpLCBzbyBgZm9yIHByb3AgaW4gdG1wYCBkb2Vzbid0IHdvcmsuXG5cdFx0ICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBlcnJvclByb3BzLmxlbmd0aDsgaWR4KyspIHtcblx0XHQgICAgdGhpc1tlcnJvclByb3BzW2lkeF1dID0gdG1wW2Vycm9yUHJvcHNbaWR4XV07XG5cdFx0ICB9XG5cdFxuXHRcdCAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cblx0XHQgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuXHRcdCAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBFeGNlcHRpb24pO1xuXHRcdCAgfVxuXHRcblx0XHQgIGlmIChsb2MpIHtcblx0XHQgICAgdGhpcy5saW5lTnVtYmVyID0gbGluZTtcblx0XHQgICAgdGhpcy5jb2x1bW4gPSBjb2x1bW47XG5cdFx0ICB9XG5cdFx0fVxuXHRcblx0XHRFeGNlcHRpb24ucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG5cdFxuXHRcdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IEV4Y2VwdGlvbjtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDcgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XG5cdFx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpWydkZWZhdWx0J107XG5cdFxuXHRcdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cdFx0ZXhwb3J0cy5yZWdpc3RlckRlZmF1bHRIZWxwZXJzID0gcmVnaXN0ZXJEZWZhdWx0SGVscGVycztcblx0XG5cdFx0dmFyIF9oZWxwZXJzQmxvY2tIZWxwZXJNaXNzaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0XG5cdFx0dmFyIF9oZWxwZXJzQmxvY2tIZWxwZXJNaXNzaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnNCbG9ja0hlbHBlck1pc3NpbmcpO1xuXHRcblx0XHR2YXIgX2hlbHBlcnNFYWNoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblx0XG5cdFx0dmFyIF9oZWxwZXJzRWFjaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oZWxwZXJzRWFjaCk7XG5cdFxuXHRcdHZhciBfaGVscGVyc0hlbHBlck1pc3NpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblx0XG5cdFx0dmFyIF9oZWxwZXJzSGVscGVyTWlzc2luZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oZWxwZXJzSGVscGVyTWlzc2luZyk7XG5cdFxuXHRcdHZhciBfaGVscGVyc0lmID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cdFxuXHRcdHZhciBfaGVscGVyc0lmMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnNJZik7XG5cdFxuXHRcdHZhciBfaGVscGVyc0xvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHRcblx0XHR2YXIgX2hlbHBlcnNMb2cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGVscGVyc0xvZyk7XG5cdFxuXHRcdHZhciBfaGVscGVyc0xvb2t1cCA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuXHRcblx0XHR2YXIgX2hlbHBlcnNMb29rdXAyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGVscGVyc0xvb2t1cCk7XG5cdFxuXHRcdHZhciBfaGVscGVyc1dpdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcblx0XG5cdFx0dmFyIF9oZWxwZXJzV2l0aDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oZWxwZXJzV2l0aCk7XG5cdFxuXHRcdGZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdEhlbHBlcnMoaW5zdGFuY2UpIHtcblx0XHQgIF9oZWxwZXJzQmxvY2tIZWxwZXJNaXNzaW5nMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcblx0XHQgIF9oZWxwZXJzRWFjaDJbJ2RlZmF1bHQnXShpbnN0YW5jZSk7XG5cdFx0ICBfaGVscGVyc0hlbHBlck1pc3NpbmcyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xuXHRcdCAgX2hlbHBlcnNJZjJbJ2RlZmF1bHQnXShpbnN0YW5jZSk7XG5cdFx0ICBfaGVscGVyc0xvZzJbJ2RlZmF1bHQnXShpbnN0YW5jZSk7XG5cdFx0ICBfaGVscGVyc0xvb2t1cDJbJ2RlZmF1bHQnXShpbnN0YW5jZSk7XG5cdFx0ICBfaGVscGVyc1dpdGgyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xuXHRcdH1cblx0XG5cdC8qKiovIH0sXG5cdC8qIDggKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XG5cdFx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0XG5cdFx0dmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdFxuXHRcdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuXHRcdCAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2Jsb2NrSGVscGVyTWlzc2luZycsIGZ1bmN0aW9uIChjb250ZXh0LCBvcHRpb25zKSB7XG5cdFx0ICAgIHZhciBpbnZlcnNlID0gb3B0aW9ucy5pbnZlcnNlLFxuXHRcdCAgICAgICAgZm4gPSBvcHRpb25zLmZuO1xuXHRcblx0XHQgICAgaWYgKGNvbnRleHQgPT09IHRydWUpIHtcblx0XHQgICAgICByZXR1cm4gZm4odGhpcyk7XG5cdFx0ICAgIH0gZWxzZSBpZiAoY29udGV4dCA9PT0gZmFsc2UgfHwgY29udGV4dCA9PSBudWxsKSB7XG5cdFx0ICAgICAgcmV0dXJuIGludmVyc2UodGhpcyk7XG5cdFx0ICAgIH0gZWxzZSBpZiAoX3V0aWxzLmlzQXJyYXkoY29udGV4dCkpIHtcblx0XHQgICAgICBpZiAoY29udGV4dC5sZW5ndGggPiAwKSB7XG5cdFx0ICAgICAgICBpZiAob3B0aW9ucy5pZHMpIHtcblx0XHQgICAgICAgICAgb3B0aW9ucy5pZHMgPSBbb3B0aW9ucy5uYW1lXTtcblx0XHQgICAgICAgIH1cblx0XG5cdFx0ICAgICAgICByZXR1cm4gaW5zdGFuY2UuaGVscGVycy5lYWNoKGNvbnRleHQsIG9wdGlvbnMpO1xuXHRcdCAgICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgICByZXR1cm4gaW52ZXJzZSh0aGlzKTtcblx0XHQgICAgICB9XG5cdFx0ICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmlkcykge1xuXHRcdCAgICAgICAgdmFyIGRhdGEgPSBfdXRpbHMuY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcblx0XHQgICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBfdXRpbHMuYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLm5hbWUpO1xuXHRcdCAgICAgICAgb3B0aW9ucyA9IHsgZGF0YTogZGF0YSB9O1xuXHRcdCAgICAgIH1cblx0XG5cdFx0ICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuXHRcdCAgICB9XG5cdFx0ICB9KTtcblx0XHR9O1xuXHRcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDkgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XG5cdFx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpWydkZWZhdWx0J107XG5cdFxuXHRcdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cdFxuXHRcdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHRcblx0XHR2YXIgX2V4Y2VwdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cdFxuXHRcdHZhciBfZXhjZXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4Y2VwdGlvbik7XG5cdFxuXHRcdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuXHRcdCAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2VhY2gnLCBmdW5jdGlvbiAoY29udGV4dCwgb3B0aW9ucykge1xuXHRcdCAgICBpZiAoIW9wdGlvbnMpIHtcblx0XHQgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnTXVzdCBwYXNzIGl0ZXJhdG9yIHRvICNlYWNoJyk7XG5cdFx0ICAgIH1cblx0XG5cdFx0ICAgIHZhciBmbiA9IG9wdGlvbnMuZm4sXG5cdFx0ICAgICAgICBpbnZlcnNlID0gb3B0aW9ucy5pbnZlcnNlLFxuXHRcdCAgICAgICAgaSA9IDAsXG5cdFx0ICAgICAgICByZXQgPSAnJyxcblx0XHQgICAgICAgIGRhdGEgPSB1bmRlZmluZWQsXG5cdFx0ICAgICAgICBjb250ZXh0UGF0aCA9IHVuZGVmaW5lZDtcblx0XG5cdFx0ICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5pZHMpIHtcblx0XHQgICAgICBjb250ZXh0UGF0aCA9IF91dGlscy5hcHBlbmRDb250ZXh0UGF0aChvcHRpb25zLmRhdGEuY29udGV4dFBhdGgsIG9wdGlvbnMuaWRzWzBdKSArICcuJztcblx0XHQgICAgfVxuXHRcblx0XHQgICAgaWYgKF91dGlscy5pc0Z1bmN0aW9uKGNvbnRleHQpKSB7XG5cdFx0ICAgICAgY29udGV4dCA9IGNvbnRleHQuY2FsbCh0aGlzKTtcblx0XHQgICAgfVxuXHRcblx0XHQgICAgaWYgKG9wdGlvbnMuZGF0YSkge1xuXHRcdCAgICAgIGRhdGEgPSBfdXRpbHMuY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcblx0XHQgICAgfVxuXHRcblx0XHQgICAgZnVuY3Rpb24gZXhlY0l0ZXJhdGlvbihmaWVsZCwgaW5kZXgsIGxhc3QpIHtcblx0XHQgICAgICBpZiAoZGF0YSkge1xuXHRcdCAgICAgICAgZGF0YS5rZXkgPSBmaWVsZDtcblx0XHQgICAgICAgIGRhdGEuaW5kZXggPSBpbmRleDtcblx0XHQgICAgICAgIGRhdGEuZmlyc3QgPSBpbmRleCA9PT0gMDtcblx0XHQgICAgICAgIGRhdGEubGFzdCA9ICEhbGFzdDtcblx0XG5cdFx0ICAgICAgICBpZiAoY29udGV4dFBhdGgpIHtcblx0XHQgICAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGNvbnRleHRQYXRoICsgZmllbGQ7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgfVxuXHRcblx0XHQgICAgICByZXQgPSByZXQgKyBmbihjb250ZXh0W2ZpZWxkXSwge1xuXHRcdCAgICAgICAgZGF0YTogZGF0YSxcblx0XHQgICAgICAgIGJsb2NrUGFyYW1zOiBfdXRpbHMuYmxvY2tQYXJhbXMoW2NvbnRleHRbZmllbGRdLCBmaWVsZF0sIFtjb250ZXh0UGF0aCArIGZpZWxkLCBudWxsXSlcblx0XHQgICAgICB9KTtcblx0XHQgICAgfVxuXHRcblx0XHQgICAgaWYgKGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQgPT09ICdvYmplY3QnKSB7XG5cdFx0ICAgICAgaWYgKF91dGlscy5pc0FycmF5KGNvbnRleHQpKSB7XG5cdFx0ICAgICAgICBmb3IgKHZhciBqID0gY29udGV4dC5sZW5ndGg7IGkgPCBqOyBpKyspIHtcblx0XHQgICAgICAgICAgaWYgKGkgaW4gY29udGV4dCkge1xuXHRcdCAgICAgICAgICAgIGV4ZWNJdGVyYXRpb24oaSwgaSwgaSA9PT0gY29udGV4dC5sZW5ndGggLSAxKTtcblx0XHQgICAgICAgICAgfVxuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgICB2YXIgcHJpb3JLZXkgPSB1bmRlZmluZWQ7XG5cdFxuXHRcdCAgICAgICAgZm9yICh2YXIga2V5IGluIGNvbnRleHQpIHtcblx0XHQgICAgICAgICAgaWYgKGNvbnRleHQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHRcdCAgICAgICAgICAgIC8vIFdlJ3JlIHJ1bm5pbmcgdGhlIGl0ZXJhdGlvbnMgb25lIHN0ZXAgb3V0IG9mIHN5bmMgc28gd2UgY2FuIGRldGVjdFxuXHRcdCAgICAgICAgICAgIC8vIHRoZSBsYXN0IGl0ZXJhdGlvbiB3aXRob3V0IGhhdmUgdG8gc2NhbiB0aGUgb2JqZWN0IHR3aWNlIGFuZCBjcmVhdGVcblx0XHQgICAgICAgICAgICAvLyBhbiBpdGVybWVkaWF0ZSBrZXlzIGFycmF5LlxuXHRcdCAgICAgICAgICAgIGlmIChwcmlvcktleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgICAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIHByaW9yS2V5ID0ga2V5O1xuXHRcdCAgICAgICAgICAgIGkrKztcblx0XHQgICAgICAgICAgfVxuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgaWYgKHByaW9yS2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHQgICAgICAgICAgZXhlY0l0ZXJhdGlvbihwcmlvcktleSwgaSAtIDEsIHRydWUpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgIH1cblx0XHQgICAgfVxuXHRcblx0XHQgICAgaWYgKGkgPT09IDApIHtcblx0XHQgICAgICByZXQgPSBpbnZlcnNlKHRoaXMpO1xuXHRcdCAgICB9XG5cdFxuXHRcdCAgICByZXR1cm4gcmV0O1xuXHRcdCAgfSk7XG5cdFx0fTtcblx0XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cdFxuXHQvKioqLyB9LFxuXHQvKiAxMCAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblx0XG5cdFx0J3VzZSBzdHJpY3QnO1xuXHRcblx0XHR2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSlbJ2RlZmF1bHQnXTtcblx0XG5cdFx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0XG5cdFx0dmFyIF9leGNlcHRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXHRcblx0XHR2YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pO1xuXHRcblx0XHRleHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcblx0XHQgIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdoZWxwZXJNaXNzaW5nJywgZnVuY3Rpb24gKCkgLyogW2FyZ3MsIF1vcHRpb25zICove1xuXHRcdCAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuXHRcdCAgICAgIC8vIEEgbWlzc2luZyBmaWVsZCBpbiBhIHt7Zm9vfX0gY29uc3RydWN0LlxuXHRcdCAgICAgIHJldHVybiB1bmRlZmluZWQ7XG5cdFx0ICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgLy8gU29tZW9uZSBpcyBhY3R1YWxseSB0cnlpbmcgdG8gY2FsbCBzb21ldGhpbmcsIGJsb3cgdXAuXG5cdFx0ICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ01pc3NpbmcgaGVscGVyOiBcIicgKyBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdLm5hbWUgKyAnXCInKTtcblx0XHQgICAgfVxuXHRcdCAgfSk7XG5cdFx0fTtcblx0XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cdFxuXHQvKioqLyB9LFxuXHQvKiAxMSAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblx0XG5cdFx0J3VzZSBzdHJpY3QnO1xuXHRcblx0XHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHRcblx0XHR2YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG5cdFx0ICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignaWYnLCBmdW5jdGlvbiAoY29uZGl0aW9uYWwsIG9wdGlvbnMpIHtcblx0XHQgICAgaWYgKF91dGlscy5pc0Z1bmN0aW9uKGNvbmRpdGlvbmFsKSkge1xuXHRcdCAgICAgIGNvbmRpdGlvbmFsID0gY29uZGl0aW9uYWwuY2FsbCh0aGlzKTtcblx0XHQgICAgfVxuXHRcblx0XHQgICAgLy8gRGVmYXVsdCBiZWhhdmlvciBpcyB0byByZW5kZXIgdGhlIHBvc2l0aXZlIHBhdGggaWYgdGhlIHZhbHVlIGlzIHRydXRoeSBhbmQgbm90IGVtcHR5LlxuXHRcdCAgICAvLyBUaGUgYGluY2x1ZGVaZXJvYCBvcHRpb24gbWF5IGJlIHNldCB0byB0cmVhdCB0aGUgY29uZHRpb25hbCBhcyBwdXJlbHkgbm90IGVtcHR5IGJhc2VkIG9uIHRoZVxuXHRcdCAgICAvLyBiZWhhdmlvciBvZiBpc0VtcHR5LiBFZmZlY3RpdmVseSB0aGlzIGRldGVybWluZXMgaWYgMCBpcyBoYW5kbGVkIGJ5IHRoZSBwb3NpdGl2ZSBwYXRoIG9yIG5lZ2F0aXZlLlxuXHRcdCAgICBpZiAoIW9wdGlvbnMuaGFzaC5pbmNsdWRlWmVybyAmJiAhY29uZGl0aW9uYWwgfHwgX3V0aWxzLmlzRW1wdHkoY29uZGl0aW9uYWwpKSB7XG5cdFx0ICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcblx0XHQgICAgfSBlbHNlIHtcblx0XHQgICAgICByZXR1cm4gb3B0aW9ucy5mbih0aGlzKTtcblx0XHQgICAgfVxuXHRcdCAgfSk7XG5cdFxuXHRcdCAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ3VubGVzcycsIGZ1bmN0aW9uIChjb25kaXRpb25hbCwgb3B0aW9ucykge1xuXHRcdCAgICByZXR1cm4gaW5zdGFuY2UuaGVscGVyc1snaWYnXS5jYWxsKHRoaXMsIGNvbmRpdGlvbmFsLCB7IGZuOiBvcHRpb25zLmludmVyc2UsIGludmVyc2U6IG9wdGlvbnMuZm4sIGhhc2g6IG9wdGlvbnMuaGFzaCB9KTtcblx0XHQgIH0pO1xuXHRcdH07XG5cdFxuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfSxcblx0LyogMTIgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XG5cdFx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG5cdFx0ICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignbG9nJywgZnVuY3Rpb24gKCkgLyogbWVzc2FnZSwgb3B0aW9ucyAqL3tcblx0XHQgICAgdmFyIGFyZ3MgPSBbdW5kZWZpbmVkXSxcblx0XHQgICAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdO1xuXHRcdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpKyspIHtcblx0XHQgICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcblx0XHQgICAgfVxuXHRcblx0XHQgICAgdmFyIGxldmVsID0gMTtcblx0XHQgICAgaWYgKG9wdGlvbnMuaGFzaC5sZXZlbCAhPSBudWxsKSB7XG5cdFx0ICAgICAgbGV2ZWwgPSBvcHRpb25zLmhhc2gubGV2ZWw7XG5cdFx0ICAgIH0gZWxzZSBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuZGF0YS5sZXZlbCAhPSBudWxsKSB7XG5cdFx0ICAgICAgbGV2ZWwgPSBvcHRpb25zLmRhdGEubGV2ZWw7XG5cdFx0ICAgIH1cblx0XHQgICAgYXJnc1swXSA9IGxldmVsO1xuXHRcblx0XHQgICAgaW5zdGFuY2UubG9nLmFwcGx5KGluc3RhbmNlLCBhcmdzKTtcblx0XHQgIH0pO1xuXHRcdH07XG5cdFxuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfSxcblx0LyogMTMgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XG5cdFx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG5cdFx0ICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignbG9va3VwJywgZnVuY3Rpb24gKG9iaiwgZmllbGQpIHtcblx0XHQgICAgcmV0dXJuIG9iaiAmJiBvYmpbZmllbGRdO1xuXHRcdCAgfSk7XG5cdFx0fTtcblx0XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cdFxuXHQvKioqLyB9LFxuXHQvKiAxNCAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblx0XG5cdFx0J3VzZSBzdHJpY3QnO1xuXHRcblx0XHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHRcblx0XHR2YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG5cdFx0ICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignd2l0aCcsIGZ1bmN0aW9uIChjb250ZXh0LCBvcHRpb25zKSB7XG5cdFx0ICAgIGlmIChfdXRpbHMuaXNGdW5jdGlvbihjb250ZXh0KSkge1xuXHRcdCAgICAgIGNvbnRleHQgPSBjb250ZXh0LmNhbGwodGhpcyk7XG5cdFx0ICAgIH1cblx0XG5cdFx0ICAgIHZhciBmbiA9IG9wdGlvbnMuZm47XG5cdFxuXHRcdCAgICBpZiAoIV91dGlscy5pc0VtcHR5KGNvbnRleHQpKSB7XG5cdFx0ICAgICAgdmFyIGRhdGEgPSBvcHRpb25zLmRhdGE7XG5cdFx0ICAgICAgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmlkcykge1xuXHRcdCAgICAgICAgZGF0YSA9IF91dGlscy5jcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuXHRcdCAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IF91dGlscy5hcHBlbmRDb250ZXh0UGF0aChvcHRpb25zLmRhdGEuY29udGV4dFBhdGgsIG9wdGlvbnMuaWRzWzBdKTtcblx0XHQgICAgICB9XG5cdFxuXHRcdCAgICAgIHJldHVybiBmbihjb250ZXh0LCB7XG5cdFx0ICAgICAgICBkYXRhOiBkYXRhLFxuXHRcdCAgICAgICAgYmxvY2tQYXJhbXM6IF91dGlscy5ibG9ja1BhcmFtcyhbY29udGV4dF0sIFtkYXRhICYmIGRhdGEuY29udGV4dFBhdGhdKVxuXHRcdCAgICAgIH0pO1xuXHRcdCAgICB9IGVsc2Uge1xuXHRcdCAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG5cdFx0ICAgIH1cblx0XHQgIH0pO1xuXHRcdH07XG5cdFxuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfSxcblx0LyogMTUgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XG5cdFx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpWydkZWZhdWx0J107XG5cdFxuXHRcdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cdFx0ZXhwb3J0cy5yZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzID0gcmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycztcblx0XG5cdFx0dmFyIF9kZWNvcmF0b3JzSW5saW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cdFxuXHRcdHZhciBfZGVjb3JhdG9yc0lubGluZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWNvcmF0b3JzSW5saW5lKTtcblx0XG5cdFx0ZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyhpbnN0YW5jZSkge1xuXHRcdCAgX2RlY29yYXRvcnNJbmxpbmUyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xuXHRcdH1cblx0XG5cdC8qKiovIH0sXG5cdC8qIDE2ICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXHRcblx0XHQndXNlIHN0cmljdCc7XG5cdFxuXHRcdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cdFxuXHRcdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHRcblx0XHRleHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcblx0XHQgIGluc3RhbmNlLnJlZ2lzdGVyRGVjb3JhdG9yKCdpbmxpbmUnLCBmdW5jdGlvbiAoZm4sIHByb3BzLCBjb250YWluZXIsIG9wdGlvbnMpIHtcblx0XHQgICAgdmFyIHJldCA9IGZuO1xuXHRcdCAgICBpZiAoIXByb3BzLnBhcnRpYWxzKSB7XG5cdFx0ICAgICAgcHJvcHMucGFydGlhbHMgPSB7fTtcblx0XHQgICAgICByZXQgPSBmdW5jdGlvbiAoY29udGV4dCwgb3B0aW9ucykge1xuXHRcdCAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IHBhcnRpYWxzIHN0YWNrIGZyYW1lIHByaW9yIHRvIGV4ZWMuXG5cdFx0ICAgICAgICB2YXIgb3JpZ2luYWwgPSBjb250YWluZXIucGFydGlhbHM7XG5cdFx0ICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBfdXRpbHMuZXh0ZW5kKHt9LCBvcmlnaW5hbCwgcHJvcHMucGFydGlhbHMpO1xuXHRcdCAgICAgICAgdmFyIHJldCA9IGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuXHRcdCAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gb3JpZ2luYWw7XG5cdFx0ICAgICAgICByZXR1cm4gcmV0O1xuXHRcdCAgICAgIH07XG5cdFx0ICAgIH1cblx0XG5cdFx0ICAgIHByb3BzLnBhcnRpYWxzW29wdGlvbnMuYXJnc1swXV0gPSBvcHRpb25zLmZuO1xuXHRcblx0XHQgICAgcmV0dXJuIHJldDtcblx0XHQgIH0pO1xuXHRcdH07XG5cdFxuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfSxcblx0LyogMTcgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XG5cdFx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0XG5cdFx0dmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdFxuXHRcdHZhciBsb2dnZXIgPSB7XG5cdFx0ICBtZXRob2RNYXA6IFsnZGVidWcnLCAnaW5mbycsICd3YXJuJywgJ2Vycm9yJ10sXG5cdFx0ICBsZXZlbDogJ2luZm8nLFxuXHRcblx0XHQgIC8vIE1hcHMgYSBnaXZlbiBsZXZlbCB2YWx1ZSB0byB0aGUgYG1ldGhvZE1hcGAgaW5kZXhlcyBhYm92ZS5cblx0XHQgIGxvb2t1cExldmVsOiBmdW5jdGlvbiBsb29rdXBMZXZlbChsZXZlbCkge1xuXHRcdCAgICBpZiAodHlwZW9mIGxldmVsID09PSAnc3RyaW5nJykge1xuXHRcdCAgICAgIHZhciBsZXZlbE1hcCA9IF91dGlscy5pbmRleE9mKGxvZ2dlci5tZXRob2RNYXAsIGxldmVsLnRvTG93ZXJDYXNlKCkpO1xuXHRcdCAgICAgIGlmIChsZXZlbE1hcCA+PSAwKSB7XG5cdFx0ICAgICAgICBsZXZlbCA9IGxldmVsTWFwO1xuXHRcdCAgICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgICBsZXZlbCA9IHBhcnNlSW50KGxldmVsLCAxMCk7XG5cdFx0ICAgICAgfVxuXHRcdCAgICB9XG5cdFxuXHRcdCAgICByZXR1cm4gbGV2ZWw7XG5cdFx0ICB9LFxuXHRcblx0XHQgIC8vIENhbiBiZSBvdmVycmlkZGVuIGluIHRoZSBob3N0IGVudmlyb25tZW50XG5cdFx0ICBsb2c6IGZ1bmN0aW9uIGxvZyhsZXZlbCkge1xuXHRcdCAgICBsZXZlbCA9IGxvZ2dlci5sb29rdXBMZXZlbChsZXZlbCk7XG5cdFxuXHRcdCAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGxvZ2dlci5sb29rdXBMZXZlbChsb2dnZXIubGV2ZWwpIDw9IGxldmVsKSB7XG5cdFx0ICAgICAgdmFyIG1ldGhvZCA9IGxvZ2dlci5tZXRob2RNYXBbbGV2ZWxdO1xuXHRcdCAgICAgIGlmICghY29uc29sZVttZXRob2RdKSB7XG5cdFx0ICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcblx0XHQgICAgICAgIG1ldGhvZCA9ICdsb2cnO1xuXHRcdCAgICAgIH1cblx0XG5cdFx0ICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1lc3NhZ2UgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG5cdFx0ICAgICAgICBtZXNzYWdlW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcblx0XHQgICAgICB9XG5cdFxuXHRcdCAgICAgIGNvbnNvbGVbbWV0aG9kXS5hcHBseShjb25zb2xlLCBtZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG5cdFx0ICAgIH1cblx0XHQgIH1cblx0XHR9O1xuXHRcblx0XHRleHBvcnRzWydkZWZhdWx0J10gPSBsb2dnZXI7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cdFxuXHQvKioqLyB9LFxuXHQvKiAxOCAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblx0XG5cdFx0Ly8gQnVpbGQgb3V0IG91ciBiYXNpYyBTYWZlU3RyaW5nIHR5cGVcblx0XHQndXNlIHN0cmljdCc7XG5cdFxuXHRcdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cdFx0ZnVuY3Rpb24gU2FmZVN0cmluZyhzdHJpbmcpIHtcblx0XHQgIHRoaXMuc3RyaW5nID0gc3RyaW5nO1xuXHRcdH1cblx0XG5cdFx0U2FmZVN0cmluZy5wcm90b3R5cGUudG9TdHJpbmcgPSBTYWZlU3RyaW5nLnByb3RvdHlwZS50b0hUTUwgPSBmdW5jdGlvbiAoKSB7XG5cdFx0ICByZXR1cm4gJycgKyB0aGlzLnN0cmluZztcblx0XHR9O1xuXHRcblx0XHRleHBvcnRzWydkZWZhdWx0J10gPSBTYWZlU3RyaW5nO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfSxcblx0LyogMTkgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XG5cdFx0dmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKVsnZGVmYXVsdCddO1xuXHRcblx0XHR2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSlbJ2RlZmF1bHQnXTtcblx0XG5cdFx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0XHRleHBvcnRzLmNoZWNrUmV2aXNpb24gPSBjaGVja1JldmlzaW9uO1xuXHRcdGV4cG9ydHMudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcblx0XHRleHBvcnRzLndyYXBQcm9ncmFtID0gd3JhcFByb2dyYW07XG5cdFx0ZXhwb3J0cy5yZXNvbHZlUGFydGlhbCA9IHJlc29sdmVQYXJ0aWFsO1xuXHRcdGV4cG9ydHMuaW52b2tlUGFydGlhbCA9IGludm9rZVBhcnRpYWw7XG5cdFx0ZXhwb3J0cy5ub29wID0gbm9vcDtcblx0XG5cdFx0dmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdFxuXHRcdHZhciBVdGlscyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF91dGlscyk7XG5cdFxuXHRcdHZhciBfZXhjZXB0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0XG5cdFx0dmFyIF9leGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhjZXB0aW9uKTtcblx0XG5cdFx0dmFyIF9iYXNlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0XG5cdFx0ZnVuY3Rpb24gY2hlY2tSZXZpc2lvbihjb21waWxlckluZm8pIHtcblx0XHQgIHZhciBjb21waWxlclJldmlzaW9uID0gY29tcGlsZXJJbmZvICYmIGNvbXBpbGVySW5mb1swXSB8fCAxLFxuXHRcdCAgICAgIGN1cnJlbnRSZXZpc2lvbiA9IF9iYXNlLkNPTVBJTEVSX1JFVklTSU9OO1xuXHRcblx0XHQgIGlmIChjb21waWxlclJldmlzaW9uICE9PSBjdXJyZW50UmV2aXNpb24pIHtcblx0XHQgICAgaWYgKGNvbXBpbGVyUmV2aXNpb24gPCBjdXJyZW50UmV2aXNpb24pIHtcblx0XHQgICAgICB2YXIgcnVudGltZVZlcnNpb25zID0gX2Jhc2UuUkVWSVNJT05fQ0hBTkdFU1tjdXJyZW50UmV2aXNpb25dLFxuXHRcdCAgICAgICAgICBjb21waWxlclZlcnNpb25zID0gX2Jhc2UuUkVWSVNJT05fQ0hBTkdFU1tjb21waWxlclJldmlzaW9uXTtcblx0XHQgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVGVtcGxhdGUgd2FzIHByZWNvbXBpbGVkIHdpdGggYW4gb2xkZXIgdmVyc2lvbiBvZiBIYW5kbGViYXJzIHRoYW4gdGhlIGN1cnJlbnQgcnVudGltZS4gJyArICdQbGVhc2UgdXBkYXRlIHlvdXIgcHJlY29tcGlsZXIgdG8gYSBuZXdlciB2ZXJzaW9uICgnICsgcnVudGltZVZlcnNpb25zICsgJykgb3IgZG93bmdyYWRlIHlvdXIgcnVudGltZSB0byBhbiBvbGRlciB2ZXJzaW9uICgnICsgY29tcGlsZXJWZXJzaW9ucyArICcpLicpO1xuXHRcdCAgICB9IGVsc2Uge1xuXHRcdCAgICAgIC8vIFVzZSB0aGUgZW1iZWRkZWQgdmVyc2lvbiBpbmZvIHNpbmNlIHRoZSBydW50aW1lIGRvZXNuJ3Qga25vdyBhYm91dCB0aGlzIHJldmlzaW9uIHlldFxuXHRcdCAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdUZW1wbGF0ZSB3YXMgcHJlY29tcGlsZWQgd2l0aCBhIG5ld2VyIHZlcnNpb24gb2YgSGFuZGxlYmFycyB0aGFuIHRoZSBjdXJyZW50IHJ1bnRpbWUuICcgKyAnUGxlYXNlIHVwZGF0ZSB5b3VyIHJ1bnRpbWUgdG8gYSBuZXdlciB2ZXJzaW9uICgnICsgY29tcGlsZXJJbmZvWzFdICsgJykuJyk7XG5cdFx0ICAgIH1cblx0XHQgIH1cblx0XHR9XG5cdFxuXHRcdGZ1bmN0aW9uIHRlbXBsYXRlKHRlbXBsYXRlU3BlYywgZW52KSB7XG5cdFx0ICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHRcdCAgaWYgKCFlbnYpIHtcblx0XHQgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ05vIGVudmlyb25tZW50IHBhc3NlZCB0byB0ZW1wbGF0ZScpO1xuXHRcdCAgfVxuXHRcdCAgaWYgKCF0ZW1wbGF0ZVNwZWMgfHwgIXRlbXBsYXRlU3BlYy5tYWluKSB7XG5cdFx0ICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdVbmtub3duIHRlbXBsYXRlIG9iamVjdDogJyArIHR5cGVvZiB0ZW1wbGF0ZVNwZWMpO1xuXHRcdCAgfVxuXHRcblx0XHQgIHRlbXBsYXRlU3BlYy5tYWluLmRlY29yYXRvciA9IHRlbXBsYXRlU3BlYy5tYWluX2Q7XG5cdFxuXHRcdCAgLy8gTm90ZTogVXNpbmcgZW52LlZNIHJlZmVyZW5jZXMgcmF0aGVyIHRoYW4gbG9jYWwgdmFyIHJlZmVyZW5jZXMgdGhyb3VnaG91dCB0aGlzIHNlY3Rpb24gdG8gYWxsb3dcblx0XHQgIC8vIGZvciBleHRlcm5hbCB1c2VycyB0byBvdmVycmlkZSB0aGVzZSBhcyBwc3VlZG8tc3VwcG9ydGVkIEFQSXMuXG5cdFx0ICBlbnYuVk0uY2hlY2tSZXZpc2lvbih0ZW1wbGF0ZVNwZWMuY29tcGlsZXIpO1xuXHRcblx0XHQgIGZ1bmN0aW9uIGludm9rZVBhcnRpYWxXcmFwcGVyKHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpIHtcblx0XHQgICAgaWYgKG9wdGlvbnMuaGFzaCkge1xuXHRcdCAgICAgIGNvbnRleHQgPSBVdGlscy5leHRlbmQoe30sIGNvbnRleHQsIG9wdGlvbnMuaGFzaCk7XG5cdFx0ICAgICAgaWYgKG9wdGlvbnMuaWRzKSB7XG5cdFx0ICAgICAgICBvcHRpb25zLmlkc1swXSA9IHRydWU7XG5cdFx0ICAgICAgfVxuXHRcdCAgICB9XG5cdFxuXHRcdCAgICBwYXJ0aWFsID0gZW52LlZNLnJlc29sdmVQYXJ0aWFsLmNhbGwodGhpcywgcGFydGlhbCwgY29udGV4dCwgb3B0aW9ucyk7XG5cdFx0ICAgIHZhciByZXN1bHQgPSBlbnYuVk0uaW52b2tlUGFydGlhbC5jYWxsKHRoaXMsIHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpO1xuXHRcblx0XHQgICAgaWYgKHJlc3VsdCA9PSBudWxsICYmIGVudi5jb21waWxlKSB7XG5cdFx0ICAgICAgb3B0aW9ucy5wYXJ0aWFsc1tvcHRpb25zLm5hbWVdID0gZW52LmNvbXBpbGUocGFydGlhbCwgdGVtcGxhdGVTcGVjLmNvbXBpbGVyT3B0aW9ucywgZW52KTtcblx0XHQgICAgICByZXN1bHQgPSBvcHRpb25zLnBhcnRpYWxzW29wdGlvbnMubmFtZV0oY29udGV4dCwgb3B0aW9ucyk7XG5cdFx0ICAgIH1cblx0XHQgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG5cdFx0ICAgICAgaWYgKG9wdGlvbnMuaW5kZW50KSB7XG5cdFx0ICAgICAgICB2YXIgbGluZXMgPSByZXN1bHQuc3BsaXQoJ1xcbicpO1xuXHRcdCAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaW5lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHQgICAgICAgICAgaWYgKCFsaW5lc1tpXSAmJiBpICsgMSA9PT0gbCkge1xuXHRcdCAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICB9XG5cdFxuXHRcdCAgICAgICAgICBsaW5lc1tpXSA9IG9wdGlvbnMuaW5kZW50ICsgbGluZXNbaV07XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICByZXN1bHQgPSBsaW5lcy5qb2luKCdcXG4nKTtcblx0XHQgICAgICB9XG5cdFx0ICAgICAgcmV0dXJuIHJlc3VsdDtcblx0XHQgICAgfSBlbHNlIHtcblx0XHQgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVGhlIHBhcnRpYWwgJyArIG9wdGlvbnMubmFtZSArICcgY291bGQgbm90IGJlIGNvbXBpbGVkIHdoZW4gcnVubmluZyBpbiBydW50aW1lLW9ubHkgbW9kZScpO1xuXHRcdCAgICB9XG5cdFx0ICB9XG5cdFxuXHRcdCAgLy8gSnVzdCBhZGQgd2F0ZXJcblx0XHQgIHZhciBjb250YWluZXIgPSB7XG5cdFx0ICAgIHN0cmljdDogZnVuY3Rpb24gc3RyaWN0KG9iaiwgbmFtZSkge1xuXHRcdCAgICAgIGlmICghKG5hbWUgaW4gb2JqKSkge1xuXHRcdCAgICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1wiJyArIG5hbWUgKyAnXCIgbm90IGRlZmluZWQgaW4gJyArIG9iaik7XG5cdFx0ICAgICAgfVxuXHRcdCAgICAgIHJldHVybiBvYmpbbmFtZV07XG5cdFx0ICAgIH0sXG5cdFx0ICAgIGxvb2t1cDogZnVuY3Rpb24gbG9va3VwKGRlcHRocywgbmFtZSkge1xuXHRcdCAgICAgIHZhciBsZW4gPSBkZXB0aHMubGVuZ3RoO1xuXHRcdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHQgICAgICAgIGlmIChkZXB0aHNbaV0gJiYgZGVwdGhzW2ldW25hbWVdICE9IG51bGwpIHtcblx0XHQgICAgICAgICAgcmV0dXJuIGRlcHRoc1tpXVtuYW1lXTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICB9XG5cdFx0ICAgIH0sXG5cdFx0ICAgIGxhbWJkYTogZnVuY3Rpb24gbGFtYmRhKGN1cnJlbnQsIGNvbnRleHQpIHtcblx0XHQgICAgICByZXR1cm4gdHlwZW9mIGN1cnJlbnQgPT09ICdmdW5jdGlvbicgPyBjdXJyZW50LmNhbGwoY29udGV4dCkgOiBjdXJyZW50O1xuXHRcdCAgICB9LFxuXHRcblx0XHQgICAgZXNjYXBlRXhwcmVzc2lvbjogVXRpbHMuZXNjYXBlRXhwcmVzc2lvbixcblx0XHQgICAgaW52b2tlUGFydGlhbDogaW52b2tlUGFydGlhbFdyYXBwZXIsXG5cdFxuXHRcdCAgICBmbjogZnVuY3Rpb24gZm4oaSkge1xuXHRcdCAgICAgIHZhciByZXQgPSB0ZW1wbGF0ZVNwZWNbaV07XG5cdFx0ICAgICAgcmV0LmRlY29yYXRvciA9IHRlbXBsYXRlU3BlY1tpICsgJ19kJ107XG5cdFx0ICAgICAgcmV0dXJuIHJldDtcblx0XHQgICAgfSxcblx0XG5cdFx0ICAgIHByb2dyYW1zOiBbXSxcblx0XHQgICAgcHJvZ3JhbTogZnVuY3Rpb24gcHJvZ3JhbShpLCBkYXRhLCBkZWNsYXJlZEJsb2NrUGFyYW1zLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG5cdFx0ICAgICAgdmFyIHByb2dyYW1XcmFwcGVyID0gdGhpcy5wcm9ncmFtc1tpXSxcblx0XHQgICAgICAgICAgZm4gPSB0aGlzLmZuKGkpO1xuXHRcdCAgICAgIGlmIChkYXRhIHx8IGRlcHRocyB8fCBibG9ja1BhcmFtcyB8fCBkZWNsYXJlZEJsb2NrUGFyYW1zKSB7XG5cdFx0ICAgICAgICBwcm9ncmFtV3JhcHBlciA9IHdyYXBQcm9ncmFtKHRoaXMsIGksIGZuLCBkYXRhLCBkZWNsYXJlZEJsb2NrUGFyYW1zLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcblx0XHQgICAgICB9IGVsc2UgaWYgKCFwcm9ncmFtV3JhcHBlcikge1xuXHRcdCAgICAgICAgcHJvZ3JhbVdyYXBwZXIgPSB0aGlzLnByb2dyYW1zW2ldID0gd3JhcFByb2dyYW0odGhpcywgaSwgZm4pO1xuXHRcdCAgICAgIH1cblx0XHQgICAgICByZXR1cm4gcHJvZ3JhbVdyYXBwZXI7XG5cdFx0ICAgIH0sXG5cdFxuXHRcdCAgICBkYXRhOiBmdW5jdGlvbiBkYXRhKHZhbHVlLCBkZXB0aCkge1xuXHRcdCAgICAgIHdoaWxlICh2YWx1ZSAmJiBkZXB0aC0tKSB7XG5cdFx0ICAgICAgICB2YWx1ZSA9IHZhbHVlLl9wYXJlbnQ7XG5cdFx0ICAgICAgfVxuXHRcdCAgICAgIHJldHVybiB2YWx1ZTtcblx0XHQgICAgfSxcblx0XHQgICAgbWVyZ2U6IGZ1bmN0aW9uIG1lcmdlKHBhcmFtLCBjb21tb24pIHtcblx0XHQgICAgICB2YXIgb2JqID0gcGFyYW0gfHwgY29tbW9uO1xuXHRcblx0XHQgICAgICBpZiAocGFyYW0gJiYgY29tbW9uICYmIHBhcmFtICE9PSBjb21tb24pIHtcblx0XHQgICAgICAgIG9iaiA9IFV0aWxzLmV4dGVuZCh7fSwgY29tbW9uLCBwYXJhbSk7XG5cdFx0ICAgICAgfVxuXHRcblx0XHQgICAgICByZXR1cm4gb2JqO1xuXHRcdCAgICB9LFxuXHRcblx0XHQgICAgbm9vcDogZW52LlZNLm5vb3AsXG5cdFx0ICAgIGNvbXBpbGVySW5mbzogdGVtcGxhdGVTcGVjLmNvbXBpbGVyXG5cdFx0ICB9O1xuXHRcblx0XHQgIGZ1bmN0aW9uIHJldChjb250ZXh0KSB7XG5cdFx0ICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMV07XG5cdFxuXHRcdCAgICB2YXIgZGF0YSA9IG9wdGlvbnMuZGF0YTtcblx0XG5cdFx0ICAgIHJldC5fc2V0dXAob3B0aW9ucyk7XG5cdFx0ICAgIGlmICghb3B0aW9ucy5wYXJ0aWFsICYmIHRlbXBsYXRlU3BlYy51c2VEYXRhKSB7XG5cdFx0ICAgICAgZGF0YSA9IGluaXREYXRhKGNvbnRleHQsIGRhdGEpO1xuXHRcdCAgICB9XG5cdFx0ICAgIHZhciBkZXB0aHMgPSB1bmRlZmluZWQsXG5cdFx0ICAgICAgICBibG9ja1BhcmFtcyA9IHRlbXBsYXRlU3BlYy51c2VCbG9ja1BhcmFtcyA/IFtdIDogdW5kZWZpbmVkO1xuXHRcdCAgICBpZiAodGVtcGxhdGVTcGVjLnVzZURlcHRocykge1xuXHRcdCAgICAgIGlmIChvcHRpb25zLmRlcHRocykge1xuXHRcdCAgICAgICAgZGVwdGhzID0gY29udGV4dCAhPT0gb3B0aW9ucy5kZXB0aHNbMF0gPyBbY29udGV4dF0uY29uY2F0KG9wdGlvbnMuZGVwdGhzKSA6IG9wdGlvbnMuZGVwdGhzO1xuXHRcdCAgICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgICBkZXB0aHMgPSBbY29udGV4dF07XG5cdFx0ICAgICAgfVxuXHRcdCAgICB9XG5cdFxuXHRcdCAgICBmdW5jdGlvbiBtYWluKGNvbnRleHQgLyosIG9wdGlvbnMqLykge1xuXHRcdCAgICAgIHJldHVybiAnJyArIHRlbXBsYXRlU3BlYy5tYWluKGNvbnRhaW5lciwgY29udGV4dCwgY29udGFpbmVyLmhlbHBlcnMsIGNvbnRhaW5lci5wYXJ0aWFscywgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG5cdFx0ICAgIH1cblx0XHQgICAgbWFpbiA9IGV4ZWN1dGVEZWNvcmF0b3JzKHRlbXBsYXRlU3BlYy5tYWluLCBtYWluLCBjb250YWluZXIsIG9wdGlvbnMuZGVwdGhzIHx8IFtdLCBkYXRhLCBibG9ja1BhcmFtcyk7XG5cdFx0ICAgIHJldHVybiBtYWluKGNvbnRleHQsIG9wdGlvbnMpO1xuXHRcdCAgfVxuXHRcdCAgcmV0LmlzVG9wID0gdHJ1ZTtcblx0XG5cdFx0ICByZXQuX3NldHVwID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0XHQgICAgaWYgKCFvcHRpb25zLnBhcnRpYWwpIHtcblx0XHQgICAgICBjb250YWluZXIuaGVscGVycyA9IGNvbnRhaW5lci5tZXJnZShvcHRpb25zLmhlbHBlcnMsIGVudi5oZWxwZXJzKTtcblx0XG5cdFx0ICAgICAgaWYgKHRlbXBsYXRlU3BlYy51c2VQYXJ0aWFsKSB7XG5cdFx0ICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBjb250YWluZXIubWVyZ2Uob3B0aW9ucy5wYXJ0aWFscywgZW52LnBhcnRpYWxzKTtcblx0XHQgICAgICB9XG5cdFx0ICAgICAgaWYgKHRlbXBsYXRlU3BlYy51c2VQYXJ0aWFsIHx8IHRlbXBsYXRlU3BlYy51c2VEZWNvcmF0b3JzKSB7XG5cdFx0ICAgICAgICBjb250YWluZXIuZGVjb3JhdG9ycyA9IGNvbnRhaW5lci5tZXJnZShvcHRpb25zLmRlY29yYXRvcnMsIGVudi5kZWNvcmF0b3JzKTtcblx0XHQgICAgICB9XG5cdFx0ICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgY29udGFpbmVyLmhlbHBlcnMgPSBvcHRpb25zLmhlbHBlcnM7XG5cdFx0ICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gb3B0aW9ucy5wYXJ0aWFscztcblx0XHQgICAgICBjb250YWluZXIuZGVjb3JhdG9ycyA9IG9wdGlvbnMuZGVjb3JhdG9ycztcblx0XHQgICAgfVxuXHRcdCAgfTtcblx0XG5cdFx0ICByZXQuX2NoaWxkID0gZnVuY3Rpb24gKGksIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcblx0XHQgICAgaWYgKHRlbXBsYXRlU3BlYy51c2VCbG9ja1BhcmFtcyAmJiAhYmxvY2tQYXJhbXMpIHtcblx0XHQgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnbXVzdCBwYXNzIGJsb2NrIHBhcmFtcycpO1xuXHRcdCAgICB9XG5cdFx0ICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlRGVwdGhzICYmICFkZXB0aHMpIHtcblx0XHQgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnbXVzdCBwYXNzIHBhcmVudCBkZXB0aHMnKTtcblx0XHQgICAgfVxuXHRcblx0XHQgICAgcmV0dXJuIHdyYXBQcm9ncmFtKGNvbnRhaW5lciwgaSwgdGVtcGxhdGVTcGVjW2ldLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcblx0XHQgIH07XG5cdFx0ICByZXR1cm4gcmV0O1xuXHRcdH1cblx0XG5cdFx0ZnVuY3Rpb24gd3JhcFByb2dyYW0oY29udGFpbmVyLCBpLCBmbiwgZGF0YSwgZGVjbGFyZWRCbG9ja1BhcmFtcywgYmxvY2tQYXJhbXMsIGRlcHRocykge1xuXHRcdCAgZnVuY3Rpb24gcHJvZyhjb250ZXh0KSB7XG5cdFx0ICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMV07XG5cdFxuXHRcdCAgICB2YXIgY3VycmVudERlcHRocyA9IGRlcHRocztcblx0XHQgICAgaWYgKGRlcHRocyAmJiBjb250ZXh0ICE9PSBkZXB0aHNbMF0pIHtcblx0XHQgICAgICBjdXJyZW50RGVwdGhzID0gW2NvbnRleHRdLmNvbmNhdChkZXB0aHMpO1xuXHRcdCAgICB9XG5cdFxuXHRcdCAgICByZXR1cm4gZm4oY29udGFpbmVyLCBjb250ZXh0LCBjb250YWluZXIuaGVscGVycywgY29udGFpbmVyLnBhcnRpYWxzLCBvcHRpb25zLmRhdGEgfHwgZGF0YSwgYmxvY2tQYXJhbXMgJiYgW29wdGlvbnMuYmxvY2tQYXJhbXNdLmNvbmNhdChibG9ja1BhcmFtcyksIGN1cnJlbnREZXB0aHMpO1xuXHRcdCAgfVxuXHRcblx0XHQgIHByb2cgPSBleGVjdXRlRGVjb3JhdG9ycyhmbiwgcHJvZywgY29udGFpbmVyLCBkZXB0aHMsIGRhdGEsIGJsb2NrUGFyYW1zKTtcblx0XG5cdFx0ICBwcm9nLnByb2dyYW0gPSBpO1xuXHRcdCAgcHJvZy5kZXB0aCA9IGRlcHRocyA/IGRlcHRocy5sZW5ndGggOiAwO1xuXHRcdCAgcHJvZy5ibG9ja1BhcmFtcyA9IGRlY2xhcmVkQmxvY2tQYXJhbXMgfHwgMDtcblx0XHQgIHJldHVybiBwcm9nO1xuXHRcdH1cblx0XG5cdFx0ZnVuY3Rpb24gcmVzb2x2ZVBhcnRpYWwocGFydGlhbCwgY29udGV4dCwgb3B0aW9ucykge1xuXHRcdCAgaWYgKCFwYXJ0aWFsKSB7XG5cdFx0ICAgIGlmIChvcHRpb25zLm5hbWUgPT09ICdAcGFydGlhbC1ibG9jaycpIHtcblx0XHQgICAgICBwYXJ0aWFsID0gb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ107XG5cdFx0ICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgcGFydGlhbCA9IG9wdGlvbnMucGFydGlhbHNbb3B0aW9ucy5uYW1lXTtcblx0XHQgICAgfVxuXHRcdCAgfSBlbHNlIGlmICghcGFydGlhbC5jYWxsICYmICFvcHRpb25zLm5hbWUpIHtcblx0XHQgICAgLy8gVGhpcyBpcyBhIGR5bmFtaWMgcGFydGlhbCB0aGF0IHJldHVybmVkIGEgc3RyaW5nXG5cdFx0ICAgIG9wdGlvbnMubmFtZSA9IHBhcnRpYWw7XG5cdFx0ICAgIHBhcnRpYWwgPSBvcHRpb25zLnBhcnRpYWxzW3BhcnRpYWxdO1xuXHRcdCAgfVxuXHRcdCAgcmV0dXJuIHBhcnRpYWw7XG5cdFx0fVxuXHRcblx0XHRmdW5jdGlvbiBpbnZva2VQYXJ0aWFsKHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpIHtcblx0XHQgIG9wdGlvbnMucGFydGlhbCA9IHRydWU7XG5cdFx0ICBpZiAob3B0aW9ucy5pZHMpIHtcblx0XHQgICAgb3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoID0gb3B0aW9ucy5pZHNbMF0gfHwgb3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoO1xuXHRcdCAgfVxuXHRcblx0XHQgIHZhciBwYXJ0aWFsQmxvY2sgPSB1bmRlZmluZWQ7XG5cdFx0ICBpZiAob3B0aW9ucy5mbiAmJiBvcHRpb25zLmZuICE9PSBub29wKSB7XG5cdFx0ICAgIG9wdGlvbnMuZGF0YSA9IF9iYXNlLmNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG5cdFx0ICAgIHBhcnRpYWxCbG9jayA9IG9wdGlvbnMuZGF0YVsncGFydGlhbC1ibG9jayddID0gb3B0aW9ucy5mbjtcblx0XG5cdFx0ICAgIGlmIChwYXJ0aWFsQmxvY2sucGFydGlhbHMpIHtcblx0XHQgICAgICBvcHRpb25zLnBhcnRpYWxzID0gVXRpbHMuZXh0ZW5kKHt9LCBvcHRpb25zLnBhcnRpYWxzLCBwYXJ0aWFsQmxvY2sucGFydGlhbHMpO1xuXHRcdCAgICB9XG5cdFx0ICB9XG5cdFxuXHRcdCAgaWYgKHBhcnRpYWwgPT09IHVuZGVmaW5lZCAmJiBwYXJ0aWFsQmxvY2spIHtcblx0XHQgICAgcGFydGlhbCA9IHBhcnRpYWxCbG9jaztcblx0XHQgIH1cblx0XG5cdFx0ICBpZiAocGFydGlhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdUaGUgcGFydGlhbCAnICsgb3B0aW9ucy5uYW1lICsgJyBjb3VsZCBub3QgYmUgZm91bmQnKTtcblx0XHQgIH0gZWxzZSBpZiAocGFydGlhbCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG5cdFx0ICAgIHJldHVybiBwYXJ0aWFsKGNvbnRleHQsIG9wdGlvbnMpO1xuXHRcdCAgfVxuXHRcdH1cblx0XG5cdFx0ZnVuY3Rpb24gbm9vcCgpIHtcblx0XHQgIHJldHVybiAnJztcblx0XHR9XG5cdFxuXHRcdGZ1bmN0aW9uIGluaXREYXRhKGNvbnRleHQsIGRhdGEpIHtcblx0XHQgIGlmICghZGF0YSB8fCAhKCdyb290JyBpbiBkYXRhKSkge1xuXHRcdCAgICBkYXRhID0gZGF0YSA/IF9iYXNlLmNyZWF0ZUZyYW1lKGRhdGEpIDoge307XG5cdFx0ICAgIGRhdGEucm9vdCA9IGNvbnRleHQ7XG5cdFx0ICB9XG5cdFx0ICByZXR1cm4gZGF0YTtcblx0XHR9XG5cdFxuXHRcdGZ1bmN0aW9uIGV4ZWN1dGVEZWNvcmF0b3JzKGZuLCBwcm9nLCBjb250YWluZXIsIGRlcHRocywgZGF0YSwgYmxvY2tQYXJhbXMpIHtcblx0XHQgIGlmIChmbi5kZWNvcmF0b3IpIHtcblx0XHQgICAgdmFyIHByb3BzID0ge307XG5cdFx0ICAgIHByb2cgPSBmbi5kZWNvcmF0b3IocHJvZywgcHJvcHMsIGNvbnRhaW5lciwgZGVwdGhzICYmIGRlcHRoc1swXSwgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG5cdFx0ICAgIFV0aWxzLmV4dGVuZChwcm9nLCBwcm9wcyk7XG5cdFx0ICB9XG5cdFx0ICByZXR1cm4gcHJvZztcblx0XHR9XG5cdFxuXHQvKioqLyB9LFxuXHQvKiAyMCAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblx0XG5cdFx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkgey8qIGdsb2JhbCB3aW5kb3cgKi9cblx0XHQndXNlIHN0cmljdCc7XG5cdFxuXHRcdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cdFxuXHRcdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChIYW5kbGViYXJzKSB7XG5cdFx0ICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHRcdCAgdmFyIHJvb3QgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHdpbmRvdyxcblx0XHQgICAgICAkSGFuZGxlYmFycyA9IHJvb3QuSGFuZGxlYmFycztcblx0XHQgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cdFx0ICBIYW5kbGViYXJzLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG5cdFx0ICAgIGlmIChyb290LkhhbmRsZWJhcnMgPT09IEhhbmRsZWJhcnMpIHtcblx0XHQgICAgICByb290LkhhbmRsZWJhcnMgPSAkSGFuZGxlYmFycztcblx0XHQgICAgfVxuXHRcdCAgICByZXR1cm4gSGFuZGxlYmFycztcblx0XHQgIH07XG5cdFx0fTtcblx0XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cdFx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0oKSkpKVxuXHRcblx0LyoqKi8gfSxcblx0LyogMjEgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XG5cdFx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0XHR2YXIgQVNUID0ge1xuXHRcdCAgLy8gUHVibGljIEFQSSB1c2VkIHRvIGV2YWx1YXRlIGRlcml2ZWQgYXR0cmlidXRlcyByZWdhcmRpbmcgQVNUIG5vZGVzXG5cdFx0ICBoZWxwZXJzOiB7XG5cdFx0ICAgIC8vIGEgbXVzdGFjaGUgaXMgZGVmaW5pdGVseSBhIGhlbHBlciBpZjpcblx0XHQgICAgLy8gKiBpdCBpcyBhbiBlbGlnaWJsZSBoZWxwZXIsIGFuZFxuXHRcdCAgICAvLyAqIGl0IGhhcyBhdCBsZWFzdCBvbmUgcGFyYW1ldGVyIG9yIGhhc2ggc2VnbWVudFxuXHRcdCAgICBoZWxwZXJFeHByZXNzaW9uOiBmdW5jdGlvbiBoZWxwZXJFeHByZXNzaW9uKG5vZGUpIHtcblx0XHQgICAgICByZXR1cm4gbm9kZS50eXBlID09PSAnU3ViRXhwcmVzc2lvbicgfHwgKG5vZGUudHlwZSA9PT0gJ011c3RhY2hlU3RhdGVtZW50JyB8fCBub2RlLnR5cGUgPT09ICdCbG9ja1N0YXRlbWVudCcpICYmICEhKG5vZGUucGFyYW1zICYmIG5vZGUucGFyYW1zLmxlbmd0aCB8fCBub2RlLmhhc2gpO1xuXHRcdCAgICB9LFxuXHRcblx0XHQgICAgc2NvcGVkSWQ6IGZ1bmN0aW9uIHNjb3BlZElkKHBhdGgpIHtcblx0XHQgICAgICByZXR1cm4gKC9eXFwufHRoaXNcXGIvLnRlc3QocGF0aC5vcmlnaW5hbClcblx0XHQgICAgICApO1xuXHRcdCAgICB9LFxuXHRcblx0XHQgICAgLy8gYW4gSUQgaXMgc2ltcGxlIGlmIGl0IG9ubHkgaGFzIG9uZSBwYXJ0LCBhbmQgdGhhdCBwYXJ0IGlzIG5vdFxuXHRcdCAgICAvLyBgLi5gIG9yIGB0aGlzYC5cblx0XHQgICAgc2ltcGxlSWQ6IGZ1bmN0aW9uIHNpbXBsZUlkKHBhdGgpIHtcblx0XHQgICAgICByZXR1cm4gcGF0aC5wYXJ0cy5sZW5ndGggPT09IDEgJiYgIUFTVC5oZWxwZXJzLnNjb3BlZElkKHBhdGgpICYmICFwYXRoLmRlcHRoO1xuXHRcdCAgICB9XG5cdFx0ICB9XG5cdFx0fTtcblx0XG5cdFx0Ly8gTXVzdCBiZSBleHBvcnRlZCBhcyBhbiBvYmplY3QgcmF0aGVyIHRoYW4gdGhlIHJvb3Qgb2YgdGhlIG1vZHVsZSBhcyB0aGUgamlzb24gbGV4ZXJcblx0XHQvLyBtdXN0IG1vZGlmeSB0aGUgb2JqZWN0IHRvIG9wZXJhdGUgcHJvcGVybHkuXG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gQVNUO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfSxcblx0LyogMjIgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XG5cdFx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpWydkZWZhdWx0J107XG5cdFxuXHRcdHZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IF9fd2VicGFja19yZXF1aXJlX18oMylbJ2RlZmF1bHQnXTtcblx0XG5cdFx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0XHRleHBvcnRzLnBhcnNlID0gcGFyc2U7XG5cdFxuXHRcdHZhciBfcGFyc2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG5cdFxuXHRcdHZhciBfcGFyc2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcnNlcik7XG5cdFxuXHRcdHZhciBfd2hpdGVzcGFjZUNvbnRyb2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTtcblx0XG5cdFx0dmFyIF93aGl0ZXNwYWNlQ29udHJvbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93aGl0ZXNwYWNlQ29udHJvbCk7XG5cdFxuXHRcdHZhciBfaGVscGVycyA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpO1xuXHRcblx0XHR2YXIgSGVscGVycyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9oZWxwZXJzKTtcblx0XG5cdFx0dmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdFxuXHRcdGV4cG9ydHMucGFyc2VyID0gX3BhcnNlcjJbJ2RlZmF1bHQnXTtcblx0XG5cdFx0dmFyIHl5ID0ge307XG5cdFx0X3V0aWxzLmV4dGVuZCh5eSwgSGVscGVycyk7XG5cdFxuXHRcdGZ1bmN0aW9uIHBhcnNlKGlucHV0LCBvcHRpb25zKSB7XG5cdFx0ICAvLyBKdXN0IHJldHVybiBpZiBhbiBhbHJlYWR5LWNvbXBpbGVkIEFTVCB3YXMgcGFzc2VkIGluLlxuXHRcdCAgaWYgKGlucHV0LnR5cGUgPT09ICdQcm9ncmFtJykge1xuXHRcdCAgICByZXR1cm4gaW5wdXQ7XG5cdFx0ICB9XG5cdFxuXHRcdCAgX3BhcnNlcjJbJ2RlZmF1bHQnXS55eSA9IHl5O1xuXHRcblx0XHQgIC8vIEFsdGVyaW5nIHRoZSBzaGFyZWQgb2JqZWN0IGhlcmUsIGJ1dCB0aGlzIGlzIG9rIGFzIHBhcnNlciBpcyBhIHN5bmMgb3BlcmF0aW9uXG5cdFx0ICB5eS5sb2NJbmZvID0gZnVuY3Rpb24gKGxvY0luZm8pIHtcblx0XHQgICAgcmV0dXJuIG5ldyB5eS5Tb3VyY2VMb2NhdGlvbihvcHRpb25zICYmIG9wdGlvbnMuc3JjTmFtZSwgbG9jSW5mbyk7XG5cdFx0ICB9O1xuXHRcblx0XHQgIHZhciBzdHJpcCA9IG5ldyBfd2hpdGVzcGFjZUNvbnRyb2wyWydkZWZhdWx0J10ob3B0aW9ucyk7XG5cdFx0ICByZXR1cm4gc3RyaXAuYWNjZXB0KF9wYXJzZXIyWydkZWZhdWx0J10ucGFyc2UoaW5wdXQpKTtcblx0XHR9XG5cdFxuXHQvKioqLyB9LFxuXHQvKiAyMyAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblx0XG5cdFx0LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0XHQvKiBKaXNvbiBnZW5lcmF0ZWQgcGFyc2VyICovXG5cdFx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRcdHZhciBoYW5kbGViYXJzID0gKGZ1bmN0aW9uICgpIHtcblx0XHQgICAgdmFyIHBhcnNlciA9IHsgdHJhY2U6IGZ1bmN0aW9uIHRyYWNlKCkge30sXG5cdFx0ICAgICAgICB5eToge30sXG5cdFx0ICAgICAgICBzeW1ib2xzXzogeyBcImVycm9yXCI6IDIsIFwicm9vdFwiOiAzLCBcInByb2dyYW1cIjogNCwgXCJFT0ZcIjogNSwgXCJwcm9ncmFtX3JlcGV0aXRpb24wXCI6IDYsIFwic3RhdGVtZW50XCI6IDcsIFwibXVzdGFjaGVcIjogOCwgXCJibG9ja1wiOiA5LCBcInJhd0Jsb2NrXCI6IDEwLCBcInBhcnRpYWxcIjogMTEsIFwicGFydGlhbEJsb2NrXCI6IDEyLCBcImNvbnRlbnRcIjogMTMsIFwiQ09NTUVOVFwiOiAxNCwgXCJDT05URU5UXCI6IDE1LCBcIm9wZW5SYXdCbG9ja1wiOiAxNiwgXCJyYXdCbG9ja19yZXBldGl0aW9uX3BsdXMwXCI6IDE3LCBcIkVORF9SQVdfQkxPQ0tcIjogMTgsIFwiT1BFTl9SQVdfQkxPQ0tcIjogMTksIFwiaGVscGVyTmFtZVwiOiAyMCwgXCJvcGVuUmF3QmxvY2tfcmVwZXRpdGlvbjBcIjogMjEsIFwib3BlblJhd0Jsb2NrX29wdGlvbjBcIjogMjIsIFwiQ0xPU0VfUkFXX0JMT0NLXCI6IDIzLCBcIm9wZW5CbG9ja1wiOiAyNCwgXCJibG9ja19vcHRpb24wXCI6IDI1LCBcImNsb3NlQmxvY2tcIjogMjYsIFwib3BlbkludmVyc2VcIjogMjcsIFwiYmxvY2tfb3B0aW9uMVwiOiAyOCwgXCJPUEVOX0JMT0NLXCI6IDI5LCBcIm9wZW5CbG9ja19yZXBldGl0aW9uMFwiOiAzMCwgXCJvcGVuQmxvY2tfb3B0aW9uMFwiOiAzMSwgXCJvcGVuQmxvY2tfb3B0aW9uMVwiOiAzMiwgXCJDTE9TRVwiOiAzMywgXCJPUEVOX0lOVkVSU0VcIjogMzQsIFwib3BlbkludmVyc2VfcmVwZXRpdGlvbjBcIjogMzUsIFwib3BlbkludmVyc2Vfb3B0aW9uMFwiOiAzNiwgXCJvcGVuSW52ZXJzZV9vcHRpb24xXCI6IDM3LCBcIm9wZW5JbnZlcnNlQ2hhaW5cIjogMzgsIFwiT1BFTl9JTlZFUlNFX0NIQUlOXCI6IDM5LCBcIm9wZW5JbnZlcnNlQ2hhaW5fcmVwZXRpdGlvbjBcIjogNDAsIFwib3BlbkludmVyc2VDaGFpbl9vcHRpb24wXCI6IDQxLCBcIm9wZW5JbnZlcnNlQ2hhaW5fb3B0aW9uMVwiOiA0MiwgXCJpbnZlcnNlQW5kUHJvZ3JhbVwiOiA0MywgXCJJTlZFUlNFXCI6IDQ0LCBcImludmVyc2VDaGFpblwiOiA0NSwgXCJpbnZlcnNlQ2hhaW5fb3B0aW9uMFwiOiA0NiwgXCJPUEVOX0VOREJMT0NLXCI6IDQ3LCBcIk9QRU5cIjogNDgsIFwibXVzdGFjaGVfcmVwZXRpdGlvbjBcIjogNDksIFwibXVzdGFjaGVfb3B0aW9uMFwiOiA1MCwgXCJPUEVOX1VORVNDQVBFRFwiOiA1MSwgXCJtdXN0YWNoZV9yZXBldGl0aW9uMVwiOiA1MiwgXCJtdXN0YWNoZV9vcHRpb24xXCI6IDUzLCBcIkNMT1NFX1VORVNDQVBFRFwiOiA1NCwgXCJPUEVOX1BBUlRJQUxcIjogNTUsIFwicGFydGlhbE5hbWVcIjogNTYsIFwicGFydGlhbF9yZXBldGl0aW9uMFwiOiA1NywgXCJwYXJ0aWFsX29wdGlvbjBcIjogNTgsIFwib3BlblBhcnRpYWxCbG9ja1wiOiA1OSwgXCJPUEVOX1BBUlRJQUxfQkxPQ0tcIjogNjAsIFwib3BlblBhcnRpYWxCbG9ja19yZXBldGl0aW9uMFwiOiA2MSwgXCJvcGVuUGFydGlhbEJsb2NrX29wdGlvbjBcIjogNjIsIFwicGFyYW1cIjogNjMsIFwic2V4cHJcIjogNjQsIFwiT1BFTl9TRVhQUlwiOiA2NSwgXCJzZXhwcl9yZXBldGl0aW9uMFwiOiA2NiwgXCJzZXhwcl9vcHRpb24wXCI6IDY3LCBcIkNMT1NFX1NFWFBSXCI6IDY4LCBcImhhc2hcIjogNjksIFwiaGFzaF9yZXBldGl0aW9uX3BsdXMwXCI6IDcwLCBcImhhc2hTZWdtZW50XCI6IDcxLCBcIklEXCI6IDcyLCBcIkVRVUFMU1wiOiA3MywgXCJibG9ja1BhcmFtc1wiOiA3NCwgXCJPUEVOX0JMT0NLX1BBUkFNU1wiOiA3NSwgXCJibG9ja1BhcmFtc19yZXBldGl0aW9uX3BsdXMwXCI6IDc2LCBcIkNMT1NFX0JMT0NLX1BBUkFNU1wiOiA3NywgXCJwYXRoXCI6IDc4LCBcImRhdGFOYW1lXCI6IDc5LCBcIlNUUklOR1wiOiA4MCwgXCJOVU1CRVJcIjogODEsIFwiQk9PTEVBTlwiOiA4MiwgXCJVTkRFRklORURcIjogODMsIFwiTlVMTFwiOiA4NCwgXCJEQVRBXCI6IDg1LCBcInBhdGhTZWdtZW50c1wiOiA4NiwgXCJTRVBcIjogODcsIFwiJGFjY2VwdFwiOiAwLCBcIiRlbmRcIjogMSB9LFxuXHRcdCAgICAgICAgdGVybWluYWxzXzogeyAyOiBcImVycm9yXCIsIDU6IFwiRU9GXCIsIDE0OiBcIkNPTU1FTlRcIiwgMTU6IFwiQ09OVEVOVFwiLCAxODogXCJFTkRfUkFXX0JMT0NLXCIsIDE5OiBcIk9QRU5fUkFXX0JMT0NLXCIsIDIzOiBcIkNMT1NFX1JBV19CTE9DS1wiLCAyOTogXCJPUEVOX0JMT0NLXCIsIDMzOiBcIkNMT1NFXCIsIDM0OiBcIk9QRU5fSU5WRVJTRVwiLCAzOTogXCJPUEVOX0lOVkVSU0VfQ0hBSU5cIiwgNDQ6IFwiSU5WRVJTRVwiLCA0NzogXCJPUEVOX0VOREJMT0NLXCIsIDQ4OiBcIk9QRU5cIiwgNTE6IFwiT1BFTl9VTkVTQ0FQRURcIiwgNTQ6IFwiQ0xPU0VfVU5FU0NBUEVEXCIsIDU1OiBcIk9QRU5fUEFSVElBTFwiLCA2MDogXCJPUEVOX1BBUlRJQUxfQkxPQ0tcIiwgNjU6IFwiT1BFTl9TRVhQUlwiLCA2ODogXCJDTE9TRV9TRVhQUlwiLCA3MjogXCJJRFwiLCA3MzogXCJFUVVBTFNcIiwgNzU6IFwiT1BFTl9CTE9DS19QQVJBTVNcIiwgNzc6IFwiQ0xPU0VfQkxPQ0tfUEFSQU1TXCIsIDgwOiBcIlNUUklOR1wiLCA4MTogXCJOVU1CRVJcIiwgODI6IFwiQk9PTEVBTlwiLCA4MzogXCJVTkRFRklORURcIiwgODQ6IFwiTlVMTFwiLCA4NTogXCJEQVRBXCIsIDg3OiBcIlNFUFwiIH0sXG5cdFx0ICAgICAgICBwcm9kdWN0aW9uc186IFswLCBbMywgMl0sIFs0LCAxXSwgWzcsIDFdLCBbNywgMV0sIFs3LCAxXSwgWzcsIDFdLCBbNywgMV0sIFs3LCAxXSwgWzcsIDFdLCBbMTMsIDFdLCBbMTAsIDNdLCBbMTYsIDVdLCBbOSwgNF0sIFs5LCA0XSwgWzI0LCA2XSwgWzI3LCA2XSwgWzM4LCA2XSwgWzQzLCAyXSwgWzQ1LCAzXSwgWzQ1LCAxXSwgWzI2LCAzXSwgWzgsIDVdLCBbOCwgNV0sIFsxMSwgNV0sIFsxMiwgM10sIFs1OSwgNV0sIFs2MywgMV0sIFs2MywgMV0sIFs2NCwgNV0sIFs2OSwgMV0sIFs3MSwgM10sIFs3NCwgM10sIFsyMCwgMV0sIFsyMCwgMV0sIFsyMCwgMV0sIFsyMCwgMV0sIFsyMCwgMV0sIFsyMCwgMV0sIFsyMCwgMV0sIFs1NiwgMV0sIFs1NiwgMV0sIFs3OSwgMl0sIFs3OCwgMV0sIFs4NiwgM10sIFs4NiwgMV0sIFs2LCAwXSwgWzYsIDJdLCBbMTcsIDFdLCBbMTcsIDJdLCBbMjEsIDBdLCBbMjEsIDJdLCBbMjIsIDBdLCBbMjIsIDFdLCBbMjUsIDBdLCBbMjUsIDFdLCBbMjgsIDBdLCBbMjgsIDFdLCBbMzAsIDBdLCBbMzAsIDJdLCBbMzEsIDBdLCBbMzEsIDFdLCBbMzIsIDBdLCBbMzIsIDFdLCBbMzUsIDBdLCBbMzUsIDJdLCBbMzYsIDBdLCBbMzYsIDFdLCBbMzcsIDBdLCBbMzcsIDFdLCBbNDAsIDBdLCBbNDAsIDJdLCBbNDEsIDBdLCBbNDEsIDFdLCBbNDIsIDBdLCBbNDIsIDFdLCBbNDYsIDBdLCBbNDYsIDFdLCBbNDksIDBdLCBbNDksIDJdLCBbNTAsIDBdLCBbNTAsIDFdLCBbNTIsIDBdLCBbNTIsIDJdLCBbNTMsIDBdLCBbNTMsIDFdLCBbNTcsIDBdLCBbNTcsIDJdLCBbNTgsIDBdLCBbNTgsIDFdLCBbNjEsIDBdLCBbNjEsIDJdLCBbNjIsIDBdLCBbNjIsIDFdLCBbNjYsIDBdLCBbNjYsIDJdLCBbNjcsIDBdLCBbNjcsIDFdLCBbNzAsIDFdLCBbNzAsIDJdLCBbNzYsIDFdLCBbNzYsIDJdXSxcblx0XHQgICAgICAgIHBlcmZvcm1BY3Rpb246IGZ1bmN0aW9uIGFub255bW91cyh5eXRleHQsIHl5bGVuZywgeXlsaW5lbm8sIHl5LCB5eXN0YXRlLCAkJCwgXyRcblx0XHQgICAgICAgIC8qKi8pIHtcblx0XG5cdFx0ICAgICAgICAgICAgdmFyICQwID0gJCQubGVuZ3RoIC0gMTtcblx0XHQgICAgICAgICAgICBzd2l0Y2ggKHl5c3RhdGUpIHtcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAxOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQkWyQwIC0gMV07XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAyOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geXkucHJlcGFyZVByb2dyYW0oJCRbJDBdKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDM6XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSA0OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gJCRbJDBdO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgNTpcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDY6XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSA3OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gJCRbJDBdO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgODpcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDk6XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0NvbW1lbnRTdGF0ZW1lbnQnLFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB5eS5zdHJpcENvbW1lbnQoJCRbJDBdKSxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMF0sICQkWyQwXSksXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpXG5cdFx0ICAgICAgICAgICAgICAgICAgICB9O1xuXHRcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDEwOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0ge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdDb250ZW50U3RhdGVtZW50Jyxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbDogJCRbJDBdLFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAkJFskMF0sXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpXG5cdFx0ICAgICAgICAgICAgICAgICAgICB9O1xuXHRcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDExOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geXkucHJlcGFyZVJhd0Jsb2NrKCQkWyQwIC0gMl0sICQkWyQwIC0gMV0sICQkWyQwXSwgdGhpcy5fJCk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAxMjpcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgcGF0aDogJCRbJDAgLSAzXSwgcGFyYW1zOiAkJFskMCAtIDJdLCBoYXNoOiAkJFskMCAtIDFdIH07XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAxMzpcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHl5LnByZXBhcmVCbG9jaygkJFskMCAtIDNdLCAkJFskMCAtIDJdLCAkJFskMCAtIDFdLCAkJFskMF0sIGZhbHNlLCB0aGlzLl8kKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDE0OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geXkucHJlcGFyZUJsb2NrKCQkWyQwIC0gM10sICQkWyQwIC0gMl0sICQkWyQwIC0gMV0sICQkWyQwXSwgdHJ1ZSwgdGhpcy5fJCk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAxNTpcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgb3BlbjogJCRbJDAgLSA1XSwgcGF0aDogJCRbJDAgLSA0XSwgcGFyYW1zOiAkJFskMCAtIDNdLCBoYXNoOiAkJFskMCAtIDJdLCBibG9ja1BhcmFtczogJCRbJDAgLSAxXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAgLSA1XSwgJCRbJDBdKSB9O1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgMTY6XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IHBhdGg6ICQkWyQwIC0gNF0sIHBhcmFtczogJCRbJDAgLSAzXSwgaGFzaDogJCRbJDAgLSAyXSwgYmxvY2tQYXJhbXM6ICQkWyQwIC0gMV0sIHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwIC0gNV0sICQkWyQwXSkgfTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDE3OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geyBwYXRoOiAkJFskMCAtIDRdLCBwYXJhbXM6ICQkWyQwIC0gM10sIGhhc2g6ICQkWyQwIC0gMl0sIGJsb2NrUGFyYW1zOiAkJFskMCAtIDFdLCBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMCAtIDVdLCAkJFskMF0pIH07XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAxODpcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAgLSAxXSwgJCRbJDAgLSAxXSksIHByb2dyYW06ICQkWyQwXSB9O1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgMTk6XG5cdFx0ICAgICAgICAgICAgICAgICAgICB2YXIgaW52ZXJzZSA9IHl5LnByZXBhcmVCbG9jaygkJFskMCAtIDJdLCAkJFskMCAtIDFdLCAkJFskMF0sICQkWyQwXSwgZmFsc2UsIHRoaXMuXyQpLFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyYW0gPSB5eS5wcmVwYXJlUHJvZ3JhbShbaW52ZXJzZV0sICQkWyQwIC0gMV0ubG9jKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIHByb2dyYW0uY2hhaW5lZCA9IHRydWU7XG5cdFxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geyBzdHJpcDogJCRbJDAgLSAyXS5zdHJpcCwgcHJvZ3JhbTogcHJvZ3JhbSwgY2hhaW46IHRydWUgfTtcblx0XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAyMDpcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDIxOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geyBwYXRoOiAkJFskMCAtIDFdLCBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMCAtIDJdLCAkJFskMF0pIH07XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAyMjpcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHl5LnByZXBhcmVNdXN0YWNoZSgkJFskMCAtIDNdLCAkJFskMCAtIDJdLCAkJFskMCAtIDFdLCAkJFskMCAtIDRdLCB5eS5zdHJpcEZsYWdzKCQkWyQwIC0gNF0sICQkWyQwXSksIHRoaXMuXyQpO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgMjM6XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB5eS5wcmVwYXJlTXVzdGFjaGUoJCRbJDAgLSAzXSwgJCRbJDAgLSAyXSwgJCRbJDAgLSAxXSwgJCRbJDAgLSA0XSwgeXkuc3RyaXBGbGFncygkJFskMCAtIDRdLCAkJFskMF0pLCB0aGlzLl8kKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDI0OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0ge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQYXJ0aWFsU3RhdGVtZW50Jyxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAkJFskMCAtIDNdLFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogJCRbJDAgLSAyXSxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBoYXNoOiAkJFskMCAtIDFdLFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudDogJycsXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAgLSA0XSwgJCRbJDBdKSxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBsb2M6IHl5LmxvY0luZm8odGhpcy5fJClcblx0XHQgICAgICAgICAgICAgICAgICAgIH07XG5cdFxuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgMjU6XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB5eS5wcmVwYXJlUGFydGlhbEJsb2NrKCQkWyQwIC0gMl0sICQkWyQwIC0gMV0sICQkWyQwXSwgdGhpcy5fJCk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAyNjpcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgcGF0aDogJCRbJDAgLSAzXSwgcGFyYW1zOiAkJFskMCAtIDJdLCBoYXNoOiAkJFskMCAtIDFdLCBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMCAtIDRdLCAkJFskMF0pIH07XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAyNzpcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDI4OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gJCRbJDBdO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgMjk6XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1N1YkV4cHJlc3Npb24nLFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6ICQkWyQwIC0gM10sXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiAkJFskMCAtIDJdLFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIGhhc2g6ICQkWyQwIC0gMV0sXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpXG5cdFx0ICAgICAgICAgICAgICAgICAgICB9O1xuXHRcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDMwOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geyB0eXBlOiAnSGFzaCcsIHBhaXJzOiAkJFskMF0sIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKSB9O1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgMzE6XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IHR5cGU6ICdIYXNoUGFpcicsIGtleTogeXkuaWQoJCRbJDAgLSAyXSksIHZhbHVlOiAkJFskMF0sIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKSB9O1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgMzI6XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB5eS5pZCgkJFskMCAtIDFdKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDMzOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gJCRbJDBdO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgMzQ6XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAzNTpcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgdHlwZTogJ1N0cmluZ0xpdGVyYWwnLCB2YWx1ZTogJCRbJDBdLCBvcmlnaW5hbDogJCRbJDBdLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCkgfTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDM2OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geyB0eXBlOiAnTnVtYmVyTGl0ZXJhbCcsIHZhbHVlOiBOdW1iZXIoJCRbJDBdKSwgb3JpZ2luYWw6IE51bWJlcigkJFskMF0pLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCkgfTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDM3OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geyB0eXBlOiAnQm9vbGVhbkxpdGVyYWwnLCB2YWx1ZTogJCRbJDBdID09PSAndHJ1ZScsIG9yaWdpbmFsOiAkJFskMF0gPT09ICd0cnVlJywgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpIH07XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAzODpcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgdHlwZTogJ1VuZGVmaW5lZExpdGVyYWwnLCBvcmlnaW5hbDogdW5kZWZpbmVkLCB2YWx1ZTogdW5kZWZpbmVkLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCkgfTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDM5OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geyB0eXBlOiAnTnVsbExpdGVyYWwnLCBvcmlnaW5hbDogbnVsbCwgdmFsdWU6IG51bGwsIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKSB9O1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgNDA6XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSA0MTpcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDQyOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geXkucHJlcGFyZVBhdGgodHJ1ZSwgJCRbJDBdLCB0aGlzLl8kKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDQzOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geXkucHJlcGFyZVBhdGgoZmFsc2UsICQkWyQwXSwgdGhpcy5fJCk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSA0NDpcblx0XHQgICAgICAgICAgICAgICAgICAgICQkWyQwIC0gMl0ucHVzaCh7IHBhcnQ6IHl5LmlkKCQkWyQwXSksIG9yaWdpbmFsOiAkJFskMF0sIHNlcGFyYXRvcjogJCRbJDAgLSAxXSB9KTt0aGlzLiQgPSAkJFskMCAtIDJdO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgNDU6XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSBbeyBwYXJ0OiB5eS5pZCgkJFskMF0pLCBvcmlnaW5hbDogJCRbJDBdIH1dO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgNDY6XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSBbXTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDQ3OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSA0ODpcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFskJFskMF1dO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgNDk6XG5cdFx0ICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDUwOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gW107XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSA1MTpcblx0XHQgICAgICAgICAgICAgICAgICAgICQkWyQwIC0gMV0ucHVzaCgkJFskMF0pO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgNTg6XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSBbXTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDU5OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSA2NDpcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFtdO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgNjU6XG5cdFx0ICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDcwOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gW107XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSA3MTpcblx0XHQgICAgICAgICAgICAgICAgICAgICQkWyQwIC0gMV0ucHVzaCgkJFskMF0pO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgNzg6XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSBbXTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDc5OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSA4Mjpcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFtdO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgODM6XG5cdFx0ICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDg2OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gW107XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSA4Nzpcblx0XHQgICAgICAgICAgICAgICAgICAgICQkWyQwIC0gMV0ucHVzaCgkJFskMF0pO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgOTA6XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSBbXTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDkxOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSA5NDpcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFtdO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgOTU6XG5cdFx0ICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDk4OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gWyQkWyQwXV07XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSA5OTpcblx0XHQgICAgICAgICAgICAgICAgICAgICQkWyQwIC0gMV0ucHVzaCgkJFskMF0pO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgMTAwOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gWyQkWyQwXV07XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAxMDE6XG5cdFx0ICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgIH0sXG5cdFx0ICAgICAgICB0YWJsZTogW3sgMzogMSwgNDogMiwgNTogWzIsIDQ2XSwgNjogMywgMTQ6IFsyLCA0Nl0sIDE1OiBbMiwgNDZdLCAxOTogWzIsIDQ2XSwgMjk6IFsyLCA0Nl0sIDM0OiBbMiwgNDZdLCA0ODogWzIsIDQ2XSwgNTE6IFsyLCA0Nl0sIDU1OiBbMiwgNDZdLCA2MDogWzIsIDQ2XSB9LCB7IDE6IFszXSB9LCB7IDU6IFsxLCA0XSB9LCB7IDU6IFsyLCAyXSwgNzogNSwgODogNiwgOTogNywgMTA6IDgsIDExOiA5LCAxMjogMTAsIDEzOiAxMSwgMTQ6IFsxLCAxMl0sIDE1OiBbMSwgMjBdLCAxNjogMTcsIDE5OiBbMSwgMjNdLCAyNDogMTUsIDI3OiAxNiwgMjk6IFsxLCAyMV0sIDM0OiBbMSwgMjJdLCAzOTogWzIsIDJdLCA0NDogWzIsIDJdLCA0NzogWzIsIDJdLCA0ODogWzEsIDEzXSwgNTE6IFsxLCAxNF0sIDU1OiBbMSwgMThdLCA1OTogMTksIDYwOiBbMSwgMjRdIH0sIHsgMTogWzIsIDFdIH0sIHsgNTogWzIsIDQ3XSwgMTQ6IFsyLCA0N10sIDE1OiBbMiwgNDddLCAxOTogWzIsIDQ3XSwgMjk6IFsyLCA0N10sIDM0OiBbMiwgNDddLCAzOTogWzIsIDQ3XSwgNDQ6IFsyLCA0N10sIDQ3OiBbMiwgNDddLCA0ODogWzIsIDQ3XSwgNTE6IFsyLCA0N10sIDU1OiBbMiwgNDddLCA2MDogWzIsIDQ3XSB9LCB7IDU6IFsyLCAzXSwgMTQ6IFsyLCAzXSwgMTU6IFsyLCAzXSwgMTk6IFsyLCAzXSwgMjk6IFsyLCAzXSwgMzQ6IFsyLCAzXSwgMzk6IFsyLCAzXSwgNDQ6IFsyLCAzXSwgNDc6IFsyLCAzXSwgNDg6IFsyLCAzXSwgNTE6IFsyLCAzXSwgNTU6IFsyLCAzXSwgNjA6IFsyLCAzXSB9LCB7IDU6IFsyLCA0XSwgMTQ6IFsyLCA0XSwgMTU6IFsyLCA0XSwgMTk6IFsyLCA0XSwgMjk6IFsyLCA0XSwgMzQ6IFsyLCA0XSwgMzk6IFsyLCA0XSwgNDQ6IFsyLCA0XSwgNDc6IFsyLCA0XSwgNDg6IFsyLCA0XSwgNTE6IFsyLCA0XSwgNTU6IFsyLCA0XSwgNjA6IFsyLCA0XSB9LCB7IDU6IFsyLCA1XSwgMTQ6IFsyLCA1XSwgMTU6IFsyLCA1XSwgMTk6IFsyLCA1XSwgMjk6IFsyLCA1XSwgMzQ6IFsyLCA1XSwgMzk6IFsyLCA1XSwgNDQ6IFsyLCA1XSwgNDc6IFsyLCA1XSwgNDg6IFsyLCA1XSwgNTE6IFsyLCA1XSwgNTU6IFsyLCA1XSwgNjA6IFsyLCA1XSB9LCB7IDU6IFsyLCA2XSwgMTQ6IFsyLCA2XSwgMTU6IFsyLCA2XSwgMTk6IFsyLCA2XSwgMjk6IFsyLCA2XSwgMzQ6IFsyLCA2XSwgMzk6IFsyLCA2XSwgNDQ6IFsyLCA2XSwgNDc6IFsyLCA2XSwgNDg6IFsyLCA2XSwgNTE6IFsyLCA2XSwgNTU6IFsyLCA2XSwgNjA6IFsyLCA2XSB9LCB7IDU6IFsyLCA3XSwgMTQ6IFsyLCA3XSwgMTU6IFsyLCA3XSwgMTk6IFsyLCA3XSwgMjk6IFsyLCA3XSwgMzQ6IFsyLCA3XSwgMzk6IFsyLCA3XSwgNDQ6IFsyLCA3XSwgNDc6IFsyLCA3XSwgNDg6IFsyLCA3XSwgNTE6IFsyLCA3XSwgNTU6IFsyLCA3XSwgNjA6IFsyLCA3XSB9LCB7IDU6IFsyLCA4XSwgMTQ6IFsyLCA4XSwgMTU6IFsyLCA4XSwgMTk6IFsyLCA4XSwgMjk6IFsyLCA4XSwgMzQ6IFsyLCA4XSwgMzk6IFsyLCA4XSwgNDQ6IFsyLCA4XSwgNDc6IFsyLCA4XSwgNDg6IFsyLCA4XSwgNTE6IFsyLCA4XSwgNTU6IFsyLCA4XSwgNjA6IFsyLCA4XSB9LCB7IDU6IFsyLCA5XSwgMTQ6IFsyLCA5XSwgMTU6IFsyLCA5XSwgMTk6IFsyLCA5XSwgMjk6IFsyLCA5XSwgMzQ6IFsyLCA5XSwgMzk6IFsyLCA5XSwgNDQ6IFsyLCA5XSwgNDc6IFsyLCA5XSwgNDg6IFsyLCA5XSwgNTE6IFsyLCA5XSwgNTU6IFsyLCA5XSwgNjA6IFsyLCA5XSB9LCB7IDIwOiAyNSwgNzI6IFsxLCAzNV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAyMDogMzYsIDcyOiBbMSwgMzVdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgNDogMzcsIDY6IDMsIDE0OiBbMiwgNDZdLCAxNTogWzIsIDQ2XSwgMTk6IFsyLCA0Nl0sIDI5OiBbMiwgNDZdLCAzNDogWzIsIDQ2XSwgMzk6IFsyLCA0Nl0sIDQ0OiBbMiwgNDZdLCA0NzogWzIsIDQ2XSwgNDg6IFsyLCA0Nl0sIDUxOiBbMiwgNDZdLCA1NTogWzIsIDQ2XSwgNjA6IFsyLCA0Nl0gfSwgeyA0OiAzOCwgNjogMywgMTQ6IFsyLCA0Nl0sIDE1OiBbMiwgNDZdLCAxOTogWzIsIDQ2XSwgMjk6IFsyLCA0Nl0sIDM0OiBbMiwgNDZdLCA0NDogWzIsIDQ2XSwgNDc6IFsyLCA0Nl0sIDQ4OiBbMiwgNDZdLCA1MTogWzIsIDQ2XSwgNTU6IFsyLCA0Nl0sIDYwOiBbMiwgNDZdIH0sIHsgMTM6IDQwLCAxNTogWzEsIDIwXSwgMTc6IDM5IH0sIHsgMjA6IDQyLCA1NjogNDEsIDY0OiA0MywgNjU6IFsxLCA0NF0sIDcyOiBbMSwgMzVdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgNDogNDUsIDY6IDMsIDE0OiBbMiwgNDZdLCAxNTogWzIsIDQ2XSwgMTk6IFsyLCA0Nl0sIDI5OiBbMiwgNDZdLCAzNDogWzIsIDQ2XSwgNDc6IFsyLCA0Nl0sIDQ4OiBbMiwgNDZdLCA1MTogWzIsIDQ2XSwgNTU6IFsyLCA0Nl0sIDYwOiBbMiwgNDZdIH0sIHsgNTogWzIsIDEwXSwgMTQ6IFsyLCAxMF0sIDE1OiBbMiwgMTBdLCAxODogWzIsIDEwXSwgMTk6IFsyLCAxMF0sIDI5OiBbMiwgMTBdLCAzNDogWzIsIDEwXSwgMzk6IFsyLCAxMF0sIDQ0OiBbMiwgMTBdLCA0NzogWzIsIDEwXSwgNDg6IFsyLCAxMF0sIDUxOiBbMiwgMTBdLCA1NTogWzIsIDEwXSwgNjA6IFsyLCAxMF0gfSwgeyAyMDogNDYsIDcyOiBbMSwgMzVdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMjA6IDQ3LCA3MjogWzEsIDM1XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDIwOiA0OCwgNzI6IFsxLCAzNV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAyMDogNDIsIDU2OiA0OSwgNjQ6IDQzLCA2NTogWzEsIDQ0XSwgNzI6IFsxLCAzNV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAzMzogWzIsIDc4XSwgNDk6IDUwLCA2NTogWzIsIDc4XSwgNzI6IFsyLCA3OF0sIDgwOiBbMiwgNzhdLCA4MTogWzIsIDc4XSwgODI6IFsyLCA3OF0sIDgzOiBbMiwgNzhdLCA4NDogWzIsIDc4XSwgODU6IFsyLCA3OF0gfSwgeyAyMzogWzIsIDMzXSwgMzM6IFsyLCAzM10sIDU0OiBbMiwgMzNdLCA2NTogWzIsIDMzXSwgNjg6IFsyLCAzM10sIDcyOiBbMiwgMzNdLCA3NTogWzIsIDMzXSwgODA6IFsyLCAzM10sIDgxOiBbMiwgMzNdLCA4MjogWzIsIDMzXSwgODM6IFsyLCAzM10sIDg0OiBbMiwgMzNdLCA4NTogWzIsIDMzXSB9LCB7IDIzOiBbMiwgMzRdLCAzMzogWzIsIDM0XSwgNTQ6IFsyLCAzNF0sIDY1OiBbMiwgMzRdLCA2ODogWzIsIDM0XSwgNzI6IFsyLCAzNF0sIDc1OiBbMiwgMzRdLCA4MDogWzIsIDM0XSwgODE6IFsyLCAzNF0sIDgyOiBbMiwgMzRdLCA4MzogWzIsIDM0XSwgODQ6IFsyLCAzNF0sIDg1OiBbMiwgMzRdIH0sIHsgMjM6IFsyLCAzNV0sIDMzOiBbMiwgMzVdLCA1NDogWzIsIDM1XSwgNjU6IFsyLCAzNV0sIDY4OiBbMiwgMzVdLCA3MjogWzIsIDM1XSwgNzU6IFsyLCAzNV0sIDgwOiBbMiwgMzVdLCA4MTogWzIsIDM1XSwgODI6IFsyLCAzNV0sIDgzOiBbMiwgMzVdLCA4NDogWzIsIDM1XSwgODU6IFsyLCAzNV0gfSwgeyAyMzogWzIsIDM2XSwgMzM6IFsyLCAzNl0sIDU0OiBbMiwgMzZdLCA2NTogWzIsIDM2XSwgNjg6IFsyLCAzNl0sIDcyOiBbMiwgMzZdLCA3NTogWzIsIDM2XSwgODA6IFsyLCAzNl0sIDgxOiBbMiwgMzZdLCA4MjogWzIsIDM2XSwgODM6IFsyLCAzNl0sIDg0OiBbMiwgMzZdLCA4NTogWzIsIDM2XSB9LCB7IDIzOiBbMiwgMzddLCAzMzogWzIsIDM3XSwgNTQ6IFsyLCAzN10sIDY1OiBbMiwgMzddLCA2ODogWzIsIDM3XSwgNzI6IFsyLCAzN10sIDc1OiBbMiwgMzddLCA4MDogWzIsIDM3XSwgODE6IFsyLCAzN10sIDgyOiBbMiwgMzddLCA4MzogWzIsIDM3XSwgODQ6IFsyLCAzN10sIDg1OiBbMiwgMzddIH0sIHsgMjM6IFsyLCAzOF0sIDMzOiBbMiwgMzhdLCA1NDogWzIsIDM4XSwgNjU6IFsyLCAzOF0sIDY4OiBbMiwgMzhdLCA3MjogWzIsIDM4XSwgNzU6IFsyLCAzOF0sIDgwOiBbMiwgMzhdLCA4MTogWzIsIDM4XSwgODI6IFsyLCAzOF0sIDgzOiBbMiwgMzhdLCA4NDogWzIsIDM4XSwgODU6IFsyLCAzOF0gfSwgeyAyMzogWzIsIDM5XSwgMzM6IFsyLCAzOV0sIDU0OiBbMiwgMzldLCA2NTogWzIsIDM5XSwgNjg6IFsyLCAzOV0sIDcyOiBbMiwgMzldLCA3NTogWzIsIDM5XSwgODA6IFsyLCAzOV0sIDgxOiBbMiwgMzldLCA4MjogWzIsIDM5XSwgODM6IFsyLCAzOV0sIDg0OiBbMiwgMzldLCA4NTogWzIsIDM5XSB9LCB7IDIzOiBbMiwgNDNdLCAzMzogWzIsIDQzXSwgNTQ6IFsyLCA0M10sIDY1OiBbMiwgNDNdLCA2ODogWzIsIDQzXSwgNzI6IFsyLCA0M10sIDc1OiBbMiwgNDNdLCA4MDogWzIsIDQzXSwgODE6IFsyLCA0M10sIDgyOiBbMiwgNDNdLCA4MzogWzIsIDQzXSwgODQ6IFsyLCA0M10sIDg1OiBbMiwgNDNdLCA4NzogWzEsIDUxXSB9LCB7IDcyOiBbMSwgMzVdLCA4NjogNTIgfSwgeyAyMzogWzIsIDQ1XSwgMzM6IFsyLCA0NV0sIDU0OiBbMiwgNDVdLCA2NTogWzIsIDQ1XSwgNjg6IFsyLCA0NV0sIDcyOiBbMiwgNDVdLCA3NTogWzIsIDQ1XSwgODA6IFsyLCA0NV0sIDgxOiBbMiwgNDVdLCA4MjogWzIsIDQ1XSwgODM6IFsyLCA0NV0sIDg0OiBbMiwgNDVdLCA4NTogWzIsIDQ1XSwgODc6IFsyLCA0NV0gfSwgeyA1MjogNTMsIDU0OiBbMiwgODJdLCA2NTogWzIsIDgyXSwgNzI6IFsyLCA4Ml0sIDgwOiBbMiwgODJdLCA4MTogWzIsIDgyXSwgODI6IFsyLCA4Ml0sIDgzOiBbMiwgODJdLCA4NDogWzIsIDgyXSwgODU6IFsyLCA4Ml0gfSwgeyAyNTogNTQsIDM4OiA1NiwgMzk6IFsxLCA1OF0sIDQzOiA1NywgNDQ6IFsxLCA1OV0sIDQ1OiA1NSwgNDc6IFsyLCA1NF0gfSwgeyAyODogNjAsIDQzOiA2MSwgNDQ6IFsxLCA1OV0sIDQ3OiBbMiwgNTZdIH0sIHsgMTM6IDYzLCAxNTogWzEsIDIwXSwgMTg6IFsxLCA2Ml0gfSwgeyAxNTogWzIsIDQ4XSwgMTg6IFsyLCA0OF0gfSwgeyAzMzogWzIsIDg2XSwgNTc6IDY0LCA2NTogWzIsIDg2XSwgNzI6IFsyLCA4Nl0sIDgwOiBbMiwgODZdLCA4MTogWzIsIDg2XSwgODI6IFsyLCA4Nl0sIDgzOiBbMiwgODZdLCA4NDogWzIsIDg2XSwgODU6IFsyLCA4Nl0gfSwgeyAzMzogWzIsIDQwXSwgNjU6IFsyLCA0MF0sIDcyOiBbMiwgNDBdLCA4MDogWzIsIDQwXSwgODE6IFsyLCA0MF0sIDgyOiBbMiwgNDBdLCA4MzogWzIsIDQwXSwgODQ6IFsyLCA0MF0sIDg1OiBbMiwgNDBdIH0sIHsgMzM6IFsyLCA0MV0sIDY1OiBbMiwgNDFdLCA3MjogWzIsIDQxXSwgODA6IFsyLCA0MV0sIDgxOiBbMiwgNDFdLCA4MjogWzIsIDQxXSwgODM6IFsyLCA0MV0sIDg0OiBbMiwgNDFdLCA4NTogWzIsIDQxXSB9LCB7IDIwOiA2NSwgNzI6IFsxLCAzNV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAyNjogNjYsIDQ3OiBbMSwgNjddIH0sIHsgMzA6IDY4LCAzMzogWzIsIDU4XSwgNjU6IFsyLCA1OF0sIDcyOiBbMiwgNThdLCA3NTogWzIsIDU4XSwgODA6IFsyLCA1OF0sIDgxOiBbMiwgNThdLCA4MjogWzIsIDU4XSwgODM6IFsyLCA1OF0sIDg0OiBbMiwgNThdLCA4NTogWzIsIDU4XSB9LCB7IDMzOiBbMiwgNjRdLCAzNTogNjksIDY1OiBbMiwgNjRdLCA3MjogWzIsIDY0XSwgNzU6IFsyLCA2NF0sIDgwOiBbMiwgNjRdLCA4MTogWzIsIDY0XSwgODI6IFsyLCA2NF0sIDgzOiBbMiwgNjRdLCA4NDogWzIsIDY0XSwgODU6IFsyLCA2NF0gfSwgeyAyMTogNzAsIDIzOiBbMiwgNTBdLCA2NTogWzIsIDUwXSwgNzI6IFsyLCA1MF0sIDgwOiBbMiwgNTBdLCA4MTogWzIsIDUwXSwgODI6IFsyLCA1MF0sIDgzOiBbMiwgNTBdLCA4NDogWzIsIDUwXSwgODU6IFsyLCA1MF0gfSwgeyAzMzogWzIsIDkwXSwgNjE6IDcxLCA2NTogWzIsIDkwXSwgNzI6IFsyLCA5MF0sIDgwOiBbMiwgOTBdLCA4MTogWzIsIDkwXSwgODI6IFsyLCA5MF0sIDgzOiBbMiwgOTBdLCA4NDogWzIsIDkwXSwgODU6IFsyLCA5MF0gfSwgeyAyMDogNzUsIDMzOiBbMiwgODBdLCA1MDogNzIsIDYzOiA3MywgNjQ6IDc2LCA2NTogWzEsIDQ0XSwgNjk6IDc0LCA3MDogNzcsIDcxOiA3OCwgNzI6IFsxLCA3OV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyA3MjogWzEsIDgwXSB9LCB7IDIzOiBbMiwgNDJdLCAzMzogWzIsIDQyXSwgNTQ6IFsyLCA0Ml0sIDY1OiBbMiwgNDJdLCA2ODogWzIsIDQyXSwgNzI6IFsyLCA0Ml0sIDc1OiBbMiwgNDJdLCA4MDogWzIsIDQyXSwgODE6IFsyLCA0Ml0sIDgyOiBbMiwgNDJdLCA4MzogWzIsIDQyXSwgODQ6IFsyLCA0Ml0sIDg1OiBbMiwgNDJdLCA4NzogWzEsIDUxXSB9LCB7IDIwOiA3NSwgNTM6IDgxLCA1NDogWzIsIDg0XSwgNjM6IDgyLCA2NDogNzYsIDY1OiBbMSwgNDRdLCA2OTogODMsIDcwOiA3NywgNzE6IDc4LCA3MjogWzEsIDc5XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDI2OiA4NCwgNDc6IFsxLCA2N10gfSwgeyA0NzogWzIsIDU1XSB9LCB7IDQ6IDg1LCA2OiAzLCAxNDogWzIsIDQ2XSwgMTU6IFsyLCA0Nl0sIDE5OiBbMiwgNDZdLCAyOTogWzIsIDQ2XSwgMzQ6IFsyLCA0Nl0sIDM5OiBbMiwgNDZdLCA0NDogWzIsIDQ2XSwgNDc6IFsyLCA0Nl0sIDQ4OiBbMiwgNDZdLCA1MTogWzIsIDQ2XSwgNTU6IFsyLCA0Nl0sIDYwOiBbMiwgNDZdIH0sIHsgNDc6IFsyLCAyMF0gfSwgeyAyMDogODYsIDcyOiBbMSwgMzVdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgNDogODcsIDY6IDMsIDE0OiBbMiwgNDZdLCAxNTogWzIsIDQ2XSwgMTk6IFsyLCA0Nl0sIDI5OiBbMiwgNDZdLCAzNDogWzIsIDQ2XSwgNDc6IFsyLCA0Nl0sIDQ4OiBbMiwgNDZdLCA1MTogWzIsIDQ2XSwgNTU6IFsyLCA0Nl0sIDYwOiBbMiwgNDZdIH0sIHsgMjY6IDg4LCA0NzogWzEsIDY3XSB9LCB7IDQ3OiBbMiwgNTddIH0sIHsgNTogWzIsIDExXSwgMTQ6IFsyLCAxMV0sIDE1OiBbMiwgMTFdLCAxOTogWzIsIDExXSwgMjk6IFsyLCAxMV0sIDM0OiBbMiwgMTFdLCAzOTogWzIsIDExXSwgNDQ6IFsyLCAxMV0sIDQ3OiBbMiwgMTFdLCA0ODogWzIsIDExXSwgNTE6IFsyLCAxMV0sIDU1OiBbMiwgMTFdLCA2MDogWzIsIDExXSB9LCB7IDE1OiBbMiwgNDldLCAxODogWzIsIDQ5XSB9LCB7IDIwOiA3NSwgMzM6IFsyLCA4OF0sIDU4OiA4OSwgNjM6IDkwLCA2NDogNzYsIDY1OiBbMSwgNDRdLCA2OTogOTEsIDcwOiA3NywgNzE6IDc4LCA3MjogWzEsIDc5XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDY1OiBbMiwgOTRdLCA2NjogOTIsIDY4OiBbMiwgOTRdLCA3MjogWzIsIDk0XSwgODA6IFsyLCA5NF0sIDgxOiBbMiwgOTRdLCA4MjogWzIsIDk0XSwgODM6IFsyLCA5NF0sIDg0OiBbMiwgOTRdLCA4NTogWzIsIDk0XSB9LCB7IDU6IFsyLCAyNV0sIDE0OiBbMiwgMjVdLCAxNTogWzIsIDI1XSwgMTk6IFsyLCAyNV0sIDI5OiBbMiwgMjVdLCAzNDogWzIsIDI1XSwgMzk6IFsyLCAyNV0sIDQ0OiBbMiwgMjVdLCA0NzogWzIsIDI1XSwgNDg6IFsyLCAyNV0sIDUxOiBbMiwgMjVdLCA1NTogWzIsIDI1XSwgNjA6IFsyLCAyNV0gfSwgeyAyMDogOTMsIDcyOiBbMSwgMzVdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMjA6IDc1LCAzMTogOTQsIDMzOiBbMiwgNjBdLCA2MzogOTUsIDY0OiA3NiwgNjU6IFsxLCA0NF0sIDY5OiA5NiwgNzA6IDc3LCA3MTogNzgsIDcyOiBbMSwgNzldLCA3NTogWzIsIDYwXSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDIwOiA3NSwgMzM6IFsyLCA2Nl0sIDM2OiA5NywgNjM6IDk4LCA2NDogNzYsIDY1OiBbMSwgNDRdLCA2OTogOTksIDcwOiA3NywgNzE6IDc4LCA3MjogWzEsIDc5XSwgNzU6IFsyLCA2Nl0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAyMDogNzUsIDIyOiAxMDAsIDIzOiBbMiwgNTJdLCA2MzogMTAxLCA2NDogNzYsIDY1OiBbMSwgNDRdLCA2OTogMTAyLCA3MDogNzcsIDcxOiA3OCwgNzI6IFsxLCA3OV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAyMDogNzUsIDMzOiBbMiwgOTJdLCA2MjogMTAzLCA2MzogMTA0LCA2NDogNzYsIDY1OiBbMSwgNDRdLCA2OTogMTA1LCA3MDogNzcsIDcxOiA3OCwgNzI6IFsxLCA3OV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAzMzogWzEsIDEwNl0gfSwgeyAzMzogWzIsIDc5XSwgNjU6IFsyLCA3OV0sIDcyOiBbMiwgNzldLCA4MDogWzIsIDc5XSwgODE6IFsyLCA3OV0sIDgyOiBbMiwgNzldLCA4MzogWzIsIDc5XSwgODQ6IFsyLCA3OV0sIDg1OiBbMiwgNzldIH0sIHsgMzM6IFsyLCA4MV0gfSwgeyAyMzogWzIsIDI3XSwgMzM6IFsyLCAyN10sIDU0OiBbMiwgMjddLCA2NTogWzIsIDI3XSwgNjg6IFsyLCAyN10sIDcyOiBbMiwgMjddLCA3NTogWzIsIDI3XSwgODA6IFsyLCAyN10sIDgxOiBbMiwgMjddLCA4MjogWzIsIDI3XSwgODM6IFsyLCAyN10sIDg0OiBbMiwgMjddLCA4NTogWzIsIDI3XSB9LCB7IDIzOiBbMiwgMjhdLCAzMzogWzIsIDI4XSwgNTQ6IFsyLCAyOF0sIDY1OiBbMiwgMjhdLCA2ODogWzIsIDI4XSwgNzI6IFsyLCAyOF0sIDc1OiBbMiwgMjhdLCA4MDogWzIsIDI4XSwgODE6IFsyLCAyOF0sIDgyOiBbMiwgMjhdLCA4MzogWzIsIDI4XSwgODQ6IFsyLCAyOF0sIDg1OiBbMiwgMjhdIH0sIHsgMjM6IFsyLCAzMF0sIDMzOiBbMiwgMzBdLCA1NDogWzIsIDMwXSwgNjg6IFsyLCAzMF0sIDcxOiAxMDcsIDcyOiBbMSwgMTA4XSwgNzU6IFsyLCAzMF0gfSwgeyAyMzogWzIsIDk4XSwgMzM6IFsyLCA5OF0sIDU0OiBbMiwgOThdLCA2ODogWzIsIDk4XSwgNzI6IFsyLCA5OF0sIDc1OiBbMiwgOThdIH0sIHsgMjM6IFsyLCA0NV0sIDMzOiBbMiwgNDVdLCA1NDogWzIsIDQ1XSwgNjU6IFsyLCA0NV0sIDY4OiBbMiwgNDVdLCA3MjogWzIsIDQ1XSwgNzM6IFsxLCAxMDldLCA3NTogWzIsIDQ1XSwgODA6IFsyLCA0NV0sIDgxOiBbMiwgNDVdLCA4MjogWzIsIDQ1XSwgODM6IFsyLCA0NV0sIDg0OiBbMiwgNDVdLCA4NTogWzIsIDQ1XSwgODc6IFsyLCA0NV0gfSwgeyAyMzogWzIsIDQ0XSwgMzM6IFsyLCA0NF0sIDU0OiBbMiwgNDRdLCA2NTogWzIsIDQ0XSwgNjg6IFsyLCA0NF0sIDcyOiBbMiwgNDRdLCA3NTogWzIsIDQ0XSwgODA6IFsyLCA0NF0sIDgxOiBbMiwgNDRdLCA4MjogWzIsIDQ0XSwgODM6IFsyLCA0NF0sIDg0OiBbMiwgNDRdLCA4NTogWzIsIDQ0XSwgODc6IFsyLCA0NF0gfSwgeyA1NDogWzEsIDExMF0gfSwgeyA1NDogWzIsIDgzXSwgNjU6IFsyLCA4M10sIDcyOiBbMiwgODNdLCA4MDogWzIsIDgzXSwgODE6IFsyLCA4M10sIDgyOiBbMiwgODNdLCA4MzogWzIsIDgzXSwgODQ6IFsyLCA4M10sIDg1OiBbMiwgODNdIH0sIHsgNTQ6IFsyLCA4NV0gfSwgeyA1OiBbMiwgMTNdLCAxNDogWzIsIDEzXSwgMTU6IFsyLCAxM10sIDE5OiBbMiwgMTNdLCAyOTogWzIsIDEzXSwgMzQ6IFsyLCAxM10sIDM5OiBbMiwgMTNdLCA0NDogWzIsIDEzXSwgNDc6IFsyLCAxM10sIDQ4OiBbMiwgMTNdLCA1MTogWzIsIDEzXSwgNTU6IFsyLCAxM10sIDYwOiBbMiwgMTNdIH0sIHsgMzg6IDU2LCAzOTogWzEsIDU4XSwgNDM6IDU3LCA0NDogWzEsIDU5XSwgNDU6IDExMiwgNDY6IDExMSwgNDc6IFsyLCA3Nl0gfSwgeyAzMzogWzIsIDcwXSwgNDA6IDExMywgNjU6IFsyLCA3MF0sIDcyOiBbMiwgNzBdLCA3NTogWzIsIDcwXSwgODA6IFsyLCA3MF0sIDgxOiBbMiwgNzBdLCA4MjogWzIsIDcwXSwgODM6IFsyLCA3MF0sIDg0OiBbMiwgNzBdLCA4NTogWzIsIDcwXSB9LCB7IDQ3OiBbMiwgMThdIH0sIHsgNTogWzIsIDE0XSwgMTQ6IFsyLCAxNF0sIDE1OiBbMiwgMTRdLCAxOTogWzIsIDE0XSwgMjk6IFsyLCAxNF0sIDM0OiBbMiwgMTRdLCAzOTogWzIsIDE0XSwgNDQ6IFsyLCAxNF0sIDQ3OiBbMiwgMTRdLCA0ODogWzIsIDE0XSwgNTE6IFsyLCAxNF0sIDU1OiBbMiwgMTRdLCA2MDogWzIsIDE0XSB9LCB7IDMzOiBbMSwgMTE0XSB9LCB7IDMzOiBbMiwgODddLCA2NTogWzIsIDg3XSwgNzI6IFsyLCA4N10sIDgwOiBbMiwgODddLCA4MTogWzIsIDg3XSwgODI6IFsyLCA4N10sIDgzOiBbMiwgODddLCA4NDogWzIsIDg3XSwgODU6IFsyLCA4N10gfSwgeyAzMzogWzIsIDg5XSB9LCB7IDIwOiA3NSwgNjM6IDExNiwgNjQ6IDc2LCA2NTogWzEsIDQ0XSwgNjc6IDExNSwgNjg6IFsyLCA5Nl0sIDY5OiAxMTcsIDcwOiA3NywgNzE6IDc4LCA3MjogWzEsIDc5XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDMzOiBbMSwgMTE4XSB9LCB7IDMyOiAxMTksIDMzOiBbMiwgNjJdLCA3NDogMTIwLCA3NTogWzEsIDEyMV0gfSwgeyAzMzogWzIsIDU5XSwgNjU6IFsyLCA1OV0sIDcyOiBbMiwgNTldLCA3NTogWzIsIDU5XSwgODA6IFsyLCA1OV0sIDgxOiBbMiwgNTldLCA4MjogWzIsIDU5XSwgODM6IFsyLCA1OV0sIDg0OiBbMiwgNTldLCA4NTogWzIsIDU5XSB9LCB7IDMzOiBbMiwgNjFdLCA3NTogWzIsIDYxXSB9LCB7IDMzOiBbMiwgNjhdLCAzNzogMTIyLCA3NDogMTIzLCA3NTogWzEsIDEyMV0gfSwgeyAzMzogWzIsIDY1XSwgNjU6IFsyLCA2NV0sIDcyOiBbMiwgNjVdLCA3NTogWzIsIDY1XSwgODA6IFsyLCA2NV0sIDgxOiBbMiwgNjVdLCA4MjogWzIsIDY1XSwgODM6IFsyLCA2NV0sIDg0OiBbMiwgNjVdLCA4NTogWzIsIDY1XSB9LCB7IDMzOiBbMiwgNjddLCA3NTogWzIsIDY3XSB9LCB7IDIzOiBbMSwgMTI0XSB9LCB7IDIzOiBbMiwgNTFdLCA2NTogWzIsIDUxXSwgNzI6IFsyLCA1MV0sIDgwOiBbMiwgNTFdLCA4MTogWzIsIDUxXSwgODI6IFsyLCA1MV0sIDgzOiBbMiwgNTFdLCA4NDogWzIsIDUxXSwgODU6IFsyLCA1MV0gfSwgeyAyMzogWzIsIDUzXSB9LCB7IDMzOiBbMSwgMTI1XSB9LCB7IDMzOiBbMiwgOTFdLCA2NTogWzIsIDkxXSwgNzI6IFsyLCA5MV0sIDgwOiBbMiwgOTFdLCA4MTogWzIsIDkxXSwgODI6IFsyLCA5MV0sIDgzOiBbMiwgOTFdLCA4NDogWzIsIDkxXSwgODU6IFsyLCA5MV0gfSwgeyAzMzogWzIsIDkzXSB9LCB7IDU6IFsyLCAyMl0sIDE0OiBbMiwgMjJdLCAxNTogWzIsIDIyXSwgMTk6IFsyLCAyMl0sIDI5OiBbMiwgMjJdLCAzNDogWzIsIDIyXSwgMzk6IFsyLCAyMl0sIDQ0OiBbMiwgMjJdLCA0NzogWzIsIDIyXSwgNDg6IFsyLCAyMl0sIDUxOiBbMiwgMjJdLCA1NTogWzIsIDIyXSwgNjA6IFsyLCAyMl0gfSwgeyAyMzogWzIsIDk5XSwgMzM6IFsyLCA5OV0sIDU0OiBbMiwgOTldLCA2ODogWzIsIDk5XSwgNzI6IFsyLCA5OV0sIDc1OiBbMiwgOTldIH0sIHsgNzM6IFsxLCAxMDldIH0sIHsgMjA6IDc1LCA2MzogMTI2LCA2NDogNzYsIDY1OiBbMSwgNDRdLCA3MjogWzEsIDM1XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDU6IFsyLCAyM10sIDE0OiBbMiwgMjNdLCAxNTogWzIsIDIzXSwgMTk6IFsyLCAyM10sIDI5OiBbMiwgMjNdLCAzNDogWzIsIDIzXSwgMzk6IFsyLCAyM10sIDQ0OiBbMiwgMjNdLCA0NzogWzIsIDIzXSwgNDg6IFsyLCAyM10sIDUxOiBbMiwgMjNdLCA1NTogWzIsIDIzXSwgNjA6IFsyLCAyM10gfSwgeyA0NzogWzIsIDE5XSB9LCB7IDQ3OiBbMiwgNzddIH0sIHsgMjA6IDc1LCAzMzogWzIsIDcyXSwgNDE6IDEyNywgNjM6IDEyOCwgNjQ6IDc2LCA2NTogWzEsIDQ0XSwgNjk6IDEyOSwgNzA6IDc3LCA3MTogNzgsIDcyOiBbMSwgNzldLCA3NTogWzIsIDcyXSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDU6IFsyLCAyNF0sIDE0OiBbMiwgMjRdLCAxNTogWzIsIDI0XSwgMTk6IFsyLCAyNF0sIDI5OiBbMiwgMjRdLCAzNDogWzIsIDI0XSwgMzk6IFsyLCAyNF0sIDQ0OiBbMiwgMjRdLCA0NzogWzIsIDI0XSwgNDg6IFsyLCAyNF0sIDUxOiBbMiwgMjRdLCA1NTogWzIsIDI0XSwgNjA6IFsyLCAyNF0gfSwgeyA2ODogWzEsIDEzMF0gfSwgeyA2NTogWzIsIDk1XSwgNjg6IFsyLCA5NV0sIDcyOiBbMiwgOTVdLCA4MDogWzIsIDk1XSwgODE6IFsyLCA5NV0sIDgyOiBbMiwgOTVdLCA4MzogWzIsIDk1XSwgODQ6IFsyLCA5NV0sIDg1OiBbMiwgOTVdIH0sIHsgNjg6IFsyLCA5N10gfSwgeyA1OiBbMiwgMjFdLCAxNDogWzIsIDIxXSwgMTU6IFsyLCAyMV0sIDE5OiBbMiwgMjFdLCAyOTogWzIsIDIxXSwgMzQ6IFsyLCAyMV0sIDM5OiBbMiwgMjFdLCA0NDogWzIsIDIxXSwgNDc6IFsyLCAyMV0sIDQ4OiBbMiwgMjFdLCA1MTogWzIsIDIxXSwgNTU6IFsyLCAyMV0sIDYwOiBbMiwgMjFdIH0sIHsgMzM6IFsxLCAxMzFdIH0sIHsgMzM6IFsyLCA2M10gfSwgeyA3MjogWzEsIDEzM10sIDc2OiAxMzIgfSwgeyAzMzogWzEsIDEzNF0gfSwgeyAzMzogWzIsIDY5XSB9LCB7IDE1OiBbMiwgMTJdIH0sIHsgMTQ6IFsyLCAyNl0sIDE1OiBbMiwgMjZdLCAxOTogWzIsIDI2XSwgMjk6IFsyLCAyNl0sIDM0OiBbMiwgMjZdLCA0NzogWzIsIDI2XSwgNDg6IFsyLCAyNl0sIDUxOiBbMiwgMjZdLCA1NTogWzIsIDI2XSwgNjA6IFsyLCAyNl0gfSwgeyAyMzogWzIsIDMxXSwgMzM6IFsyLCAzMV0sIDU0OiBbMiwgMzFdLCA2ODogWzIsIDMxXSwgNzI6IFsyLCAzMV0sIDc1OiBbMiwgMzFdIH0sIHsgMzM6IFsyLCA3NF0sIDQyOiAxMzUsIDc0OiAxMzYsIDc1OiBbMSwgMTIxXSB9LCB7IDMzOiBbMiwgNzFdLCA2NTogWzIsIDcxXSwgNzI6IFsyLCA3MV0sIDc1OiBbMiwgNzFdLCA4MDogWzIsIDcxXSwgODE6IFsyLCA3MV0sIDgyOiBbMiwgNzFdLCA4MzogWzIsIDcxXSwgODQ6IFsyLCA3MV0sIDg1OiBbMiwgNzFdIH0sIHsgMzM6IFsyLCA3M10sIDc1OiBbMiwgNzNdIH0sIHsgMjM6IFsyLCAyOV0sIDMzOiBbMiwgMjldLCA1NDogWzIsIDI5XSwgNjU6IFsyLCAyOV0sIDY4OiBbMiwgMjldLCA3MjogWzIsIDI5XSwgNzU6IFsyLCAyOV0sIDgwOiBbMiwgMjldLCA4MTogWzIsIDI5XSwgODI6IFsyLCAyOV0sIDgzOiBbMiwgMjldLCA4NDogWzIsIDI5XSwgODU6IFsyLCAyOV0gfSwgeyAxNDogWzIsIDE1XSwgMTU6IFsyLCAxNV0sIDE5OiBbMiwgMTVdLCAyOTogWzIsIDE1XSwgMzQ6IFsyLCAxNV0sIDM5OiBbMiwgMTVdLCA0NDogWzIsIDE1XSwgNDc6IFsyLCAxNV0sIDQ4OiBbMiwgMTVdLCA1MTogWzIsIDE1XSwgNTU6IFsyLCAxNV0sIDYwOiBbMiwgMTVdIH0sIHsgNzI6IFsxLCAxMzhdLCA3NzogWzEsIDEzN10gfSwgeyA3MjogWzIsIDEwMF0sIDc3OiBbMiwgMTAwXSB9LCB7IDE0OiBbMiwgMTZdLCAxNTogWzIsIDE2XSwgMTk6IFsyLCAxNl0sIDI5OiBbMiwgMTZdLCAzNDogWzIsIDE2XSwgNDQ6IFsyLCAxNl0sIDQ3OiBbMiwgMTZdLCA0ODogWzIsIDE2XSwgNTE6IFsyLCAxNl0sIDU1OiBbMiwgMTZdLCA2MDogWzIsIDE2XSB9LCB7IDMzOiBbMSwgMTM5XSB9LCB7IDMzOiBbMiwgNzVdIH0sIHsgMzM6IFsyLCAzMl0gfSwgeyA3MjogWzIsIDEwMV0sIDc3OiBbMiwgMTAxXSB9LCB7IDE0OiBbMiwgMTddLCAxNTogWzIsIDE3XSwgMTk6IFsyLCAxN10sIDI5OiBbMiwgMTddLCAzNDogWzIsIDE3XSwgMzk6IFsyLCAxN10sIDQ0OiBbMiwgMTddLCA0NzogWzIsIDE3XSwgNDg6IFsyLCAxN10sIDUxOiBbMiwgMTddLCA1NTogWzIsIDE3XSwgNjA6IFsyLCAxN10gfV0sXG5cdFx0ICAgICAgICBkZWZhdWx0QWN0aW9uczogeyA0OiBbMiwgMV0sIDU1OiBbMiwgNTVdLCA1NzogWzIsIDIwXSwgNjE6IFsyLCA1N10sIDc0OiBbMiwgODFdLCA4MzogWzIsIDg1XSwgODc6IFsyLCAxOF0sIDkxOiBbMiwgODldLCAxMDI6IFsyLCA1M10sIDEwNTogWzIsIDkzXSwgMTExOiBbMiwgMTldLCAxMTI6IFsyLCA3N10sIDExNzogWzIsIDk3XSwgMTIwOiBbMiwgNjNdLCAxMjM6IFsyLCA2OV0sIDEyNDogWzIsIDEyXSwgMTM2OiBbMiwgNzVdLCAxMzc6IFsyLCAzMl0gfSxcblx0XHQgICAgICAgIHBhcnNlRXJyb3I6IGZ1bmN0aW9uIHBhcnNlRXJyb3Ioc3RyLCBoYXNoKSB7XG5cdFx0ICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHN0cik7XG5cdFx0ICAgICAgICB9LFxuXHRcdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIHBhcnNlKGlucHV0KSB7XG5cdFx0ICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuXHRcdCAgICAgICAgICAgICAgICBzdGFjayA9IFswXSxcblx0XHQgICAgICAgICAgICAgICAgdnN0YWNrID0gW251bGxdLFxuXHRcdCAgICAgICAgICAgICAgICBsc3RhY2sgPSBbXSxcblx0XHQgICAgICAgICAgICAgICAgdGFibGUgPSB0aGlzLnRhYmxlLFxuXHRcdCAgICAgICAgICAgICAgICB5eXRleHQgPSBcIlwiLFxuXHRcdCAgICAgICAgICAgICAgICB5eWxpbmVubyA9IDAsXG5cdFx0ICAgICAgICAgICAgICAgIHl5bGVuZyA9IDAsXG5cdFx0ICAgICAgICAgICAgICAgIHJlY292ZXJpbmcgPSAwLFxuXHRcdCAgICAgICAgICAgICAgICBURVJST1IgPSAyLFxuXHRcdCAgICAgICAgICAgICAgICBFT0YgPSAxO1xuXHRcdCAgICAgICAgICAgIHRoaXMubGV4ZXIuc2V0SW5wdXQoaW5wdXQpO1xuXHRcdCAgICAgICAgICAgIHRoaXMubGV4ZXIueXkgPSB0aGlzLnl5O1xuXHRcdCAgICAgICAgICAgIHRoaXMueXkubGV4ZXIgPSB0aGlzLmxleGVyO1xuXHRcdCAgICAgICAgICAgIHRoaXMueXkucGFyc2VyID0gdGhpcztcblx0XHQgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMubGV4ZXIueXlsbG9jID09IFwidW5kZWZpbmVkXCIpIHRoaXMubGV4ZXIueXlsbG9jID0ge307XG5cdFx0ICAgICAgICAgICAgdmFyIHl5bG9jID0gdGhpcy5sZXhlci55eWxsb2M7XG5cdFx0ICAgICAgICAgICAgbHN0YWNrLnB1c2goeXlsb2MpO1xuXHRcdCAgICAgICAgICAgIHZhciByYW5nZXMgPSB0aGlzLmxleGVyLm9wdGlvbnMgJiYgdGhpcy5sZXhlci5vcHRpb25zLnJhbmdlcztcblx0XHQgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMueXkucGFyc2VFcnJvciA9PT0gXCJmdW5jdGlvblwiKSB0aGlzLnBhcnNlRXJyb3IgPSB0aGlzLnl5LnBhcnNlRXJyb3I7XG5cdFx0ICAgICAgICAgICAgZnVuY3Rpb24gcG9wU3RhY2sobikge1xuXHRcdCAgICAgICAgICAgICAgICBzdGFjay5sZW5ndGggPSBzdGFjay5sZW5ndGggLSAyICogbjtcblx0XHQgICAgICAgICAgICAgICAgdnN0YWNrLmxlbmd0aCA9IHZzdGFjay5sZW5ndGggLSBuO1xuXHRcdCAgICAgICAgICAgICAgICBsc3RhY2subGVuZ3RoID0gbHN0YWNrLmxlbmd0aCAtIG47XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIGZ1bmN0aW9uIGxleCgpIHtcblx0XHQgICAgICAgICAgICAgICAgdmFyIHRva2VuO1xuXHRcdCAgICAgICAgICAgICAgICB0b2tlbiA9IHNlbGYubGV4ZXIubGV4KCkgfHwgMTtcblx0XHQgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiAhPT0gXCJudW1iZXJcIikge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBzZWxmLnN5bWJvbHNfW3Rva2VuXSB8fCB0b2tlbjtcblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gdG9rZW47XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIHZhciBzeW1ib2wsXG5cdFx0ICAgICAgICAgICAgICAgIHByZUVycm9yU3ltYm9sLFxuXHRcdCAgICAgICAgICAgICAgICBzdGF0ZSxcblx0XHQgICAgICAgICAgICAgICAgYWN0aW9uLFxuXHRcdCAgICAgICAgICAgICAgICBhLFxuXHRcdCAgICAgICAgICAgICAgICByLFxuXHRcdCAgICAgICAgICAgICAgICB5eXZhbCA9IHt9LFxuXHRcdCAgICAgICAgICAgICAgICBwLFxuXHRcdCAgICAgICAgICAgICAgICBsZW4sXG5cdFx0ICAgICAgICAgICAgICAgIG5ld1N0YXRlLFxuXHRcdCAgICAgICAgICAgICAgICBleHBlY3RlZDtcblx0XHQgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuXHRcdCAgICAgICAgICAgICAgICBzdGF0ZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuXHRcdCAgICAgICAgICAgICAgICBpZiAodGhpcy5kZWZhdWx0QWN0aW9uc1tzdGF0ZV0pIHtcblx0XHQgICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IHRoaXMuZGVmYXVsdEFjdGlvbnNbc3RhdGVdO1xuXHRcdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgaWYgKHN5bWJvbCA9PT0gbnVsbCB8fCB0eXBlb2Ygc3ltYm9sID09IFwidW5kZWZpbmVkXCIpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2wgPSBsZXgoKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IHRhYmxlW3N0YXRlXSAmJiB0YWJsZVtzdGF0ZV1bc3ltYm9sXTtcblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhYWN0aW9uLmxlbmd0aCB8fCAhYWN0aW9uWzBdKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICB2YXIgZXJyU3RyID0gXCJcIjtcblx0XHQgICAgICAgICAgICAgICAgICAgIGlmICghcmVjb3ZlcmluZykge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkID0gW107XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChwIGluIHRhYmxlW3N0YXRlXSkgaWYgKHRoaXMudGVybWluYWxzX1twXSAmJiBwID4gMikge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZC5wdXNoKFwiJ1wiICsgdGhpcy50ZXJtaW5hbHNfW3BdICsgXCInXCIpO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sZXhlci5zaG93UG9zaXRpb24pIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyU3RyID0gXCJQYXJzZSBlcnJvciBvbiBsaW5lIFwiICsgKHl5bGluZW5vICsgMSkgKyBcIjpcXG5cIiArIHRoaXMubGV4ZXIuc2hvd1Bvc2l0aW9uKCkgKyBcIlxcbkV4cGVjdGluZyBcIiArIGV4cGVjdGVkLmpvaW4oXCIsIFwiKSArIFwiLCBnb3QgJ1wiICsgKHRoaXMudGVybWluYWxzX1tzeW1ib2xdIHx8IHN5bWJvbCkgKyBcIidcIjtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJTdHIgPSBcIlBhcnNlIGVycm9yIG9uIGxpbmUgXCIgKyAoeXlsaW5lbm8gKyAxKSArIFwiOiBVbmV4cGVjdGVkIFwiICsgKHN5bWJvbCA9PSAxID8gXCJlbmQgb2YgaW5wdXRcIiA6IFwiJ1wiICsgKHRoaXMudGVybWluYWxzX1tzeW1ib2xdIHx8IHN5bWJvbCkgKyBcIidcIik7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2VFcnJvcihlcnJTdHIsIHsgdGV4dDogdGhpcy5sZXhlci5tYXRjaCwgdG9rZW46IHRoaXMudGVybWluYWxzX1tzeW1ib2xdIHx8IHN5bWJvbCwgbGluZTogdGhpcy5sZXhlci55eWxpbmVubywgbG9jOiB5eWxvYywgZXhwZWN0ZWQ6IGV4cGVjdGVkIH0pO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgIGlmIChhY3Rpb25bMF0gaW5zdGFuY2VvZiBBcnJheSAmJiBhY3Rpb24ubGVuZ3RoID4gMSkge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGFyc2UgRXJyb3I6IG11bHRpcGxlIGFjdGlvbnMgcG9zc2libGUgYXQgc3RhdGU6IFwiICsgc3RhdGUgKyBcIiwgdG9rZW46IFwiICsgc3ltYm9sKTtcblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICBzd2l0Y2ggKGFjdGlvblswXSkge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goc3ltYm9sKTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICB2c3RhY2sucHVzaCh0aGlzLmxleGVyLnl5dGV4dCk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgbHN0YWNrLnB1c2godGhpcy5sZXhlci55eWxsb2MpO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goYWN0aW9uWzFdKTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2wgPSBudWxsO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcHJlRXJyb3JTeW1ib2wpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgeXlsZW5nID0gdGhpcy5sZXhlci55eWxlbmc7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHl5dGV4dCA9IHRoaXMubGV4ZXIueXl0ZXh0O1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB5eWxpbmVubyA9IHRoaXMubGV4ZXIueXlsaW5lbm87XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHl5bG9jID0gdGhpcy5sZXhlci55eWxsb2M7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWNvdmVyaW5nID4gMCkgcmVjb3ZlcmluZy0tO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5bWJvbCA9IHByZUVycm9yU3ltYm9sO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVFcnJvclN5bWJvbCA9IG51bGw7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIGxlbiA9IHRoaXMucHJvZHVjdGlvbnNfW2FjdGlvblsxXV1bMV07XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgeXl2YWwuJCA9IHZzdGFja1t2c3RhY2subGVuZ3RoIC0gbGVuXTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICB5eXZhbC5fJCA9IHsgZmlyc3RfbGluZTogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAobGVuIHx8IDEpXS5maXJzdF9saW5lLCBsYXN0X2xpbmU6IGxzdGFja1tsc3RhY2subGVuZ3RoIC0gMV0ubGFzdF9saW5lLCBmaXJzdF9jb2x1bW46IGxzdGFja1tsc3RhY2subGVuZ3RoIC0gKGxlbiB8fCAxKV0uZmlyc3RfY29sdW1uLCBsYXN0X2NvbHVtbjogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAxXS5sYXN0X2NvbHVtbiB9O1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZXMpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgeXl2YWwuXyQucmFuZ2UgPSBbbHN0YWNrW2xzdGFjay5sZW5ndGggLSAobGVuIHx8IDEpXS5yYW5nZVswXSwgbHN0YWNrW2xzdGFjay5sZW5ndGggLSAxXS5yYW5nZVsxXV07XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIHIgPSB0aGlzLnBlcmZvcm1BY3Rpb24uY2FsbCh5eXZhbCwgeXl0ZXh0LCB5eWxlbmcsIHl5bGluZW5vLCB0aGlzLnl5LCBhY3Rpb25bMV0sIHZzdGFjaywgbHN0YWNrKTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHIgIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHI7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZW4pIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sgPSBzdGFjay5zbGljZSgwLCAtMSAqIGxlbiAqIDIpO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2c3RhY2sgPSB2c3RhY2suc2xpY2UoMCwgLTEgKiBsZW4pO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsc3RhY2sgPSBsc3RhY2suc2xpY2UoMCwgLTEgKiBsZW4pO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHRoaXMucHJvZHVjdGlvbnNfW2FjdGlvblsxXV1bMF0pO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIHZzdGFjay5wdXNoKHl5dmFsLiQpO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIGxzdGFjay5wdXNoKHl5dmFsLl8kKTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGF0ZSA9IHRhYmxlW3N0YWNrW3N0YWNrLmxlbmd0aCAtIDJdXVtzdGFja1tzdGFjay5sZW5ndGggLSAxXV07XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChuZXdTdGF0ZSk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdFx0ICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIH07XG5cdFx0ICAgIC8qIEppc29uIGdlbmVyYXRlZCBsZXhlciAqL1xuXHRcdCAgICB2YXIgbGV4ZXIgPSAoZnVuY3Rpb24gKCkge1xuXHRcdCAgICAgICAgdmFyIGxleGVyID0geyBFT0Y6IDEsXG5cdFx0ICAgICAgICAgICAgcGFyc2VFcnJvcjogZnVuY3Rpb24gcGFyc2VFcnJvcihzdHIsIGhhc2gpIHtcblx0XHQgICAgICAgICAgICAgICAgaWYgKHRoaXMueXkucGFyc2VyKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnl5LnBhcnNlci5wYXJzZUVycm9yKHN0ciwgaGFzaCk7XG5cdFx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Ioc3RyKTtcblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIH0sXG5cdFx0ICAgICAgICAgICAgc2V0SW5wdXQ6IGZ1bmN0aW9uIHNldElucHV0KGlucHV0KSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG5cdFx0ICAgICAgICAgICAgICAgIHRoaXMuX21vcmUgPSB0aGlzLl9sZXNzID0gdGhpcy5kb25lID0gZmFsc2U7XG5cdFx0ICAgICAgICAgICAgICAgIHRoaXMueXlsaW5lbm8gPSB0aGlzLnl5bGVuZyA9IDA7XG5cdFx0ICAgICAgICAgICAgICAgIHRoaXMueXl0ZXh0ID0gdGhpcy5tYXRjaGVkID0gdGhpcy5tYXRjaCA9ICcnO1xuXHRcdCAgICAgICAgICAgICAgICB0aGlzLmNvbmRpdGlvblN0YWNrID0gWydJTklUSUFMJ107XG5cdFx0ICAgICAgICAgICAgICAgIHRoaXMueXlsbG9jID0geyBmaXJzdF9saW5lOiAxLCBmaXJzdF9jb2x1bW46IDAsIGxhc3RfbGluZTogMSwgbGFzdF9jb2x1bW46IDAgfTtcblx0XHQgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHRoaXMueXlsbG9jLnJhbmdlID0gWzAsIDBdO1xuXHRcdCAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCA9IDA7XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXHRcdCAgICAgICAgICAgIH0sXG5cdFx0ICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uIGlucHV0KCkge1xuXHRcdCAgICAgICAgICAgICAgICB2YXIgY2ggPSB0aGlzLl9pbnB1dFswXTtcblx0XHQgICAgICAgICAgICAgICAgdGhpcy55eXRleHQgKz0gY2g7XG5cdFx0ICAgICAgICAgICAgICAgIHRoaXMueXlsZW5nKys7XG5cdFx0ICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0Kys7XG5cdFx0ICAgICAgICAgICAgICAgIHRoaXMubWF0Y2ggKz0gY2g7XG5cdFx0ICAgICAgICAgICAgICAgIHRoaXMubWF0Y2hlZCArPSBjaDtcblx0XHQgICAgICAgICAgICAgICAgdmFyIGxpbmVzID0gY2gubWF0Y2goLyg/Olxcclxcbj98XFxuKS4qL2cpO1xuXHRcdCAgICAgICAgICAgICAgICBpZiAobGluZXMpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMueXlsaW5lbm8rKztcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMueXlsbG9jLmxhc3RfbGluZSsrO1xuXHRcdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy55eWxsb2MubGFzdF9jb2x1bW4rKztcblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykgdGhpcy55eWxsb2MucmFuZ2VbMV0rKztcblx0XG5cdFx0ICAgICAgICAgICAgICAgIHRoaXMuX2lucHV0ID0gdGhpcy5faW5wdXQuc2xpY2UoMSk7XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiBjaDtcblx0XHQgICAgICAgICAgICB9LFxuXHRcdCAgICAgICAgICAgIHVucHV0OiBmdW5jdGlvbiB1bnB1dChjaCkge1xuXHRcdCAgICAgICAgICAgICAgICB2YXIgbGVuID0gY2gubGVuZ3RoO1xuXHRcdCAgICAgICAgICAgICAgICB2YXIgbGluZXMgPSBjaC5zcGxpdCgvKD86XFxyXFxuP3xcXG4pL2cpO1xuXHRcblx0XHQgICAgICAgICAgICAgICAgdGhpcy5faW5wdXQgPSBjaCArIHRoaXMuX2lucHV0O1xuXHRcdCAgICAgICAgICAgICAgICB0aGlzLnl5dGV4dCA9IHRoaXMueXl0ZXh0LnN1YnN0cigwLCB0aGlzLnl5dGV4dC5sZW5ndGggLSBsZW4gLSAxKTtcblx0XHQgICAgICAgICAgICAgICAgLy90aGlzLnl5bGVuZyAtPSBsZW47XG5cdFx0ICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0IC09IGxlbjtcblx0XHQgICAgICAgICAgICAgICAgdmFyIG9sZExpbmVzID0gdGhpcy5tYXRjaC5zcGxpdCgvKD86XFxyXFxuP3xcXG4pL2cpO1xuXHRcdCAgICAgICAgICAgICAgICB0aGlzLm1hdGNoID0gdGhpcy5tYXRjaC5zdWJzdHIoMCwgdGhpcy5tYXRjaC5sZW5ndGggLSAxKTtcblx0XHQgICAgICAgICAgICAgICAgdGhpcy5tYXRjaGVkID0gdGhpcy5tYXRjaGVkLnN1YnN0cigwLCB0aGlzLm1hdGNoZWQubGVuZ3RoIC0gMSk7XG5cdFxuXHRcdCAgICAgICAgICAgICAgICBpZiAobGluZXMubGVuZ3RoIC0gMSkgdGhpcy55eWxpbmVubyAtPSBsaW5lcy5sZW5ndGggLSAxO1xuXHRcdCAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXMueXlsbG9jLnJhbmdlO1xuXHRcblx0XHQgICAgICAgICAgICAgICAgdGhpcy55eWxsb2MgPSB7IGZpcnN0X2xpbmU6IHRoaXMueXlsbG9jLmZpcnN0X2xpbmUsXG5cdFx0ICAgICAgICAgICAgICAgICAgICBsYXN0X2xpbmU6IHRoaXMueXlsaW5lbm8gKyAxLFxuXHRcdCAgICAgICAgICAgICAgICAgICAgZmlyc3RfY29sdW1uOiB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW4sXG5cdFx0ICAgICAgICAgICAgICAgICAgICBsYXN0X2NvbHVtbjogbGluZXMgPyAobGluZXMubGVuZ3RoID09PSBvbGRMaW5lcy5sZW5ndGggPyB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW4gOiAwKSArIG9sZExpbmVzW29sZExpbmVzLmxlbmd0aCAtIGxpbmVzLmxlbmd0aF0ubGVuZ3RoIC0gbGluZXNbMF0ubGVuZ3RoIDogdGhpcy55eWxsb2MuZmlyc3RfY29sdW1uIC0gbGVuXG5cdFx0ICAgICAgICAgICAgICAgIH07XG5cdFxuXHRcdCAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy55eWxsb2MucmFuZ2UgPSBbclswXSwgclswXSArIHRoaXMueXlsZW5nIC0gbGVuXTtcblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcblx0XHQgICAgICAgICAgICB9LFxuXHRcdCAgICAgICAgICAgIG1vcmU6IGZ1bmN0aW9uIG1vcmUoKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHRoaXMuX21vcmUgPSB0cnVlO1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcblx0XHQgICAgICAgICAgICB9LFxuXHRcdCAgICAgICAgICAgIGxlc3M6IGZ1bmN0aW9uIGxlc3Mobikge1xuXHRcdCAgICAgICAgICAgICAgICB0aGlzLnVucHV0KHRoaXMubWF0Y2guc2xpY2UobikpO1xuXHRcdCAgICAgICAgICAgIH0sXG5cdFx0ICAgICAgICAgICAgcGFzdElucHV0OiBmdW5jdGlvbiBwYXN0SW5wdXQoKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHZhciBwYXN0ID0gdGhpcy5tYXRjaGVkLnN1YnN0cigwLCB0aGlzLm1hdGNoZWQubGVuZ3RoIC0gdGhpcy5tYXRjaC5sZW5ndGgpO1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gKHBhc3QubGVuZ3RoID4gMjAgPyAnLi4uJyA6ICcnKSArIHBhc3Quc3Vic3RyKC0yMCkucmVwbGFjZSgvXFxuL2csIFwiXCIpO1xuXHRcdCAgICAgICAgICAgIH0sXG5cdFx0ICAgICAgICAgICAgdXBjb21pbmdJbnB1dDogZnVuY3Rpb24gdXBjb21pbmdJbnB1dCgpIHtcblx0XHQgICAgICAgICAgICAgICAgdmFyIG5leHQgPSB0aGlzLm1hdGNoO1xuXHRcdCAgICAgICAgICAgICAgICBpZiAobmV4dC5sZW5ndGggPCAyMCkge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgbmV4dCArPSB0aGlzLl9pbnB1dC5zdWJzdHIoMCwgMjAgLSBuZXh0Lmxlbmd0aCk7XG5cdFx0ICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIChuZXh0LnN1YnN0cigwLCAyMCkgKyAobmV4dC5sZW5ndGggPiAyMCA/ICcuLi4nIDogJycpKS5yZXBsYWNlKC9cXG4vZywgXCJcIik7XG5cdFx0ICAgICAgICAgICAgfSxcblx0XHQgICAgICAgICAgICBzaG93UG9zaXRpb246IGZ1bmN0aW9uIHNob3dQb3NpdGlvbigpIHtcblx0XHQgICAgICAgICAgICAgICAgdmFyIHByZSA9IHRoaXMucGFzdElucHV0KCk7XG5cdFx0ICAgICAgICAgICAgICAgIHZhciBjID0gbmV3IEFycmF5KHByZS5sZW5ndGggKyAxKS5qb2luKFwiLVwiKTtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIHByZSArIHRoaXMudXBjb21pbmdJbnB1dCgpICsgXCJcXG5cIiArIGMgKyBcIl5cIjtcblx0XHQgICAgICAgICAgICB9LFxuXHRcdCAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG5cdFx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLmRvbmUpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkVPRjtcblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2lucHV0KSB0aGlzLmRvbmUgPSB0cnVlO1xuXHRcblx0XHQgICAgICAgICAgICAgICAgdmFyIHRva2VuLCBtYXRjaCwgdGVtcE1hdGNoLCBpbmRleCwgY29sLCBsaW5lcztcblx0XHQgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9tb3JlKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnl5dGV4dCA9ICcnO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRjaCA9ICcnO1xuXHRcdCAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgIHZhciBydWxlcyA9IHRoaXMuX2N1cnJlbnRSdWxlcygpO1xuXHRcdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0ZW1wTWF0Y2ggPSB0aGlzLl9pbnB1dC5tYXRjaCh0aGlzLnJ1bGVzW3J1bGVzW2ldXSk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBpZiAodGVtcE1hdGNoICYmICghbWF0Y2ggfHwgdGVtcE1hdGNoWzBdLmxlbmd0aCA+IG1hdGNoWzBdLmxlbmd0aCkpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IHRlbXBNYXRjaDtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZmxleCkgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBsaW5lcyA9IG1hdGNoWzBdLm1hdGNoKC8oPzpcXHJcXG4/fFxcbikuKi9nKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGlmIChsaW5lcykgdGhpcy55eWxpbmVubyArPSBsaW5lcy5sZW5ndGg7XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnl5bGxvYyA9IHsgZmlyc3RfbGluZTogdGhpcy55eWxsb2MubGFzdF9saW5lLFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RfbGluZTogdGhpcy55eWxpbmVubyArIDEsXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RfY29sdW1uOiB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbixcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBsYXN0X2NvbHVtbjogbGluZXMgPyBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXS5sZW5ndGggLSBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXS5tYXRjaCgvXFxyP1xcbj8vKVswXS5sZW5ndGggOiB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbiArIG1hdGNoWzBdLmxlbmd0aCB9O1xuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy55eXRleHQgKz0gbWF0Y2hbMF07XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGNoICs9IG1hdGNoWzBdO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRjaGVzID0gbWF0Y2g7XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnl5bGVuZyA9IHRoaXMueXl0ZXh0Lmxlbmd0aDtcblx0XHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmFuZ2VzKSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55eWxsb2MucmFuZ2UgPSBbdGhpcy5vZmZzZXQsIHRoaXMub2Zmc2V0ICs9IHRoaXMueXlsZW5nXTtcblx0XHQgICAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vcmUgPSBmYWxzZTtcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lucHV0ID0gdGhpcy5faW5wdXQuc2xpY2UobWF0Y2hbMF0ubGVuZ3RoKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMubWF0Y2hlZCArPSBtYXRjaFswXTtcblx0XHQgICAgICAgICAgICAgICAgICAgIHRva2VuID0gdGhpcy5wZXJmb3JtQWN0aW9uLmNhbGwodGhpcywgdGhpcy55eSwgdGhpcywgcnVsZXNbaW5kZXhdLCB0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoIC0gMV0pO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9uZSAmJiB0aGlzLl9pbnB1dCkgdGhpcy5kb25lID0gZmFsc2U7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4pIHJldHVybiB0b2tlbjtlbHNlIHJldHVybjtcblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5wdXQgPT09IFwiXCIpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkVPRjtcblx0XHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0XHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRXJyb3IoJ0xleGljYWwgZXJyb3Igb24gbGluZSAnICsgKHRoaXMueXlsaW5lbm8gKyAxKSArICcuIFVucmVjb2duaXplZCB0ZXh0LlxcbicgKyB0aGlzLnNob3dQb3NpdGlvbigpLCB7IHRleHQ6IFwiXCIsIHRva2VuOiBudWxsLCBsaW5lOiB0aGlzLnl5bGluZW5vIH0pO1xuXHRcdCAgICAgICAgICAgICAgICB9XG5cdFx0ICAgICAgICAgICAgfSxcblx0XHQgICAgICAgICAgICBsZXg6IGZ1bmN0aW9uIGxleCgpIHtcblx0XHQgICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLm5leHQoKTtcblx0XHQgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByICE9PSAndW5kZWZpbmVkJykge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHI7XG5cdFx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sZXgoKTtcblx0XHQgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgICAgIH0sXG5cdFx0ICAgICAgICAgICAgYmVnaW46IGZ1bmN0aW9uIGJlZ2luKGNvbmRpdGlvbikge1xuXHRcdCAgICAgICAgICAgICAgICB0aGlzLmNvbmRpdGlvblN0YWNrLnB1c2goY29uZGl0aW9uKTtcblx0XHQgICAgICAgICAgICB9LFxuXHRcdCAgICAgICAgICAgIHBvcFN0YXRlOiBmdW5jdGlvbiBwb3BTdGF0ZSgpIHtcblx0XHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uU3RhY2sucG9wKCk7XG5cdFx0ICAgICAgICAgICAgfSxcblx0XHQgICAgICAgICAgICBfY3VycmVudFJ1bGVzOiBmdW5jdGlvbiBfY3VycmVudFJ1bGVzKCkge1xuXHRcdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25zW3RoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGggLSAxXV0ucnVsZXM7XG5cdFx0ICAgICAgICAgICAgfSxcblx0XHQgICAgICAgICAgICB0b3BTdGF0ZTogZnVuY3Rpb24gdG9wU3RhdGUoKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoIC0gMl07XG5cdFx0ICAgICAgICAgICAgfSxcblx0XHQgICAgICAgICAgICBwdXNoU3RhdGU6IGZ1bmN0aW9uIGJlZ2luKGNvbmRpdGlvbikge1xuXHRcdCAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKGNvbmRpdGlvbik7XG5cdFx0ICAgICAgICAgICAgfSB9O1xuXHRcdCAgICAgICAgbGV4ZXIub3B0aW9ucyA9IHt9O1xuXHRcdCAgICAgICAgbGV4ZXIucGVyZm9ybUFjdGlvbiA9IGZ1bmN0aW9uIGFub255bW91cyh5eSwgeXlfLCAkYXZvaWRpbmdfbmFtZV9jb2xsaXNpb25zLCBZWV9TVEFSVFxuXHRcdCAgICAgICAgLyoqLykge1xuXHRcblx0XHQgICAgICAgICAgICBmdW5jdGlvbiBzdHJpcChzdGFydCwgZW5kKSB7XG5cdFx0ICAgICAgICAgICAgICAgIHJldHVybiB5eV8ueXl0ZXh0ID0geXlfLnl5dGV4dC5zdWJzdHIoc3RhcnQsIHl5Xy55eWxlbmcgLSBlbmQpO1xuXHRcdCAgICAgICAgICAgIH1cblx0XG5cdFx0ICAgICAgICAgICAgdmFyIFlZU1RBVEUgPSBZWV9TVEFSVDtcblx0XHQgICAgICAgICAgICBzd2l0Y2ggKCRhdm9pZGluZ19uYW1lX2NvbGxpc2lvbnMpIHtcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAwOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgaWYgKHl5Xy55eXRleHQuc2xpY2UoLTIpID09PSBcIlxcXFxcXFxcXCIpIHtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICBzdHJpcCgwLCAxKTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKFwibXVcIik7XG5cdFx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHl5Xy55eXRleHQuc2xpY2UoLTEpID09PSBcIlxcXFxcIikge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwKDAsIDEpO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmVnaW4oXCJlbXVcIik7XG5cdFx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmVnaW4oXCJtdVwiKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIH1cblx0XHQgICAgICAgICAgICAgICAgICAgIGlmICh5eV8ueXl0ZXh0KSByZXR1cm4gMTU7XG5cdFxuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgMTpcblx0XHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAxNTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDI6XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTU7XG5cdFxuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgMzpcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMuYmVnaW4oJ3JhdycpO3JldHVybiAxNTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDQ6XG5cdFx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAvLyBTaG91bGQgYmUgdXNpbmcgYHRoaXMudG9wU3RhdGUoKWAgYmVsb3csIGJ1dCBpdCBjdXJyZW50bHlcblx0XHQgICAgICAgICAgICAgICAgICAgIC8vIHJldHVybnMgdGhlIHNlY29uZCB0b3AgaW5zdGVhZCBvZiB0aGUgZmlyc3QgdG9wLiBPcGVuZWQgYW5cblx0XHQgICAgICAgICAgICAgICAgICAgIC8vIGlzc3VlIGFib3V0IGl0IGF0IGh0dHBzOi8vZ2l0aHViLmNvbS96YWFjaC9qaXNvbi9pc3N1ZXMvMjkxXG5cdFx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aCAtIDFdID09PSAncmF3Jykge1xuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxNTtcblx0XHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgeXlfLnl5dGV4dCA9IHl5Xy55eXRleHQuc3Vic3RyKDUsIHl5Xy55eWxlbmcgLSA5KTtcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0VORF9SQVdfQkxPQ0snO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgfVxuXHRcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDU6XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTU7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSA2OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE0O1xuXHRcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDc6XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gNjU7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSA4OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDY4O1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgOTpcblx0XHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAxOTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDEwOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWdpbigncmF3Jyk7XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gMjM7XG5cdFxuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgMTE6XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gNTU7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAxMjpcblx0XHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA2MDtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDEzOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDI5O1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgMTQ6XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gNDc7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAxNTpcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtyZXR1cm4gNDQ7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAxNjpcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtyZXR1cm4gNDQ7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAxNzpcblx0XHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAzNDtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDE4OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDM5O1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgMTk6XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gNTE7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAyMDpcblx0XHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA0ODtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDIxOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy51bnB1dCh5eV8ueXl0ZXh0KTtcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMuYmVnaW4oJ2NvbScpO1xuXHRcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDIyOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE0O1xuXHRcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDIzOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDQ4O1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgMjQ6XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gNzM7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAyNTpcblx0XHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA3Mjtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDI2OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDcyO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgMjc6XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gODc7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAyODpcblx0XHQgICAgICAgICAgICAgICAgICAgIC8vIGlnbm9yZSB3aGl0ZXNwYWNlXG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAyOTpcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtyZXR1cm4gNTQ7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAzMDpcblx0XHQgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtyZXR1cm4gMzM7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAzMTpcblx0XHQgICAgICAgICAgICAgICAgICAgIHl5Xy55eXRleHQgPSBzdHJpcCgxLCAyKS5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJyk7cmV0dXJuIDgwO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgMzI6XG5cdFx0ICAgICAgICAgICAgICAgICAgICB5eV8ueXl0ZXh0ID0gc3RyaXAoMSwgMikucmVwbGFjZSgvXFxcXCcvZywgXCInXCIpO3JldHVybiA4MDtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDMzOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDg1O1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgMzQ6XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gODI7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAzNTpcblx0XHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA4Mjtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDM2OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDgzO1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgMzc6XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gODQ7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAzODpcblx0XHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA4MTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDM5OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDc1O1xuXHRcdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgNDA6XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gNzc7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSA0MTpcblx0XHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA3Mjtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDQyOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgeXlfLnl5dGV4dCA9IHl5Xy55eXRleHQucmVwbGFjZSgvXFxcXChbXFxcXFxcXV0pL2csICckMScpO3JldHVybiA3Mjtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDQzOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdJTlZBTElEJztcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlIDQ0OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDU7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICB9O1xuXHRcdCAgICAgICAgbGV4ZXIucnVsZXMgPSBbL14oPzpbXlxceDAwXSo/KD89KFxce1xceykpKS8sIC9eKD86W15cXHgwMF0rKS8sIC9eKD86W15cXHgwMF17Mix9Pyg/PShcXHtcXHt8XFxcXFxce1xce3xcXFxcXFxcXFxce1xce3wkKSkpLywgL14oPzpcXHtcXHtcXHtcXHsoPz1bXlxcL10pKS8sIC9eKD86XFx7XFx7XFx7XFx7XFwvW15cXHMhXCIjJS0sXFwuXFwvOy0+QFxcWy1cXF5gXFx7LX5dKyg/PVs9fVxcc1xcLy5dKVxcfVxcfVxcfVxcfSkvLCAvXig/OlteXFx4MDBdKj8oPz0oXFx7XFx7XFx7XFx7KSkpLywgL14oPzpbXFxzXFxTXSo/LS0ofik/XFx9XFx9KS8sIC9eKD86XFwoKS8sIC9eKD86XFwpKS8sIC9eKD86XFx7XFx7XFx7XFx7KS8sIC9eKD86XFx9XFx9XFx9XFx9KS8sIC9eKD86XFx7XFx7KH4pPz4pLywgL14oPzpcXHtcXHsofik/Iz4pLywgL14oPzpcXHtcXHsofik/I1xcKj8pLywgL14oPzpcXHtcXHsofik/XFwvKS8sIC9eKD86XFx7XFx7KH4pP1xcXlxccyoofik/XFx9XFx9KS8sIC9eKD86XFx7XFx7KH4pP1xccyplbHNlXFxzKih+KT9cXH1cXH0pLywgL14oPzpcXHtcXHsofik/XFxeKS8sIC9eKD86XFx7XFx7KH4pP1xccyplbHNlXFxiKS8sIC9eKD86XFx7XFx7KH4pP1xceykvLCAvXig/Olxce1xceyh+KT8mKS8sIC9eKD86XFx7XFx7KH4pPyEtLSkvLCAvXig/Olxce1xceyh+KT8hW1xcc1xcU10qP1xcfVxcfSkvLCAvXig/Olxce1xceyh+KT9cXCo/KS8sIC9eKD86PSkvLCAvXig/OlxcLlxcLikvLCAvXig/OlxcLig/PShbPX59XFxzXFwvLil8XSkpKS8sIC9eKD86W1xcLy5dKS8sIC9eKD86XFxzKykvLCAvXig/OlxcfSh+KT9cXH1cXH0pLywgL14oPzoofik/XFx9XFx9KS8sIC9eKD86XCIoXFxcXFtcIl18W15cIl0pKlwiKS8sIC9eKD86JyhcXFxcWyddfFteJ10pKicpLywgL14oPzpAKS8sIC9eKD86dHJ1ZSg/PShbfn1cXHMpXSkpKS8sIC9eKD86ZmFsc2UoPz0oW359XFxzKV0pKSkvLCAvXig/OnVuZGVmaW5lZCg/PShbfn1cXHMpXSkpKS8sIC9eKD86bnVsbCg/PShbfn1cXHMpXSkpKS8sIC9eKD86LT9bMC05XSsoPzpcXC5bMC05XSspPyg/PShbfn1cXHMpXSkpKS8sIC9eKD86YXNcXHMrXFx8KS8sIC9eKD86XFx8KS8sIC9eKD86KFteXFxzIVwiIyUtLFxcLlxcLzstPkBcXFstXFxeYFxcey1+XSsoPz0oWz1+fVxcc1xcLy4pfF0pKSkpLywgL14oPzpcXFsoXFxcXFxcXXxbXlxcXV0pKlxcXSkvLCAvXig/Oi4pLywgL14oPzokKS9dO1xuXHRcdCAgICAgICAgbGV4ZXIuY29uZGl0aW9ucyA9IHsgXCJtdVwiOiB7IFwicnVsZXNcIjogWzcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxNywgMTgsIDE5LCAyMCwgMjEsIDIyLCAyMywgMjQsIDI1LCAyNiwgMjcsIDI4LCAyOSwgMzAsIDMxLCAzMiwgMzMsIDM0LCAzNSwgMzYsIDM3LCAzOCwgMzksIDQwLCA0MSwgNDIsIDQzLCA0NF0sIFwiaW5jbHVzaXZlXCI6IGZhbHNlIH0sIFwiZW11XCI6IHsgXCJydWxlc1wiOiBbMl0sIFwiaW5jbHVzaXZlXCI6IGZhbHNlIH0sIFwiY29tXCI6IHsgXCJydWxlc1wiOiBbNl0sIFwiaW5jbHVzaXZlXCI6IGZhbHNlIH0sIFwicmF3XCI6IHsgXCJydWxlc1wiOiBbMywgNCwgNV0sIFwiaW5jbHVzaXZlXCI6IGZhbHNlIH0sIFwiSU5JVElBTFwiOiB7IFwicnVsZXNcIjogWzAsIDEsIDQ0XSwgXCJpbmNsdXNpdmVcIjogdHJ1ZSB9IH07XG5cdFx0ICAgICAgICByZXR1cm4gbGV4ZXI7XG5cdFx0ICAgIH0pKCk7XG5cdFx0ICAgIHBhcnNlci5sZXhlciA9IGxleGVyO1xuXHRcdCAgICBmdW5jdGlvbiBQYXJzZXIoKSB7XG5cdFx0ICAgICAgICB0aGlzLnl5ID0ge307XG5cdFx0ICAgIH1QYXJzZXIucHJvdG90eXBlID0gcGFyc2VyO3BhcnNlci5QYXJzZXIgPSBQYXJzZXI7XG5cdFx0ICAgIHJldHVybiBuZXcgUGFyc2VyKCk7XG5cdFx0fSkoKTtleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHRcdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGhhbmRsZWJhcnM7XG5cdFxuXHQvKioqLyB9LFxuXHQvKiAyNCAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblx0XG5cdFx0J3VzZSBzdHJpY3QnO1xuXHRcblx0XHR2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSlbJ2RlZmF1bHQnXTtcblx0XG5cdFx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0XG5cdFx0dmFyIF92aXNpdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7XG5cdFxuXHRcdHZhciBfdmlzaXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92aXNpdG9yKTtcblx0XG5cdFx0ZnVuY3Rpb24gV2hpdGVzcGFjZUNvbnRyb2woKSB7XG5cdFx0ICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXHRcblx0XHQgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0fVxuXHRcdFdoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZSA9IG5ldyBfdmlzaXRvcjJbJ2RlZmF1bHQnXSgpO1xuXHRcblx0XHRXaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuUHJvZ3JhbSA9IGZ1bmN0aW9uIChwcm9ncmFtKSB7XG5cdFx0ICB2YXIgZG9TdGFuZGFsb25lID0gIXRoaXMub3B0aW9ucy5pZ25vcmVTdGFuZGFsb25lO1xuXHRcblx0XHQgIHZhciBpc1Jvb3QgPSAhdGhpcy5pc1Jvb3RTZWVuO1xuXHRcdCAgdGhpcy5pc1Jvb3RTZWVuID0gdHJ1ZTtcblx0XG5cdFx0ICB2YXIgYm9keSA9IHByb2dyYW0uYm9keTtcblx0XHQgIGZvciAodmFyIGkgPSAwLCBsID0gYm9keS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHQgICAgdmFyIGN1cnJlbnQgPSBib2R5W2ldLFxuXHRcdCAgICAgICAgc3RyaXAgPSB0aGlzLmFjY2VwdChjdXJyZW50KTtcblx0XG5cdFx0ICAgIGlmICghc3RyaXApIHtcblx0XHQgICAgICBjb250aW51ZTtcblx0XHQgICAgfVxuXHRcblx0XHQgICAgdmFyIF9pc1ByZXZXaGl0ZXNwYWNlID0gaXNQcmV2V2hpdGVzcGFjZShib2R5LCBpLCBpc1Jvb3QpLFxuXHRcdCAgICAgICAgX2lzTmV4dFdoaXRlc3BhY2UgPSBpc05leHRXaGl0ZXNwYWNlKGJvZHksIGksIGlzUm9vdCksXG5cdFx0ICAgICAgICBvcGVuU3RhbmRhbG9uZSA9IHN0cmlwLm9wZW5TdGFuZGFsb25lICYmIF9pc1ByZXZXaGl0ZXNwYWNlLFxuXHRcdCAgICAgICAgY2xvc2VTdGFuZGFsb25lID0gc3RyaXAuY2xvc2VTdGFuZGFsb25lICYmIF9pc05leHRXaGl0ZXNwYWNlLFxuXHRcdCAgICAgICAgaW5saW5lU3RhbmRhbG9uZSA9IHN0cmlwLmlubGluZVN0YW5kYWxvbmUgJiYgX2lzUHJldldoaXRlc3BhY2UgJiYgX2lzTmV4dFdoaXRlc3BhY2U7XG5cdFxuXHRcdCAgICBpZiAoc3RyaXAuY2xvc2UpIHtcblx0XHQgICAgICBvbWl0UmlnaHQoYm9keSwgaSwgdHJ1ZSk7XG5cdFx0ICAgIH1cblx0XHQgICAgaWYgKHN0cmlwLm9wZW4pIHtcblx0XHQgICAgICBvbWl0TGVmdChib2R5LCBpLCB0cnVlKTtcblx0XHQgICAgfVxuXHRcblx0XHQgICAgaWYgKGRvU3RhbmRhbG9uZSAmJiBpbmxpbmVTdGFuZGFsb25lKSB7XG5cdFx0ICAgICAgb21pdFJpZ2h0KGJvZHksIGkpO1xuXHRcblx0XHQgICAgICBpZiAob21pdExlZnQoYm9keSwgaSkpIHtcblx0XHQgICAgICAgIC8vIElmIHdlIGFyZSBvbiBhIHN0YW5kYWxvbmUgbm9kZSwgc2F2ZSB0aGUgaW5kZW50IGluZm8gZm9yIHBhcnRpYWxzXG5cdFx0ICAgICAgICBpZiAoY3VycmVudC50eXBlID09PSAnUGFydGlhbFN0YXRlbWVudCcpIHtcblx0XHQgICAgICAgICAgLy8gUHVsbCBvdXQgdGhlIHdoaXRlc3BhY2UgZnJvbSB0aGUgZmluYWwgbGluZVxuXHRcdCAgICAgICAgICBjdXJyZW50LmluZGVudCA9IC8oWyBcXHRdKyQpLy5leGVjKGJvZHlbaSAtIDFdLm9yaWdpbmFsKVsxXTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICB9XG5cdFx0ICAgIH1cblx0XHQgICAgaWYgKGRvU3RhbmRhbG9uZSAmJiBvcGVuU3RhbmRhbG9uZSkge1xuXHRcdCAgICAgIG9taXRSaWdodCgoY3VycmVudC5wcm9ncmFtIHx8IGN1cnJlbnQuaW52ZXJzZSkuYm9keSk7XG5cdFxuXHRcdCAgICAgIC8vIFN0cmlwIG91dCB0aGUgcHJldmlvdXMgY29udGVudCBub2RlIGlmIGl0J3Mgd2hpdGVzcGFjZSBvbmx5XG5cdFx0ICAgICAgb21pdExlZnQoYm9keSwgaSk7XG5cdFx0ICAgIH1cblx0XHQgICAgaWYgKGRvU3RhbmRhbG9uZSAmJiBjbG9zZVN0YW5kYWxvbmUpIHtcblx0XHQgICAgICAvLyBBbHdheXMgc3RyaXAgdGhlIG5leHQgbm9kZVxuXHRcdCAgICAgIG9taXRSaWdodChib2R5LCBpKTtcblx0XG5cdFx0ICAgICAgb21pdExlZnQoKGN1cnJlbnQuaW52ZXJzZSB8fCBjdXJyZW50LnByb2dyYW0pLmJvZHkpO1xuXHRcdCAgICB9XG5cdFx0ICB9XG5cdFxuXHRcdCAgcmV0dXJuIHByb2dyYW07XG5cdFx0fTtcblx0XG5cdFx0V2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLkJsb2NrU3RhdGVtZW50ID0gV2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLkRlY29yYXRvckJsb2NrID0gV2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLlBhcnRpYWxCbG9ja1N0YXRlbWVudCA9IGZ1bmN0aW9uIChibG9jaykge1xuXHRcdCAgdGhpcy5hY2NlcHQoYmxvY2sucHJvZ3JhbSk7XG5cdFx0ICB0aGlzLmFjY2VwdChibG9jay5pbnZlcnNlKTtcblx0XG5cdFx0ICAvLyBGaW5kIHRoZSBpbnZlcnNlIHByb2dyYW0gdGhhdCBpcyBpbnZvbGVkIHdpdGggd2hpdGVzcGFjZSBzdHJpcHBpbmcuXG5cdFx0ICB2YXIgcHJvZ3JhbSA9IGJsb2NrLnByb2dyYW0gfHwgYmxvY2suaW52ZXJzZSxcblx0XHQgICAgICBpbnZlcnNlID0gYmxvY2sucHJvZ3JhbSAmJiBibG9jay5pbnZlcnNlLFxuXHRcdCAgICAgIGZpcnN0SW52ZXJzZSA9IGludmVyc2UsXG5cdFx0ICAgICAgbGFzdEludmVyc2UgPSBpbnZlcnNlO1xuXHRcblx0XHQgIGlmIChpbnZlcnNlICYmIGludmVyc2UuY2hhaW5lZCkge1xuXHRcdCAgICBmaXJzdEludmVyc2UgPSBpbnZlcnNlLmJvZHlbMF0ucHJvZ3JhbTtcblx0XG5cdFx0ICAgIC8vIFdhbGsgdGhlIGludmVyc2UgY2hhaW4gdG8gZmluZCB0aGUgbGFzdCBpbnZlcnNlIHRoYXQgaXMgYWN0dWFsbHkgaW4gdGhlIGNoYWluLlxuXHRcdCAgICB3aGlsZSAobGFzdEludmVyc2UuY2hhaW5lZCkge1xuXHRcdCAgICAgIGxhc3RJbnZlcnNlID0gbGFzdEludmVyc2UuYm9keVtsYXN0SW52ZXJzZS5ib2R5Lmxlbmd0aCAtIDFdLnByb2dyYW07XG5cdFx0ICAgIH1cblx0XHQgIH1cblx0XG5cdFx0ICB2YXIgc3RyaXAgPSB7XG5cdFx0ICAgIG9wZW46IGJsb2NrLm9wZW5TdHJpcC5vcGVuLFxuXHRcdCAgICBjbG9zZTogYmxvY2suY2xvc2VTdHJpcC5jbG9zZSxcblx0XG5cdFx0ICAgIC8vIERldGVybWluZSB0aGUgc3RhbmRhbG9uZSBjYW5kaWFjeS4gQmFzaWNhbGx5IGZsYWcgb3VyIGNvbnRlbnQgYXMgYmVpbmcgcG9zc2libHkgc3RhbmRhbG9uZVxuXHRcdCAgICAvLyBzbyBvdXIgcGFyZW50IGNhbiBkZXRlcm1pbmUgaWYgd2UgYWN0dWFsbHkgYXJlIHN0YW5kYWxvbmVcblx0XHQgICAgb3BlblN0YW5kYWxvbmU6IGlzTmV4dFdoaXRlc3BhY2UocHJvZ3JhbS5ib2R5KSxcblx0XHQgICAgY2xvc2VTdGFuZGFsb25lOiBpc1ByZXZXaGl0ZXNwYWNlKChmaXJzdEludmVyc2UgfHwgcHJvZ3JhbSkuYm9keSlcblx0XHQgIH07XG5cdFxuXHRcdCAgaWYgKGJsb2NrLm9wZW5TdHJpcC5jbG9zZSkge1xuXHRcdCAgICBvbWl0UmlnaHQocHJvZ3JhbS5ib2R5LCBudWxsLCB0cnVlKTtcblx0XHQgIH1cblx0XG5cdFx0ICBpZiAoaW52ZXJzZSkge1xuXHRcdCAgICB2YXIgaW52ZXJzZVN0cmlwID0gYmxvY2suaW52ZXJzZVN0cmlwO1xuXHRcblx0XHQgICAgaWYgKGludmVyc2VTdHJpcC5vcGVuKSB7XG5cdFx0ICAgICAgb21pdExlZnQocHJvZ3JhbS5ib2R5LCBudWxsLCB0cnVlKTtcblx0XHQgICAgfVxuXHRcblx0XHQgICAgaWYgKGludmVyc2VTdHJpcC5jbG9zZSkge1xuXHRcdCAgICAgIG9taXRSaWdodChmaXJzdEludmVyc2UuYm9keSwgbnVsbCwgdHJ1ZSk7XG5cdFx0ICAgIH1cblx0XHQgICAgaWYgKGJsb2NrLmNsb3NlU3RyaXAub3Blbikge1xuXHRcdCAgICAgIG9taXRMZWZ0KGxhc3RJbnZlcnNlLmJvZHksIG51bGwsIHRydWUpO1xuXHRcdCAgICB9XG5cdFxuXHRcdCAgICAvLyBGaW5kIHN0YW5kYWxvbmUgZWxzZSBzdGF0bWVudHNcblx0XHQgICAgaWYgKCF0aGlzLm9wdGlvbnMuaWdub3JlU3RhbmRhbG9uZSAmJiBpc1ByZXZXaGl0ZXNwYWNlKHByb2dyYW0uYm9keSkgJiYgaXNOZXh0V2hpdGVzcGFjZShmaXJzdEludmVyc2UuYm9keSkpIHtcblx0XHQgICAgICBvbWl0TGVmdChwcm9ncmFtLmJvZHkpO1xuXHRcdCAgICAgIG9taXRSaWdodChmaXJzdEludmVyc2UuYm9keSk7XG5cdFx0ICAgIH1cblx0XHQgIH0gZWxzZSBpZiAoYmxvY2suY2xvc2VTdHJpcC5vcGVuKSB7XG5cdFx0ICAgIG9taXRMZWZ0KHByb2dyYW0uYm9keSwgbnVsbCwgdHJ1ZSk7XG5cdFx0ICB9XG5cdFxuXHRcdCAgcmV0dXJuIHN0cmlwO1xuXHRcdH07XG5cdFxuXHRcdFdoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5EZWNvcmF0b3IgPSBXaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuTXVzdGFjaGVTdGF0ZW1lbnQgPSBmdW5jdGlvbiAobXVzdGFjaGUpIHtcblx0XHQgIHJldHVybiBtdXN0YWNoZS5zdHJpcDtcblx0XHR9O1xuXHRcblx0XHRXaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuUGFydGlhbFN0YXRlbWVudCA9IFdoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5Db21tZW50U3RhdGVtZW50ID0gZnVuY3Rpb24gKG5vZGUpIHtcblx0XHQgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cdFx0ICB2YXIgc3RyaXAgPSBub2RlLnN0cmlwIHx8IHt9O1xuXHRcdCAgcmV0dXJuIHtcblx0XHQgICAgaW5saW5lU3RhbmRhbG9uZTogdHJ1ZSxcblx0XHQgICAgb3Blbjogc3RyaXAub3Blbixcblx0XHQgICAgY2xvc2U6IHN0cmlwLmNsb3NlXG5cdFx0ICB9O1xuXHRcdH07XG5cdFxuXHRcdGZ1bmN0aW9uIGlzUHJldldoaXRlc3BhY2UoYm9keSwgaSwgaXNSb290KSB7XG5cdFx0ICBpZiAoaSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgIGkgPSBib2R5Lmxlbmd0aDtcblx0XHQgIH1cblx0XG5cdFx0ICAvLyBOb2RlcyB0aGF0IGVuZCB3aXRoIG5ld2xpbmVzIGFyZSBjb25zaWRlcmVkIHdoaXRlc3BhY2UgKGJ1dCBhcmUgc3BlY2lhbFxuXHRcdCAgLy8gY2FzZWQgZm9yIHN0cmlwIG9wZXJhdGlvbnMpXG5cdFx0ICB2YXIgcHJldiA9IGJvZHlbaSAtIDFdLFxuXHRcdCAgICAgIHNpYmxpbmcgPSBib2R5W2kgLSAyXTtcblx0XHQgIGlmICghcHJldikge1xuXHRcdCAgICByZXR1cm4gaXNSb290O1xuXHRcdCAgfVxuXHRcblx0XHQgIGlmIChwcmV2LnR5cGUgPT09ICdDb250ZW50U3RhdGVtZW50Jykge1xuXHRcdCAgICByZXR1cm4gKHNpYmxpbmcgfHwgIWlzUm9vdCA/IC9cXHI/XFxuXFxzKj8kLyA6IC8oXnxcXHI/XFxuKVxccyo/JC8pLnRlc3QocHJldi5vcmlnaW5hbCk7XG5cdFx0ICB9XG5cdFx0fVxuXHRcdGZ1bmN0aW9uIGlzTmV4dFdoaXRlc3BhY2UoYm9keSwgaSwgaXNSb290KSB7XG5cdFx0ICBpZiAoaSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgIGkgPSAtMTtcblx0XHQgIH1cblx0XG5cdFx0ICB2YXIgbmV4dCA9IGJvZHlbaSArIDFdLFxuXHRcdCAgICAgIHNpYmxpbmcgPSBib2R5W2kgKyAyXTtcblx0XHQgIGlmICghbmV4dCkge1xuXHRcdCAgICByZXR1cm4gaXNSb290O1xuXHRcdCAgfVxuXHRcblx0XHQgIGlmIChuZXh0LnR5cGUgPT09ICdDb250ZW50U3RhdGVtZW50Jykge1xuXHRcdCAgICByZXR1cm4gKHNpYmxpbmcgfHwgIWlzUm9vdCA/IC9eXFxzKj9cXHI/XFxuLyA6IC9eXFxzKj8oXFxyP1xcbnwkKS8pLnRlc3QobmV4dC5vcmlnaW5hbCk7XG5cdFx0ICB9XG5cdFx0fVxuXHRcblx0XHQvLyBNYXJrcyB0aGUgbm9kZSB0byB0aGUgcmlnaHQgb2YgdGhlIHBvc2l0aW9uIGFzIG9taXR0ZWQuXG5cdFx0Ly8gSS5lLiB7e2Zvb319JyAnIHdpbGwgbWFyayB0aGUgJyAnIG5vZGUgYXMgb21pdHRlZC5cblx0XHQvL1xuXHRcdC8vIElmIGkgaXMgdW5kZWZpbmVkLCB0aGVuIHRoZSBmaXJzdCBjaGlsZCB3aWxsIGJlIG1hcmtlZCBhcyBzdWNoLlxuXHRcdC8vXG5cdFx0Ly8gSWYgbXVsaXRwbGUgaXMgdHJ1dGh5IHRoZW4gYWxsIHdoaXRlc3BhY2Ugd2lsbCBiZSBzdHJpcHBlZCBvdXQgdW50aWwgbm9uLXdoaXRlc3BhY2Vcblx0XHQvLyBjb250ZW50IGlzIG1ldC5cblx0XHRmdW5jdGlvbiBvbWl0UmlnaHQoYm9keSwgaSwgbXVsdGlwbGUpIHtcblx0XHQgIHZhciBjdXJyZW50ID0gYm9keVtpID09IG51bGwgPyAwIDogaSArIDFdO1xuXHRcdCAgaWYgKCFjdXJyZW50IHx8IGN1cnJlbnQudHlwZSAhPT0gJ0NvbnRlbnRTdGF0ZW1lbnQnIHx8ICFtdWx0aXBsZSAmJiBjdXJyZW50LnJpZ2h0U3RyaXBwZWQpIHtcblx0XHQgICAgcmV0dXJuO1xuXHRcdCAgfVxuXHRcblx0XHQgIHZhciBvcmlnaW5hbCA9IGN1cnJlbnQudmFsdWU7XG5cdFx0ICBjdXJyZW50LnZhbHVlID0gY3VycmVudC52YWx1ZS5yZXBsYWNlKG11bHRpcGxlID8gL15cXHMrLyA6IC9eWyBcXHRdKlxccj9cXG4/LywgJycpO1xuXHRcdCAgY3VycmVudC5yaWdodFN0cmlwcGVkID0gY3VycmVudC52YWx1ZSAhPT0gb3JpZ2luYWw7XG5cdFx0fVxuXHRcblx0XHQvLyBNYXJrcyB0aGUgbm9kZSB0byB0aGUgbGVmdCBvZiB0aGUgcG9zaXRpb24gYXMgb21pdHRlZC5cblx0XHQvLyBJLmUuICcgJ3t7Zm9vfX0gd2lsbCBtYXJrIHRoZSAnICcgbm9kZSBhcyBvbWl0dGVkLlxuXHRcdC8vXG5cdFx0Ly8gSWYgaSBpcyB1bmRlZmluZWQgdGhlbiB0aGUgbGFzdCBjaGlsZCB3aWxsIGJlIG1hcmtlZCBhcyBzdWNoLlxuXHRcdC8vXG5cdFx0Ly8gSWYgbXVsaXRwbGUgaXMgdHJ1dGh5IHRoZW4gYWxsIHdoaXRlc3BhY2Ugd2lsbCBiZSBzdHJpcHBlZCBvdXQgdW50aWwgbm9uLXdoaXRlc3BhY2Vcblx0XHQvLyBjb250ZW50IGlzIG1ldC5cblx0XHRmdW5jdGlvbiBvbWl0TGVmdChib2R5LCBpLCBtdWx0aXBsZSkge1xuXHRcdCAgdmFyIGN1cnJlbnQgPSBib2R5W2kgPT0gbnVsbCA/IGJvZHkubGVuZ3RoIC0gMSA6IGkgLSAxXTtcblx0XHQgIGlmICghY3VycmVudCB8fCBjdXJyZW50LnR5cGUgIT09ICdDb250ZW50U3RhdGVtZW50JyB8fCAhbXVsdGlwbGUgJiYgY3VycmVudC5sZWZ0U3RyaXBwZWQpIHtcblx0XHQgICAgcmV0dXJuO1xuXHRcdCAgfVxuXHRcblx0XHQgIC8vIFdlIG9taXQgdGhlIGxhc3Qgbm9kZSBpZiBpdCdzIHdoaXRlc3BhY2Ugb25seSBhbmQgbm90IHByZWNlZWRlZCBieSBhIG5vbi1jb250ZW50IG5vZGUuXG5cdFx0ICB2YXIgb3JpZ2luYWwgPSBjdXJyZW50LnZhbHVlO1xuXHRcdCAgY3VycmVudC52YWx1ZSA9IGN1cnJlbnQudmFsdWUucmVwbGFjZShtdWx0aXBsZSA/IC9cXHMrJC8gOiAvWyBcXHRdKyQvLCAnJyk7XG5cdFx0ICBjdXJyZW50LmxlZnRTdHJpcHBlZCA9IGN1cnJlbnQudmFsdWUgIT09IG9yaWdpbmFsO1xuXHRcdCAgcmV0dXJuIGN1cnJlbnQubGVmdFN0cmlwcGVkO1xuXHRcdH1cblx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gV2hpdGVzcGFjZUNvbnRyb2w7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cdFxuXHQvKioqLyB9LFxuXHQvKiAyNSAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblx0XG5cdFx0J3VzZSBzdHJpY3QnO1xuXHRcblx0XHR2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSlbJ2RlZmF1bHQnXTtcblx0XG5cdFx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0XG5cdFx0dmFyIF9leGNlcHRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXHRcblx0XHR2YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pO1xuXHRcblx0XHRmdW5jdGlvbiBWaXNpdG9yKCkge1xuXHRcdCAgdGhpcy5wYXJlbnRzID0gW107XG5cdFx0fVxuXHRcblx0XHRWaXNpdG9yLnByb3RvdHlwZSA9IHtcblx0XHQgIGNvbnN0cnVjdG9yOiBWaXNpdG9yLFxuXHRcdCAgbXV0YXRpbmc6IGZhbHNlLFxuXHRcblx0XHQgIC8vIFZpc2l0cyBhIGdpdmVuIHZhbHVlLiBJZiBtdXRhdGluZywgd2lsbCByZXBsYWNlIHRoZSB2YWx1ZSBpZiBuZWNlc3NhcnkuXG5cdFx0ICBhY2NlcHRLZXk6IGZ1bmN0aW9uIGFjY2VwdEtleShub2RlLCBuYW1lKSB7XG5cdFx0ICAgIHZhciB2YWx1ZSA9IHRoaXMuYWNjZXB0KG5vZGVbbmFtZV0pO1xuXHRcdCAgICBpZiAodGhpcy5tdXRhdGluZykge1xuXHRcdCAgICAgIC8vIEhhY2t5IHNhbml0eSBjaGVjazogVGhpcyBtYXkgaGF2ZSBhIGZldyBmYWxzZSBwb3NpdGl2ZXMgZm9yIHR5cGUgZm9yIHRoZSBoZWxwZXJcblx0XHQgICAgICAvLyBtZXRob2RzIGJ1dCB3aWxsIGdlbmVyYWxseSBkbyB0aGUgcmlnaHQgdGhpbmcgd2l0aG91dCBhIGxvdCBvZiBvdmVyaGVhZC5cblx0XHQgICAgICBpZiAodmFsdWUgJiYgIVZpc2l0b3IucHJvdG90eXBlW3ZhbHVlLnR5cGVdKSB7XG5cdFx0ICAgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVW5leHBlY3RlZCBub2RlIHR5cGUgXCInICsgdmFsdWUudHlwZSArICdcIiBmb3VuZCB3aGVuIGFjY2VwdGluZyAnICsgbmFtZSArICcgb24gJyArIG5vZGUudHlwZSk7XG5cdFx0ICAgICAgfVxuXHRcdCAgICAgIG5vZGVbbmFtZV0gPSB2YWx1ZTtcblx0XHQgICAgfVxuXHRcdCAgfSxcblx0XG5cdFx0ICAvLyBQZXJmb3JtcyBhbiBhY2NlcHQgb3BlcmF0aW9uIHdpdGggYWRkZWQgc2FuaXR5IGNoZWNrIHRvIGVuc3VyZVxuXHRcdCAgLy8gcmVxdWlyZWQga2V5cyBhcmUgbm90IHJlbW92ZWQuXG5cdFx0ICBhY2NlcHRSZXF1aXJlZDogZnVuY3Rpb24gYWNjZXB0UmVxdWlyZWQobm9kZSwgbmFtZSkge1xuXHRcdCAgICB0aGlzLmFjY2VwdEtleShub2RlLCBuYW1lKTtcblx0XG5cdFx0ICAgIGlmICghbm9kZVtuYW1lXSkge1xuXHRcdCAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKG5vZGUudHlwZSArICcgcmVxdWlyZXMgJyArIG5hbWUpO1xuXHRcdCAgICB9XG5cdFx0ICB9LFxuXHRcblx0XHQgIC8vIFRyYXZlcnNlcyBhIGdpdmVuIGFycmF5LiBJZiBtdXRhdGluZywgZW1wdHkgcmVzcG5zZXMgd2lsbCBiZSByZW1vdmVkXG5cdFx0ICAvLyBmb3IgY2hpbGQgZWxlbWVudHMuXG5cdFx0ICBhY2NlcHRBcnJheTogZnVuY3Rpb24gYWNjZXB0QXJyYXkoYXJyYXkpIHtcblx0XHQgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHQgICAgICB0aGlzLmFjY2VwdEtleShhcnJheSwgaSk7XG5cdFxuXHRcdCAgICAgIGlmICghYXJyYXlbaV0pIHtcblx0XHQgICAgICAgIGFycmF5LnNwbGljZShpLCAxKTtcblx0XHQgICAgICAgIGktLTtcblx0XHQgICAgICAgIGwtLTtcblx0XHQgICAgICB9XG5cdFx0ICAgIH1cblx0XHQgIH0sXG5cdFxuXHRcdCAgYWNjZXB0OiBmdW5jdGlvbiBhY2NlcHQob2JqZWN0KSB7XG5cdFx0ICAgIGlmICghb2JqZWN0KSB7XG5cdFx0ICAgICAgcmV0dXJuO1xuXHRcdCAgICB9XG5cdFxuXHRcdCAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogU2FuaXR5IGNvZGUgKi9cblx0XHQgICAgaWYgKCF0aGlzW29iamVjdC50eXBlXSkge1xuXHRcdCAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdVbmtub3duIHR5cGU6ICcgKyBvYmplY3QudHlwZSwgb2JqZWN0KTtcblx0XHQgICAgfVxuXHRcblx0XHQgICAgaWYgKHRoaXMuY3VycmVudCkge1xuXHRcdCAgICAgIHRoaXMucGFyZW50cy51bnNoaWZ0KHRoaXMuY3VycmVudCk7XG5cdFx0ICAgIH1cblx0XHQgICAgdGhpcy5jdXJyZW50ID0gb2JqZWN0O1xuXHRcblx0XHQgICAgdmFyIHJldCA9IHRoaXNbb2JqZWN0LnR5cGVdKG9iamVjdCk7XG5cdFxuXHRcdCAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLnBhcmVudHMuc2hpZnQoKTtcblx0XG5cdFx0ICAgIGlmICghdGhpcy5tdXRhdGluZyB8fCByZXQpIHtcblx0XHQgICAgICByZXR1cm4gcmV0O1xuXHRcdCAgICB9IGVsc2UgaWYgKHJldCAhPT0gZmFsc2UpIHtcblx0XHQgICAgICByZXR1cm4gb2JqZWN0O1xuXHRcdCAgICB9XG5cdFx0ICB9LFxuXHRcblx0XHQgIFByb2dyYW06IGZ1bmN0aW9uIFByb2dyYW0ocHJvZ3JhbSkge1xuXHRcdCAgICB0aGlzLmFjY2VwdEFycmF5KHByb2dyYW0uYm9keSk7XG5cdFx0ICB9LFxuXHRcblx0XHQgIE11c3RhY2hlU3RhdGVtZW50OiB2aXNpdFN1YkV4cHJlc3Npb24sXG5cdFx0ICBEZWNvcmF0b3I6IHZpc2l0U3ViRXhwcmVzc2lvbixcblx0XG5cdFx0ICBCbG9ja1N0YXRlbWVudDogdmlzaXRCbG9jayxcblx0XHQgIERlY29yYXRvckJsb2NrOiB2aXNpdEJsb2NrLFxuXHRcblx0XHQgIFBhcnRpYWxTdGF0ZW1lbnQ6IHZpc2l0UGFydGlhbCxcblx0XHQgIFBhcnRpYWxCbG9ja1N0YXRlbWVudDogZnVuY3Rpb24gUGFydGlhbEJsb2NrU3RhdGVtZW50KHBhcnRpYWwpIHtcblx0XHQgICAgdmlzaXRQYXJ0aWFsLmNhbGwodGhpcywgcGFydGlhbCk7XG5cdFxuXHRcdCAgICB0aGlzLmFjY2VwdEtleShwYXJ0aWFsLCAncHJvZ3JhbScpO1xuXHRcdCAgfSxcblx0XG5cdFx0ICBDb250ZW50U3RhdGVtZW50OiBmdW5jdGlvbiBDb250ZW50U3RhdGVtZW50KCkgLyogY29udGVudCAqL3t9LFxuXHRcdCAgQ29tbWVudFN0YXRlbWVudDogZnVuY3Rpb24gQ29tbWVudFN0YXRlbWVudCgpIC8qIGNvbW1lbnQgKi97fSxcblx0XG5cdFx0ICBTdWJFeHByZXNzaW9uOiB2aXNpdFN1YkV4cHJlc3Npb24sXG5cdFxuXHRcdCAgUGF0aEV4cHJlc3Npb246IGZ1bmN0aW9uIFBhdGhFeHByZXNzaW9uKCkgLyogcGF0aCAqL3t9LFxuXHRcblx0XHQgIFN0cmluZ0xpdGVyYWw6IGZ1bmN0aW9uIFN0cmluZ0xpdGVyYWwoKSAvKiBzdHJpbmcgKi97fSxcblx0XHQgIE51bWJlckxpdGVyYWw6IGZ1bmN0aW9uIE51bWJlckxpdGVyYWwoKSAvKiBudW1iZXIgKi97fSxcblx0XHQgIEJvb2xlYW5MaXRlcmFsOiBmdW5jdGlvbiBCb29sZWFuTGl0ZXJhbCgpIC8qIGJvb2wgKi97fSxcblx0XHQgIFVuZGVmaW5lZExpdGVyYWw6IGZ1bmN0aW9uIFVuZGVmaW5lZExpdGVyYWwoKSAvKiBsaXRlcmFsICove30sXG5cdFx0ICBOdWxsTGl0ZXJhbDogZnVuY3Rpb24gTnVsbExpdGVyYWwoKSAvKiBsaXRlcmFsICove30sXG5cdFxuXHRcdCAgSGFzaDogZnVuY3Rpb24gSGFzaChoYXNoKSB7XG5cdFx0ICAgIHRoaXMuYWNjZXB0QXJyYXkoaGFzaC5wYWlycyk7XG5cdFx0ICB9LFxuXHRcdCAgSGFzaFBhaXI6IGZ1bmN0aW9uIEhhc2hQYWlyKHBhaXIpIHtcblx0XHQgICAgdGhpcy5hY2NlcHRSZXF1aXJlZChwYWlyLCAndmFsdWUnKTtcblx0XHQgIH1cblx0XHR9O1xuXHRcblx0XHRmdW5jdGlvbiB2aXNpdFN1YkV4cHJlc3Npb24obXVzdGFjaGUpIHtcblx0XHQgIHRoaXMuYWNjZXB0UmVxdWlyZWQobXVzdGFjaGUsICdwYXRoJyk7XG5cdFx0ICB0aGlzLmFjY2VwdEFycmF5KG11c3RhY2hlLnBhcmFtcyk7XG5cdFx0ICB0aGlzLmFjY2VwdEtleShtdXN0YWNoZSwgJ2hhc2gnKTtcblx0XHR9XG5cdFx0ZnVuY3Rpb24gdmlzaXRCbG9jayhibG9jaykge1xuXHRcdCAgdmlzaXRTdWJFeHByZXNzaW9uLmNhbGwodGhpcywgYmxvY2spO1xuXHRcblx0XHQgIHRoaXMuYWNjZXB0S2V5KGJsb2NrLCAncHJvZ3JhbScpO1xuXHRcdCAgdGhpcy5hY2NlcHRLZXkoYmxvY2ssICdpbnZlcnNlJyk7XG5cdFx0fVxuXHRcdGZ1bmN0aW9uIHZpc2l0UGFydGlhbChwYXJ0aWFsKSB7XG5cdFx0ICB0aGlzLmFjY2VwdFJlcXVpcmVkKHBhcnRpYWwsICduYW1lJyk7XG5cdFx0ICB0aGlzLmFjY2VwdEFycmF5KHBhcnRpYWwucGFyYW1zKTtcblx0XHQgIHRoaXMuYWNjZXB0S2V5KHBhcnRpYWwsICdoYXNoJyk7XG5cdFx0fVxuXHRcblx0XHRleHBvcnRzWydkZWZhdWx0J10gPSBWaXNpdG9yO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfSxcblx0LyogMjYgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XG5cdFx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpWydkZWZhdWx0J107XG5cdFxuXHRcdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cdFx0ZXhwb3J0cy5Tb3VyY2VMb2NhdGlvbiA9IFNvdXJjZUxvY2F0aW9uO1xuXHRcdGV4cG9ydHMuaWQgPSBpZDtcblx0XHRleHBvcnRzLnN0cmlwRmxhZ3MgPSBzdHJpcEZsYWdzO1xuXHRcdGV4cG9ydHMuc3RyaXBDb21tZW50ID0gc3RyaXBDb21tZW50O1xuXHRcdGV4cG9ydHMucHJlcGFyZVBhdGggPSBwcmVwYXJlUGF0aDtcblx0XHRleHBvcnRzLnByZXBhcmVNdXN0YWNoZSA9IHByZXBhcmVNdXN0YWNoZTtcblx0XHRleHBvcnRzLnByZXBhcmVSYXdCbG9jayA9IHByZXBhcmVSYXdCbG9jaztcblx0XHRleHBvcnRzLnByZXBhcmVCbG9jayA9IHByZXBhcmVCbG9jaztcblx0XHRleHBvcnRzLnByZXBhcmVQcm9ncmFtID0gcHJlcGFyZVByb2dyYW07XG5cdFx0ZXhwb3J0cy5wcmVwYXJlUGFydGlhbEJsb2NrID0gcHJlcGFyZVBhcnRpYWxCbG9jaztcblx0XG5cdFx0dmFyIF9leGNlcHRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXHRcblx0XHR2YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pO1xuXHRcblx0XHRmdW5jdGlvbiB2YWxpZGF0ZUNsb3NlKG9wZW4sIGNsb3NlKSB7XG5cdFx0ICBjbG9zZSA9IGNsb3NlLnBhdGggPyBjbG9zZS5wYXRoLm9yaWdpbmFsIDogY2xvc2U7XG5cdFxuXHRcdCAgaWYgKG9wZW4ucGF0aC5vcmlnaW5hbCAhPT0gY2xvc2UpIHtcblx0XHQgICAgdmFyIGVycm9yTm9kZSA9IHsgbG9jOiBvcGVuLnBhdGgubG9jIH07XG5cdFxuXHRcdCAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXShvcGVuLnBhdGgub3JpZ2luYWwgKyBcIiBkb2Vzbid0IG1hdGNoIFwiICsgY2xvc2UsIGVycm9yTm9kZSk7XG5cdFx0ICB9XG5cdFx0fVxuXHRcblx0XHRmdW5jdGlvbiBTb3VyY2VMb2NhdGlvbihzb3VyY2UsIGxvY0luZm8pIHtcblx0XHQgIHRoaXMuc291cmNlID0gc291cmNlO1xuXHRcdCAgdGhpcy5zdGFydCA9IHtcblx0XHQgICAgbGluZTogbG9jSW5mby5maXJzdF9saW5lLFxuXHRcdCAgICBjb2x1bW46IGxvY0luZm8uZmlyc3RfY29sdW1uXG5cdFx0ICB9O1xuXHRcdCAgdGhpcy5lbmQgPSB7XG5cdFx0ICAgIGxpbmU6IGxvY0luZm8ubGFzdF9saW5lLFxuXHRcdCAgICBjb2x1bW46IGxvY0luZm8ubGFzdF9jb2x1bW5cblx0XHQgIH07XG5cdFx0fVxuXHRcblx0XHRmdW5jdGlvbiBpZCh0b2tlbikge1xuXHRcdCAgaWYgKC9eXFxbLipcXF0kLy50ZXN0KHRva2VuKSkge1xuXHRcdCAgICByZXR1cm4gdG9rZW4uc3Vic3RyKDEsIHRva2VuLmxlbmd0aCAtIDIpO1xuXHRcdCAgfSBlbHNlIHtcblx0XHQgICAgcmV0dXJuIHRva2VuO1xuXHRcdCAgfVxuXHRcdH1cblx0XG5cdFx0ZnVuY3Rpb24gc3RyaXBGbGFncyhvcGVuLCBjbG9zZSkge1xuXHRcdCAgcmV0dXJuIHtcblx0XHQgICAgb3Blbjogb3Blbi5jaGFyQXQoMikgPT09ICd+Jyxcblx0XHQgICAgY2xvc2U6IGNsb3NlLmNoYXJBdChjbG9zZS5sZW5ndGggLSAzKSA9PT0gJ34nXG5cdFx0ICB9O1xuXHRcdH1cblx0XG5cdFx0ZnVuY3Rpb24gc3RyaXBDb21tZW50KGNvbW1lbnQpIHtcblx0XHQgIHJldHVybiBjb21tZW50LnJlcGxhY2UoL15cXHtcXHt+P1xcIS0/LT8vLCAnJykucmVwbGFjZSgvLT8tP34/XFx9XFx9JC8sICcnKTtcblx0XHR9XG5cdFxuXHRcdGZ1bmN0aW9uIHByZXBhcmVQYXRoKGRhdGEsIHBhcnRzLCBsb2MpIHtcblx0XHQgIGxvYyA9IHRoaXMubG9jSW5mbyhsb2MpO1xuXHRcblx0XHQgIHZhciBvcmlnaW5hbCA9IGRhdGEgPyAnQCcgOiAnJyxcblx0XHQgICAgICBkaWcgPSBbXSxcblx0XHQgICAgICBkZXB0aCA9IDAsXG5cdFx0ICAgICAgZGVwdGhTdHJpbmcgPSAnJztcblx0XG5cdFx0ICBmb3IgKHZhciBpID0gMCwgbCA9IHBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdCAgICB2YXIgcGFydCA9IHBhcnRzW2ldLnBhcnQsXG5cdFxuXHRcdCAgICAvLyBJZiB3ZSBoYXZlIFtdIHN5bnRheCB0aGVuIHdlIGRvIG5vdCB0cmVhdCBwYXRoIHJlZmVyZW5jZXMgYXMgb3BlcmF0b3JzLFxuXHRcdCAgICAvLyBpLmUuIGZvby5bdGhpc10gcmVzb2x2ZXMgdG8gYXBwcm94aW1hdGVseSBjb250ZXh0LmZvb1sndGhpcyddXG5cdFx0ICAgIGlzTGl0ZXJhbCA9IHBhcnRzW2ldLm9yaWdpbmFsICE9PSBwYXJ0O1xuXHRcdCAgICBvcmlnaW5hbCArPSAocGFydHNbaV0uc2VwYXJhdG9yIHx8ICcnKSArIHBhcnQ7XG5cdFxuXHRcdCAgICBpZiAoIWlzTGl0ZXJhbCAmJiAocGFydCA9PT0gJy4uJyB8fCBwYXJ0ID09PSAnLicgfHwgcGFydCA9PT0gJ3RoaXMnKSkge1xuXHRcdCAgICAgIGlmIChkaWcubGVuZ3RoID4gMCkge1xuXHRcdCAgICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ0ludmFsaWQgcGF0aDogJyArIG9yaWdpbmFsLCB7IGxvYzogbG9jIH0pO1xuXHRcdCAgICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuXHRcdCAgICAgICAgZGVwdGgrKztcblx0XHQgICAgICAgIGRlcHRoU3RyaW5nICs9ICcuLi8nO1xuXHRcdCAgICAgIH1cblx0XHQgICAgfSBlbHNlIHtcblx0XHQgICAgICBkaWcucHVzaChwYXJ0KTtcblx0XHQgICAgfVxuXHRcdCAgfVxuXHRcblx0XHQgIHJldHVybiB7XG5cdFx0ICAgIHR5cGU6ICdQYXRoRXhwcmVzc2lvbicsXG5cdFx0ICAgIGRhdGE6IGRhdGEsXG5cdFx0ICAgIGRlcHRoOiBkZXB0aCxcblx0XHQgICAgcGFydHM6IGRpZyxcblx0XHQgICAgb3JpZ2luYWw6IG9yaWdpbmFsLFxuXHRcdCAgICBsb2M6IGxvY1xuXHRcdCAgfTtcblx0XHR9XG5cdFxuXHRcdGZ1bmN0aW9uIHByZXBhcmVNdXN0YWNoZShwYXRoLCBwYXJhbXMsIGhhc2gsIG9wZW4sIHN0cmlwLCBsb2NJbmZvKSB7XG5cdFx0ICAvLyBNdXN0IHVzZSBjaGFyQXQgdG8gc3VwcG9ydCBJRSBwcmUtMTBcblx0XHQgIHZhciBlc2NhcGVGbGFnID0gb3Blbi5jaGFyQXQoMykgfHwgb3Blbi5jaGFyQXQoMiksXG5cdFx0ICAgICAgZXNjYXBlZCA9IGVzY2FwZUZsYWcgIT09ICd7JyAmJiBlc2NhcGVGbGFnICE9PSAnJic7XG5cdFxuXHRcdCAgdmFyIGRlY29yYXRvciA9IC9cXCovLnRlc3Qob3Blbik7XG5cdFx0ICByZXR1cm4ge1xuXHRcdCAgICB0eXBlOiBkZWNvcmF0b3IgPyAnRGVjb3JhdG9yJyA6ICdNdXN0YWNoZVN0YXRlbWVudCcsXG5cdFx0ICAgIHBhdGg6IHBhdGgsXG5cdFx0ICAgIHBhcmFtczogcGFyYW1zLFxuXHRcdCAgICBoYXNoOiBoYXNoLFxuXHRcdCAgICBlc2NhcGVkOiBlc2NhcGVkLFxuXHRcdCAgICBzdHJpcDogc3RyaXAsXG5cdFx0ICAgIGxvYzogdGhpcy5sb2NJbmZvKGxvY0luZm8pXG5cdFx0ICB9O1xuXHRcdH1cblx0XG5cdFx0ZnVuY3Rpb24gcHJlcGFyZVJhd0Jsb2NrKG9wZW5SYXdCbG9jaywgY29udGVudHMsIGNsb3NlLCBsb2NJbmZvKSB7XG5cdFx0ICB2YWxpZGF0ZUNsb3NlKG9wZW5SYXdCbG9jaywgY2xvc2UpO1xuXHRcblx0XHQgIGxvY0luZm8gPSB0aGlzLmxvY0luZm8obG9jSW5mbyk7XG5cdFx0ICB2YXIgcHJvZ3JhbSA9IHtcblx0XHQgICAgdHlwZTogJ1Byb2dyYW0nLFxuXHRcdCAgICBib2R5OiBjb250ZW50cyxcblx0XHQgICAgc3RyaXA6IHt9LFxuXHRcdCAgICBsb2M6IGxvY0luZm9cblx0XHQgIH07XG5cdFxuXHRcdCAgcmV0dXJuIHtcblx0XHQgICAgdHlwZTogJ0Jsb2NrU3RhdGVtZW50Jyxcblx0XHQgICAgcGF0aDogb3BlblJhd0Jsb2NrLnBhdGgsXG5cdFx0ICAgIHBhcmFtczogb3BlblJhd0Jsb2NrLnBhcmFtcyxcblx0XHQgICAgaGFzaDogb3BlblJhd0Jsb2NrLmhhc2gsXG5cdFx0ICAgIHByb2dyYW06IHByb2dyYW0sXG5cdFx0ICAgIG9wZW5TdHJpcDoge30sXG5cdFx0ICAgIGludmVyc2VTdHJpcDoge30sXG5cdFx0ICAgIGNsb3NlU3RyaXA6IHt9LFxuXHRcdCAgICBsb2M6IGxvY0luZm9cblx0XHQgIH07XG5cdFx0fVxuXHRcblx0XHRmdW5jdGlvbiBwcmVwYXJlQmxvY2sob3BlbkJsb2NrLCBwcm9ncmFtLCBpbnZlcnNlQW5kUHJvZ3JhbSwgY2xvc2UsIGludmVydGVkLCBsb2NJbmZvKSB7XG5cdFx0ICBpZiAoY2xvc2UgJiYgY2xvc2UucGF0aCkge1xuXHRcdCAgICB2YWxpZGF0ZUNsb3NlKG9wZW5CbG9jaywgY2xvc2UpO1xuXHRcdCAgfVxuXHRcblx0XHQgIHZhciBkZWNvcmF0b3IgPSAvXFwqLy50ZXN0KG9wZW5CbG9jay5vcGVuKTtcblx0XG5cdFx0ICBwcm9ncmFtLmJsb2NrUGFyYW1zID0gb3BlbkJsb2NrLmJsb2NrUGFyYW1zO1xuXHRcblx0XHQgIHZhciBpbnZlcnNlID0gdW5kZWZpbmVkLFxuXHRcdCAgICAgIGludmVyc2VTdHJpcCA9IHVuZGVmaW5lZDtcblx0XG5cdFx0ICBpZiAoaW52ZXJzZUFuZFByb2dyYW0pIHtcblx0XHQgICAgaWYgKGRlY29yYXRvcikge1xuXHRcdCAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdVbmV4cGVjdGVkIGludmVyc2UgYmxvY2sgb24gZGVjb3JhdG9yJywgaW52ZXJzZUFuZFByb2dyYW0pO1xuXHRcdCAgICB9XG5cdFxuXHRcdCAgICBpZiAoaW52ZXJzZUFuZFByb2dyYW0uY2hhaW4pIHtcblx0XHQgICAgICBpbnZlcnNlQW5kUHJvZ3JhbS5wcm9ncmFtLmJvZHlbMF0uY2xvc2VTdHJpcCA9IGNsb3NlLnN0cmlwO1xuXHRcdCAgICB9XG5cdFxuXHRcdCAgICBpbnZlcnNlU3RyaXAgPSBpbnZlcnNlQW5kUHJvZ3JhbS5zdHJpcDtcblx0XHQgICAgaW52ZXJzZSA9IGludmVyc2VBbmRQcm9ncmFtLnByb2dyYW07XG5cdFx0ICB9XG5cdFxuXHRcdCAgaWYgKGludmVydGVkKSB7XG5cdFx0ICAgIGludmVydGVkID0gaW52ZXJzZTtcblx0XHQgICAgaW52ZXJzZSA9IHByb2dyYW07XG5cdFx0ICAgIHByb2dyYW0gPSBpbnZlcnRlZDtcblx0XHQgIH1cblx0XG5cdFx0ICByZXR1cm4ge1xuXHRcdCAgICB0eXBlOiBkZWNvcmF0b3IgPyAnRGVjb3JhdG9yQmxvY2snIDogJ0Jsb2NrU3RhdGVtZW50Jyxcblx0XHQgICAgcGF0aDogb3BlbkJsb2NrLnBhdGgsXG5cdFx0ICAgIHBhcmFtczogb3BlbkJsb2NrLnBhcmFtcyxcblx0XHQgICAgaGFzaDogb3BlbkJsb2NrLmhhc2gsXG5cdFx0ICAgIHByb2dyYW06IHByb2dyYW0sXG5cdFx0ICAgIGludmVyc2U6IGludmVyc2UsXG5cdFx0ICAgIG9wZW5TdHJpcDogb3BlbkJsb2NrLnN0cmlwLFxuXHRcdCAgICBpbnZlcnNlU3RyaXA6IGludmVyc2VTdHJpcCxcblx0XHQgICAgY2xvc2VTdHJpcDogY2xvc2UgJiYgY2xvc2Uuc3RyaXAsXG5cdFx0ICAgIGxvYzogdGhpcy5sb2NJbmZvKGxvY0luZm8pXG5cdFx0ICB9O1xuXHRcdH1cblx0XG5cdFx0ZnVuY3Rpb24gcHJlcGFyZVByb2dyYW0oc3RhdGVtZW50cywgbG9jKSB7XG5cdFx0ICBpZiAoIWxvYyAmJiBzdGF0ZW1lbnRzLmxlbmd0aCkge1xuXHRcdCAgICB2YXIgZmlyc3RMb2MgPSBzdGF0ZW1lbnRzWzBdLmxvYyxcblx0XHQgICAgICAgIGxhc3RMb2MgPSBzdGF0ZW1lbnRzW3N0YXRlbWVudHMubGVuZ3RoIC0gMV0ubG9jO1xuXHRcblx0XHQgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cblx0XHQgICAgaWYgKGZpcnN0TG9jICYmIGxhc3RMb2MpIHtcblx0XHQgICAgICBsb2MgPSB7XG5cdFx0ICAgICAgICBzb3VyY2U6IGZpcnN0TG9jLnNvdXJjZSxcblx0XHQgICAgICAgIHN0YXJ0OiB7XG5cdFx0ICAgICAgICAgIGxpbmU6IGZpcnN0TG9jLnN0YXJ0LmxpbmUsXG5cdFx0ICAgICAgICAgIGNvbHVtbjogZmlyc3RMb2Muc3RhcnQuY29sdW1uXG5cdFx0ICAgICAgICB9LFxuXHRcdCAgICAgICAgZW5kOiB7XG5cdFx0ICAgICAgICAgIGxpbmU6IGxhc3RMb2MuZW5kLmxpbmUsXG5cdFx0ICAgICAgICAgIGNvbHVtbjogbGFzdExvYy5lbmQuY29sdW1uXG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgfTtcblx0XHQgICAgfVxuXHRcdCAgfVxuXHRcblx0XHQgIHJldHVybiB7XG5cdFx0ICAgIHR5cGU6ICdQcm9ncmFtJyxcblx0XHQgICAgYm9keTogc3RhdGVtZW50cyxcblx0XHQgICAgc3RyaXA6IHt9LFxuXHRcdCAgICBsb2M6IGxvY1xuXHRcdCAgfTtcblx0XHR9XG5cdFxuXHRcdGZ1bmN0aW9uIHByZXBhcmVQYXJ0aWFsQmxvY2sob3BlbiwgcHJvZ3JhbSwgY2xvc2UsIGxvY0luZm8pIHtcblx0XHQgIHZhbGlkYXRlQ2xvc2Uob3BlbiwgY2xvc2UpO1xuXHRcblx0XHQgIHJldHVybiB7XG5cdFx0ICAgIHR5cGU6ICdQYXJ0aWFsQmxvY2tTdGF0ZW1lbnQnLFxuXHRcdCAgICBuYW1lOiBvcGVuLnBhdGgsXG5cdFx0ICAgIHBhcmFtczogb3Blbi5wYXJhbXMsXG5cdFx0ICAgIGhhc2g6IG9wZW4uaGFzaCxcblx0XHQgICAgcHJvZ3JhbTogcHJvZ3JhbSxcblx0XHQgICAgb3BlblN0cmlwOiBvcGVuLnN0cmlwLFxuXHRcdCAgICBjbG9zZVN0cmlwOiBjbG9zZSAmJiBjbG9zZS5zdHJpcCxcblx0XHQgICAgbG9jOiB0aGlzLmxvY0luZm8obG9jSW5mbylcblx0XHQgIH07XG5cdFx0fVxuXHRcblx0LyoqKi8gfSxcblx0LyogMjcgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cdFxuXHRcdC8qIGVzbGludC1kaXNhYmxlIG5ldy1jYXAgKi9cblx0XG5cdFx0J3VzZSBzdHJpY3QnO1xuXHRcblx0XHR2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSlbJ2RlZmF1bHQnXTtcblx0XG5cdFx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0XHRleHBvcnRzLkNvbXBpbGVyID0gQ29tcGlsZXI7XG5cdFx0ZXhwb3J0cy5wcmVjb21waWxlID0gcHJlY29tcGlsZTtcblx0XHRleHBvcnRzLmNvbXBpbGUgPSBjb21waWxlO1xuXHRcblx0XHR2YXIgX2V4Y2VwdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cdFxuXHRcdHZhciBfZXhjZXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4Y2VwdGlvbik7XG5cdFxuXHRcdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHRcblx0XHR2YXIgX2FzdCA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXHRcblx0XHR2YXIgX2FzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3QpO1xuXHRcblx0XHR2YXIgc2xpY2UgPSBbXS5zbGljZTtcblx0XG5cdFx0ZnVuY3Rpb24gQ29tcGlsZXIoKSB7fVxuXHRcblx0XHQvLyB0aGUgZm91bmRIZWxwZXIgcmVnaXN0ZXIgd2lsbCBkaXNhbWJpZ3VhdGUgaGVscGVyIGxvb2t1cCBmcm9tIGZpbmRpbmcgYVxuXHRcdC8vIGZ1bmN0aW9uIGluIGEgY29udGV4dC4gVGhpcyBpcyBuZWNlc3NhcnkgZm9yIG11c3RhY2hlIGNvbXBhdGliaWxpdHksIHdoaWNoXG5cdFx0Ly8gcmVxdWlyZXMgdGhhdCBjb250ZXh0IGZ1bmN0aW9ucyBpbiBibG9ja3MgYXJlIGV2YWx1YXRlZCBieSBibG9ja0hlbHBlck1pc3NpbmcsXG5cdFx0Ly8gYW5kIHRoZW4gcHJvY2VlZCBhcyBpZiB0aGUgcmVzdWx0aW5nIHZhbHVlIHdhcyBwcm92aWRlZCB0byBibG9ja0hlbHBlck1pc3NpbmcuXG5cdFxuXHRcdENvbXBpbGVyLnByb3RvdHlwZSA9IHtcblx0XHQgIGNvbXBpbGVyOiBDb21waWxlcixcblx0XG5cdFx0ICBlcXVhbHM6IGZ1bmN0aW9uIGVxdWFscyhvdGhlcikge1xuXHRcdCAgICB2YXIgbGVuID0gdGhpcy5vcGNvZGVzLmxlbmd0aDtcblx0XHQgICAgaWYgKG90aGVyLm9wY29kZXMubGVuZ3RoICE9PSBsZW4pIHtcblx0XHQgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgIH1cblx0XG5cdFx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHQgICAgICB2YXIgb3Bjb2RlID0gdGhpcy5vcGNvZGVzW2ldLFxuXHRcdCAgICAgICAgICBvdGhlck9wY29kZSA9IG90aGVyLm9wY29kZXNbaV07XG5cdFx0ICAgICAgaWYgKG9wY29kZS5vcGNvZGUgIT09IG90aGVyT3Bjb2RlLm9wY29kZSB8fCAhYXJnRXF1YWxzKG9wY29kZS5hcmdzLCBvdGhlck9wY29kZS5hcmdzKSkge1xuXHRcdCAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHRcdCAgICAgIH1cblx0XHQgICAgfVxuXHRcblx0XHQgICAgLy8gV2Uga25vdyB0aGF0IGxlbmd0aCBpcyB0aGUgc2FtZSBiZXR3ZWVuIHRoZSB0d28gYXJyYXlzIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgdGllZFxuXHRcdCAgICAvLyB0byB0aGUgb3Bjb2RlIGJlaGF2aW9yIGFib3ZlLlxuXHRcdCAgICBsZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDtcblx0XHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdCAgICAgIGlmICghdGhpcy5jaGlsZHJlbltpXS5lcXVhbHMob3RoZXIuY2hpbGRyZW5baV0pKSB7XG5cdFx0ICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgfVxuXHRcdCAgICB9XG5cdFxuXHRcdCAgICByZXR1cm4gdHJ1ZTtcblx0XHQgIH0sXG5cdFxuXHRcdCAgZ3VpZDogMCxcblx0XG5cdFx0ICBjb21waWxlOiBmdW5jdGlvbiBjb21waWxlKHByb2dyYW0sIG9wdGlvbnMpIHtcblx0XHQgICAgdGhpcy5zb3VyY2VOb2RlID0gW107XG5cdFx0ICAgIHRoaXMub3Bjb2RlcyA9IFtdO1xuXHRcdCAgICB0aGlzLmNoaWxkcmVuID0gW107XG5cdFx0ICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0ICAgIHRoaXMuc3RyaW5nUGFyYW1zID0gb3B0aW9ucy5zdHJpbmdQYXJhbXM7XG5cdFx0ICAgIHRoaXMudHJhY2tJZHMgPSBvcHRpb25zLnRyYWNrSWRzO1xuXHRcblx0XHQgICAgb3B0aW9ucy5ibG9ja1BhcmFtcyA9IG9wdGlvbnMuYmxvY2tQYXJhbXMgfHwgW107XG5cdFxuXHRcdCAgICAvLyBUaGVzZSBjaGFuZ2VzIHdpbGwgcHJvcGFnYXRlIHRvIHRoZSBvdGhlciBjb21waWxlciBjb21wb25lbnRzXG5cdFx0ICAgIHZhciBrbm93bkhlbHBlcnMgPSBvcHRpb25zLmtub3duSGVscGVycztcblx0XHQgICAgb3B0aW9ucy5rbm93bkhlbHBlcnMgPSB7XG5cdFx0ICAgICAgJ2hlbHBlck1pc3NpbmcnOiB0cnVlLFxuXHRcdCAgICAgICdibG9ja0hlbHBlck1pc3NpbmcnOiB0cnVlLFxuXHRcdCAgICAgICdlYWNoJzogdHJ1ZSxcblx0XHQgICAgICAnaWYnOiB0cnVlLFxuXHRcdCAgICAgICd1bmxlc3MnOiB0cnVlLFxuXHRcdCAgICAgICd3aXRoJzogdHJ1ZSxcblx0XHQgICAgICAnbG9nJzogdHJ1ZSxcblx0XHQgICAgICAnbG9va3VwJzogdHJ1ZVxuXHRcdCAgICB9O1xuXHRcdCAgICBpZiAoa25vd25IZWxwZXJzKSB7XG5cdFx0ICAgICAgZm9yICh2YXIgX25hbWUgaW4ga25vd25IZWxwZXJzKSB7XG5cdFx0ICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuXHRcdCAgICAgICAgaWYgKF9uYW1lIGluIGtub3duSGVscGVycykge1xuXHRcdCAgICAgICAgICBvcHRpb25zLmtub3duSGVscGVyc1tfbmFtZV0gPSBrbm93bkhlbHBlcnNbX25hbWVdO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgIH1cblx0XHQgICAgfVxuXHRcblx0XHQgICAgcmV0dXJuIHRoaXMuYWNjZXB0KHByb2dyYW0pO1xuXHRcdCAgfSxcblx0XG5cdFx0ICBjb21waWxlUHJvZ3JhbTogZnVuY3Rpb24gY29tcGlsZVByb2dyYW0ocHJvZ3JhbSkge1xuXHRcdCAgICB2YXIgY2hpbGRDb21waWxlciA9IG5ldyB0aGlzLmNvbXBpbGVyKCksXG5cdFx0ICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcblx0XHQgICAgcmVzdWx0ID0gY2hpbGRDb21waWxlci5jb21waWxlKHByb2dyYW0sIHRoaXMub3B0aW9ucyksXG5cdFx0ICAgICAgICBndWlkID0gdGhpcy5ndWlkKys7XG5cdFxuXHRcdCAgICB0aGlzLnVzZVBhcnRpYWwgPSB0aGlzLnVzZVBhcnRpYWwgfHwgcmVzdWx0LnVzZVBhcnRpYWw7XG5cdFxuXHRcdCAgICB0aGlzLmNoaWxkcmVuW2d1aWRdID0gcmVzdWx0O1xuXHRcdCAgICB0aGlzLnVzZURlcHRocyA9IHRoaXMudXNlRGVwdGhzIHx8IHJlc3VsdC51c2VEZXB0aHM7XG5cdFxuXHRcdCAgICByZXR1cm4gZ3VpZDtcblx0XHQgIH0sXG5cdFxuXHRcdCAgYWNjZXB0OiBmdW5jdGlvbiBhY2NlcHQobm9kZSkge1xuXHRcdCAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogU2FuaXR5IGNvZGUgKi9cblx0XHQgICAgaWYgKCF0aGlzW25vZGUudHlwZV0pIHtcblx0XHQgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVW5rbm93biB0eXBlOiAnICsgbm9kZS50eXBlLCBub2RlKTtcblx0XHQgICAgfVxuXHRcblx0XHQgICAgdGhpcy5zb3VyY2VOb2RlLnVuc2hpZnQobm9kZSk7XG5cdFx0ICAgIHZhciByZXQgPSB0aGlzW25vZGUudHlwZV0obm9kZSk7XG5cdFx0ICAgIHRoaXMuc291cmNlTm9kZS5zaGlmdCgpO1xuXHRcdCAgICByZXR1cm4gcmV0O1xuXHRcdCAgfSxcblx0XG5cdFx0ICBQcm9ncmFtOiBmdW5jdGlvbiBQcm9ncmFtKHByb2dyYW0pIHtcblx0XHQgICAgdGhpcy5vcHRpb25zLmJsb2NrUGFyYW1zLnVuc2hpZnQocHJvZ3JhbS5ibG9ja1BhcmFtcyk7XG5cdFxuXHRcdCAgICB2YXIgYm9keSA9IHByb2dyYW0uYm9keSxcblx0XHQgICAgICAgIGJvZHlMZW5ndGggPSBib2R5Lmxlbmd0aDtcblx0XHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2R5TGVuZ3RoOyBpKyspIHtcblx0XHQgICAgICB0aGlzLmFjY2VwdChib2R5W2ldKTtcblx0XHQgICAgfVxuXHRcblx0XHQgICAgdGhpcy5vcHRpb25zLmJsb2NrUGFyYW1zLnNoaWZ0KCk7XG5cdFxuXHRcdCAgICB0aGlzLmlzU2ltcGxlID0gYm9keUxlbmd0aCA9PT0gMTtcblx0XHQgICAgdGhpcy5ibG9ja1BhcmFtcyA9IHByb2dyYW0uYmxvY2tQYXJhbXMgPyBwcm9ncmFtLmJsb2NrUGFyYW1zLmxlbmd0aCA6IDA7XG5cdFxuXHRcdCAgICByZXR1cm4gdGhpcztcblx0XHQgIH0sXG5cdFxuXHRcdCAgQmxvY2tTdGF0ZW1lbnQ6IGZ1bmN0aW9uIEJsb2NrU3RhdGVtZW50KGJsb2NrKSB7XG5cdFx0ICAgIHRyYW5zZm9ybUxpdGVyYWxUb1BhdGgoYmxvY2spO1xuXHRcblx0XHQgICAgdmFyIHByb2dyYW0gPSBibG9jay5wcm9ncmFtLFxuXHRcdCAgICAgICAgaW52ZXJzZSA9IGJsb2NrLmludmVyc2U7XG5cdFxuXHRcdCAgICBwcm9ncmFtID0gcHJvZ3JhbSAmJiB0aGlzLmNvbXBpbGVQcm9ncmFtKHByb2dyYW0pO1xuXHRcdCAgICBpbnZlcnNlID0gaW52ZXJzZSAmJiB0aGlzLmNvbXBpbGVQcm9ncmFtKGludmVyc2UpO1xuXHRcblx0XHQgICAgdmFyIHR5cGUgPSB0aGlzLmNsYXNzaWZ5U2V4cHIoYmxvY2spO1xuXHRcblx0XHQgICAgaWYgKHR5cGUgPT09ICdoZWxwZXInKSB7XG5cdFx0ICAgICAgdGhpcy5oZWxwZXJTZXhwcihibG9jaywgcHJvZ3JhbSwgaW52ZXJzZSk7XG5cdFx0ICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3NpbXBsZScpIHtcblx0XHQgICAgICB0aGlzLnNpbXBsZVNleHByKGJsb2NrKTtcblx0XG5cdFx0ICAgICAgLy8gbm93IHRoYXQgdGhlIHNpbXBsZSBtdXN0YWNoZSBpcyByZXNvbHZlZCwgd2UgbmVlZCB0b1xuXHRcdCAgICAgIC8vIGV2YWx1YXRlIGl0IGJ5IGV4ZWN1dGluZyBgYmxvY2tIZWxwZXJNaXNzaW5nYFxuXHRcdCAgICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIHByb2dyYW0pO1xuXHRcdCAgICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIGludmVyc2UpO1xuXHRcdCAgICAgIHRoaXMub3Bjb2RlKCdlbXB0eUhhc2gnKTtcblx0XHQgICAgICB0aGlzLm9wY29kZSgnYmxvY2tWYWx1ZScsIGJsb2NrLnBhdGgub3JpZ2luYWwpO1xuXHRcdCAgICB9IGVsc2Uge1xuXHRcdCAgICAgIHRoaXMuYW1iaWd1b3VzU2V4cHIoYmxvY2ssIHByb2dyYW0sIGludmVyc2UpO1xuXHRcblx0XHQgICAgICAvLyBub3cgdGhhdCB0aGUgc2ltcGxlIG11c3RhY2hlIGlzIHJlc29sdmVkLCB3ZSBuZWVkIHRvXG5cdFx0ICAgICAgLy8gZXZhbHVhdGUgaXQgYnkgZXhlY3V0aW5nIGBibG9ja0hlbHBlck1pc3NpbmdgXG5cdFx0ICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgcHJvZ3JhbSk7XG5cdFx0ICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgaW52ZXJzZSk7XG5cdFx0ICAgICAgdGhpcy5vcGNvZGUoJ2VtcHR5SGFzaCcpO1xuXHRcdCAgICAgIHRoaXMub3Bjb2RlKCdhbWJpZ3VvdXNCbG9ja1ZhbHVlJyk7XG5cdFx0ICAgIH1cblx0XG5cdFx0ICAgIHRoaXMub3Bjb2RlKCdhcHBlbmQnKTtcblx0XHQgIH0sXG5cdFxuXHRcdCAgRGVjb3JhdG9yQmxvY2s6IGZ1bmN0aW9uIERlY29yYXRvckJsb2NrKGRlY29yYXRvcikge1xuXHRcdCAgICB2YXIgcHJvZ3JhbSA9IGRlY29yYXRvci5wcm9ncmFtICYmIHRoaXMuY29tcGlsZVByb2dyYW0oZGVjb3JhdG9yLnByb2dyYW0pO1xuXHRcdCAgICB2YXIgcGFyYW1zID0gdGhpcy5zZXR1cEZ1bGxNdXN0YWNoZVBhcmFtcyhkZWNvcmF0b3IsIHByb2dyYW0sIHVuZGVmaW5lZCksXG5cdFx0ICAgICAgICBwYXRoID0gZGVjb3JhdG9yLnBhdGg7XG5cdFxuXHRcdCAgICB0aGlzLnVzZURlY29yYXRvcnMgPSB0cnVlO1xuXHRcdCAgICB0aGlzLm9wY29kZSgncmVnaXN0ZXJEZWNvcmF0b3InLCBwYXJhbXMubGVuZ3RoLCBwYXRoLm9yaWdpbmFsKTtcblx0XHQgIH0sXG5cdFxuXHRcdCAgUGFydGlhbFN0YXRlbWVudDogZnVuY3Rpb24gUGFydGlhbFN0YXRlbWVudChwYXJ0aWFsKSB7XG5cdFx0ICAgIHRoaXMudXNlUGFydGlhbCA9IHRydWU7XG5cdFxuXHRcdCAgICB2YXIgcHJvZ3JhbSA9IHBhcnRpYWwucHJvZ3JhbTtcblx0XHQgICAgaWYgKHByb2dyYW0pIHtcblx0XHQgICAgICBwcm9ncmFtID0gdGhpcy5jb21waWxlUHJvZ3JhbShwYXJ0aWFsLnByb2dyYW0pO1xuXHRcdCAgICB9XG5cdFxuXHRcdCAgICB2YXIgcGFyYW1zID0gcGFydGlhbC5wYXJhbXM7XG5cdFx0ICAgIGlmIChwYXJhbXMubGVuZ3RoID4gMSkge1xuXHRcdCAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdVbnN1cHBvcnRlZCBudW1iZXIgb2YgcGFydGlhbCBhcmd1bWVudHM6ICcgKyBwYXJhbXMubGVuZ3RoLCBwYXJ0aWFsKTtcblx0XHQgICAgfSBlbHNlIGlmICghcGFyYW1zLmxlbmd0aCkge1xuXHRcdCAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXhwbGljaXRQYXJ0aWFsQ29udGV4dCkge1xuXHRcdCAgICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hMaXRlcmFsJywgJ3VuZGVmaW5lZCcpO1xuXHRcdCAgICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgICBwYXJhbXMucHVzaCh7IHR5cGU6ICdQYXRoRXhwcmVzc2lvbicsIHBhcnRzOiBbXSwgZGVwdGg6IDAgfSk7XG5cdFx0ICAgICAgfVxuXHRcdCAgICB9XG5cdFxuXHRcdCAgICB2YXIgcGFydGlhbE5hbWUgPSBwYXJ0aWFsLm5hbWUub3JpZ2luYWwsXG5cdFx0ICAgICAgICBpc0R5bmFtaWMgPSBwYXJ0aWFsLm5hbWUudHlwZSA9PT0gJ1N1YkV4cHJlc3Npb24nO1xuXHRcdCAgICBpZiAoaXNEeW5hbWljKSB7XG5cdFx0ICAgICAgdGhpcy5hY2NlcHQocGFydGlhbC5uYW1lKTtcblx0XHQgICAgfVxuXHRcblx0XHQgICAgdGhpcy5zZXR1cEZ1bGxNdXN0YWNoZVBhcmFtcyhwYXJ0aWFsLCBwcm9ncmFtLCB1bmRlZmluZWQsIHRydWUpO1xuXHRcblx0XHQgICAgdmFyIGluZGVudCA9IHBhcnRpYWwuaW5kZW50IHx8ICcnO1xuXHRcdCAgICBpZiAodGhpcy5vcHRpb25zLnByZXZlbnRJbmRlbnQgJiYgaW5kZW50KSB7XG5cdFx0ICAgICAgdGhpcy5vcGNvZGUoJ2FwcGVuZENvbnRlbnQnLCBpbmRlbnQpO1xuXHRcdCAgICAgIGluZGVudCA9ICcnO1xuXHRcdCAgICB9XG5cdFxuXHRcdCAgICB0aGlzLm9wY29kZSgnaW52b2tlUGFydGlhbCcsIGlzRHluYW1pYywgcGFydGlhbE5hbWUsIGluZGVudCk7XG5cdFx0ICAgIHRoaXMub3Bjb2RlKCdhcHBlbmQnKTtcblx0XHQgIH0sXG5cdFx0ICBQYXJ0aWFsQmxvY2tTdGF0ZW1lbnQ6IGZ1bmN0aW9uIFBhcnRpYWxCbG9ja1N0YXRlbWVudChwYXJ0aWFsQmxvY2spIHtcblx0XHQgICAgdGhpcy5QYXJ0aWFsU3RhdGVtZW50KHBhcnRpYWxCbG9jayk7XG5cdFx0ICB9LFxuXHRcblx0XHQgIE11c3RhY2hlU3RhdGVtZW50OiBmdW5jdGlvbiBNdXN0YWNoZVN0YXRlbWVudChtdXN0YWNoZSkge1xuXHRcdCAgICB0aGlzLlN1YkV4cHJlc3Npb24obXVzdGFjaGUpO1xuXHRcblx0XHQgICAgaWYgKG11c3RhY2hlLmVzY2FwZWQgJiYgIXRoaXMub3B0aW9ucy5ub0VzY2FwZSkge1xuXHRcdCAgICAgIHRoaXMub3Bjb2RlKCdhcHBlbmRFc2NhcGVkJyk7XG5cdFx0ICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgdGhpcy5vcGNvZGUoJ2FwcGVuZCcpO1xuXHRcdCAgICB9XG5cdFx0ICB9LFxuXHRcdCAgRGVjb3JhdG9yOiBmdW5jdGlvbiBEZWNvcmF0b3IoZGVjb3JhdG9yKSB7XG5cdFx0ICAgIHRoaXMuRGVjb3JhdG9yQmxvY2soZGVjb3JhdG9yKTtcblx0XHQgIH0sXG5cdFxuXHRcdCAgQ29udGVudFN0YXRlbWVudDogZnVuY3Rpb24gQ29udGVudFN0YXRlbWVudChjb250ZW50KSB7XG5cdFx0ICAgIGlmIChjb250ZW50LnZhbHVlKSB7XG5cdFx0ICAgICAgdGhpcy5vcGNvZGUoJ2FwcGVuZENvbnRlbnQnLCBjb250ZW50LnZhbHVlKTtcblx0XHQgICAgfVxuXHRcdCAgfSxcblx0XG5cdFx0ICBDb21tZW50U3RhdGVtZW50OiBmdW5jdGlvbiBDb21tZW50U3RhdGVtZW50KCkge30sXG5cdFxuXHRcdCAgU3ViRXhwcmVzc2lvbjogZnVuY3Rpb24gU3ViRXhwcmVzc2lvbihzZXhwcikge1xuXHRcdCAgICB0cmFuc2Zvcm1MaXRlcmFsVG9QYXRoKHNleHByKTtcblx0XHQgICAgdmFyIHR5cGUgPSB0aGlzLmNsYXNzaWZ5U2V4cHIoc2V4cHIpO1xuXHRcblx0XHQgICAgaWYgKHR5cGUgPT09ICdzaW1wbGUnKSB7XG5cdFx0ICAgICAgdGhpcy5zaW1wbGVTZXhwcihzZXhwcik7XG5cdFx0ICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2hlbHBlcicpIHtcblx0XHQgICAgICB0aGlzLmhlbHBlclNleHByKHNleHByKTtcblx0XHQgICAgfSBlbHNlIHtcblx0XHQgICAgICB0aGlzLmFtYmlndW91c1NleHByKHNleHByKTtcblx0XHQgICAgfVxuXHRcdCAgfSxcblx0XHQgIGFtYmlndW91c1NleHByOiBmdW5jdGlvbiBhbWJpZ3VvdXNTZXhwcihzZXhwciwgcHJvZ3JhbSwgaW52ZXJzZSkge1xuXHRcdCAgICB2YXIgcGF0aCA9IHNleHByLnBhdGgsXG5cdFx0ICAgICAgICBuYW1lID0gcGF0aC5wYXJ0c1swXSxcblx0XHQgICAgICAgIGlzQmxvY2sgPSBwcm9ncmFtICE9IG51bGwgfHwgaW52ZXJzZSAhPSBudWxsO1xuXHRcblx0XHQgICAgdGhpcy5vcGNvZGUoJ2dldENvbnRleHQnLCBwYXRoLmRlcHRoKTtcblx0XG5cdFx0ICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIHByb2dyYW0pO1xuXHRcdCAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBpbnZlcnNlKTtcblx0XG5cdFx0ICAgIHBhdGguc3RyaWN0ID0gdHJ1ZTtcblx0XHQgICAgdGhpcy5hY2NlcHQocGF0aCk7XG5cdFxuXHRcdCAgICB0aGlzLm9wY29kZSgnaW52b2tlQW1iaWd1b3VzJywgbmFtZSwgaXNCbG9jayk7XG5cdFx0ICB9LFxuXHRcblx0XHQgIHNpbXBsZVNleHByOiBmdW5jdGlvbiBzaW1wbGVTZXhwcihzZXhwcikge1xuXHRcdCAgICB2YXIgcGF0aCA9IHNleHByLnBhdGg7XG5cdFx0ICAgIHBhdGguc3RyaWN0ID0gdHJ1ZTtcblx0XHQgICAgdGhpcy5hY2NlcHQocGF0aCk7XG5cdFx0ICAgIHRoaXMub3Bjb2RlKCdyZXNvbHZlUG9zc2libGVMYW1iZGEnKTtcblx0XHQgIH0sXG5cdFxuXHRcdCAgaGVscGVyU2V4cHI6IGZ1bmN0aW9uIGhlbHBlclNleHByKHNleHByLCBwcm9ncmFtLCBpbnZlcnNlKSB7XG5cdFx0ICAgIHZhciBwYXJhbXMgPSB0aGlzLnNldHVwRnVsbE11c3RhY2hlUGFyYW1zKHNleHByLCBwcm9ncmFtLCBpbnZlcnNlKSxcblx0XHQgICAgICAgIHBhdGggPSBzZXhwci5wYXRoLFxuXHRcdCAgICAgICAgbmFtZSA9IHBhdGgucGFydHNbMF07XG5cdFxuXHRcdCAgICBpZiAodGhpcy5vcHRpb25zLmtub3duSGVscGVyc1tuYW1lXSkge1xuXHRcdCAgICAgIHRoaXMub3Bjb2RlKCdpbnZva2VLbm93bkhlbHBlcicsIHBhcmFtcy5sZW5ndGgsIG5hbWUpO1xuXHRcdCAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5rbm93bkhlbHBlcnNPbmx5KSB7XG5cdFx0ICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1lvdSBzcGVjaWZpZWQga25vd25IZWxwZXJzT25seSwgYnV0IHVzZWQgdGhlIHVua25vd24gaGVscGVyICcgKyBuYW1lLCBzZXhwcik7XG5cdFx0ICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgcGF0aC5zdHJpY3QgPSB0cnVlO1xuXHRcdCAgICAgIHBhdGguZmFsc3kgPSB0cnVlO1xuXHRcblx0XHQgICAgICB0aGlzLmFjY2VwdChwYXRoKTtcblx0XHQgICAgICB0aGlzLm9wY29kZSgnaW52b2tlSGVscGVyJywgcGFyYW1zLmxlbmd0aCwgcGF0aC5vcmlnaW5hbCwgX2FzdDJbJ2RlZmF1bHQnXS5oZWxwZXJzLnNpbXBsZUlkKHBhdGgpKTtcblx0XHQgICAgfVxuXHRcdCAgfSxcblx0XG5cdFx0ICBQYXRoRXhwcmVzc2lvbjogZnVuY3Rpb24gUGF0aEV4cHJlc3Npb24ocGF0aCkge1xuXHRcdCAgICB0aGlzLmFkZERlcHRoKHBhdGguZGVwdGgpO1xuXHRcdCAgICB0aGlzLm9wY29kZSgnZ2V0Q29udGV4dCcsIHBhdGguZGVwdGgpO1xuXHRcblx0XHQgICAgdmFyIG5hbWUgPSBwYXRoLnBhcnRzWzBdLFxuXHRcdCAgICAgICAgc2NvcGVkID0gX2FzdDJbJ2RlZmF1bHQnXS5oZWxwZXJzLnNjb3BlZElkKHBhdGgpLFxuXHRcdCAgICAgICAgYmxvY2tQYXJhbUlkID0gIXBhdGguZGVwdGggJiYgIXNjb3BlZCAmJiB0aGlzLmJsb2NrUGFyYW1JbmRleChuYW1lKTtcblx0XG5cdFx0ICAgIGlmIChibG9ja1BhcmFtSWQpIHtcblx0XHQgICAgICB0aGlzLm9wY29kZSgnbG9va3VwQmxvY2tQYXJhbScsIGJsb2NrUGFyYW1JZCwgcGF0aC5wYXJ0cyk7XG5cdFx0ICAgIH0gZWxzZSBpZiAoIW5hbWUpIHtcblx0XHQgICAgICAvLyBDb250ZXh0IHJlZmVyZW5jZSwgaS5lLiBge3tmb28gLn19YCBvciBge3tmb28gLi59fWBcblx0XHQgICAgICB0aGlzLm9wY29kZSgncHVzaENvbnRleHQnKTtcblx0XHQgICAgfSBlbHNlIGlmIChwYXRoLmRhdGEpIHtcblx0XHQgICAgICB0aGlzLm9wdGlvbnMuZGF0YSA9IHRydWU7XG5cdFx0ICAgICAgdGhpcy5vcGNvZGUoJ2xvb2t1cERhdGEnLCBwYXRoLmRlcHRoLCBwYXRoLnBhcnRzLCBwYXRoLnN0cmljdCk7XG5cdFx0ICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgdGhpcy5vcGNvZGUoJ2xvb2t1cE9uQ29udGV4dCcsIHBhdGgucGFydHMsIHBhdGguZmFsc3ksIHBhdGguc3RyaWN0LCBzY29wZWQpO1xuXHRcdCAgICB9XG5cdFx0ICB9LFxuXHRcblx0XHQgIFN0cmluZ0xpdGVyYWw6IGZ1bmN0aW9uIFN0cmluZ0xpdGVyYWwoc3RyaW5nKSB7XG5cdFx0ICAgIHRoaXMub3Bjb2RlKCdwdXNoU3RyaW5nJywgc3RyaW5nLnZhbHVlKTtcblx0XHQgIH0sXG5cdFxuXHRcdCAgTnVtYmVyTGl0ZXJhbDogZnVuY3Rpb24gTnVtYmVyTGl0ZXJhbChudW1iZXIpIHtcblx0XHQgICAgdGhpcy5vcGNvZGUoJ3B1c2hMaXRlcmFsJywgbnVtYmVyLnZhbHVlKTtcblx0XHQgIH0sXG5cdFxuXHRcdCAgQm9vbGVhbkxpdGVyYWw6IGZ1bmN0aW9uIEJvb2xlYW5MaXRlcmFsKGJvb2wpIHtcblx0XHQgICAgdGhpcy5vcGNvZGUoJ3B1c2hMaXRlcmFsJywgYm9vbC52YWx1ZSk7XG5cdFx0ICB9LFxuXHRcblx0XHQgIFVuZGVmaW5lZExpdGVyYWw6IGZ1bmN0aW9uIFVuZGVmaW5lZExpdGVyYWwoKSB7XG5cdFx0ICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsICd1bmRlZmluZWQnKTtcblx0XHQgIH0sXG5cdFxuXHRcdCAgTnVsbExpdGVyYWw6IGZ1bmN0aW9uIE51bGxMaXRlcmFsKCkge1xuXHRcdCAgICB0aGlzLm9wY29kZSgncHVzaExpdGVyYWwnLCAnbnVsbCcpO1xuXHRcdCAgfSxcblx0XG5cdFx0ICBIYXNoOiBmdW5jdGlvbiBIYXNoKGhhc2gpIHtcblx0XHQgICAgdmFyIHBhaXJzID0gaGFzaC5wYWlycyxcblx0XHQgICAgICAgIGkgPSAwLFxuXHRcdCAgICAgICAgbCA9IHBhaXJzLmxlbmd0aDtcblx0XG5cdFx0ICAgIHRoaXMub3Bjb2RlKCdwdXNoSGFzaCcpO1xuXHRcblx0XHQgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcblx0XHQgICAgICB0aGlzLnB1c2hQYXJhbShwYWlyc1tpXS52YWx1ZSk7XG5cdFx0ICAgIH1cblx0XHQgICAgd2hpbGUgKGktLSkge1xuXHRcdCAgICAgIHRoaXMub3Bjb2RlKCdhc3NpZ25Ub0hhc2gnLCBwYWlyc1tpXS5rZXkpO1xuXHRcdCAgICB9XG5cdFx0ICAgIHRoaXMub3Bjb2RlKCdwb3BIYXNoJyk7XG5cdFx0ICB9LFxuXHRcblx0XHQgIC8vIEhFTFBFUlNcblx0XHQgIG9wY29kZTogZnVuY3Rpb24gb3Bjb2RlKG5hbWUpIHtcblx0XHQgICAgdGhpcy5vcGNvZGVzLnB1c2goeyBvcGNvZGU6IG5hbWUsIGFyZ3M6IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwgbG9jOiB0aGlzLnNvdXJjZU5vZGVbMF0ubG9jIH0pO1xuXHRcdCAgfSxcblx0XG5cdFx0ICBhZGREZXB0aDogZnVuY3Rpb24gYWRkRGVwdGgoZGVwdGgpIHtcblx0XHQgICAgaWYgKCFkZXB0aCkge1xuXHRcdCAgICAgIHJldHVybjtcblx0XHQgICAgfVxuXHRcblx0XHQgICAgdGhpcy51c2VEZXB0aHMgPSB0cnVlO1xuXHRcdCAgfSxcblx0XG5cdFx0ICBjbGFzc2lmeVNleHByOiBmdW5jdGlvbiBjbGFzc2lmeVNleHByKHNleHByKSB7XG5cdFx0ICAgIHZhciBpc1NpbXBsZSA9IF9hc3QyWydkZWZhdWx0J10uaGVscGVycy5zaW1wbGVJZChzZXhwci5wYXRoKTtcblx0XG5cdFx0ICAgIHZhciBpc0Jsb2NrUGFyYW0gPSBpc1NpbXBsZSAmJiAhIXRoaXMuYmxvY2tQYXJhbUluZGV4KHNleHByLnBhdGgucGFydHNbMF0pO1xuXHRcblx0XHQgICAgLy8gYSBtdXN0YWNoZSBpcyBhbiBlbGlnaWJsZSBoZWxwZXIgaWY6XG5cdFx0ICAgIC8vICogaXRzIGlkIGlzIHNpbXBsZSAoYSBzaW5nbGUgcGFydCwgbm90IGB0aGlzYCBvciBgLi5gKVxuXHRcdCAgICB2YXIgaXNIZWxwZXIgPSAhaXNCbG9ja1BhcmFtICYmIF9hc3QyWydkZWZhdWx0J10uaGVscGVycy5oZWxwZXJFeHByZXNzaW9uKHNleHByKTtcblx0XG5cdFx0ICAgIC8vIGlmIGEgbXVzdGFjaGUgaXMgYW4gZWxpZ2libGUgaGVscGVyIGJ1dCBub3QgYSBkZWZpbml0ZVxuXHRcdCAgICAvLyBoZWxwZXIsIGl0IGlzIGFtYmlndW91cywgYW5kIHdpbGwgYmUgcmVzb2x2ZWQgaW4gYSBsYXRlclxuXHRcdCAgICAvLyBwYXNzIG9yIGF0IHJ1bnRpbWUuXG5cdFx0ICAgIHZhciBpc0VsaWdpYmxlID0gIWlzQmxvY2tQYXJhbSAmJiAoaXNIZWxwZXIgfHwgaXNTaW1wbGUpO1xuXHRcblx0XHQgICAgLy8gaWYgYW1iaWd1b3VzLCB3ZSBjYW4gcG9zc2libHkgcmVzb2x2ZSB0aGUgYW1iaWd1aXR5IG5vd1xuXHRcdCAgICAvLyBBbiBlbGlnaWJsZSBoZWxwZXIgaXMgb25lIHRoYXQgZG9lcyBub3QgaGF2ZSBhIGNvbXBsZXggcGF0aCwgaS5lLiBgdGhpcy5mb29gLCBgLi4vZm9vYCBldGMuXG5cdFx0ICAgIGlmIChpc0VsaWdpYmxlICYmICFpc0hlbHBlcikge1xuXHRcdCAgICAgIHZhciBfbmFtZTIgPSBzZXhwci5wYXRoLnBhcnRzWzBdLFxuXHRcdCAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXHRcblx0XHQgICAgICBpZiAob3B0aW9ucy5rbm93bkhlbHBlcnNbX25hbWUyXSkge1xuXHRcdCAgICAgICAgaXNIZWxwZXIgPSB0cnVlO1xuXHRcdCAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5rbm93bkhlbHBlcnNPbmx5KSB7XG5cdFx0ICAgICAgICBpc0VsaWdpYmxlID0gZmFsc2U7XG5cdFx0ICAgICAgfVxuXHRcdCAgICB9XG5cdFxuXHRcdCAgICBpZiAoaXNIZWxwZXIpIHtcblx0XHQgICAgICByZXR1cm4gJ2hlbHBlcic7XG5cdFx0ICAgIH0gZWxzZSBpZiAoaXNFbGlnaWJsZSkge1xuXHRcdCAgICAgIHJldHVybiAnYW1iaWd1b3VzJztcblx0XHQgICAgfSBlbHNlIHtcblx0XHQgICAgICByZXR1cm4gJ3NpbXBsZSc7XG5cdFx0ICAgIH1cblx0XHQgIH0sXG5cdFxuXHRcdCAgcHVzaFBhcmFtczogZnVuY3Rpb24gcHVzaFBhcmFtcyhwYXJhbXMpIHtcblx0XHQgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYXJhbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0ICAgICAgdGhpcy5wdXNoUGFyYW0ocGFyYW1zW2ldKTtcblx0XHQgICAgfVxuXHRcdCAgfSxcblx0XG5cdFx0ICBwdXNoUGFyYW06IGZ1bmN0aW9uIHB1c2hQYXJhbSh2YWwpIHtcblx0XHQgICAgdmFyIHZhbHVlID0gdmFsLnZhbHVlICE9IG51bGwgPyB2YWwudmFsdWUgOiB2YWwub3JpZ2luYWwgfHwgJyc7XG5cdFxuXHRcdCAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcblx0XHQgICAgICBpZiAodmFsdWUucmVwbGFjZSkge1xuXHRcdCAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9eKFxcLj9cXC5cXC8pKi9nLCAnJykucmVwbGFjZSgvXFwvL2csICcuJyk7XG5cdFx0ICAgICAgfVxuXHRcblx0XHQgICAgICBpZiAodmFsLmRlcHRoKSB7XG5cdFx0ICAgICAgICB0aGlzLmFkZERlcHRoKHZhbC5kZXB0aCk7XG5cdFx0ICAgICAgfVxuXHRcdCAgICAgIHRoaXMub3Bjb2RlKCdnZXRDb250ZXh0JywgdmFsLmRlcHRoIHx8IDApO1xuXHRcdCAgICAgIHRoaXMub3Bjb2RlKCdwdXNoU3RyaW5nUGFyYW0nLCB2YWx1ZSwgdmFsLnR5cGUpO1xuXHRcblx0XHQgICAgICBpZiAodmFsLnR5cGUgPT09ICdTdWJFeHByZXNzaW9uJykge1xuXHRcdCAgICAgICAgLy8gU3ViRXhwcmVzc2lvbnMgZ2V0IGV2YWx1YXRlZCBhbmQgcGFzc2VkIGluXG5cdFx0ICAgICAgICAvLyBpbiBzdHJpbmcgcGFyYW1zIG1vZGUuXG5cdFx0ICAgICAgICB0aGlzLmFjY2VwdCh2YWwpO1xuXHRcdCAgICAgIH1cblx0XHQgICAgfSBlbHNlIHtcblx0XHQgICAgICBpZiAodGhpcy50cmFja0lkcykge1xuXHRcdCAgICAgICAgdmFyIGJsb2NrUGFyYW1JbmRleCA9IHVuZGVmaW5lZDtcblx0XHQgICAgICAgIGlmICh2YWwucGFydHMgJiYgIV9hc3QyWydkZWZhdWx0J10uaGVscGVycy5zY29wZWRJZCh2YWwpICYmICF2YWwuZGVwdGgpIHtcblx0XHQgICAgICAgICAgYmxvY2tQYXJhbUluZGV4ID0gdGhpcy5ibG9ja1BhcmFtSW5kZXgodmFsLnBhcnRzWzBdKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGlmIChibG9ja1BhcmFtSW5kZXgpIHtcblx0XHQgICAgICAgICAgdmFyIGJsb2NrUGFyYW1DaGlsZCA9IHZhbC5wYXJ0cy5zbGljZSgxKS5qb2luKCcuJyk7XG5cdFx0ICAgICAgICAgIHRoaXMub3Bjb2RlKCdwdXNoSWQnLCAnQmxvY2tQYXJhbScsIGJsb2NrUGFyYW1JbmRleCwgYmxvY2tQYXJhbUNoaWxkKTtcblx0XHQgICAgICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgICAgIHZhbHVlID0gdmFsLm9yaWdpbmFsIHx8IHZhbHVlO1xuXHRcdCAgICAgICAgICBpZiAodmFsdWUucmVwbGFjZSkge1xuXHRcdCAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXnRoaXMoPzpcXC58JCkvLCAnJykucmVwbGFjZSgvXlxcLlxcLy8sICcnKS5yZXBsYWNlKC9eXFwuJC8sICcnKTtcblx0XHQgICAgICAgICAgfVxuXHRcblx0XHQgICAgICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hJZCcsIHZhbC50eXBlLCB2YWx1ZSk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgfVxuXHRcdCAgICAgIHRoaXMuYWNjZXB0KHZhbCk7XG5cdFx0ICAgIH1cblx0XHQgIH0sXG5cdFxuXHRcdCAgc2V0dXBGdWxsTXVzdGFjaGVQYXJhbXM6IGZ1bmN0aW9uIHNldHVwRnVsbE11c3RhY2hlUGFyYW1zKHNleHByLCBwcm9ncmFtLCBpbnZlcnNlLCBvbWl0RW1wdHkpIHtcblx0XHQgICAgdmFyIHBhcmFtcyA9IHNleHByLnBhcmFtcztcblx0XHQgICAgdGhpcy5wdXNoUGFyYW1zKHBhcmFtcyk7XG5cdFxuXHRcdCAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBwcm9ncmFtKTtcblx0XHQgICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgaW52ZXJzZSk7XG5cdFxuXHRcdCAgICBpZiAoc2V4cHIuaGFzaCkge1xuXHRcdCAgICAgIHRoaXMuYWNjZXB0KHNleHByLmhhc2gpO1xuXHRcdCAgICB9IGVsc2Uge1xuXHRcdCAgICAgIHRoaXMub3Bjb2RlKCdlbXB0eUhhc2gnLCBvbWl0RW1wdHkpO1xuXHRcdCAgICB9XG5cdFxuXHRcdCAgICByZXR1cm4gcGFyYW1zO1xuXHRcdCAgfSxcblx0XG5cdFx0ICBibG9ja1BhcmFtSW5kZXg6IGZ1bmN0aW9uIGJsb2NrUGFyYW1JbmRleChuYW1lKSB7XG5cdFx0ICAgIGZvciAodmFyIGRlcHRoID0gMCwgbGVuID0gdGhpcy5vcHRpb25zLmJsb2NrUGFyYW1zLmxlbmd0aDsgZGVwdGggPCBsZW47IGRlcHRoKyspIHtcblx0XHQgICAgICB2YXIgYmxvY2tQYXJhbXMgPSB0aGlzLm9wdGlvbnMuYmxvY2tQYXJhbXNbZGVwdGhdLFxuXHRcdCAgICAgICAgICBwYXJhbSA9IGJsb2NrUGFyYW1zICYmIF91dGlscy5pbmRleE9mKGJsb2NrUGFyYW1zLCBuYW1lKTtcblx0XHQgICAgICBpZiAoYmxvY2tQYXJhbXMgJiYgcGFyYW0gPj0gMCkge1xuXHRcdCAgICAgICAgcmV0dXJuIFtkZXB0aCwgcGFyYW1dO1xuXHRcdCAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgfVxuXHRcdH07XG5cdFxuXHRcdGZ1bmN0aW9uIHByZWNvbXBpbGUoaW5wdXQsIG9wdGlvbnMsIGVudikge1xuXHRcdCAgaWYgKGlucHV0ID09IG51bGwgfHwgdHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJyAmJiBpbnB1dC50eXBlICE9PSAnUHJvZ3JhbScpIHtcblx0XHQgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1lvdSBtdXN0IHBhc3MgYSBzdHJpbmcgb3IgSGFuZGxlYmFycyBBU1QgdG8gSGFuZGxlYmFycy5wcmVjb21waWxlLiBZb3UgcGFzc2VkICcgKyBpbnB1dCk7XG5cdFx0ICB9XG5cdFxuXHRcdCAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdFx0ICBpZiAoISgnZGF0YScgaW4gb3B0aW9ucykpIHtcblx0XHQgICAgb3B0aW9ucy5kYXRhID0gdHJ1ZTtcblx0XHQgIH1cblx0XHQgIGlmIChvcHRpb25zLmNvbXBhdCkge1xuXHRcdCAgICBvcHRpb25zLnVzZURlcHRocyA9IHRydWU7XG5cdFx0ICB9XG5cdFxuXHRcdCAgdmFyIGFzdCA9IGVudi5wYXJzZShpbnB1dCwgb3B0aW9ucyksXG5cdFx0ICAgICAgZW52aXJvbm1lbnQgPSBuZXcgZW52LkNvbXBpbGVyKCkuY29tcGlsZShhc3QsIG9wdGlvbnMpO1xuXHRcdCAgcmV0dXJuIG5ldyBlbnYuSmF2YVNjcmlwdENvbXBpbGVyKCkuY29tcGlsZShlbnZpcm9ubWVudCwgb3B0aW9ucyk7XG5cdFx0fVxuXHRcblx0XHRmdW5jdGlvbiBjb21waWxlKGlucHV0LCBvcHRpb25zLCBlbnYpIHtcblx0XHQgIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQpIG9wdGlvbnMgPSB7fTtcblx0XG5cdFx0ICBpZiAoaW5wdXQgPT0gbnVsbCB8fCB0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnICYmIGlucHV0LnR5cGUgIT09ICdQcm9ncmFtJykge1xuXHRcdCAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnWW91IG11c3QgcGFzcyBhIHN0cmluZyBvciBIYW5kbGViYXJzIEFTVCB0byBIYW5kbGViYXJzLmNvbXBpbGUuIFlvdSBwYXNzZWQgJyArIGlucHV0KTtcblx0XHQgIH1cblx0XG5cdFx0ICBpZiAoISgnZGF0YScgaW4gb3B0aW9ucykpIHtcblx0XHQgICAgb3B0aW9ucy5kYXRhID0gdHJ1ZTtcblx0XHQgIH1cblx0XHQgIGlmIChvcHRpb25zLmNvbXBhdCkge1xuXHRcdCAgICBvcHRpb25zLnVzZURlcHRocyA9IHRydWU7XG5cdFx0ICB9XG5cdFxuXHRcdCAgdmFyIGNvbXBpbGVkID0gdW5kZWZpbmVkO1xuXHRcblx0XHQgIGZ1bmN0aW9uIGNvbXBpbGVJbnB1dCgpIHtcblx0XHQgICAgdmFyIGFzdCA9IGVudi5wYXJzZShpbnB1dCwgb3B0aW9ucyksXG5cdFx0ICAgICAgICBlbnZpcm9ubWVudCA9IG5ldyBlbnYuQ29tcGlsZXIoKS5jb21waWxlKGFzdCwgb3B0aW9ucyksXG5cdFx0ICAgICAgICB0ZW1wbGF0ZVNwZWMgPSBuZXcgZW52LkphdmFTY3JpcHRDb21waWxlcigpLmNvbXBpbGUoZW52aXJvbm1lbnQsIG9wdGlvbnMsIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cdFx0ICAgIHJldHVybiBlbnYudGVtcGxhdGUodGVtcGxhdGVTcGVjKTtcblx0XHQgIH1cblx0XG5cdFx0ICAvLyBUZW1wbGF0ZSBpcyBvbmx5IGNvbXBpbGVkIG9uIGZpcnN0IHVzZSBhbmQgY2FjaGVkIGFmdGVyIHRoYXQgcG9pbnQuXG5cdFx0ICBmdW5jdGlvbiByZXQoY29udGV4dCwgZXhlY09wdGlvbnMpIHtcblx0XHQgICAgaWYgKCFjb21waWxlZCkge1xuXHRcdCAgICAgIGNvbXBpbGVkID0gY29tcGlsZUlucHV0KCk7XG5cdFx0ICAgIH1cblx0XHQgICAgcmV0dXJuIGNvbXBpbGVkLmNhbGwodGhpcywgY29udGV4dCwgZXhlY09wdGlvbnMpO1xuXHRcdCAgfVxuXHRcdCAgcmV0Ll9zZXR1cCA9IGZ1bmN0aW9uIChzZXR1cE9wdGlvbnMpIHtcblx0XHQgICAgaWYgKCFjb21waWxlZCkge1xuXHRcdCAgICAgIGNvbXBpbGVkID0gY29tcGlsZUlucHV0KCk7XG5cdFx0ICAgIH1cblx0XHQgICAgcmV0dXJuIGNvbXBpbGVkLl9zZXR1cChzZXR1cE9wdGlvbnMpO1xuXHRcdCAgfTtcblx0XHQgIHJldC5fY2hpbGQgPSBmdW5jdGlvbiAoaSwgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocykge1xuXHRcdCAgICBpZiAoIWNvbXBpbGVkKSB7XG5cdFx0ICAgICAgY29tcGlsZWQgPSBjb21waWxlSW5wdXQoKTtcblx0XHQgICAgfVxuXHRcdCAgICByZXR1cm4gY29tcGlsZWQuX2NoaWxkKGksIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuXHRcdCAgfTtcblx0XHQgIHJldHVybiByZXQ7XG5cdFx0fVxuXHRcblx0XHRmdW5jdGlvbiBhcmdFcXVhbHMoYSwgYikge1xuXHRcdCAgaWYgKGEgPT09IGIpIHtcblx0XHQgICAgcmV0dXJuIHRydWU7XG5cdFx0ICB9XG5cdFxuXHRcdCAgaWYgKF91dGlscy5pc0FycmF5KGEpICYmIF91dGlscy5pc0FycmF5KGIpICYmIGEubGVuZ3RoID09PSBiLmxlbmd0aCkge1xuXHRcdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcblx0XHQgICAgICBpZiAoIWFyZ0VxdWFscyhhW2ldLCBiW2ldKSkge1xuXHRcdCAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHRcdCAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgICByZXR1cm4gdHJ1ZTtcblx0XHQgIH1cblx0XHR9XG5cdFxuXHRcdGZ1bmN0aW9uIHRyYW5zZm9ybUxpdGVyYWxUb1BhdGgoc2V4cHIpIHtcblx0XHQgIGlmICghc2V4cHIucGF0aC5wYXJ0cykge1xuXHRcdCAgICB2YXIgbGl0ZXJhbCA9IHNleHByLnBhdGg7XG5cdFx0ICAgIC8vIENhc3RpbmcgdG8gc3RyaW5nIGhlcmUgdG8gbWFrZSBmYWxzZSBhbmQgMCBsaXRlcmFsIHZhbHVlcyBwbGF5IG5pY2VseSB3aXRoIHRoZSByZXN0XG5cdFx0ICAgIC8vIG9mIHRoZSBzeXN0ZW0uXG5cdFx0ICAgIHNleHByLnBhdGggPSB7XG5cdFx0ICAgICAgdHlwZTogJ1BhdGhFeHByZXNzaW9uJyxcblx0XHQgICAgICBkYXRhOiBmYWxzZSxcblx0XHQgICAgICBkZXB0aDogMCxcblx0XHQgICAgICBwYXJ0czogW2xpdGVyYWwub3JpZ2luYWwgKyAnJ10sXG5cdFx0ICAgICAgb3JpZ2luYWw6IGxpdGVyYWwub3JpZ2luYWwgKyAnJyxcblx0XHQgICAgICBsb2M6IGxpdGVyYWwubG9jXG5cdFx0ICAgIH07XG5cdFx0ICB9XG5cdFx0fVxuXHRcblx0LyoqKi8gfSxcblx0LyogMjggKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XG5cdFx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpWydkZWZhdWx0J107XG5cdFxuXHRcdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cdFxuXHRcdHZhciBfYmFzZSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdFxuXHRcdHZhciBfZXhjZXB0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0XG5cdFx0dmFyIF9leGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhjZXB0aW9uKTtcblx0XG5cdFx0dmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdFxuXHRcdHZhciBfY29kZUdlbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpO1xuXHRcblx0XHR2YXIgX2NvZGVHZW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29kZUdlbik7XG5cdFxuXHRcdGZ1bmN0aW9uIExpdGVyYWwodmFsdWUpIHtcblx0XHQgIHRoaXMudmFsdWUgPSB2YWx1ZTtcblx0XHR9XG5cdFxuXHRcdGZ1bmN0aW9uIEphdmFTY3JpcHRDb21waWxlcigpIHt9XG5cdFxuXHRcdEphdmFTY3JpcHRDb21waWxlci5wcm90b3R5cGUgPSB7XG5cdFx0ICAvLyBQVUJMSUMgQVBJOiBZb3UgY2FuIG92ZXJyaWRlIHRoZXNlIG1ldGhvZHMgaW4gYSBzdWJjbGFzcyB0byBwcm92aWRlXG5cdFx0ICAvLyBhbHRlcm5hdGl2ZSBjb21waWxlZCBmb3JtcyBmb3IgbmFtZSBsb29rdXAgYW5kIGJ1ZmZlcmluZyBzZW1hbnRpY3Ncblx0XHQgIG5hbWVMb29rdXA6IGZ1bmN0aW9uIG5hbWVMb29rdXAocGFyZW50LCBuYW1lIC8qICwgdHlwZSovKSB7XG5cdFx0ICAgIGlmIChKYXZhU2NyaXB0Q29tcGlsZXIuaXNWYWxpZEphdmFTY3JpcHRWYXJpYWJsZU5hbWUobmFtZSkpIHtcblx0XHQgICAgICByZXR1cm4gW3BhcmVudCwgJy4nLCBuYW1lXTtcblx0XHQgICAgfSBlbHNlIHtcblx0XHQgICAgICByZXR1cm4gW3BhcmVudCwgJ1snLCBKU09OLnN0cmluZ2lmeShuYW1lKSwgJ10nXTtcblx0XHQgICAgfVxuXHRcdCAgfSxcblx0XHQgIGRlcHRoZWRMb29rdXA6IGZ1bmN0aW9uIGRlcHRoZWRMb29rdXAobmFtZSkge1xuXHRcdCAgICByZXR1cm4gW3RoaXMuYWxpYXNhYmxlKCdjb250YWluZXIubG9va3VwJyksICcoZGVwdGhzLCBcIicsIG5hbWUsICdcIiknXTtcblx0XHQgIH0sXG5cdFxuXHRcdCAgY29tcGlsZXJJbmZvOiBmdW5jdGlvbiBjb21waWxlckluZm8oKSB7XG5cdFx0ICAgIHZhciByZXZpc2lvbiA9IF9iYXNlLkNPTVBJTEVSX1JFVklTSU9OLFxuXHRcdCAgICAgICAgdmVyc2lvbnMgPSBfYmFzZS5SRVZJU0lPTl9DSEFOR0VTW3JldmlzaW9uXTtcblx0XHQgICAgcmV0dXJuIFtyZXZpc2lvbiwgdmVyc2lvbnNdO1xuXHRcdCAgfSxcblx0XG5cdFx0ICBhcHBlbmRUb0J1ZmZlcjogZnVuY3Rpb24gYXBwZW5kVG9CdWZmZXIoc291cmNlLCBsb2NhdGlvbiwgZXhwbGljaXQpIHtcblx0XHQgICAgLy8gRm9yY2UgYSBzb3VyY2UgYXMgdGhpcyBzaW1wbGlmaWVzIHRoZSBtZXJnZSBsb2dpYy5cblx0XHQgICAgaWYgKCFfdXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG5cdFx0ICAgICAgc291cmNlID0gW3NvdXJjZV07XG5cdFx0ICAgIH1cblx0XHQgICAgc291cmNlID0gdGhpcy5zb3VyY2Uud3JhcChzb3VyY2UsIGxvY2F0aW9uKTtcblx0XG5cdFx0ICAgIGlmICh0aGlzLmVudmlyb25tZW50LmlzU2ltcGxlKSB7XG5cdFx0ICAgICAgcmV0dXJuIFsncmV0dXJuICcsIHNvdXJjZSwgJzsnXTtcblx0XHQgICAgfSBlbHNlIGlmIChleHBsaWNpdCkge1xuXHRcdCAgICAgIC8vIFRoaXMgaXMgYSBjYXNlIHdoZXJlIHRoZSBidWZmZXIgb3BlcmF0aW9uIG9jY3VycyBhcyBhIGNoaWxkIG9mIGFub3RoZXJcblx0XHQgICAgICAvLyBjb25zdHJ1Y3QsIGdlbmVyYWxseSBicmFjZXMuIFdlIGhhdmUgdG8gZXhwbGljaXRseSBvdXRwdXQgdGhlc2UgYnVmZmVyXG5cdFx0ICAgICAgLy8gb3BlcmF0aW9ucyB0byBlbnN1cmUgdGhhdCB0aGUgZW1pdHRlZCBjb2RlIGdvZXMgaW4gdGhlIGNvcnJlY3QgbG9jYXRpb24uXG5cdFx0ICAgICAgcmV0dXJuIFsnYnVmZmVyICs9ICcsIHNvdXJjZSwgJzsnXTtcblx0XHQgICAgfSBlbHNlIHtcblx0XHQgICAgICBzb3VyY2UuYXBwZW5kVG9CdWZmZXIgPSB0cnVlO1xuXHRcdCAgICAgIHJldHVybiBzb3VyY2U7XG5cdFx0ICAgIH1cblx0XHQgIH0sXG5cdFxuXHRcdCAgaW5pdGlhbGl6ZUJ1ZmZlcjogZnVuY3Rpb24gaW5pdGlhbGl6ZUJ1ZmZlcigpIHtcblx0XHQgICAgcmV0dXJuIHRoaXMucXVvdGVkU3RyaW5nKCcnKTtcblx0XHQgIH0sXG5cdFx0ICAvLyBFTkQgUFVCTElDIEFQSVxuXHRcblx0XHQgIGNvbXBpbGU6IGZ1bmN0aW9uIGNvbXBpbGUoZW52aXJvbm1lbnQsIG9wdGlvbnMsIGNvbnRleHQsIGFzT2JqZWN0KSB7XG5cdFx0ICAgIHRoaXMuZW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudDtcblx0XHQgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHQgICAgdGhpcy5zdHJpbmdQYXJhbXMgPSB0aGlzLm9wdGlvbnMuc3RyaW5nUGFyYW1zO1xuXHRcdCAgICB0aGlzLnRyYWNrSWRzID0gdGhpcy5vcHRpb25zLnRyYWNrSWRzO1xuXHRcdCAgICB0aGlzLnByZWNvbXBpbGUgPSAhYXNPYmplY3Q7XG5cdFxuXHRcdCAgICB0aGlzLm5hbWUgPSB0aGlzLmVudmlyb25tZW50Lm5hbWU7XG5cdFx0ICAgIHRoaXMuaXNDaGlsZCA9ICEhY29udGV4dDtcblx0XHQgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dCB8fCB7XG5cdFx0ICAgICAgZGVjb3JhdG9yczogW10sXG5cdFx0ICAgICAgcHJvZ3JhbXM6IFtdLFxuXHRcdCAgICAgIGVudmlyb25tZW50czogW11cblx0XHQgICAgfTtcblx0XG5cdFx0ICAgIHRoaXMucHJlYW1ibGUoKTtcblx0XG5cdFx0ICAgIHRoaXMuc3RhY2tTbG90ID0gMDtcblx0XHQgICAgdGhpcy5zdGFja1ZhcnMgPSBbXTtcblx0XHQgICAgdGhpcy5hbGlhc2VzID0ge307XG5cdFx0ICAgIHRoaXMucmVnaXN0ZXJzID0geyBsaXN0OiBbXSB9O1xuXHRcdCAgICB0aGlzLmhhc2hlcyA9IFtdO1xuXHRcdCAgICB0aGlzLmNvbXBpbGVTdGFjayA9IFtdO1xuXHRcdCAgICB0aGlzLmlubGluZVN0YWNrID0gW107XG5cdFx0ICAgIHRoaXMuYmxvY2tQYXJhbXMgPSBbXTtcblx0XG5cdFx0ICAgIHRoaXMuY29tcGlsZUNoaWxkcmVuKGVudmlyb25tZW50LCBvcHRpb25zKTtcblx0XG5cdFx0ICAgIHRoaXMudXNlRGVwdGhzID0gdGhpcy51c2VEZXB0aHMgfHwgZW52aXJvbm1lbnQudXNlRGVwdGhzIHx8IGVudmlyb25tZW50LnVzZURlY29yYXRvcnMgfHwgdGhpcy5vcHRpb25zLmNvbXBhdDtcblx0XHQgICAgdGhpcy51c2VCbG9ja1BhcmFtcyA9IHRoaXMudXNlQmxvY2tQYXJhbXMgfHwgZW52aXJvbm1lbnQudXNlQmxvY2tQYXJhbXM7XG5cdFxuXHRcdCAgICB2YXIgb3Bjb2RlcyA9IGVudmlyb25tZW50Lm9wY29kZXMsXG5cdFx0ICAgICAgICBvcGNvZGUgPSB1bmRlZmluZWQsXG5cdFx0ICAgICAgICBmaXJzdExvYyA9IHVuZGVmaW5lZCxcblx0XHQgICAgICAgIGkgPSB1bmRlZmluZWQsXG5cdFx0ICAgICAgICBsID0gdW5kZWZpbmVkO1xuXHRcblx0XHQgICAgZm9yIChpID0gMCwgbCA9IG9wY29kZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0ICAgICAgb3Bjb2RlID0gb3Bjb2Rlc1tpXTtcblx0XG5cdFx0ICAgICAgdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uID0gb3Bjb2RlLmxvYztcblx0XHQgICAgICBmaXJzdExvYyA9IGZpcnN0TG9jIHx8IG9wY29kZS5sb2M7XG5cdFx0ICAgICAgdGhpc1tvcGNvZGUub3Bjb2RlXS5hcHBseSh0aGlzLCBvcGNvZGUuYXJncyk7XG5cdFx0ICAgIH1cblx0XG5cdFx0ICAgIC8vIEZsdXNoIGFueSB0cmFpbGluZyBjb250ZW50IHRoYXQgbWlnaHQgYmUgcGVuZGluZy5cblx0XHQgICAgdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uID0gZmlyc3RMb2M7XG5cdFx0ICAgIHRoaXMucHVzaFNvdXJjZSgnJyk7XG5cdFxuXHRcdCAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHRcdCAgICBpZiAodGhpcy5zdGFja1Nsb3QgfHwgdGhpcy5pbmxpbmVTdGFjay5sZW5ndGggfHwgdGhpcy5jb21waWxlU3RhY2subGVuZ3RoKSB7XG5cdFx0ICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ0NvbXBpbGUgY29tcGxldGVkIHdpdGggY29udGVudCBsZWZ0IG9uIHN0YWNrJyk7XG5cdFx0ICAgIH1cblx0XG5cdFx0ICAgIGlmICghdGhpcy5kZWNvcmF0b3JzLmlzRW1wdHkoKSkge1xuXHRcdCAgICAgIHRoaXMudXNlRGVjb3JhdG9ycyA9IHRydWU7XG5cdFxuXHRcdCAgICAgIHRoaXMuZGVjb3JhdG9ycy5wcmVwZW5kKCd2YXIgZGVjb3JhdG9ycyA9IGNvbnRhaW5lci5kZWNvcmF0b3JzO1xcbicpO1xuXHRcdCAgICAgIHRoaXMuZGVjb3JhdG9ycy5wdXNoKCdyZXR1cm4gZm47Jyk7XG5cdFxuXHRcdCAgICAgIGlmIChhc09iamVjdCkge1xuXHRcdCAgICAgICAgdGhpcy5kZWNvcmF0b3JzID0gRnVuY3Rpb24uYXBwbHkodGhpcywgWydmbicsICdwcm9wcycsICdjb250YWluZXInLCAnZGVwdGgwJywgJ2RhdGEnLCAnYmxvY2tQYXJhbXMnLCAnZGVwdGhzJywgdGhpcy5kZWNvcmF0b3JzLm1lcmdlKCldKTtcblx0XHQgICAgICB9IGVsc2Uge1xuXHRcdCAgICAgICAgdGhpcy5kZWNvcmF0b3JzLnByZXBlbmQoJ2Z1bmN0aW9uKGZuLCBwcm9wcywgY29udGFpbmVyLCBkZXB0aDAsIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcXG4nKTtcblx0XHQgICAgICAgIHRoaXMuZGVjb3JhdG9ycy5wdXNoKCd9XFxuJyk7XG5cdFx0ICAgICAgICB0aGlzLmRlY29yYXRvcnMgPSB0aGlzLmRlY29yYXRvcnMubWVyZ2UoKTtcblx0XHQgICAgICB9XG5cdFx0ICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgdGhpcy5kZWNvcmF0b3JzID0gdW5kZWZpbmVkO1xuXHRcdCAgICB9XG5cdFxuXHRcdCAgICB2YXIgZm4gPSB0aGlzLmNyZWF0ZUZ1bmN0aW9uQ29udGV4dChhc09iamVjdCk7XG5cdFx0ICAgIGlmICghdGhpcy5pc0NoaWxkKSB7XG5cdFx0ICAgICAgdmFyIHJldCA9IHtcblx0XHQgICAgICAgIGNvbXBpbGVyOiB0aGlzLmNvbXBpbGVySW5mbygpLFxuXHRcdCAgICAgICAgbWFpbjogZm5cblx0XHQgICAgICB9O1xuXHRcblx0XHQgICAgICBpZiAodGhpcy5kZWNvcmF0b3JzKSB7XG5cdFx0ICAgICAgICByZXQubWFpbl9kID0gdGhpcy5kZWNvcmF0b3JzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuXHRcdCAgICAgICAgcmV0LnVzZURlY29yYXRvcnMgPSB0cnVlO1xuXHRcdCAgICAgIH1cblx0XG5cdFx0ICAgICAgdmFyIF9jb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuXHRcdCAgICAgIHZhciBwcm9ncmFtcyA9IF9jb250ZXh0LnByb2dyYW1zO1xuXHRcdCAgICAgIHZhciBkZWNvcmF0b3JzID0gX2NvbnRleHQuZGVjb3JhdG9ycztcblx0XG5cdFx0ICAgICAgZm9yIChpID0gMCwgbCA9IHByb2dyYW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdCAgICAgICAgaWYgKHByb2dyYW1zW2ldKSB7XG5cdFx0ICAgICAgICAgIHJldFtpXSA9IHByb2dyYW1zW2ldO1xuXHRcdCAgICAgICAgICBpZiAoZGVjb3JhdG9yc1tpXSkge1xuXHRcdCAgICAgICAgICAgIHJldFtpICsgJ19kJ10gPSBkZWNvcmF0b3JzW2ldO1xuXHRcdCAgICAgICAgICAgIHJldC51c2VEZWNvcmF0b3JzID0gdHJ1ZTtcblx0XHQgICAgICAgICAgfVxuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgIH1cblx0XG5cdFx0ICAgICAgaWYgKHRoaXMuZW52aXJvbm1lbnQudXNlUGFydGlhbCkge1xuXHRcdCAgICAgICAgcmV0LnVzZVBhcnRpYWwgPSB0cnVlO1xuXHRcdCAgICAgIH1cblx0XHQgICAgICBpZiAodGhpcy5vcHRpb25zLmRhdGEpIHtcblx0XHQgICAgICAgIHJldC51c2VEYXRhID0gdHJ1ZTtcblx0XHQgICAgICB9XG5cdFx0ICAgICAgaWYgKHRoaXMudXNlRGVwdGhzKSB7XG5cdFx0ICAgICAgICByZXQudXNlRGVwdGhzID0gdHJ1ZTtcblx0XHQgICAgICB9XG5cdFx0ICAgICAgaWYgKHRoaXMudXNlQmxvY2tQYXJhbXMpIHtcblx0XHQgICAgICAgIHJldC51c2VCbG9ja1BhcmFtcyA9IHRydWU7XG5cdFx0ICAgICAgfVxuXHRcdCAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcGF0KSB7XG5cdFx0ICAgICAgICByZXQuY29tcGF0ID0gdHJ1ZTtcblx0XHQgICAgICB9XG5cdFxuXHRcdCAgICAgIGlmICghYXNPYmplY3QpIHtcblx0XHQgICAgICAgIHJldC5jb21waWxlciA9IEpTT04uc3RyaW5naWZ5KHJldC5jb21waWxlcik7XG5cdFxuXHRcdCAgICAgICAgdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uID0geyBzdGFydDogeyBsaW5lOiAxLCBjb2x1bW46IDAgfSB9O1xuXHRcdCAgICAgICAgcmV0ID0gdGhpcy5vYmplY3RMaXRlcmFsKHJldCk7XG5cdFxuXHRcdCAgICAgICAgaWYgKG9wdGlvbnMuc3JjTmFtZSkge1xuXHRcdCAgICAgICAgICByZXQgPSByZXQudG9TdHJpbmdXaXRoU291cmNlTWFwKHsgZmlsZTogb3B0aW9ucy5kZXN0TmFtZSB9KTtcblx0XHQgICAgICAgICAgcmV0Lm1hcCA9IHJldC5tYXAgJiYgcmV0Lm1hcC50b1N0cmluZygpO1xuXHRcdCAgICAgICAgfSBlbHNlIHtcblx0XHQgICAgICAgICAgcmV0ID0gcmV0LnRvU3RyaW5nKCk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgfSBlbHNlIHtcblx0XHQgICAgICAgIHJldC5jb21waWxlck9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cdFx0ICAgICAgfVxuXHRcblx0XHQgICAgICByZXR1cm4gcmV0O1xuXHRcdCAgICB9IGVsc2Uge1xuXHRcdCAgICAgIHJldHVybiBmbjtcblx0XHQgICAgfVxuXHRcdCAgfSxcblx0XG5cdFx0ICBwcmVhbWJsZTogZnVuY3Rpb24gcHJlYW1ibGUoKSB7XG5cdFx0ICAgIC8vIHRyYWNrIHRoZSBsYXN0IGNvbnRleHQgcHVzaGVkIGludG8gcGxhY2UgdG8gYWxsb3cgc2tpcHBpbmcgdGhlXG5cdFx0ICAgIC8vIGdldENvbnRleHQgb3Bjb2RlIHdoZW4gaXQgd291bGQgYmUgYSBub29wXG5cdFx0ICAgIHRoaXMubGFzdENvbnRleHQgPSAwO1xuXHRcdCAgICB0aGlzLnNvdXJjZSA9IG5ldyBfY29kZUdlbjJbJ2RlZmF1bHQnXSh0aGlzLm9wdGlvbnMuc3JjTmFtZSk7XG5cdFx0ICAgIHRoaXMuZGVjb3JhdG9ycyA9IG5ldyBfY29kZUdlbjJbJ2RlZmF1bHQnXSh0aGlzLm9wdGlvbnMuc3JjTmFtZSk7XG5cdFx0ICB9LFxuXHRcblx0XHQgIGNyZWF0ZUZ1bmN0aW9uQ29udGV4dDogZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb25Db250ZXh0KGFzT2JqZWN0KSB7XG5cdFx0ICAgIHZhciB2YXJEZWNsYXJhdGlvbnMgPSAnJztcblx0XG5cdFx0ICAgIHZhciBsb2NhbHMgPSB0aGlzLnN0YWNrVmFycy5jb25jYXQodGhpcy5yZWdpc3RlcnMubGlzdCk7XG5cdFx0ICAgIGlmIChsb2NhbHMubGVuZ3RoID4gMCkge1xuXHRcdCAgICAgIHZhckRlY2xhcmF0aW9ucyArPSAnLCAnICsgbG9jYWxzLmpvaW4oJywgJyk7XG5cdFx0ICAgIH1cblx0XG5cdFx0ICAgIC8vIEdlbmVyYXRlIG1pbmltaXplciBhbGlhcyBtYXBwaW5nc1xuXHRcdCAgICAvL1xuXHRcdCAgICAvLyBXaGVuIHVzaW5nIHRydWUgU291cmNlTm9kZXMsIHRoaXMgd2lsbCB1cGRhdGUgYWxsIHJlZmVyZW5jZXMgdG8gdGhlIGdpdmVuIGFsaWFzXG5cdFx0ICAgIC8vIGFzIHRoZSBzb3VyY2Ugbm9kZXMgYXJlIHJldXNlZCBpbiBzaXR1LiBGb3IgdGhlIG5vbi1zb3VyY2Ugbm9kZSBjb21waWxhdGlvbiBtb2RlLFxuXHRcdCAgICAvLyBhbGlhc2VzIHdpbGwgbm90IGJlIHVzZWQsIGJ1dCB0aGlzIGNhc2UgaXMgYWxyZWFkeSBiZWluZyBydW4gb24gdGhlIGNsaWVudCBhbmRcblx0XHQgICAgLy8gd2UgYXJlbid0IGNvbmNlcm4gYWJvdXQgbWluaW1pemluZyB0aGUgdGVtcGxhdGUgc2l6ZS5cblx0XHQgICAgdmFyIGFsaWFzQ291bnQgPSAwO1xuXHRcdCAgICBmb3IgKHZhciBhbGlhcyBpbiB0aGlzLmFsaWFzZXMpIHtcblx0XHQgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGd1YXJkLWZvci1pblxuXHRcdCAgICAgIHZhciBub2RlID0gdGhpcy5hbGlhc2VzW2FsaWFzXTtcblx0XG5cdFx0ICAgICAgaWYgKHRoaXMuYWxpYXNlcy5oYXNPd25Qcm9wZXJ0eShhbGlhcykgJiYgbm9kZS5jaGlsZHJlbiAmJiBub2RlLnJlZmVyZW5jZUNvdW50ID4gMSkge1xuXHRcdCAgICAgICAgdmFyRGVjbGFyYXRpb25zICs9ICcsIGFsaWFzJyArICsrYWxpYXNDb3VudCArICc9JyArIGFsaWFzO1xuXHRcdCAgICAgICAgbm9kZS5jaGlsZHJlblswXSA9ICdhbGlhcycgKyBhbGlhc0NvdW50O1xuXHRcdCAgICAgIH1cblx0XHQgICAgfVxuXHRcblx0XHQgICAgdmFyIHBhcmFtcyA9IFsnY29udGFpbmVyJywgJ2RlcHRoMCcsICdoZWxwZXJzJywgJ3BhcnRpYWxzJywgJ2RhdGEnXTtcblx0XG5cdFx0ICAgIGlmICh0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IHRoaXMudXNlRGVwdGhzKSB7XG5cdFx0ICAgICAgcGFyYW1zLnB1c2goJ2Jsb2NrUGFyYW1zJyk7XG5cdFx0ICAgIH1cblx0XHQgICAgaWYgKHRoaXMudXNlRGVwdGhzKSB7XG5cdFx0ICAgICAgcGFyYW1zLnB1c2goJ2RlcHRocycpO1xuXHRcdCAgICB9XG5cdFxuXHRcdCAgICAvLyBQZXJmb3JtIGEgc2Vjb25kIHBhc3Mgb3ZlciB0aGUgb3V0cHV0IHRvIG1lcmdlIGNvbnRlbnQgd2hlbiBwb3NzaWJsZVxuXHRcdCAgICB2YXIgc291cmNlID0gdGhpcy5tZXJnZVNvdXJjZSh2YXJEZWNsYXJhdGlvbnMpO1xuXHRcblx0XHQgICAgaWYgKGFzT2JqZWN0KSB7XG5cdFx0ICAgICAgcGFyYW1zLnB1c2goc291cmNlKTtcblx0XG5cdFx0ICAgICAgcmV0dXJuIEZ1bmN0aW9uLmFwcGx5KHRoaXMsIHBhcmFtcyk7XG5cdFx0ICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgcmV0dXJuIHRoaXMuc291cmNlLndyYXAoWydmdW5jdGlvbignLCBwYXJhbXMuam9pbignLCcpLCAnKSB7XFxuICAnLCBzb3VyY2UsICd9J10pO1xuXHRcdCAgICB9XG5cdFx0ICB9LFxuXHRcdCAgbWVyZ2VTb3VyY2U6IGZ1bmN0aW9uIG1lcmdlU291cmNlKHZhckRlY2xhcmF0aW9ucykge1xuXHRcdCAgICB2YXIgaXNTaW1wbGUgPSB0aGlzLmVudmlyb25tZW50LmlzU2ltcGxlLFxuXHRcdCAgICAgICAgYXBwZW5kT25seSA9ICF0aGlzLmZvcmNlQnVmZmVyLFxuXHRcdCAgICAgICAgYXBwZW5kRmlyc3QgPSB1bmRlZmluZWQsXG5cdFx0ICAgICAgICBzb3VyY2VTZWVuID0gdW5kZWZpbmVkLFxuXHRcdCAgICAgICAgYnVmZmVyU3RhcnQgPSB1bmRlZmluZWQsXG5cdFx0ICAgICAgICBidWZmZXJFbmQgPSB1bmRlZmluZWQ7XG5cdFx0ICAgIHRoaXMuc291cmNlLmVhY2goZnVuY3Rpb24gKGxpbmUpIHtcblx0XHQgICAgICBpZiAobGluZS5hcHBlbmRUb0J1ZmZlcikge1xuXHRcdCAgICAgICAgaWYgKGJ1ZmZlclN0YXJ0KSB7XG5cdFx0ICAgICAgICAgIGxpbmUucHJlcGVuZCgnICArICcpO1xuXHRcdCAgICAgICAgfSBlbHNlIHtcblx0XHQgICAgICAgICAgYnVmZmVyU3RhcnQgPSBsaW5lO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgYnVmZmVyRW5kID0gbGluZTtcblx0XHQgICAgICB9IGVsc2Uge1xuXHRcdCAgICAgICAgaWYgKGJ1ZmZlclN0YXJ0KSB7XG5cdFx0ICAgICAgICAgIGlmICghc291cmNlU2Vlbikge1xuXHRcdCAgICAgICAgICAgIGFwcGVuZEZpcnN0ID0gdHJ1ZTtcblx0XHQgICAgICAgICAgfSBlbHNlIHtcblx0XHQgICAgICAgICAgICBidWZmZXJTdGFydC5wcmVwZW5kKCdidWZmZXIgKz0gJyk7XG5cdFx0ICAgICAgICAgIH1cblx0XHQgICAgICAgICAgYnVmZmVyRW5kLmFkZCgnOycpO1xuXHRcdCAgICAgICAgICBidWZmZXJTdGFydCA9IGJ1ZmZlckVuZCA9IHVuZGVmaW5lZDtcblx0XHQgICAgICAgIH1cblx0XG5cdFx0ICAgICAgICBzb3VyY2VTZWVuID0gdHJ1ZTtcblx0XHQgICAgICAgIGlmICghaXNTaW1wbGUpIHtcblx0XHQgICAgICAgICAgYXBwZW5kT25seSA9IGZhbHNlO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgIH1cblx0XHQgICAgfSk7XG5cdFxuXHRcdCAgICBpZiAoYXBwZW5kT25seSkge1xuXHRcdCAgICAgIGlmIChidWZmZXJTdGFydCkge1xuXHRcdCAgICAgICAgYnVmZmVyU3RhcnQucHJlcGVuZCgncmV0dXJuICcpO1xuXHRcdCAgICAgICAgYnVmZmVyRW5kLmFkZCgnOycpO1xuXHRcdCAgICAgIH0gZWxzZSBpZiAoIXNvdXJjZVNlZW4pIHtcblx0XHQgICAgICAgIHRoaXMuc291cmNlLnB1c2goJ3JldHVybiBcIlwiOycpO1xuXHRcdCAgICAgIH1cblx0XHQgICAgfSBlbHNlIHtcblx0XHQgICAgICB2YXJEZWNsYXJhdGlvbnMgKz0gJywgYnVmZmVyID0gJyArIChhcHBlbmRGaXJzdCA/ICcnIDogdGhpcy5pbml0aWFsaXplQnVmZmVyKCkpO1xuXHRcblx0XHQgICAgICBpZiAoYnVmZmVyU3RhcnQpIHtcblx0XHQgICAgICAgIGJ1ZmZlclN0YXJ0LnByZXBlbmQoJ3JldHVybiBidWZmZXIgKyAnKTtcblx0XHQgICAgICAgIGJ1ZmZlckVuZC5hZGQoJzsnKTtcblx0XHQgICAgICB9IGVsc2Uge1xuXHRcdCAgICAgICAgdGhpcy5zb3VyY2UucHVzaCgncmV0dXJuIGJ1ZmZlcjsnKTtcblx0XHQgICAgICB9XG5cdFx0ICAgIH1cblx0XG5cdFx0ICAgIGlmICh2YXJEZWNsYXJhdGlvbnMpIHtcblx0XHQgICAgICB0aGlzLnNvdXJjZS5wcmVwZW5kKCd2YXIgJyArIHZhckRlY2xhcmF0aW9ucy5zdWJzdHJpbmcoMikgKyAoYXBwZW5kRmlyc3QgPyAnJyA6ICc7XFxuJykpO1xuXHRcdCAgICB9XG5cdFxuXHRcdCAgICByZXR1cm4gdGhpcy5zb3VyY2UubWVyZ2UoKTtcblx0XHQgIH0sXG5cdFxuXHRcdCAgLy8gW2Jsb2NrVmFsdWVdXG5cdFx0ICAvL1xuXHRcdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgdmFsdWVcblx0XHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogcmV0dXJuIHZhbHVlIG9mIGJsb2NrSGVscGVyTWlzc2luZ1xuXHRcdCAgLy9cblx0XHQgIC8vIFRoZSBwdXJwb3NlIG9mIHRoaXMgb3Bjb2RlIGlzIHRvIHRha2UgYSBibG9jayBvZiB0aGUgZm9ybVxuXHRcdCAgLy8gYHt7I3RoaXMuZm9vfX0uLi57ey90aGlzLmZvb319YCwgcmVzb2x2ZSB0aGUgdmFsdWUgb2YgYGZvb2AsIGFuZFxuXHRcdCAgLy8gcmVwbGFjZSBpdCBvbiB0aGUgc3RhY2sgd2l0aCB0aGUgcmVzdWx0IG9mIHByb3Blcmx5XG5cdFx0ICAvLyBpbnZva2luZyBibG9ja0hlbHBlck1pc3NpbmcuXG5cdFx0ICBibG9ja1ZhbHVlOiBmdW5jdGlvbiBibG9ja1ZhbHVlKG5hbWUpIHtcblx0XHQgICAgdmFyIGJsb2NrSGVscGVyTWlzc2luZyA9IHRoaXMuYWxpYXNhYmxlKCdoZWxwZXJzLmJsb2NrSGVscGVyTWlzc2luZycpLFxuXHRcdCAgICAgICAgcGFyYW1zID0gW3RoaXMuY29udGV4dE5hbWUoMCldO1xuXHRcdCAgICB0aGlzLnNldHVwSGVscGVyQXJncyhuYW1lLCAwLCBwYXJhbXMpO1xuXHRcblx0XHQgICAgdmFyIGJsb2NrTmFtZSA9IHRoaXMucG9wU3RhY2soKTtcblx0XHQgICAgcGFyYW1zLnNwbGljZSgxLCAwLCBibG9ja05hbWUpO1xuXHRcblx0XHQgICAgdGhpcy5wdXNoKHRoaXMuc291cmNlLmZ1bmN0aW9uQ2FsbChibG9ja0hlbHBlck1pc3NpbmcsICdjYWxsJywgcGFyYW1zKSk7XG5cdFx0ICB9LFxuXHRcblx0XHQgIC8vIFthbWJpZ3VvdXNCbG9ja1ZhbHVlXVxuXHRcdCAgLy9cblx0XHQgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IGhhc2gsIGludmVyc2UsIHByb2dyYW0sIHZhbHVlXG5cdFx0ICAvLyBDb21waWxlciB2YWx1ZSwgYmVmb3JlOiBsYXN0SGVscGVyPXZhbHVlIG9mIGxhc3QgZm91bmQgaGVscGVyLCBpZiBhbnlcblx0XHQgIC8vIE9uIHN0YWNrLCBhZnRlciwgaWYgbm8gbGFzdEhlbHBlcjogc2FtZSBhcyBbYmxvY2tWYWx1ZV1cblx0XHQgIC8vIE9uIHN0YWNrLCBhZnRlciwgaWYgbGFzdEhlbHBlcjogdmFsdWVcblx0XHQgIGFtYmlndW91c0Jsb2NrVmFsdWU6IGZ1bmN0aW9uIGFtYmlndW91c0Jsb2NrVmFsdWUoKSB7XG5cdFx0ICAgIC8vIFdlJ3JlIGJlaW5nIGEgYml0IGNoZWVreSBhbmQgcmV1c2luZyB0aGUgb3B0aW9ucyB2YWx1ZSBmcm9tIHRoZSBwcmlvciBleGVjXG5cdFx0ICAgIHZhciBibG9ja0hlbHBlck1pc3NpbmcgPSB0aGlzLmFsaWFzYWJsZSgnaGVscGVycy5ibG9ja0hlbHBlck1pc3NpbmcnKSxcblx0XHQgICAgICAgIHBhcmFtcyA9IFt0aGlzLmNvbnRleHROYW1lKDApXTtcblx0XHQgICAgdGhpcy5zZXR1cEhlbHBlckFyZ3MoJycsIDAsIHBhcmFtcywgdHJ1ZSk7XG5cdFxuXHRcdCAgICB0aGlzLmZsdXNoSW5saW5lKCk7XG5cdFxuXHRcdCAgICB2YXIgY3VycmVudCA9IHRoaXMudG9wU3RhY2soKTtcblx0XHQgICAgcGFyYW1zLnNwbGljZSgxLCAwLCBjdXJyZW50KTtcblx0XG5cdFx0ICAgIHRoaXMucHVzaFNvdXJjZShbJ2lmICghJywgdGhpcy5sYXN0SGVscGVyLCAnKSB7ICcsIGN1cnJlbnQsICcgPSAnLCB0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoYmxvY2tIZWxwZXJNaXNzaW5nLCAnY2FsbCcsIHBhcmFtcyksICd9J10pO1xuXHRcdCAgfSxcblx0XG5cdFx0ICAvLyBbYXBwZW5kQ29udGVudF1cblx0XHQgIC8vXG5cdFx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cblx0XHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uXG5cdFx0ICAvL1xuXHRcdCAgLy8gQXBwZW5kcyB0aGUgc3RyaW5nIHZhbHVlIG9mIGBjb250ZW50YCB0byB0aGUgY3VycmVudCBidWZmZXJcblx0XHQgIGFwcGVuZENvbnRlbnQ6IGZ1bmN0aW9uIGFwcGVuZENvbnRlbnQoY29udGVudCkge1xuXHRcdCAgICBpZiAodGhpcy5wZW5kaW5nQ29udGVudCkge1xuXHRcdCAgICAgIGNvbnRlbnQgPSB0aGlzLnBlbmRpbmdDb250ZW50ICsgY29udGVudDtcblx0XHQgICAgfSBlbHNlIHtcblx0XHQgICAgICB0aGlzLnBlbmRpbmdMb2NhdGlvbiA9IHRoaXMuc291cmNlLmN1cnJlbnRMb2NhdGlvbjtcblx0XHQgICAgfVxuXHRcblx0XHQgICAgdGhpcy5wZW5kaW5nQ29udGVudCA9IGNvbnRlbnQ7XG5cdFx0ICB9LFxuXHRcblx0XHQgIC8vIFthcHBlbmRdXG5cdFx0ICAvL1xuXHRcdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogdmFsdWUsIC4uLlxuXHRcdCAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cblx0XHQgIC8vXG5cdFx0ICAvLyBDb2VyY2VzIGB2YWx1ZWAgdG8gYSBTdHJpbmcgYW5kIGFwcGVuZHMgaXQgdG8gdGhlIGN1cnJlbnQgYnVmZmVyLlxuXHRcdCAgLy9cblx0XHQgIC8vIElmIGB2YWx1ZWAgaXMgdHJ1dGh5LCBvciAwLCBpdCBpcyBjb2VyY2VkIGludG8gYSBzdHJpbmcgYW5kIGFwcGVuZGVkXG5cdFx0ICAvLyBPdGhlcndpc2UsIHRoZSBlbXB0eSBzdHJpbmcgaXMgYXBwZW5kZWRcblx0XHQgIGFwcGVuZDogZnVuY3Rpb24gYXBwZW5kKCkge1xuXHRcdCAgICBpZiAodGhpcy5pc0lubGluZSgpKSB7XG5cdFx0ICAgICAgdGhpcy5yZXBsYWNlU3RhY2soZnVuY3Rpb24gKGN1cnJlbnQpIHtcblx0XHQgICAgICAgIHJldHVybiBbJyAhPSBudWxsID8gJywgY3VycmVudCwgJyA6IFwiXCInXTtcblx0XHQgICAgICB9KTtcblx0XG5cdFx0ICAgICAgdGhpcy5wdXNoU291cmNlKHRoaXMuYXBwZW5kVG9CdWZmZXIodGhpcy5wb3BTdGFjaygpKSk7XG5cdFx0ICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgdmFyIGxvY2FsID0gdGhpcy5wb3BTdGFjaygpO1xuXHRcdCAgICAgIHRoaXMucHVzaFNvdXJjZShbJ2lmICgnLCBsb2NhbCwgJyAhPSBudWxsKSB7ICcsIHRoaXMuYXBwZW5kVG9CdWZmZXIobG9jYWwsIHVuZGVmaW5lZCwgdHJ1ZSksICcgfSddKTtcblx0XHQgICAgICBpZiAodGhpcy5lbnZpcm9ubWVudC5pc1NpbXBsZSkge1xuXHRcdCAgICAgICAgdGhpcy5wdXNoU291cmNlKFsnZWxzZSB7ICcsIHRoaXMuYXBwZW5kVG9CdWZmZXIoXCInJ1wiLCB1bmRlZmluZWQsIHRydWUpLCAnIH0nXSk7XG5cdFx0ICAgICAgfVxuXHRcdCAgICB9XG5cdFx0ICB9LFxuXHRcblx0XHQgIC8vIFthcHBlbmRFc2NhcGVkXVxuXHRcdCAgLy9cblx0XHQgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IHZhbHVlLCAuLi5cblx0XHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uXG5cdFx0ICAvL1xuXHRcdCAgLy8gRXNjYXBlIGB2YWx1ZWAgYW5kIGFwcGVuZCBpdCB0byB0aGUgYnVmZmVyXG5cdFx0ICBhcHBlbmRFc2NhcGVkOiBmdW5jdGlvbiBhcHBlbmRFc2NhcGVkKCkge1xuXHRcdCAgICB0aGlzLnB1c2hTb3VyY2UodGhpcy5hcHBlbmRUb0J1ZmZlcihbdGhpcy5hbGlhc2FibGUoJ2NvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uJyksICcoJywgdGhpcy5wb3BTdGFjaygpLCAnKSddKSk7XG5cdFx0ICB9LFxuXHRcblx0XHQgIC8vIFtnZXRDb250ZXh0XVxuXHRcdCAgLy9cblx0XHQgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuXHRcdCAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cblx0XHQgIC8vIENvbXBpbGVyIHZhbHVlLCBhZnRlcjogbGFzdENvbnRleHQ9ZGVwdGhcblx0XHQgIC8vXG5cdFx0ICAvLyBTZXQgdGhlIHZhbHVlIG9mIHRoZSBgbGFzdENvbnRleHRgIGNvbXBpbGVyIHZhbHVlIHRvIHRoZSBkZXB0aFxuXHRcdCAgZ2V0Q29udGV4dDogZnVuY3Rpb24gZ2V0Q29udGV4dChkZXB0aCkge1xuXHRcdCAgICB0aGlzLmxhc3RDb250ZXh0ID0gZGVwdGg7XG5cdFx0ICB9LFxuXHRcblx0XHQgIC8vIFtwdXNoQ29udGV4dF1cblx0XHQgIC8vXG5cdFx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cblx0XHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogY3VycmVudENvbnRleHQsIC4uLlxuXHRcdCAgLy9cblx0XHQgIC8vIFB1c2hlcyB0aGUgdmFsdWUgb2YgdGhlIGN1cnJlbnQgY29udGV4dCBvbnRvIHRoZSBzdGFjay5cblx0XHQgIHB1c2hDb250ZXh0OiBmdW5jdGlvbiBwdXNoQ29udGV4dCgpIHtcblx0XHQgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKHRoaXMuY29udGV4dE5hbWUodGhpcy5sYXN0Q29udGV4dCkpO1xuXHRcdCAgfSxcblx0XG5cdFx0ICAvLyBbbG9va3VwT25Db250ZXh0XVxuXHRcdCAgLy9cblx0XHQgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuXHRcdCAgLy8gT24gc3RhY2ssIGFmdGVyOiBjdXJyZW50Q29udGV4dFtuYW1lXSwgLi4uXG5cdFx0ICAvL1xuXHRcdCAgLy8gTG9va3MgdXAgdGhlIHZhbHVlIG9mIGBuYW1lYCBvbiB0aGUgY3VycmVudCBjb250ZXh0IGFuZCBwdXNoZXNcblx0XHQgIC8vIGl0IG9udG8gdGhlIHN0YWNrLlxuXHRcdCAgbG9va3VwT25Db250ZXh0OiBmdW5jdGlvbiBsb29rdXBPbkNvbnRleHQocGFydHMsIGZhbHN5LCBzdHJpY3QsIHNjb3BlZCkge1xuXHRcdCAgICB2YXIgaSA9IDA7XG5cdFxuXHRcdCAgICBpZiAoIXNjb3BlZCAmJiB0aGlzLm9wdGlvbnMuY29tcGF0ICYmICF0aGlzLmxhc3RDb250ZXh0KSB7XG5cdFx0ICAgICAgLy8gVGhlIGRlcHRoZWQgcXVlcnkgaXMgZXhwZWN0ZWQgdG8gaGFuZGxlIHRoZSB1bmRlZmluZWQgbG9naWMgZm9yIHRoZSByb290IGxldmVsIHRoYXRcblx0XHQgICAgICAvLyBpcyBpbXBsZW1lbnRlZCBiZWxvdywgc28gd2UgZXZhbHVhdGUgdGhhdCBkaXJlY3RseSBpbiBjb21wYXQgbW9kZVxuXHRcdCAgICAgIHRoaXMucHVzaCh0aGlzLmRlcHRoZWRMb29rdXAocGFydHNbaSsrXSkpO1xuXHRcdCAgICB9IGVsc2Uge1xuXHRcdCAgICAgIHRoaXMucHVzaENvbnRleHQoKTtcblx0XHQgICAgfVxuXHRcblx0XHQgICAgdGhpcy5yZXNvbHZlUGF0aCgnY29udGV4dCcsIHBhcnRzLCBpLCBmYWxzeSwgc3RyaWN0KTtcblx0XHQgIH0sXG5cdFxuXHRcdCAgLy8gW2xvb2t1cEJsb2NrUGFyYW1dXG5cdFx0ICAvL1xuXHRcdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG5cdFx0ICAvLyBPbiBzdGFjaywgYWZ0ZXI6IGJsb2NrUGFyYW1bbmFtZV0sIC4uLlxuXHRcdCAgLy9cblx0XHQgIC8vIExvb2tzIHVwIHRoZSB2YWx1ZSBvZiBgcGFydHNgIG9uIHRoZSBnaXZlbiBibG9jayBwYXJhbSBhbmQgcHVzaGVzXG5cdFx0ICAvLyBpdCBvbnRvIHRoZSBzdGFjay5cblx0XHQgIGxvb2t1cEJsb2NrUGFyYW06IGZ1bmN0aW9uIGxvb2t1cEJsb2NrUGFyYW0oYmxvY2tQYXJhbUlkLCBwYXJ0cykge1xuXHRcdCAgICB0aGlzLnVzZUJsb2NrUGFyYW1zID0gdHJ1ZTtcblx0XG5cdFx0ICAgIHRoaXMucHVzaChbJ2Jsb2NrUGFyYW1zWycsIGJsb2NrUGFyYW1JZFswXSwgJ11bJywgYmxvY2tQYXJhbUlkWzFdLCAnXSddKTtcblx0XHQgICAgdGhpcy5yZXNvbHZlUGF0aCgnY29udGV4dCcsIHBhcnRzLCAxKTtcblx0XHQgIH0sXG5cdFxuXHRcdCAgLy8gW2xvb2t1cERhdGFdXG5cdFx0ICAvL1xuXHRcdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG5cdFx0ICAvLyBPbiBzdGFjaywgYWZ0ZXI6IGRhdGEsIC4uLlxuXHRcdCAgLy9cblx0XHQgIC8vIFB1c2ggdGhlIGRhdGEgbG9va3VwIG9wZXJhdG9yXG5cdFx0ICBsb29rdXBEYXRhOiBmdW5jdGlvbiBsb29rdXBEYXRhKGRlcHRoLCBwYXJ0cywgc3RyaWN0KSB7XG5cdFx0ICAgIGlmICghZGVwdGgpIHtcblx0XHQgICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoJ2RhdGEnKTtcblx0XHQgICAgfSBlbHNlIHtcblx0XHQgICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoJ2NvbnRhaW5lci5kYXRhKGRhdGEsICcgKyBkZXB0aCArICcpJyk7XG5cdFx0ICAgIH1cblx0XG5cdFx0ICAgIHRoaXMucmVzb2x2ZVBhdGgoJ2RhdGEnLCBwYXJ0cywgMCwgdHJ1ZSwgc3RyaWN0KTtcblx0XHQgIH0sXG5cdFxuXHRcdCAgcmVzb2x2ZVBhdGg6IGZ1bmN0aW9uIHJlc29sdmVQYXRoKHR5cGUsIHBhcnRzLCBpLCBmYWxzeSwgc3RyaWN0KSB7XG5cdFx0ICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cdFxuXHRcdCAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXHRcblx0XHQgICAgaWYgKHRoaXMub3B0aW9ucy5zdHJpY3QgfHwgdGhpcy5vcHRpb25zLmFzc3VtZU9iamVjdHMpIHtcblx0XHQgICAgICB0aGlzLnB1c2goc3RyaWN0TG9va3VwKHRoaXMub3B0aW9ucy5zdHJpY3QgJiYgc3RyaWN0LCB0aGlzLCBwYXJ0cywgdHlwZSkpO1xuXHRcdCAgICAgIHJldHVybjtcblx0XHQgICAgfVxuXHRcblx0XHQgICAgdmFyIGxlbiA9IHBhcnRzLmxlbmd0aDtcblx0XHQgICAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuXHRcdCAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXHRcdCAgICAgIHRoaXMucmVwbGFjZVN0YWNrKGZ1bmN0aW9uIChjdXJyZW50KSB7XG5cdFx0ICAgICAgICB2YXIgbG9va3VwID0gX3RoaXMubmFtZUxvb2t1cChjdXJyZW50LCBwYXJ0c1tpXSwgdHlwZSk7XG5cdFx0ICAgICAgICAvLyBXZSB3YW50IHRvIGVuc3VyZSB0aGF0IHplcm8gYW5kIGZhbHNlIGFyZSBoYW5kbGVkIHByb3Blcmx5IGlmIHRoZSBjb250ZXh0IChmYWxzeSBmbGFnKVxuXHRcdCAgICAgICAgLy8gbmVlZHMgdG8gaGF2ZSB0aGUgc3BlY2lhbCBoYW5kbGluZyBmb3IgdGhlc2UgdmFsdWVzLlxuXHRcdCAgICAgICAgaWYgKCFmYWxzeSkge1xuXHRcdCAgICAgICAgICByZXR1cm4gWycgIT0gbnVsbCA/ICcsIGxvb2t1cCwgJyA6ICcsIGN1cnJlbnRdO1xuXHRcdCAgICAgICAgfSBlbHNlIHtcblx0XHQgICAgICAgICAgLy8gT3RoZXJ3aXNlIHdlIGNhbiB1c2UgZ2VuZXJpYyBmYWxzeSBoYW5kbGluZ1xuXHRcdCAgICAgICAgICByZXR1cm4gWycgJiYgJywgbG9va3VwXTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICB9KTtcblx0XHQgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXHRcdCAgICB9XG5cdFx0ICB9LFxuXHRcblx0XHQgIC8vIFtyZXNvbHZlUG9zc2libGVMYW1iZGFdXG5cdFx0ICAvL1xuXHRcdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogdmFsdWUsIC4uLlxuXHRcdCAgLy8gT24gc3RhY2ssIGFmdGVyOiByZXNvbHZlZCB2YWx1ZSwgLi4uXG5cdFx0ICAvL1xuXHRcdCAgLy8gSWYgdGhlIGB2YWx1ZWAgaXMgYSBsYW1iZGEsIHJlcGxhY2UgaXQgb24gdGhlIHN0YWNrIGJ5XG5cdFx0ICAvLyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBsYW1iZGFcblx0XHQgIHJlc29sdmVQb3NzaWJsZUxhbWJkYTogZnVuY3Rpb24gcmVzb2x2ZVBvc3NpYmxlTGFtYmRhKCkge1xuXHRcdCAgICB0aGlzLnB1c2goW3RoaXMuYWxpYXNhYmxlKCdjb250YWluZXIubGFtYmRhJyksICcoJywgdGhpcy5wb3BTdGFjaygpLCAnLCAnLCB0aGlzLmNvbnRleHROYW1lKDApLCAnKSddKTtcblx0XHQgIH0sXG5cdFxuXHRcdCAgLy8gW3B1c2hTdHJpbmdQYXJhbV1cblx0XHQgIC8vXG5cdFx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cblx0XHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogc3RyaW5nLCBjdXJyZW50Q29udGV4dCwgLi4uXG5cdFx0ICAvL1xuXHRcdCAgLy8gVGhpcyBvcGNvZGUgaXMgZGVzaWduZWQgZm9yIHVzZSBpbiBzdHJpbmcgbW9kZSwgd2hpY2hcblx0XHQgIC8vIHByb3ZpZGVzIHRoZSBzdHJpbmcgdmFsdWUgb2YgYSBwYXJhbWV0ZXIgYWxvbmcgd2l0aCBpdHNcblx0XHQgIC8vIGRlcHRoIHJhdGhlciB0aGFuIHJlc29sdmluZyBpdCBpbW1lZGlhdGVseS5cblx0XHQgIHB1c2hTdHJpbmdQYXJhbTogZnVuY3Rpb24gcHVzaFN0cmluZ1BhcmFtKHN0cmluZywgdHlwZSkge1xuXHRcdCAgICB0aGlzLnB1c2hDb250ZXh0KCk7XG5cdFx0ICAgIHRoaXMucHVzaFN0cmluZyh0eXBlKTtcblx0XG5cdFx0ICAgIC8vIElmIGl0J3MgYSBzdWJleHByZXNzaW9uLCB0aGUgc3RyaW5nIHJlc3VsdFxuXHRcdCAgICAvLyB3aWxsIGJlIHB1c2hlZCBhZnRlciB0aGlzIG9wY29kZS5cblx0XHQgICAgaWYgKHR5cGUgIT09ICdTdWJFeHByZXNzaW9uJykge1xuXHRcdCAgICAgIGlmICh0eXBlb2Ygc3RyaW5nID09PSAnc3RyaW5nJykge1xuXHRcdCAgICAgICAgdGhpcy5wdXNoU3RyaW5nKHN0cmluZyk7XG5cdFx0ICAgICAgfSBlbHNlIHtcblx0XHQgICAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbChzdHJpbmcpO1xuXHRcdCAgICAgIH1cblx0XHQgICAgfVxuXHRcdCAgfSxcblx0XG5cdFx0ICBlbXB0eUhhc2g6IGZ1bmN0aW9uIGVtcHR5SGFzaChvbWl0RW1wdHkpIHtcblx0XHQgICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcblx0XHQgICAgICB0aGlzLnB1c2goJ3t9Jyk7IC8vIGhhc2hJZHNcblx0XHQgICAgfVxuXHRcdCAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcblx0XHQgICAgICB0aGlzLnB1c2goJ3t9Jyk7IC8vIGhhc2hDb250ZXh0c1xuXHRcdCAgICAgIHRoaXMucHVzaCgne30nKTsgLy8gaGFzaFR5cGVzXG5cdFx0ICAgIH1cblx0XHQgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKG9taXRFbXB0eSA/ICd1bmRlZmluZWQnIDogJ3t9Jyk7XG5cdFx0ICB9LFxuXHRcdCAgcHVzaEhhc2g6IGZ1bmN0aW9uIHB1c2hIYXNoKCkge1xuXHRcdCAgICBpZiAodGhpcy5oYXNoKSB7XG5cdFx0ICAgICAgdGhpcy5oYXNoZXMucHVzaCh0aGlzLmhhc2gpO1xuXHRcdCAgICB9XG5cdFx0ICAgIHRoaXMuaGFzaCA9IHsgdmFsdWVzOiBbXSwgdHlwZXM6IFtdLCBjb250ZXh0czogW10sIGlkczogW10gfTtcblx0XHQgIH0sXG5cdFx0ICBwb3BIYXNoOiBmdW5jdGlvbiBwb3BIYXNoKCkge1xuXHRcdCAgICB2YXIgaGFzaCA9IHRoaXMuaGFzaDtcblx0XHQgICAgdGhpcy5oYXNoID0gdGhpcy5oYXNoZXMucG9wKCk7XG5cdFxuXHRcdCAgICBpZiAodGhpcy50cmFja0lkcykge1xuXHRcdCAgICAgIHRoaXMucHVzaCh0aGlzLm9iamVjdExpdGVyYWwoaGFzaC5pZHMpKTtcblx0XHQgICAgfVxuXHRcdCAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcblx0XHQgICAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2guY29udGV4dHMpKTtcblx0XHQgICAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2gudHlwZXMpKTtcblx0XHQgICAgfVxuXHRcblx0XHQgICAgdGhpcy5wdXNoKHRoaXMub2JqZWN0TGl0ZXJhbChoYXNoLnZhbHVlcykpO1xuXHRcdCAgfSxcblx0XG5cdFx0ICAvLyBbcHVzaFN0cmluZ11cblx0XHQgIC8vXG5cdFx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cblx0XHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogcXVvdGVkU3RyaW5nKHN0cmluZyksIC4uLlxuXHRcdCAgLy9cblx0XHQgIC8vIFB1c2ggYSBxdW90ZWQgdmVyc2lvbiBvZiBgc3RyaW5nYCBvbnRvIHRoZSBzdGFja1xuXHRcdCAgcHVzaFN0cmluZzogZnVuY3Rpb24gcHVzaFN0cmluZyhzdHJpbmcpIHtcblx0XHQgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKHRoaXMucXVvdGVkU3RyaW5nKHN0cmluZykpO1xuXHRcdCAgfSxcblx0XG5cdFx0ICAvLyBbcHVzaExpdGVyYWxdXG5cdFx0ICAvL1xuXHRcdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG5cdFx0ICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHZhbHVlLCAuLi5cblx0XHQgIC8vXG5cdFx0ICAvLyBQdXNoZXMgYSB2YWx1ZSBvbnRvIHRoZSBzdGFjay4gVGhpcyBvcGVyYXRpb24gcHJldmVudHNcblx0XHQgIC8vIHRoZSBjb21waWxlciBmcm9tIGNyZWF0aW5nIGEgdGVtcG9yYXJ5IHZhcmlhYmxlIHRvIGhvbGRcblx0XHQgIC8vIGl0LlxuXHRcdCAgcHVzaExpdGVyYWw6IGZ1bmN0aW9uIHB1c2hMaXRlcmFsKHZhbHVlKSB7XG5cdFx0ICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCh2YWx1ZSk7XG5cdFx0ICB9LFxuXHRcblx0XHQgIC8vIFtwdXNoUHJvZ3JhbV1cblx0XHQgIC8vXG5cdFx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cblx0XHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogcHJvZ3JhbShndWlkKSwgLi4uXG5cdFx0ICAvL1xuXHRcdCAgLy8gUHVzaCBhIHByb2dyYW0gZXhwcmVzc2lvbiBvbnRvIHRoZSBzdGFjay4gVGhpcyB0YWtlc1xuXHRcdCAgLy8gYSBjb21waWxlLXRpbWUgZ3VpZCBhbmQgY29udmVydHMgaXQgaW50byBhIHJ1bnRpbWUtYWNjZXNzaWJsZVxuXHRcdCAgLy8gZXhwcmVzc2lvbi5cblx0XHQgIHB1c2hQcm9ncmFtOiBmdW5jdGlvbiBwdXNoUHJvZ3JhbShndWlkKSB7XG5cdFx0ICAgIGlmIChndWlkICE9IG51bGwpIHtcblx0XHQgICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwodGhpcy5wcm9ncmFtRXhwcmVzc2lvbihndWlkKSk7XG5cdFx0ICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKG51bGwpO1xuXHRcdCAgICB9XG5cdFx0ICB9LFxuXHRcblx0XHQgIC8vIFtyZWdpc3RlckRlY29yYXRvcl1cblx0XHQgIC8vXG5cdFx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiBoYXNoLCBwcm9ncmFtLCBwYXJhbXMuLi4sIC4uLlxuXHRcdCAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cblx0XHQgIC8vXG5cdFx0ICAvLyBQb3BzIG9mZiB0aGUgZGVjb3JhdG9yJ3MgcGFyYW1ldGVycywgaW52b2tlcyB0aGUgZGVjb3JhdG9yLFxuXHRcdCAgLy8gYW5kIGluc2VydHMgdGhlIGRlY29yYXRvciBpbnRvIHRoZSBkZWNvcmF0b3JzIGxpc3QuXG5cdFx0ICByZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24gcmVnaXN0ZXJEZWNvcmF0b3IocGFyYW1TaXplLCBuYW1lKSB7XG5cdFx0ICAgIHZhciBmb3VuZERlY29yYXRvciA9IHRoaXMubmFtZUxvb2t1cCgnZGVjb3JhdG9ycycsIG5hbWUsICdkZWNvcmF0b3InKSxcblx0XHQgICAgICAgIG9wdGlvbnMgPSB0aGlzLnNldHVwSGVscGVyQXJncyhuYW1lLCBwYXJhbVNpemUpO1xuXHRcblx0XHQgICAgdGhpcy5kZWNvcmF0b3JzLnB1c2goWydmbiA9ICcsIHRoaXMuZGVjb3JhdG9ycy5mdW5jdGlvbkNhbGwoZm91bmREZWNvcmF0b3IsICcnLCBbJ2ZuJywgJ3Byb3BzJywgJ2NvbnRhaW5lcicsIG9wdGlvbnNdKSwgJyB8fCBmbjsnXSk7XG5cdFx0ICB9LFxuXHRcblx0XHQgIC8vIFtpbnZva2VIZWxwZXJdXG5cdFx0ICAvL1xuXHRcdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgcGFyYW1zLi4uLCAuLi5cblx0XHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogcmVzdWx0IG9mIGhlbHBlciBpbnZvY2F0aW9uXG5cdFx0ICAvL1xuXHRcdCAgLy8gUG9wcyBvZmYgdGhlIGhlbHBlcidzIHBhcmFtZXRlcnMsIGludm9rZXMgdGhlIGhlbHBlcixcblx0XHQgIC8vIGFuZCBwdXNoZXMgdGhlIGhlbHBlcidzIHJldHVybiB2YWx1ZSBvbnRvIHRoZSBzdGFjay5cblx0XHQgIC8vXG5cdFx0ICAvLyBJZiB0aGUgaGVscGVyIGlzIG5vdCBmb3VuZCwgYGhlbHBlck1pc3NpbmdgIGlzIGNhbGxlZC5cblx0XHQgIGludm9rZUhlbHBlcjogZnVuY3Rpb24gaW52b2tlSGVscGVyKHBhcmFtU2l6ZSwgbmFtZSwgaXNTaW1wbGUpIHtcblx0XHQgICAgdmFyIG5vbkhlbHBlciA9IHRoaXMucG9wU3RhY2soKSxcblx0XHQgICAgICAgIGhlbHBlciA9IHRoaXMuc2V0dXBIZWxwZXIocGFyYW1TaXplLCBuYW1lKSxcblx0XHQgICAgICAgIHNpbXBsZSA9IGlzU2ltcGxlID8gW2hlbHBlci5uYW1lLCAnIHx8ICddIDogJyc7XG5cdFxuXHRcdCAgICB2YXIgbG9va3VwID0gWycoJ10uY29uY2F0KHNpbXBsZSwgbm9uSGVscGVyKTtcblx0XHQgICAgaWYgKCF0aGlzLm9wdGlvbnMuc3RyaWN0KSB7XG5cdFx0ICAgICAgbG9va3VwLnB1c2goJyB8fCAnLCB0aGlzLmFsaWFzYWJsZSgnaGVscGVycy5oZWxwZXJNaXNzaW5nJykpO1xuXHRcdCAgICB9XG5cdFx0ICAgIGxvb2t1cC5wdXNoKCcpJyk7XG5cdFxuXHRcdCAgICB0aGlzLnB1c2godGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKGxvb2t1cCwgJ2NhbGwnLCBoZWxwZXIuY2FsbFBhcmFtcykpO1xuXHRcdCAgfSxcblx0XG5cdFx0ICAvLyBbaW52b2tlS25vd25IZWxwZXJdXG5cdFx0ICAvL1xuXHRcdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgcGFyYW1zLi4uLCAuLi5cblx0XHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogcmVzdWx0IG9mIGhlbHBlciBpbnZvY2F0aW9uXG5cdFx0ICAvL1xuXHRcdCAgLy8gVGhpcyBvcGVyYXRpb24gaXMgdXNlZCB3aGVuIHRoZSBoZWxwZXIgaXMga25vd24gdG8gZXhpc3QsXG5cdFx0ICAvLyBzbyBhIGBoZWxwZXJNaXNzaW5nYCBmYWxsYmFjayBpcyBub3QgcmVxdWlyZWQuXG5cdFx0ICBpbnZva2VLbm93bkhlbHBlcjogZnVuY3Rpb24gaW52b2tlS25vd25IZWxwZXIocGFyYW1TaXplLCBuYW1lKSB7XG5cdFx0ICAgIHZhciBoZWxwZXIgPSB0aGlzLnNldHVwSGVscGVyKHBhcmFtU2l6ZSwgbmFtZSk7XG5cdFx0ICAgIHRoaXMucHVzaCh0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoaGVscGVyLm5hbWUsICdjYWxsJywgaGVscGVyLmNhbGxQYXJhbXMpKTtcblx0XHQgIH0sXG5cdFxuXHRcdCAgLy8gW2ludm9rZUFtYmlndW91c11cblx0XHQgIC8vXG5cdFx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiBoYXNoLCBpbnZlcnNlLCBwcm9ncmFtLCBwYXJhbXMuLi4sIC4uLlxuXHRcdCAgLy8gT24gc3RhY2ssIGFmdGVyOiByZXN1bHQgb2YgZGlzYW1iaWd1YXRpb25cblx0XHQgIC8vXG5cdFx0ICAvLyBUaGlzIG9wZXJhdGlvbiBpcyB1c2VkIHdoZW4gYW4gZXhwcmVzc2lvbiBsaWtlIGB7e2Zvb319YFxuXHRcdCAgLy8gaXMgcHJvdmlkZWQsIGJ1dCB3ZSBkb24ndCBrbm93IGF0IGNvbXBpbGUtdGltZSB3aGV0aGVyIGl0XG5cdFx0ICAvLyBpcyBhIGhlbHBlciBvciBhIHBhdGguXG5cdFx0ICAvL1xuXHRcdCAgLy8gVGhpcyBvcGVyYXRpb24gZW1pdHMgbW9yZSBjb2RlIHRoYW4gdGhlIG90aGVyIG9wdGlvbnMsXG5cdFx0ICAvLyBhbmQgY2FuIGJlIGF2b2lkZWQgYnkgcGFzc2luZyB0aGUgYGtub3duSGVscGVyc2AgYW5kXG5cdFx0ICAvLyBga25vd25IZWxwZXJzT25seWAgZmxhZ3MgYXQgY29tcGlsZS10aW1lLlxuXHRcdCAgaW52b2tlQW1iaWd1b3VzOiBmdW5jdGlvbiBpbnZva2VBbWJpZ3VvdXMobmFtZSwgaGVscGVyQ2FsbCkge1xuXHRcdCAgICB0aGlzLnVzZVJlZ2lzdGVyKCdoZWxwZXInKTtcblx0XG5cdFx0ICAgIHZhciBub25IZWxwZXIgPSB0aGlzLnBvcFN0YWNrKCk7XG5cdFxuXHRcdCAgICB0aGlzLmVtcHR5SGFzaCgpO1xuXHRcdCAgICB2YXIgaGVscGVyID0gdGhpcy5zZXR1cEhlbHBlcigwLCBuYW1lLCBoZWxwZXJDYWxsKTtcblx0XG5cdFx0ICAgIHZhciBoZWxwZXJOYW1lID0gdGhpcy5sYXN0SGVscGVyID0gdGhpcy5uYW1lTG9va3VwKCdoZWxwZXJzJywgbmFtZSwgJ2hlbHBlcicpO1xuXHRcblx0XHQgICAgdmFyIGxvb2t1cCA9IFsnKCcsICcoaGVscGVyID0gJywgaGVscGVyTmFtZSwgJyB8fCAnLCBub25IZWxwZXIsICcpJ107XG5cdFx0ICAgIGlmICghdGhpcy5vcHRpb25zLnN0cmljdCkge1xuXHRcdCAgICAgIGxvb2t1cFswXSA9ICcoaGVscGVyID0gJztcblx0XHQgICAgICBsb29rdXAucHVzaCgnICE9IG51bGwgPyBoZWxwZXIgOiAnLCB0aGlzLmFsaWFzYWJsZSgnaGVscGVycy5oZWxwZXJNaXNzaW5nJykpO1xuXHRcdCAgICB9XG5cdFxuXHRcdCAgICB0aGlzLnB1c2goWycoJywgbG9va3VwLCBoZWxwZXIucGFyYW1zSW5pdCA/IFsnKSwoJywgaGVscGVyLnBhcmFtc0luaXRdIDogW10sICcpLCcsICcodHlwZW9mIGhlbHBlciA9PT0gJywgdGhpcy5hbGlhc2FibGUoJ1wiZnVuY3Rpb25cIicpLCAnID8gJywgdGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKCdoZWxwZXInLCAnY2FsbCcsIGhlbHBlci5jYWxsUGFyYW1zKSwgJyA6IGhlbHBlcikpJ10pO1xuXHRcdCAgfSxcblx0XG5cdFx0ICAvLyBbaW52b2tlUGFydGlhbF1cblx0XHQgIC8vXG5cdFx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiBjb250ZXh0LCAuLi5cblx0XHQgIC8vIE9uIHN0YWNrIGFmdGVyOiByZXN1bHQgb2YgcGFydGlhbCBpbnZvY2F0aW9uXG5cdFx0ICAvL1xuXHRcdCAgLy8gVGhpcyBvcGVyYXRpb24gcG9wcyBvZmYgYSBjb250ZXh0LCBpbnZva2VzIGEgcGFydGlhbCB3aXRoIHRoYXQgY29udGV4dCxcblx0XHQgIC8vIGFuZCBwdXNoZXMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2NhdGlvbiBiYWNrLlxuXHRcdCAgaW52b2tlUGFydGlhbDogZnVuY3Rpb24gaW52b2tlUGFydGlhbChpc0R5bmFtaWMsIG5hbWUsIGluZGVudCkge1xuXHRcdCAgICB2YXIgcGFyYW1zID0gW10sXG5cdFx0ICAgICAgICBvcHRpb25zID0gdGhpcy5zZXR1cFBhcmFtcyhuYW1lLCAxLCBwYXJhbXMpO1xuXHRcblx0XHQgICAgaWYgKGlzRHluYW1pYykge1xuXHRcdCAgICAgIG5hbWUgPSB0aGlzLnBvcFN0YWNrKCk7XG5cdFx0ICAgICAgZGVsZXRlIG9wdGlvbnMubmFtZTtcblx0XHQgICAgfVxuXHRcblx0XHQgICAgaWYgKGluZGVudCkge1xuXHRcdCAgICAgIG9wdGlvbnMuaW5kZW50ID0gSlNPTi5zdHJpbmdpZnkoaW5kZW50KTtcblx0XHQgICAgfVxuXHRcdCAgICBvcHRpb25zLmhlbHBlcnMgPSAnaGVscGVycyc7XG5cdFx0ICAgIG9wdGlvbnMucGFydGlhbHMgPSAncGFydGlhbHMnO1xuXHRcdCAgICBvcHRpb25zLmRlY29yYXRvcnMgPSAnY29udGFpbmVyLmRlY29yYXRvcnMnO1xuXHRcblx0XHQgICAgaWYgKCFpc0R5bmFtaWMpIHtcblx0XHQgICAgICBwYXJhbXMudW5zaGlmdCh0aGlzLm5hbWVMb29rdXAoJ3BhcnRpYWxzJywgbmFtZSwgJ3BhcnRpYWwnKSk7XG5cdFx0ICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgcGFyYW1zLnVuc2hpZnQobmFtZSk7XG5cdFx0ICAgIH1cblx0XG5cdFx0ICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcGF0KSB7XG5cdFx0ICAgICAgb3B0aW9ucy5kZXB0aHMgPSAnZGVwdGhzJztcblx0XHQgICAgfVxuXHRcdCAgICBvcHRpb25zID0gdGhpcy5vYmplY3RMaXRlcmFsKG9wdGlvbnMpO1xuXHRcdCAgICBwYXJhbXMucHVzaChvcHRpb25zKTtcblx0XG5cdFx0ICAgIHRoaXMucHVzaCh0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoJ2NvbnRhaW5lci5pbnZva2VQYXJ0aWFsJywgJycsIHBhcmFtcykpO1xuXHRcdCAgfSxcblx0XG5cdFx0ICAvLyBbYXNzaWduVG9IYXNoXVxuXHRcdCAgLy9cblx0XHQgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IHZhbHVlLCAuLi4sIGhhc2gsIC4uLlxuXHRcdCAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi4sIGhhc2gsIC4uLlxuXHRcdCAgLy9cblx0XHQgIC8vIFBvcHMgYSB2YWx1ZSBvZmYgdGhlIHN0YWNrIGFuZCBhc3NpZ25zIGl0IHRvIHRoZSBjdXJyZW50IGhhc2hcblx0XHQgIGFzc2lnblRvSGFzaDogZnVuY3Rpb24gYXNzaWduVG9IYXNoKGtleSkge1xuXHRcdCAgICB2YXIgdmFsdWUgPSB0aGlzLnBvcFN0YWNrKCksXG5cdFx0ICAgICAgICBjb250ZXh0ID0gdW5kZWZpbmVkLFxuXHRcdCAgICAgICAgdHlwZSA9IHVuZGVmaW5lZCxcblx0XHQgICAgICAgIGlkID0gdW5kZWZpbmVkO1xuXHRcblx0XHQgICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcblx0XHQgICAgICBpZCA9IHRoaXMucG9wU3RhY2soKTtcblx0XHQgICAgfVxuXHRcdCAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcblx0XHQgICAgICB0eXBlID0gdGhpcy5wb3BTdGFjaygpO1xuXHRcdCAgICAgIGNvbnRleHQgPSB0aGlzLnBvcFN0YWNrKCk7XG5cdFx0ICAgIH1cblx0XG5cdFx0ICAgIHZhciBoYXNoID0gdGhpcy5oYXNoO1xuXHRcdCAgICBpZiAoY29udGV4dCkge1xuXHRcdCAgICAgIGhhc2guY29udGV4dHNba2V5XSA9IGNvbnRleHQ7XG5cdFx0ICAgIH1cblx0XHQgICAgaWYgKHR5cGUpIHtcblx0XHQgICAgICBoYXNoLnR5cGVzW2tleV0gPSB0eXBlO1xuXHRcdCAgICB9XG5cdFx0ICAgIGlmIChpZCkge1xuXHRcdCAgICAgIGhhc2guaWRzW2tleV0gPSBpZDtcblx0XHQgICAgfVxuXHRcdCAgICBoYXNoLnZhbHVlc1trZXldID0gdmFsdWU7XG5cdFx0ICB9LFxuXHRcblx0XHQgIHB1c2hJZDogZnVuY3Rpb24gcHVzaElkKHR5cGUsIG5hbWUsIGNoaWxkKSB7XG5cdFx0ICAgIGlmICh0eXBlID09PSAnQmxvY2tQYXJhbScpIHtcblx0XHQgICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoJ2Jsb2NrUGFyYW1zWycgKyBuYW1lWzBdICsgJ10ucGF0aFsnICsgbmFtZVsxXSArICddJyArIChjaGlsZCA/ICcgKyAnICsgSlNPTi5zdHJpbmdpZnkoJy4nICsgY2hpbGQpIDogJycpKTtcblx0XHQgICAgfSBlbHNlIGlmICh0eXBlID09PSAnUGF0aEV4cHJlc3Npb24nKSB7XG5cdFx0ICAgICAgdGhpcy5wdXNoU3RyaW5nKG5hbWUpO1xuXHRcdCAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdTdWJFeHByZXNzaW9uJykge1xuXHRcdCAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCgndHJ1ZScpO1xuXHRcdCAgICB9IGVsc2Uge1xuXHRcdCAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCgnbnVsbCcpO1xuXHRcdCAgICB9XG5cdFx0ICB9LFxuXHRcblx0XHQgIC8vIEhFTFBFUlNcblx0XG5cdFx0ICBjb21waWxlcjogSmF2YVNjcmlwdENvbXBpbGVyLFxuXHRcblx0XHQgIGNvbXBpbGVDaGlsZHJlbjogZnVuY3Rpb24gY29tcGlsZUNoaWxkcmVuKGVudmlyb25tZW50LCBvcHRpb25zKSB7XG5cdFx0ICAgIHZhciBjaGlsZHJlbiA9IGVudmlyb25tZW50LmNoaWxkcmVuLFxuXHRcdCAgICAgICAgY2hpbGQgPSB1bmRlZmluZWQsXG5cdFx0ICAgICAgICBjb21waWxlciA9IHVuZGVmaW5lZDtcblx0XG5cdFx0ICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0ICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcblx0XHQgICAgICBjb21waWxlciA9IG5ldyB0aGlzLmNvbXBpbGVyKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxuXHRcblx0XHQgICAgICB2YXIgaW5kZXggPSB0aGlzLm1hdGNoRXhpc3RpbmdQcm9ncmFtKGNoaWxkKTtcblx0XG5cdFx0ICAgICAgaWYgKGluZGV4ID09IG51bGwpIHtcblx0XHQgICAgICAgIHRoaXMuY29udGV4dC5wcm9ncmFtcy5wdXNoKCcnKTsgLy8gUGxhY2Vob2xkZXIgdG8gcHJldmVudCBuYW1lIGNvbmZsaWN0cyBmb3IgbmVzdGVkIGNoaWxkcmVuXG5cdFx0ICAgICAgICBpbmRleCA9IHRoaXMuY29udGV4dC5wcm9ncmFtcy5sZW5ndGg7XG5cdFx0ICAgICAgICBjaGlsZC5pbmRleCA9IGluZGV4O1xuXHRcdCAgICAgICAgY2hpbGQubmFtZSA9ICdwcm9ncmFtJyArIGluZGV4O1xuXHRcdCAgICAgICAgdGhpcy5jb250ZXh0LnByb2dyYW1zW2luZGV4XSA9IGNvbXBpbGVyLmNvbXBpbGUoY2hpbGQsIG9wdGlvbnMsIHRoaXMuY29udGV4dCwgIXRoaXMucHJlY29tcGlsZSk7XG5cdFx0ICAgICAgICB0aGlzLmNvbnRleHQuZGVjb3JhdG9yc1tpbmRleF0gPSBjb21waWxlci5kZWNvcmF0b3JzO1xuXHRcdCAgICAgICAgdGhpcy5jb250ZXh0LmVudmlyb25tZW50c1tpbmRleF0gPSBjaGlsZDtcblx0XG5cdFx0ICAgICAgICB0aGlzLnVzZURlcHRocyA9IHRoaXMudXNlRGVwdGhzIHx8IGNvbXBpbGVyLnVzZURlcHRocztcblx0XHQgICAgICAgIHRoaXMudXNlQmxvY2tQYXJhbXMgPSB0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IGNvbXBpbGVyLnVzZUJsb2NrUGFyYW1zO1xuXHRcdCAgICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgICBjaGlsZC5pbmRleCA9IGluZGV4O1xuXHRcdCAgICAgICAgY2hpbGQubmFtZSA9ICdwcm9ncmFtJyArIGluZGV4O1xuXHRcblx0XHQgICAgICAgIHRoaXMudXNlRGVwdGhzID0gdGhpcy51c2VEZXB0aHMgfHwgY2hpbGQudXNlRGVwdGhzO1xuXHRcdCAgICAgICAgdGhpcy51c2VCbG9ja1BhcmFtcyA9IHRoaXMudXNlQmxvY2tQYXJhbXMgfHwgY2hpbGQudXNlQmxvY2tQYXJhbXM7XG5cdFx0ICAgICAgfVxuXHRcdCAgICB9XG5cdFx0ICB9LFxuXHRcdCAgbWF0Y2hFeGlzdGluZ1Byb2dyYW06IGZ1bmN0aW9uIG1hdGNoRXhpc3RpbmdQcm9ncmFtKGNoaWxkKSB7XG5cdFx0ICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmNvbnRleHQuZW52aXJvbm1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0ICAgICAgdmFyIGVudmlyb25tZW50ID0gdGhpcy5jb250ZXh0LmVudmlyb25tZW50c1tpXTtcblx0XHQgICAgICBpZiAoZW52aXJvbm1lbnQgJiYgZW52aXJvbm1lbnQuZXF1YWxzKGNoaWxkKSkge1xuXHRcdCAgICAgICAgcmV0dXJuIGk7XG5cdFx0ICAgICAgfVxuXHRcdCAgICB9XG5cdFx0ICB9LFxuXHRcblx0XHQgIHByb2dyYW1FeHByZXNzaW9uOiBmdW5jdGlvbiBwcm9ncmFtRXhwcmVzc2lvbihndWlkKSB7XG5cdFx0ICAgIHZhciBjaGlsZCA9IHRoaXMuZW52aXJvbm1lbnQuY2hpbGRyZW5bZ3VpZF0sXG5cdFx0ICAgICAgICBwcm9ncmFtUGFyYW1zID0gW2NoaWxkLmluZGV4LCAnZGF0YScsIGNoaWxkLmJsb2NrUGFyYW1zXTtcblx0XG5cdFx0ICAgIGlmICh0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IHRoaXMudXNlRGVwdGhzKSB7XG5cdFx0ICAgICAgcHJvZ3JhbVBhcmFtcy5wdXNoKCdibG9ja1BhcmFtcycpO1xuXHRcdCAgICB9XG5cdFx0ICAgIGlmICh0aGlzLnVzZURlcHRocykge1xuXHRcdCAgICAgIHByb2dyYW1QYXJhbXMucHVzaCgnZGVwdGhzJyk7XG5cdFx0ICAgIH1cblx0XG5cdFx0ICAgIHJldHVybiAnY29udGFpbmVyLnByb2dyYW0oJyArIHByb2dyYW1QYXJhbXMuam9pbignLCAnKSArICcpJztcblx0XHQgIH0sXG5cdFxuXHRcdCAgdXNlUmVnaXN0ZXI6IGZ1bmN0aW9uIHVzZVJlZ2lzdGVyKG5hbWUpIHtcblx0XHQgICAgaWYgKCF0aGlzLnJlZ2lzdGVyc1tuYW1lXSkge1xuXHRcdCAgICAgIHRoaXMucmVnaXN0ZXJzW25hbWVdID0gdHJ1ZTtcblx0XHQgICAgICB0aGlzLnJlZ2lzdGVycy5saXN0LnB1c2gobmFtZSk7XG5cdFx0ICAgIH1cblx0XHQgIH0sXG5cdFxuXHRcdCAgcHVzaDogZnVuY3Rpb24gcHVzaChleHByKSB7XG5cdFx0ICAgIGlmICghKGV4cHIgaW5zdGFuY2VvZiBMaXRlcmFsKSkge1xuXHRcdCAgICAgIGV4cHIgPSB0aGlzLnNvdXJjZS53cmFwKGV4cHIpO1xuXHRcdCAgICB9XG5cdFxuXHRcdCAgICB0aGlzLmlubGluZVN0YWNrLnB1c2goZXhwcik7XG5cdFx0ICAgIHJldHVybiBleHByO1xuXHRcdCAgfSxcblx0XG5cdFx0ICBwdXNoU3RhY2tMaXRlcmFsOiBmdW5jdGlvbiBwdXNoU3RhY2tMaXRlcmFsKGl0ZW0pIHtcblx0XHQgICAgdGhpcy5wdXNoKG5ldyBMaXRlcmFsKGl0ZW0pKTtcblx0XHQgIH0sXG5cdFxuXHRcdCAgcHVzaFNvdXJjZTogZnVuY3Rpb24gcHVzaFNvdXJjZShzb3VyY2UpIHtcblx0XHQgICAgaWYgKHRoaXMucGVuZGluZ0NvbnRlbnQpIHtcblx0XHQgICAgICB0aGlzLnNvdXJjZS5wdXNoKHRoaXMuYXBwZW5kVG9CdWZmZXIodGhpcy5zb3VyY2UucXVvdGVkU3RyaW5nKHRoaXMucGVuZGluZ0NvbnRlbnQpLCB0aGlzLnBlbmRpbmdMb2NhdGlvbikpO1xuXHRcdCAgICAgIHRoaXMucGVuZGluZ0NvbnRlbnQgPSB1bmRlZmluZWQ7XG5cdFx0ICAgIH1cblx0XG5cdFx0ICAgIGlmIChzb3VyY2UpIHtcblx0XHQgICAgICB0aGlzLnNvdXJjZS5wdXNoKHNvdXJjZSk7XG5cdFx0ICAgIH1cblx0XHQgIH0sXG5cdFxuXHRcdCAgcmVwbGFjZVN0YWNrOiBmdW5jdGlvbiByZXBsYWNlU3RhY2soY2FsbGJhY2spIHtcblx0XHQgICAgdmFyIHByZWZpeCA9IFsnKCddLFxuXHRcdCAgICAgICAgc3RhY2sgPSB1bmRlZmluZWQsXG5cdFx0ICAgICAgICBjcmVhdGVkU3RhY2sgPSB1bmRlZmluZWQsXG5cdFx0ICAgICAgICB1c2VkTGl0ZXJhbCA9IHVuZGVmaW5lZDtcblx0XG5cdFx0ICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cdFx0ICAgIGlmICghdGhpcy5pc0lubGluZSgpKSB7XG5cdFx0ICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ3JlcGxhY2VTdGFjayBvbiBub24taW5saW5lJyk7XG5cdFx0ICAgIH1cblx0XG5cdFx0ICAgIC8vIFdlIHdhbnQgdG8gbWVyZ2UgdGhlIGlubGluZSBzdGF0ZW1lbnQgaW50byB0aGUgcmVwbGFjZW1lbnQgc3RhdGVtZW50IHZpYSAnLCdcblx0XHQgICAgdmFyIHRvcCA9IHRoaXMucG9wU3RhY2sodHJ1ZSk7XG5cdFxuXHRcdCAgICBpZiAodG9wIGluc3RhbmNlb2YgTGl0ZXJhbCkge1xuXHRcdCAgICAgIC8vIExpdGVyYWxzIGRvIG5vdCBuZWVkIHRvIGJlIGlubGluZWRcblx0XHQgICAgICBzdGFjayA9IFt0b3AudmFsdWVdO1xuXHRcdCAgICAgIHByZWZpeCA9IFsnKCcsIHN0YWNrXTtcblx0XHQgICAgICB1c2VkTGl0ZXJhbCA9IHRydWU7XG5cdFx0ICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgLy8gR2V0IG9yIGNyZWF0ZSB0aGUgY3VycmVudCBzdGFjayBuYW1lIGZvciB1c2UgYnkgdGhlIGlubGluZVxuXHRcdCAgICAgIGNyZWF0ZWRTdGFjayA9IHRydWU7XG5cdFx0ICAgICAgdmFyIF9uYW1lID0gdGhpcy5pbmNyU3RhY2soKTtcblx0XG5cdFx0ICAgICAgcHJlZml4ID0gWycoKCcsIHRoaXMucHVzaChfbmFtZSksICcgPSAnLCB0b3AsICcpJ107XG5cdFx0ICAgICAgc3RhY2sgPSB0aGlzLnRvcFN0YWNrKCk7XG5cdFx0ICAgIH1cblx0XG5cdFx0ICAgIHZhciBpdGVtID0gY2FsbGJhY2suY2FsbCh0aGlzLCBzdGFjayk7XG5cdFxuXHRcdCAgICBpZiAoIXVzZWRMaXRlcmFsKSB7XG5cdFx0ICAgICAgdGhpcy5wb3BTdGFjaygpO1xuXHRcdCAgICB9XG5cdFx0ICAgIGlmIChjcmVhdGVkU3RhY2spIHtcblx0XHQgICAgICB0aGlzLnN0YWNrU2xvdC0tO1xuXHRcdCAgICB9XG5cdFx0ICAgIHRoaXMucHVzaChwcmVmaXguY29uY2F0KGl0ZW0sICcpJykpO1xuXHRcdCAgfSxcblx0XG5cdFx0ICBpbmNyU3RhY2s6IGZ1bmN0aW9uIGluY3JTdGFjaygpIHtcblx0XHQgICAgdGhpcy5zdGFja1Nsb3QrKztcblx0XHQgICAgaWYgKHRoaXMuc3RhY2tTbG90ID4gdGhpcy5zdGFja1ZhcnMubGVuZ3RoKSB7XG5cdFx0ICAgICAgdGhpcy5zdGFja1ZhcnMucHVzaCgnc3RhY2snICsgdGhpcy5zdGFja1Nsb3QpO1xuXHRcdCAgICB9XG5cdFx0ICAgIHJldHVybiB0aGlzLnRvcFN0YWNrTmFtZSgpO1xuXHRcdCAgfSxcblx0XHQgIHRvcFN0YWNrTmFtZTogZnVuY3Rpb24gdG9wU3RhY2tOYW1lKCkge1xuXHRcdCAgICByZXR1cm4gJ3N0YWNrJyArIHRoaXMuc3RhY2tTbG90O1xuXHRcdCAgfSxcblx0XHQgIGZsdXNoSW5saW5lOiBmdW5jdGlvbiBmbHVzaElubGluZSgpIHtcblx0XHQgICAgdmFyIGlubGluZVN0YWNrID0gdGhpcy5pbmxpbmVTdGFjaztcblx0XHQgICAgdGhpcy5pbmxpbmVTdGFjayA9IFtdO1xuXHRcdCAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gaW5saW5lU3RhY2subGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHQgICAgICB2YXIgZW50cnkgPSBpbmxpbmVTdGFja1tpXTtcblx0XHQgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblx0XHQgICAgICBpZiAoZW50cnkgaW5zdGFuY2VvZiBMaXRlcmFsKSB7XG5cdFx0ICAgICAgICB0aGlzLmNvbXBpbGVTdGFjay5wdXNoKGVudHJ5KTtcblx0XHQgICAgICB9IGVsc2Uge1xuXHRcdCAgICAgICAgdmFyIHN0YWNrID0gdGhpcy5pbmNyU3RhY2soKTtcblx0XHQgICAgICAgIHRoaXMucHVzaFNvdXJjZShbc3RhY2ssICcgPSAnLCBlbnRyeSwgJzsnXSk7XG5cdFx0ICAgICAgICB0aGlzLmNvbXBpbGVTdGFjay5wdXNoKHN0YWNrKTtcblx0XHQgICAgICB9XG5cdFx0ICAgIH1cblx0XHQgIH0sXG5cdFx0ICBpc0lubGluZTogZnVuY3Rpb24gaXNJbmxpbmUoKSB7XG5cdFx0ICAgIHJldHVybiB0aGlzLmlubGluZVN0YWNrLmxlbmd0aDtcblx0XHQgIH0sXG5cdFxuXHRcdCAgcG9wU3RhY2s6IGZ1bmN0aW9uIHBvcFN0YWNrKHdyYXBwZWQpIHtcblx0XHQgICAgdmFyIGlubGluZSA9IHRoaXMuaXNJbmxpbmUoKSxcblx0XHQgICAgICAgIGl0ZW0gPSAoaW5saW5lID8gdGhpcy5pbmxpbmVTdGFjayA6IHRoaXMuY29tcGlsZVN0YWNrKS5wb3AoKTtcblx0XG5cdFx0ICAgIGlmICghd3JhcHBlZCAmJiBpdGVtIGluc3RhbmNlb2YgTGl0ZXJhbCkge1xuXHRcdCAgICAgIHJldHVybiBpdGVtLnZhbHVlO1xuXHRcdCAgICB9IGVsc2Uge1xuXHRcdCAgICAgIGlmICghaW5saW5lKSB7XG5cdFx0ICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHRcdCAgICAgICAgaWYgKCF0aGlzLnN0YWNrU2xvdCkge1xuXHRcdCAgICAgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnSW52YWxpZCBzdGFjayBwb3AnKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHRoaXMuc3RhY2tTbG90LS07XG5cdFx0ICAgICAgfVxuXHRcdCAgICAgIHJldHVybiBpdGVtO1xuXHRcdCAgICB9XG5cdFx0ICB9LFxuXHRcblx0XHQgIHRvcFN0YWNrOiBmdW5jdGlvbiB0b3BTdGFjaygpIHtcblx0XHQgICAgdmFyIHN0YWNrID0gdGhpcy5pc0lubGluZSgpID8gdGhpcy5pbmxpbmVTdGFjayA6IHRoaXMuY29tcGlsZVN0YWNrLFxuXHRcdCAgICAgICAgaXRlbSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuXHRcblx0XHQgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cdFx0ICAgIGlmIChpdGVtIGluc3RhbmNlb2YgTGl0ZXJhbCkge1xuXHRcdCAgICAgIHJldHVybiBpdGVtLnZhbHVlO1xuXHRcdCAgICB9IGVsc2Uge1xuXHRcdCAgICAgIHJldHVybiBpdGVtO1xuXHRcdCAgICB9XG5cdFx0ICB9LFxuXHRcblx0XHQgIGNvbnRleHROYW1lOiBmdW5jdGlvbiBjb250ZXh0TmFtZShjb250ZXh0KSB7XG5cdFx0ICAgIGlmICh0aGlzLnVzZURlcHRocyAmJiBjb250ZXh0KSB7XG5cdFx0ICAgICAgcmV0dXJuICdkZXB0aHNbJyArIGNvbnRleHQgKyAnXSc7XG5cdFx0ICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgcmV0dXJuICdkZXB0aCcgKyBjb250ZXh0O1xuXHRcdCAgICB9XG5cdFx0ICB9LFxuXHRcblx0XHQgIHF1b3RlZFN0cmluZzogZnVuY3Rpb24gcXVvdGVkU3RyaW5nKHN0cikge1xuXHRcdCAgICByZXR1cm4gdGhpcy5zb3VyY2UucXVvdGVkU3RyaW5nKHN0cik7XG5cdFx0ICB9LFxuXHRcblx0XHQgIG9iamVjdExpdGVyYWw6IGZ1bmN0aW9uIG9iamVjdExpdGVyYWwob2JqKSB7XG5cdFx0ICAgIHJldHVybiB0aGlzLnNvdXJjZS5vYmplY3RMaXRlcmFsKG9iaik7XG5cdFx0ICB9LFxuXHRcblx0XHQgIGFsaWFzYWJsZTogZnVuY3Rpb24gYWxpYXNhYmxlKG5hbWUpIHtcblx0XHQgICAgdmFyIHJldCA9IHRoaXMuYWxpYXNlc1tuYW1lXTtcblx0XHQgICAgaWYgKHJldCkge1xuXHRcdCAgICAgIHJldC5yZWZlcmVuY2VDb3VudCsrO1xuXHRcdCAgICAgIHJldHVybiByZXQ7XG5cdFx0ICAgIH1cblx0XG5cdFx0ICAgIHJldCA9IHRoaXMuYWxpYXNlc1tuYW1lXSA9IHRoaXMuc291cmNlLndyYXAobmFtZSk7XG5cdFx0ICAgIHJldC5hbGlhc2FibGUgPSB0cnVlO1xuXHRcdCAgICByZXQucmVmZXJlbmNlQ291bnQgPSAxO1xuXHRcblx0XHQgICAgcmV0dXJuIHJldDtcblx0XHQgIH0sXG5cdFxuXHRcdCAgc2V0dXBIZWxwZXI6IGZ1bmN0aW9uIHNldHVwSGVscGVyKHBhcmFtU2l6ZSwgbmFtZSwgYmxvY2tIZWxwZXIpIHtcblx0XHQgICAgdmFyIHBhcmFtcyA9IFtdLFxuXHRcdCAgICAgICAgcGFyYW1zSW5pdCA9IHRoaXMuc2V0dXBIZWxwZXJBcmdzKG5hbWUsIHBhcmFtU2l6ZSwgcGFyYW1zLCBibG9ja0hlbHBlcik7XG5cdFx0ICAgIHZhciBmb3VuZEhlbHBlciA9IHRoaXMubmFtZUxvb2t1cCgnaGVscGVycycsIG5hbWUsICdoZWxwZXInKSxcblx0XHQgICAgICAgIGNhbGxDb250ZXh0ID0gdGhpcy5hbGlhc2FibGUodGhpcy5jb250ZXh0TmFtZSgwKSArICcgIT0gbnVsbCA/ICcgKyB0aGlzLmNvbnRleHROYW1lKDApICsgJyA6IHt9Jyk7XG5cdFxuXHRcdCAgICByZXR1cm4ge1xuXHRcdCAgICAgIHBhcmFtczogcGFyYW1zLFxuXHRcdCAgICAgIHBhcmFtc0luaXQ6IHBhcmFtc0luaXQsXG5cdFx0ICAgICAgbmFtZTogZm91bmRIZWxwZXIsXG5cdFx0ICAgICAgY2FsbFBhcmFtczogW2NhbGxDb250ZXh0XS5jb25jYXQocGFyYW1zKVxuXHRcdCAgICB9O1xuXHRcdCAgfSxcblx0XG5cdFx0ICBzZXR1cFBhcmFtczogZnVuY3Rpb24gc2V0dXBQYXJhbXMoaGVscGVyLCBwYXJhbVNpemUsIHBhcmFtcykge1xuXHRcdCAgICB2YXIgb3B0aW9ucyA9IHt9LFxuXHRcdCAgICAgICAgY29udGV4dHMgPSBbXSxcblx0XHQgICAgICAgIHR5cGVzID0gW10sXG5cdFx0ICAgICAgICBpZHMgPSBbXSxcblx0XHQgICAgICAgIG9iamVjdEFyZ3MgPSAhcGFyYW1zLFxuXHRcdCAgICAgICAgcGFyYW0gPSB1bmRlZmluZWQ7XG5cdFxuXHRcdCAgICBpZiAob2JqZWN0QXJncykge1xuXHRcdCAgICAgIHBhcmFtcyA9IFtdO1xuXHRcdCAgICB9XG5cdFxuXHRcdCAgICBvcHRpb25zLm5hbWUgPSB0aGlzLnF1b3RlZFN0cmluZyhoZWxwZXIpO1xuXHRcdCAgICBvcHRpb25zLmhhc2ggPSB0aGlzLnBvcFN0YWNrKCk7XG5cdFxuXHRcdCAgICBpZiAodGhpcy50cmFja0lkcykge1xuXHRcdCAgICAgIG9wdGlvbnMuaGFzaElkcyA9IHRoaXMucG9wU3RhY2soKTtcblx0XHQgICAgfVxuXHRcdCAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcblx0XHQgICAgICBvcHRpb25zLmhhc2hUeXBlcyA9IHRoaXMucG9wU3RhY2soKTtcblx0XHQgICAgICBvcHRpb25zLmhhc2hDb250ZXh0cyA9IHRoaXMucG9wU3RhY2soKTtcblx0XHQgICAgfVxuXHRcblx0XHQgICAgdmFyIGludmVyc2UgPSB0aGlzLnBvcFN0YWNrKCksXG5cdFx0ICAgICAgICBwcm9ncmFtID0gdGhpcy5wb3BTdGFjaygpO1xuXHRcblx0XHQgICAgLy8gQXZvaWQgc2V0dGluZyBmbiBhbmQgaW52ZXJzZSBpZiBuZWl0aGVyIGFyZSBzZXQuIFRoaXMgYWxsb3dzXG5cdFx0ICAgIC8vIGhlbHBlcnMgdG8gZG8gYSBjaGVjayBmb3IgYGlmIChvcHRpb25zLmZuKWBcblx0XHQgICAgaWYgKHByb2dyYW0gfHwgaW52ZXJzZSkge1xuXHRcdCAgICAgIG9wdGlvbnMuZm4gPSBwcm9ncmFtIHx8ICdjb250YWluZXIubm9vcCc7XG5cdFx0ICAgICAgb3B0aW9ucy5pbnZlcnNlID0gaW52ZXJzZSB8fCAnY29udGFpbmVyLm5vb3AnO1xuXHRcdCAgICB9XG5cdFxuXHRcdCAgICAvLyBUaGUgcGFyYW1ldGVycyBnbyBvbiB0byB0aGUgc3RhY2sgaW4gb3JkZXIgKG1ha2luZyBzdXJlIHRoYXQgdGhleSBhcmUgZXZhbHVhdGVkIGluIG9yZGVyKVxuXHRcdCAgICAvLyBzbyB3ZSBuZWVkIHRvIHBvcCB0aGVtIG9mZiB0aGUgc3RhY2sgaW4gcmV2ZXJzZSBvcmRlclxuXHRcdCAgICB2YXIgaSA9IHBhcmFtU2l6ZTtcblx0XHQgICAgd2hpbGUgKGktLSkge1xuXHRcdCAgICAgIHBhcmFtID0gdGhpcy5wb3BTdGFjaygpO1xuXHRcdCAgICAgIHBhcmFtc1tpXSA9IHBhcmFtO1xuXHRcblx0XHQgICAgICBpZiAodGhpcy50cmFja0lkcykge1xuXHRcdCAgICAgICAgaWRzW2ldID0gdGhpcy5wb3BTdGFjaygpO1xuXHRcdCAgICAgIH1cblx0XHQgICAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcblx0XHQgICAgICAgIHR5cGVzW2ldID0gdGhpcy5wb3BTdGFjaygpO1xuXHRcdCAgICAgICAgY29udGV4dHNbaV0gPSB0aGlzLnBvcFN0YWNrKCk7XG5cdFx0ICAgICAgfVxuXHRcdCAgICB9XG5cdFxuXHRcdCAgICBpZiAob2JqZWN0QXJncykge1xuXHRcdCAgICAgIG9wdGlvbnMuYXJncyA9IHRoaXMuc291cmNlLmdlbmVyYXRlQXJyYXkocGFyYW1zKTtcblx0XHQgICAgfVxuXHRcblx0XHQgICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcblx0XHQgICAgICBvcHRpb25zLmlkcyA9IHRoaXMuc291cmNlLmdlbmVyYXRlQXJyYXkoaWRzKTtcblx0XHQgICAgfVxuXHRcdCAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcblx0XHQgICAgICBvcHRpb25zLnR5cGVzID0gdGhpcy5zb3VyY2UuZ2VuZXJhdGVBcnJheSh0eXBlcyk7XG5cdFx0ICAgICAgb3B0aW9ucy5jb250ZXh0cyA9IHRoaXMuc291cmNlLmdlbmVyYXRlQXJyYXkoY29udGV4dHMpO1xuXHRcdCAgICB9XG5cdFxuXHRcdCAgICBpZiAodGhpcy5vcHRpb25zLmRhdGEpIHtcblx0XHQgICAgICBvcHRpb25zLmRhdGEgPSAnZGF0YSc7XG5cdFx0ICAgIH1cblx0XHQgICAgaWYgKHRoaXMudXNlQmxvY2tQYXJhbXMpIHtcblx0XHQgICAgICBvcHRpb25zLmJsb2NrUGFyYW1zID0gJ2Jsb2NrUGFyYW1zJztcblx0XHQgICAgfVxuXHRcdCAgICByZXR1cm4gb3B0aW9ucztcblx0XHQgIH0sXG5cdFxuXHRcdCAgc2V0dXBIZWxwZXJBcmdzOiBmdW5jdGlvbiBzZXR1cEhlbHBlckFyZ3MoaGVscGVyLCBwYXJhbVNpemUsIHBhcmFtcywgdXNlUmVnaXN0ZXIpIHtcblx0XHQgICAgdmFyIG9wdGlvbnMgPSB0aGlzLnNldHVwUGFyYW1zKGhlbHBlciwgcGFyYW1TaXplLCBwYXJhbXMpO1xuXHRcdCAgICBvcHRpb25zID0gdGhpcy5vYmplY3RMaXRlcmFsKG9wdGlvbnMpO1xuXHRcdCAgICBpZiAodXNlUmVnaXN0ZXIpIHtcblx0XHQgICAgICB0aGlzLnVzZVJlZ2lzdGVyKCdvcHRpb25zJyk7XG5cdFx0ICAgICAgcGFyYW1zLnB1c2goJ29wdGlvbnMnKTtcblx0XHQgICAgICByZXR1cm4gWydvcHRpb25zPScsIG9wdGlvbnNdO1xuXHRcdCAgICB9IGVsc2UgaWYgKHBhcmFtcykge1xuXHRcdCAgICAgIHBhcmFtcy5wdXNoKG9wdGlvbnMpO1xuXHRcdCAgICAgIHJldHVybiAnJztcblx0XHQgICAgfSBlbHNlIHtcblx0XHQgICAgICByZXR1cm4gb3B0aW9ucztcblx0XHQgICAgfVxuXHRcdCAgfVxuXHRcdH07XG5cdFxuXHRcdChmdW5jdGlvbiAoKSB7XG5cdFx0ICB2YXIgcmVzZXJ2ZWRXb3JkcyA9ICgnYnJlYWsgZWxzZSBuZXcgdmFyJyArICcgY2FzZSBmaW5hbGx5IHJldHVybiB2b2lkJyArICcgY2F0Y2ggZm9yIHN3aXRjaCB3aGlsZScgKyAnIGNvbnRpbnVlIGZ1bmN0aW9uIHRoaXMgd2l0aCcgKyAnIGRlZmF1bHQgaWYgdGhyb3cnICsgJyBkZWxldGUgaW4gdHJ5JyArICcgZG8gaW5zdGFuY2VvZiB0eXBlb2YnICsgJyBhYnN0cmFjdCBlbnVtIGludCBzaG9ydCcgKyAnIGJvb2xlYW4gZXhwb3J0IGludGVyZmFjZSBzdGF0aWMnICsgJyBieXRlIGV4dGVuZHMgbG9uZyBzdXBlcicgKyAnIGNoYXIgZmluYWwgbmF0aXZlIHN5bmNocm9uaXplZCcgKyAnIGNsYXNzIGZsb2F0IHBhY2thZ2UgdGhyb3dzJyArICcgY29uc3QgZ290byBwcml2YXRlIHRyYW5zaWVudCcgKyAnIGRlYnVnZ2VyIGltcGxlbWVudHMgcHJvdGVjdGVkIHZvbGF0aWxlJyArICcgZG91YmxlIGltcG9ydCBwdWJsaWMgbGV0IHlpZWxkIGF3YWl0JyArICcgbnVsbCB0cnVlIGZhbHNlJykuc3BsaXQoJyAnKTtcblx0XG5cdFx0ICB2YXIgY29tcGlsZXJXb3JkcyA9IEphdmFTY3JpcHRDb21waWxlci5SRVNFUlZFRF9XT1JEUyA9IHt9O1xuXHRcblx0XHQgIGZvciAodmFyIGkgPSAwLCBsID0gcmVzZXJ2ZWRXb3Jkcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHQgICAgY29tcGlsZXJXb3Jkc1tyZXNlcnZlZFdvcmRzW2ldXSA9IHRydWU7XG5cdFx0ICB9XG5cdFx0fSkoKTtcblx0XG5cdFx0SmF2YVNjcmlwdENvbXBpbGVyLmlzVmFsaWRKYXZhU2NyaXB0VmFyaWFibGVOYW1lID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0XHQgIHJldHVybiAhSmF2YVNjcmlwdENvbXBpbGVyLlJFU0VSVkVEX1dPUkRTW25hbWVdICYmIC9eW2EtekEtWl8kXVswLTlhLXpBLVpfJF0qJC8udGVzdChuYW1lKTtcblx0XHR9O1xuXHRcblx0XHRmdW5jdGlvbiBzdHJpY3RMb29rdXAocmVxdWlyZVRlcm1pbmFsLCBjb21waWxlciwgcGFydHMsIHR5cGUpIHtcblx0XHQgIHZhciBzdGFjayA9IGNvbXBpbGVyLnBvcFN0YWNrKCksXG5cdFx0ICAgICAgaSA9IDAsXG5cdFx0ICAgICAgbGVuID0gcGFydHMubGVuZ3RoO1xuXHRcdCAgaWYgKHJlcXVpcmVUZXJtaW5hbCkge1xuXHRcdCAgICBsZW4tLTtcblx0XHQgIH1cblx0XG5cdFx0ICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0ICAgIHN0YWNrID0gY29tcGlsZXIubmFtZUxvb2t1cChzdGFjaywgcGFydHNbaV0sIHR5cGUpO1xuXHRcdCAgfVxuXHRcblx0XHQgIGlmIChyZXF1aXJlVGVybWluYWwpIHtcblx0XHQgICAgcmV0dXJuIFtjb21waWxlci5hbGlhc2FibGUoJ2NvbnRhaW5lci5zdHJpY3QnKSwgJygnLCBzdGFjaywgJywgJywgY29tcGlsZXIucXVvdGVkU3RyaW5nKHBhcnRzW2ldKSwgJyknXTtcblx0XHQgIH0gZWxzZSB7XG5cdFx0ICAgIHJldHVybiBzdGFjaztcblx0XHQgIH1cblx0XHR9XG5cdFxuXHRcdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IEphdmFTY3JpcHRDb21waWxlcjtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDI5ICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXHRcblx0XHQvKiBnbG9iYWwgZGVmaW5lICovXG5cdFx0J3VzZSBzdHJpY3QnO1xuXHRcblx0XHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHRcblx0XHR2YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0XG5cdFx0dmFyIFNvdXJjZU5vZGUgPSB1bmRlZmluZWQ7XG5cdFxuXHRcdHRyeSB7XG5cdFx0ICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHRcdCAgaWYgKGZhbHNlKSB7XG5cdFx0ICAgIC8vIFdlIGRvbid0IHN1cHBvcnQgdGhpcyBpbiBBTUQgZW52aXJvbm1lbnRzLiBGb3IgdGhlc2UgZW52aXJvbm1lbnRzLCB3ZSBhc3VzbWUgdGhhdFxuXHRcdCAgICAvLyB0aGV5IGFyZSBydW5uaW5nIG9uIHRoZSBicm93c2VyIGFuZCB0aHVzIGhhdmUgbm8gbmVlZCBmb3IgdGhlIHNvdXJjZS1tYXAgbGlicmFyeS5cblx0XHQgICAgdmFyIFNvdXJjZU1hcCA9IHJlcXVpcmUoJ3NvdXJjZS1tYXAnKTtcblx0XHQgICAgU291cmNlTm9kZSA9IFNvdXJjZU1hcC5Tb3VyY2VOb2RlO1xuXHRcdCAgfVxuXHRcdH0gY2F0Y2ggKGVycikge31cblx0XHQvKiBOT1AgKi9cblx0XG5cdFx0LyogaXN0YW5idWwgaWdub3JlIGlmOiB0ZXN0ZWQgYnV0IG5vdCBjb3ZlcmVkIGluIGlzdGFuYnVsIGR1ZSB0byBkaXN0IGJ1aWxkICAqL1xuXHRcdGlmICghU291cmNlTm9kZSkge1xuXHRcdCAgU291cmNlTm9kZSA9IGZ1bmN0aW9uIChsaW5lLCBjb2x1bW4sIHNyY0ZpbGUsIGNodW5rcykge1xuXHRcdCAgICB0aGlzLnNyYyA9ICcnO1xuXHRcdCAgICBpZiAoY2h1bmtzKSB7XG5cdFx0ICAgICAgdGhpcy5hZGQoY2h1bmtzKTtcblx0XHQgICAgfVxuXHRcdCAgfTtcblx0XHQgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cdFx0ICBTb3VyY2VOb2RlLnByb3RvdHlwZSA9IHtcblx0XHQgICAgYWRkOiBmdW5jdGlvbiBhZGQoY2h1bmtzKSB7XG5cdFx0ICAgICAgaWYgKF91dGlscy5pc0FycmF5KGNodW5rcykpIHtcblx0XHQgICAgICAgIGNodW5rcyA9IGNodW5rcy5qb2luKCcnKTtcblx0XHQgICAgICB9XG5cdFx0ICAgICAgdGhpcy5zcmMgKz0gY2h1bmtzO1xuXHRcdCAgICB9LFxuXHRcdCAgICBwcmVwZW5kOiBmdW5jdGlvbiBwcmVwZW5kKGNodW5rcykge1xuXHRcdCAgICAgIGlmIChfdXRpbHMuaXNBcnJheShjaHVua3MpKSB7XG5cdFx0ICAgICAgICBjaHVua3MgPSBjaHVua3Muam9pbignJyk7XG5cdFx0ICAgICAgfVxuXHRcdCAgICAgIHRoaXMuc3JjID0gY2h1bmtzICsgdGhpcy5zcmM7XG5cdFx0ICAgIH0sXG5cdFx0ICAgIHRvU3RyaW5nV2l0aFNvdXJjZU1hcDogZnVuY3Rpb24gdG9TdHJpbmdXaXRoU291cmNlTWFwKCkge1xuXHRcdCAgICAgIHJldHVybiB7IGNvZGU6IHRoaXMudG9TdHJpbmcoKSB9O1xuXHRcdCAgICB9LFxuXHRcdCAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0ICAgICAgcmV0dXJuIHRoaXMuc3JjO1xuXHRcdCAgICB9XG5cdFx0ICB9O1xuXHRcdH1cblx0XG5cdFx0ZnVuY3Rpb24gY2FzdENodW5rKGNodW5rLCBjb2RlR2VuLCBsb2MpIHtcblx0XHQgIGlmIChfdXRpbHMuaXNBcnJheShjaHVuaykpIHtcblx0XHQgICAgdmFyIHJldCA9IFtdO1xuXHRcblx0XHQgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNodW5rLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0ICAgICAgcmV0LnB1c2goY29kZUdlbi53cmFwKGNodW5rW2ldLCBsb2MpKTtcblx0XHQgICAgfVxuXHRcdCAgICByZXR1cm4gcmV0O1xuXHRcdCAgfSBlbHNlIGlmICh0eXBlb2YgY2h1bmsgPT09ICdib29sZWFuJyB8fCB0eXBlb2YgY2h1bmsgPT09ICdudW1iZXInKSB7XG5cdFx0ICAgIC8vIEhhbmRsZSBwcmltaXRpdmVzIHRoYXQgdGhlIFNvdXJjZU5vZGUgd2lsbCB0aHJvdyB1cCBvblxuXHRcdCAgICByZXR1cm4gY2h1bmsgKyAnJztcblx0XHQgIH1cblx0XHQgIHJldHVybiBjaHVuaztcblx0XHR9XG5cdFxuXHRcdGZ1bmN0aW9uIENvZGVHZW4oc3JjRmlsZSkge1xuXHRcdCAgdGhpcy5zcmNGaWxlID0gc3JjRmlsZTtcblx0XHQgIHRoaXMuc291cmNlID0gW107XG5cdFx0fVxuXHRcblx0XHRDb2RlR2VuLnByb3RvdHlwZSA9IHtcblx0XHQgIGlzRW1wdHk6IGZ1bmN0aW9uIGlzRW1wdHkoKSB7XG5cdFx0ICAgIHJldHVybiAhdGhpcy5zb3VyY2UubGVuZ3RoO1xuXHRcdCAgfSxcblx0XHQgIHByZXBlbmQ6IGZ1bmN0aW9uIHByZXBlbmQoc291cmNlLCBsb2MpIHtcblx0XHQgICAgdGhpcy5zb3VyY2UudW5zaGlmdCh0aGlzLndyYXAoc291cmNlLCBsb2MpKTtcblx0XHQgIH0sXG5cdFx0ICBwdXNoOiBmdW5jdGlvbiBwdXNoKHNvdXJjZSwgbG9jKSB7XG5cdFx0ICAgIHRoaXMuc291cmNlLnB1c2godGhpcy53cmFwKHNvdXJjZSwgbG9jKSk7XG5cdFx0ICB9LFxuXHRcblx0XHQgIG1lcmdlOiBmdW5jdGlvbiBtZXJnZSgpIHtcblx0XHQgICAgdmFyIHNvdXJjZSA9IHRoaXMuZW1wdHkoKTtcblx0XHQgICAgdGhpcy5lYWNoKGZ1bmN0aW9uIChsaW5lKSB7XG5cdFx0ICAgICAgc291cmNlLmFkZChbJyAgJywgbGluZSwgJ1xcbiddKTtcblx0XHQgICAgfSk7XG5cdFx0ICAgIHJldHVybiBzb3VyY2U7XG5cdFx0ICB9LFxuXHRcblx0XHQgIGVhY2g6IGZ1bmN0aW9uIGVhY2goaXRlcikge1xuXHRcdCAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5zb3VyY2UubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHQgICAgICBpdGVyKHRoaXMuc291cmNlW2ldKTtcblx0XHQgICAgfVxuXHRcdCAgfSxcblx0XG5cdFx0ICBlbXB0eTogZnVuY3Rpb24gZW1wdHkoKSB7XG5cdFx0ICAgIHZhciBsb2MgPSB0aGlzLmN1cnJlbnRMb2NhdGlvbiB8fCB7IHN0YXJ0OiB7fSB9O1xuXHRcdCAgICByZXR1cm4gbmV3IFNvdXJjZU5vZGUobG9jLnN0YXJ0LmxpbmUsIGxvYy5zdGFydC5jb2x1bW4sIHRoaXMuc3JjRmlsZSk7XG5cdFx0ICB9LFxuXHRcdCAgd3JhcDogZnVuY3Rpb24gd3JhcChjaHVuaykge1xuXHRcdCAgICB2YXIgbG9jID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gdGhpcy5jdXJyZW50TG9jYXRpb24gfHwgeyBzdGFydDoge30gfSA6IGFyZ3VtZW50c1sxXTtcblx0XG5cdFx0ICAgIGlmIChjaHVuayBpbnN0YW5jZW9mIFNvdXJjZU5vZGUpIHtcblx0XHQgICAgICByZXR1cm4gY2h1bms7XG5cdFx0ICAgIH1cblx0XG5cdFx0ICAgIGNodW5rID0gY2FzdENodW5rKGNodW5rLCB0aGlzLCBsb2MpO1xuXHRcblx0XHQgICAgcmV0dXJuIG5ldyBTb3VyY2VOb2RlKGxvYy5zdGFydC5saW5lLCBsb2Muc3RhcnQuY29sdW1uLCB0aGlzLnNyY0ZpbGUsIGNodW5rKTtcblx0XHQgIH0sXG5cdFxuXHRcdCAgZnVuY3Rpb25DYWxsOiBmdW5jdGlvbiBmdW5jdGlvbkNhbGwoZm4sIHR5cGUsIHBhcmFtcykge1xuXHRcdCAgICBwYXJhbXMgPSB0aGlzLmdlbmVyYXRlTGlzdChwYXJhbXMpO1xuXHRcdCAgICByZXR1cm4gdGhpcy53cmFwKFtmbiwgdHlwZSA/ICcuJyArIHR5cGUgKyAnKCcgOiAnKCcsIHBhcmFtcywgJyknXSk7XG5cdFx0ICB9LFxuXHRcblx0XHQgIHF1b3RlZFN0cmluZzogZnVuY3Rpb24gcXVvdGVkU3RyaW5nKHN0cikge1xuXHRcdCAgICByZXR1cm4gJ1wiJyArIChzdHIgKyAnJykucmVwbGFjZSgvXFxcXC9nLCAnXFxcXFxcXFwnKS5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csICdcXFxcbicpLnJlcGxhY2UoL1xcci9nLCAnXFxcXHInKS5yZXBsYWNlKC9cXHUyMDI4L2csICdcXFxcdTIwMjgnKSAvLyBQZXIgRWNtYS0yNjIgNy4zICsgNy44LjRcblx0XHQgICAgLnJlcGxhY2UoL1xcdTIwMjkvZywgJ1xcXFx1MjAyOScpICsgJ1wiJztcblx0XHQgIH0sXG5cdFxuXHRcdCAgb2JqZWN0TGl0ZXJhbDogZnVuY3Rpb24gb2JqZWN0TGl0ZXJhbChvYmopIHtcblx0XHQgICAgdmFyIHBhaXJzID0gW107XG5cdFxuXHRcdCAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG5cdFx0ICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0ICAgICAgICB2YXIgdmFsdWUgPSBjYXN0Q2h1bmsob2JqW2tleV0sIHRoaXMpO1xuXHRcdCAgICAgICAgaWYgKHZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuXHRcdCAgICAgICAgICBwYWlycy5wdXNoKFt0aGlzLnF1b3RlZFN0cmluZyhrZXkpLCAnOicsIHZhbHVlXSk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgfVxuXHRcdCAgICB9XG5cdFxuXHRcdCAgICB2YXIgcmV0ID0gdGhpcy5nZW5lcmF0ZUxpc3QocGFpcnMpO1xuXHRcdCAgICByZXQucHJlcGVuZCgneycpO1xuXHRcdCAgICByZXQuYWRkKCd9Jyk7XG5cdFx0ICAgIHJldHVybiByZXQ7XG5cdFx0ICB9LFxuXHRcblx0XHQgIGdlbmVyYXRlTGlzdDogZnVuY3Rpb24gZ2VuZXJhdGVMaXN0KGVudHJpZXMpIHtcblx0XHQgICAgdmFyIHJldCA9IHRoaXMuZW1wdHkoKTtcblx0XG5cdFx0ICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0ICAgICAgaWYgKGkpIHtcblx0XHQgICAgICAgIHJldC5hZGQoJywnKTtcblx0XHQgICAgICB9XG5cdFxuXHRcdCAgICAgIHJldC5hZGQoY2FzdENodW5rKGVudHJpZXNbaV0sIHRoaXMpKTtcblx0XHQgICAgfVxuXHRcblx0XHQgICAgcmV0dXJuIHJldDtcblx0XHQgIH0sXG5cdFxuXHRcdCAgZ2VuZXJhdGVBcnJheTogZnVuY3Rpb24gZ2VuZXJhdGVBcnJheShlbnRyaWVzKSB7XG5cdFx0ICAgIHZhciByZXQgPSB0aGlzLmdlbmVyYXRlTGlzdChlbnRyaWVzKTtcblx0XHQgICAgcmV0LnByZXBlbmQoJ1snKTtcblx0XHQgICAgcmV0LmFkZCgnXScpO1xuXHRcblx0XHQgICAgcmV0dXJuIHJldDtcblx0XHQgIH1cblx0XHR9O1xuXHRcblx0XHRleHBvcnRzWydkZWZhdWx0J10gPSBDb2RlR2VuO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfVxuXHQvKioqKioqLyBdKVxuXHR9KTtcblx0O1xuXG4vKioqLyB9LFxuLyogMTE0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdC8qO1xuXHRcdEBtb2R1bGUtbGljZW5zZTpcblx0XHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdFx0QG1pdC1saWNlbnNlXG5cdFxuXHRcdFx0Q29weXJpZ2h0IChAYykgMjAxNiBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cdFxuXHRcdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdFx0aW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuXHRcdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0XHRmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXHRcblx0XHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdFx0Y29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblx0XG5cdFx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0XHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0XHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdFx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0XHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0XHRTT0ZUV0FSRS5cblx0XHRAZW5kLW1vZHVsZS1saWNlbnNlXG5cdFxuXHRcdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHRcdHtcblx0XHRcdFx0XCJwYWNrYWdlXCI6IFwicmVhbGlnblwiLFxuXHRcdFx0XHRcInBhdGhcIjogXCJyZWFsaWduL3JlYWxpZ24uanNcIixcblx0XHRcdFx0XCJmaWxlXCI6IFwicmVhbGlnbi5qc1wiLFxuXHRcdFx0XHRcIm1vZHVsZVwiOiBcInJlYWxpZ25cIixcblx0XHRcdFx0XCJhdXRob3JcIjogXCJSaWNoZXZlIFMuIEJlYmVkb3JcIixcblx0XHRcdFx0XCJjb250cmlidXRvcnNcIjogW1xuXHRcdFx0XHRcdFwiSm9obiBMZW5vbiBNYWdoYW5veSA8am9obmxlbm9ubWFnaGFub3lAZ21haWwuY29tPlwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZU1haWxcIjogXCJyaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXCIsXG5cdFx0XHRcdFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b2xrb3Zhc3lzdGVtcy9yZWFsaWduLmdpdFwiLFxuXHRcdFx0XHRcInRlc3RcIjogXCJyZWFsaWduLXRlc3QuanNcIixcblx0XHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdFx0fVxuXHRcdEBlbmQtbW9kdWxlLWNvbmZpZ3VyYXRpb25cblx0XG5cdFx0QG1vZHVsZS1kb2N1bWVudGF0aW9uOlxuXHRcdFx0UmUtYWxpZ24gd2hpdGVzcGFjZXMgYW5kIHRhYnMgaW4gYSBtdWx0aS1saW5lIHN0cmluZy5cblx0XG5cdFx0XHRUaGlzIHdpbGwgcmVtb3ZlIGxpbmVzIHdpdGhvdXQgc2lnbmlmaWNhbnQgY2hhcmFjdGVycy5cblx0XHRAZW5kLW1vZHVsZS1kb2N1bWVudGF0aW9uXG5cdFxuXHRcdEBpbmNsdWRlOlxuXHRcdFx0e1xuXHRcdFx0XHRcImZhbHp5XCI6IFwiZmFsenlcIixcblx0XHRcdFx0XCJoYXJkZW5cIjogXCJoYXJkZW5cIixcblx0XHRcdFx0XCJwcm90eXBlXCI6IFwicHJvdHlwZVwiLFxuXHRcdFx0XHRcInRydWx5XCI6IFwidHJ1bHlcIlxuXHRcdFx0fVxuXHRcdEBlbmQtaW5jbHVkZVxuXHQqL1xuXHRcblx0dmFyIGZhbHp5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTApO1xuXHR2YXIgaGFyZGVuID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NSk7XG5cdHZhciBwcm90eXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MCk7XG5cdHZhciB0cnVseSA9IF9fd2VicGFja19yZXF1aXJlX18oMTAwKTtcblx0XG5cdHZhciByZWFsaWduID0gZnVuY3Rpb24gcmVhbGlnbihzdHJpbmcpIHtcblx0XHQvKjtcblx0IFx0QG1ldGEtY29uZmlndXJhdGlvbjpcblx0IFx0XHR7XG5cdCBcdFx0XHRcInN0cmluZzpyZXF1aXJlZFwiOiBcInN0cmluZ1wiXG5cdCBcdFx0fVxuXHQgXHRAZW5kLW1ldGEtY29uZmlndXJhdGlvblxuXHQgKi9cblx0XG5cdFx0aWYgKCFwcm90eXBlKHN0cmluZywgU1RSSU5HKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBzdHJpbmdcIik7XG5cdFx0fVxuXHRcblx0XHRpZiAoZmFsenkoc3RyaW5nKSkge1xuXHRcdFx0cmV0dXJuIHN0cmluZztcblx0XHR9XG5cdFxuXHRcdHN0cmluZyA9IHN0cmluZy5zcGxpdChyZWFsaWduLk5FV0xJTkVfUEFUVEVSTikubWFwKGZ1bmN0aW9uIChsaW5lKSB7XG5cdFx0XHRyZXR1cm4gbGluZS5yZXBsYWNlKHJlYWxpZ24uU1BBQ0VfTElORV9QQVRURVJOLCBcIlwiKTtcblx0XHR9KS5maWx0ZXIodHJ1bHkpLmpvaW4oXCJcXG5cIikucmVwbGFjZShyZWFsaWduLlRSQUlMSU5HX1NQQUNFX1BBVFRFUk4sIFwiXCIpLnNwbGl0KHJlYWxpZ24uTkVXTElORV9QQVRURVJOKTtcblx0XG5cdFx0dmFyIHNwYWNlID0gKHN0cmluZ1swXS5tYXRjaChyZWFsaWduLlNQQUNFX1BBVFRFUk4pIHx8IFtdKVswXSB8fCBcIlwiO1xuXHRcdHZhciBzcGFjZVBhdHRlcm4gPSBuZXcgUmVnRXhwKFwiXlwiICsgc3BhY2UpO1xuXHRcblx0XHRyZXR1cm4gc3RyaW5nLm1hcChmdW5jdGlvbiAobGluZSkge1xuXHRcdFx0cmV0dXJuIGxpbmUucmVwbGFjZShzcGFjZVBhdHRlcm4sIFwiXCIpO1xuXHRcdH0pLmpvaW4oXCJcXG5cIik7XG5cdH07XG5cdFxuXHRoYXJkZW4uYmluZChyZWFsaWduKShcIk5FV0xJTkVfUEFUVEVSTlwiLCAvXFxuLykuaGFyZGVuKFwiU1BBQ0VfUEFUVEVSTlwiLCAvXFxzezIsfS9nKS5oYXJkZW4oXCJTUEFDRV9MSU5FX1BBVFRFUk5cIiwgL15cXHMrJC8pLmhhcmRlbihcIlRSQUlMSU5HX1NQQUNFX1BBVFRFUk5cIiwgL15bXFxuXFxyXSt8W1xcblxcclxcc10rJC9nbSk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IHJlYWxpZ247XG5cblxuLyoqKi8gfSxcbi8qIDExNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHQvKjtcblx0XHRAbW9kdWxlLWxpY2Vuc2U6XG5cdFx0XHRUaGUgTUlUIExpY2Vuc2UgKE1JVClcblx0XHRcdEBtaXQtbGljZW5zZVxuXHRcblx0XHRcdENvcHlyaWdodCAoQGMpIDIwMTYgUmljaGV2ZSBTaW9kaW5hIEJlYmVkb3Jcblx0XHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXHRcblx0XHRcdFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcblx0XHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRcdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0XHRcdHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcblx0XHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdFx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblx0XG5cdFx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRcdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cdFxuXHRcdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdFx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdFx0XHRGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcblx0XHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRcdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdFx0XHRPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuXHRcdFx0U09GVFdBUkUuXG5cdFx0QGVuZC1tb2R1bGUtbGljZW5zZVxuXHRcblx0XHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0XHR7XG5cdFx0XHRcdFwicGFja2FnZVwiOiBcImxsYW1hbGl6ZVwiLFxuXHRcdFx0XHRcImZpbGVcIjogXCJsbGFtYWxpemUuanNcIixcblx0XHRcdFx0XCJwYXRoXCI6IFwibGxhbWFsaXplL2xsYW1hbGl6ZS5qc1wiLFxuXHRcdFx0XHRcIm1vZHVsZVwiOiBcImxsYW1hbGl6ZVwiLFxuXHRcdFx0XHRcImF1dGhvclwiOiBcIlJpY2hldmUgUy4gQmViZWRvclwiLFxuXHRcdFx0XHRcImNvbnRyaWJ1dG9yc1wiOiBbXG5cdFx0XHRcdFx0XCJKb2huIExlbm9uIE1hZ2hhbm95IDxqb2hubGVub25tYWdoYW5veUBnbWFpbC5jb20+XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJlTWFpbFwiOiBcInJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cIixcblx0XHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZvbGtvdmFzeXN0ZW1zL2xsYW1hbGl6ZS5naXRcIixcblx0XHRcdFx0XCJ0ZXN0XCI6IFwibGxhbWFsaXplLXRlc3QuanNcIixcblx0XHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdFx0fVxuXHRcdEBlbmQtbW9kdWxlLWNvbmZpZ3VyYXRpb25cblx0XHRcdFRyYW5zZm9ybSBhbnkgaHVtYW4gcmVhZGFibGUgYWxwaGFudW1lcmljIHN0cmluZyBkaXZpZGVkIGJ5IGNlcnRhaW5cblx0XHRcdGNoYXJhY3RlcnMgaW50byBjYW1lbCBmb3JtLiBJIG5hbWVkIGl0IGxsYW1hbGl6ZSBiZWNhdXNlIGNhbWVsaXplIGlzXG5cdFx0XHR0b28gbWFpbnN0cmVhbS4gQW5kIGxsYW1hcyBhcmUgd2F5IGJldHRlclxuXHRcdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XG5cdFx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXHRcblx0XHRAaW5jbHVkZTpcblx0XHRcdHtcblx0XHRcdFx0XCJmYWx6eVwiOiBcImZhbHp5XCIsXG5cdFx0XHRcdFwiaGFyZGVuXCI6IFwiaGFyZGVuXCIsXG5cdFx0XHRcdFwicHJvdHlwZVwiOiBcInByb3R5cGVcIixcblx0XHRcdFx0XCJ0aXRsZWxpemVcIjogXCJ0aXRsZWxpemVcIlxuXHRcdFx0fVxuXHRcdEBlbmQtaW5jbHVkZVxuXHQqL1xuXHRcblx0dmFyIGZhbHp5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTApO1xuXHR2YXIgaGFyZGVuID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NSk7XG5cdHZhciBwcm90eXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MCk7XG5cdHZhciB0aXRsZWxpemUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExNik7XG5cdFxuXHR2YXIgbGxhbWFsaXplID0gZnVuY3Rpb24gbGxhbWFsaXplKHRleHQsIGZvcm1hbCkge1xuXHRcdC8qO1xuXHQgXHRAbWV0YS1jb25maWd1cmF0aW9uOlxuXHQgXHRcdHtcblx0IFx0XHRcdFwidGV4dDpyZXF1aXJlZFwiOiBcInN0cmluZ1wiLFxuXHQgXHRcdFx0XCJmb3JtYWw6b3B0aW9uYWxcIjogYm9vbGVhblxuXHQgXHRcdH1cblx0IFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cblx0ICovXG5cdFxuXHRcdGlmIChmYWx6eSh0ZXh0KSB8fCAhcHJvdHlwZSh0ZXh0LCBTVFJJTkcpKSB7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdFxuXHRcdHRleHQgPSB0aXRsZWxpemUodGV4dCkucmVwbGFjZShsbGFtYWxpemUuRFJPUF9QQVRURVJOLCBcIlwiKS5yZXBsYWNlKGxsYW1hbGl6ZS5TUEFDRV9QQVRURVJOLCBcIlwiKTtcblx0XG5cdFx0aWYgKGZvcm1hbCkge1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB0ZXh0LnJlcGxhY2UobGxhbWFsaXplLklORk9STUFMX1BBVFRFUk4sIGZ1bmN0aW9uIG9uUmVwbGFjZShtYXRjaCkge1xuXHRcdFx0XHRyZXR1cm4gbWF0Y2gudG9Mb3dlckNhc2UoKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fTtcblx0XG5cdGhhcmRlbi5iaW5kKGxsYW1hbGl6ZSkoXCJEUk9QX1BBVFRFUk5cIiwgL15bMC05XSsvKTtcblx0XG5cdGhhcmRlbi5iaW5kKGxsYW1hbGl6ZSkoXCJTUEFDRV9QQVRURVJOXCIsIC9cXHMrL2cpO1xuXHRcblx0aGFyZGVuLmJpbmQobGxhbWFsaXplKShcIklORk9STUFMX1BBVFRFUk5cIiwgL15bQS1aXS8pO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBsbGFtYWxpemU7XG5cblxuLyoqKi8gfSxcbi8qIDExNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHQvKjtcblx0XHRAbW9kdWxlLWxpY2Vuc2U6XG5cdFx0XHRUaGUgTUlUIExpY2Vuc2UgKE1JVClcblx0XHRcdEBtaXQtbGljZW5zZVxuXHRcblx0XHRcdENvcHlyaWdodCAoQGMpIDIwMTYgUmljaGV2ZSBTaW9kaW5hIEJlYmVkb3Jcblx0XHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXHRcblx0XHRcdFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcblx0XHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRcdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0XHRcdHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcblx0XHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdFx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblx0XG5cdFx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRcdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cdFxuXHRcdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdFx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdFx0XHRGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcblx0XHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRcdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdFx0XHRPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuXHRcdFx0U09GVFdBUkUuXG5cdFx0QGVuZC1tb2R1bGUtbGljZW5zZVxuXHRcblx0XHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0XHR7XG5cdFx0XHRcdFwicGFja2FnZVwiOiBcInRpdGxlbGl6ZVwiLFxuXHRcdFx0XHRcInBhdGhcIjogXCJ0aXRsZWxpemUvdGl0bGVsaXplLmpzXCIsXG5cdFx0XHRcdFwiZmlsZVwiOiBcInRpdGxlbGl6ZS5qc1wiLFxuXHRcdFx0XHRcIm1vZHVsZVwiOiBcInRpdGxlbGl6ZVwiLFxuXHRcdFx0XHRcImF1dGhvclwiOiBcIlJpY2hldmUgUy4gQmViZWRvclwiLFxuXHRcdFx0XHRcImNvbnRyaWJ1dG9yc1wiOiBbXG5cdFx0XHRcdFx0XCJKb2huIExlbm9uIE1hZ2hhbm95IDxqb2hubGVub25tYWdoYW5veUBnbWFpbC5jb20+XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJlTWFpbFwiOiBcInJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cIixcblx0XHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZvbGtvdmFzeXN0ZW1zL3RpdGxlbGl6ZS5naXRcIixcblx0XHRcdFx0XCJ0ZXN0XCI6IFwidGl0bGVsaXplLXRlc3QuanNcIixcblx0XHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdFx0fVxuXHRcdEBlbmQtbW9kdWxlLWNvbmZpZ3VyYXRpb25cblx0XG5cdFx0QG1vZHVsZS1kb2N1bWVudGF0aW9uOlxuXHRcdFx0VHJhbnNmb3JtIGFueSBodW1hbiByZWFkYWJsZSBhbHBoYW51bWVyaWMgc3RyaW5nIGRpdmlkZWQgYnkgY2VydGFpblxuXHRcdFx0Y2hhcmFjdGVycyBpbnRvIHNwYWNlIHNlcGFyYXRlZCBmaXJzdCBsZXR0ZXIgdXBwZXJjYXNlIGZvcm0uXG5cdFx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXHRcblx0XHRAaW5jbHVkZTpcblx0XHRcdHtcblx0XHRcdFx0XCJkaXNkb1wiOiBcImRpc2RvXCIsXG5cdFx0XHRcdFwiaGFyZGVuXCI6IFwiaGFyZGVuXCIsXG5cdFx0XHRcdFwiZmFsenlcIjogXCJmYWx6eVwiLFxuXHRcdFx0XHRcInByb3R5cGVcIjogXCJwcm90eXBlXCJcblx0XHRcdH1cblx0XHRAZW5kLWluY2x1ZGVcblx0Ki9cblx0XG5cdHZhciBkaXNkbyA9IF9fd2VicGFja19yZXF1aXJlX18oMTE3KTtcblx0dmFyIGZhbHp5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTApO1xuXHR2YXIgaGFyZGVuID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NSk7XG5cdHZhciBwcm90eXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MCk7XG5cdFxuXHR2YXIgdGl0bGVsaXplID0gZnVuY3Rpb24gdGl0bGVsaXplKHRleHQpIHtcblx0XHQvKjtcblx0IFx0QG1ldGEtY29uZmlndXJhdGlvbjpcblx0IFx0XHR7XG5cdCBcdFx0XHRcInRleHQ6cmVxdWlyZWRcIjogXCJzdHJpbmdcIlxuXHQgXHRcdH1cblx0IFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cblx0ICovXG5cdFxuXHRcdGlmIChmYWx6eSh0ZXh0KSB8fCAhcHJvdHlwZSh0ZXh0LCBTVFJJTkcpKSB7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdFxuXHRcdHJldHVybiBkaXNkbyh0ZXh0KS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UodGl0bGVsaXplLlRFUk1fUEFUVEVSTiwgZnVuY3Rpb24gb25SZXBsYWNlKG1hdGNoKSB7XG5cdFx0XHRyZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTtcblx0XHR9KTtcblx0fTtcblx0XG5cdGhhcmRlbi5iaW5kKHRpdGxlbGl6ZSkoXCJURVJNX1BBVFRFUk5cIiwgL15bYS16XXxcXHNbYS16XS9nKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gdGl0bGVsaXplO1xuXG5cbi8qKiovIH0sXG4vKiAxMTcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0Lyo7XG5cdFx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFx0VGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cdFx0XHRAbWl0LWxpY2Vuc2Vcblx0XG5cdFx0XHRDb3B5cmlnaHQgKEBjKSAyMDE2IFJpY2hldmUgU2lvZGluYSBCZWJlZG9yXG5cdFx0XHRAZW1haWw6IHJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cblx0XG5cdFx0XHRQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5cdFx0XHRvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5cdFx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0XHR0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5cdFx0XHRjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcblx0XHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cdFxuXHRcdFx0VGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5cdFx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXHRcblx0XHRcdFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcblx0XHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdFx0RklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5cdFx0XHRBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5cdFx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdFx0T1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblx0XHRcdFNPRlRXQVJFLlxuXHRcdEBlbmQtbW9kdWxlLWxpY2Vuc2Vcblx0XG5cdFx0QG1vZHVsZS1jb25maWd1cmF0aW9uOlxuXHRcdFx0e1xuXHRcdFx0XHRcInBhY2thZ2VcIjogXCJkaXNkb1wiLFxuXHRcdFx0XHRcInBhdGhcIjogXCJkaXNkby9kaXNkby5qc1wiLFxuXHRcdFx0XHRcImZpbGVcIjogXCJkaXNkby5qc1wiLFxuXHRcdFx0XHRcIm1vZHVsZVwiOiBcImRpc2RvXCIsXG5cdFx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcdFwiY29udHJpYnV0b3JzXCI6IFtcblx0XHRcdFx0XHRcIkpvaG4gTGVub24gTWFnaGFub3kgPGpvaG5sZW5vbm1hZ2hhbm95QGdtYWlsLmNvbT5cIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XHRcInJlcG9zaXRvcnlcIjogXCJodHRwczovL2dpdGh1Yi5jb20vdm9sa292YXN5c3RlbXMvZGlzZG8uZ2l0XCIsXG5cdFx0XHRcdFwidGVzdFwiOiBcImRpc2RvLXRlc3QuanNcIixcblx0XHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdFx0fVxuXHRcdEBlbmQtbW9kdWxlLWNvbmZpZ3VyYXRpb25cblx0XG5cdFx0QG1vZHVsZS1kb2N1bWVudGF0aW9uOlxuXHRcdFx0QWxsIHNwZWNpYWwgY2hhcmFjdGVycyBvbiB0aGUgYmVnaW5uaW5nIG9mIHRoZSBub24tYWxwaGFudW1lcmljIHdvcmQgd2lsbCBiZSBkaXNjYXJkZWQuXG5cdFx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXHRcblx0XHRAaW5jbHVkZTpcblx0XHRcdHtcblx0XHRcdFx0XCJmYWx6eVwiOiBcImZhbHp5XCIsXG5cdFx0XHRcdFwiaGFyZGVuXCI6IFwiaGFyZGVuXCIsXG5cdFx0XHRcdFwicHJvdHlwZVwiOiBcInByb3R5cGVcIlxuXHRcdFx0fVxuXHRcdEBlbmQtaW5jbHVkZVxuXHQqL1xuXHRcblx0dmFyIGZhbHp5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTApO1xuXHR2YXIgaGFyZGVuID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NSk7XG5cdHZhciBwcm90eXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MCk7XG5cdFxuXHR2YXIgZGlzZG8gPSBmdW5jdGlvbiBkaXNkbyh0ZXh0KSB7XG5cdFx0Lyo7XG5cdCBcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdCBcdFx0e1xuXHQgXHRcdFx0XCJ0ZXh0OnJlcXVpcmVkXCI6IFwic3RyaW5nXCJcblx0IFx0XHR9XG5cdCBcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG5cdCAqL1xuXHRcblx0XHRpZiAoZmFsenkodGV4dCkgfHwgIXByb3R5cGUodGV4dCwgU1RSSU5HKSkge1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gdGV4dC5yZXBsYWNlKGRpc2RvLkNMRUFOX1BBVFRFUk4sIFwiIFwiKS5yZXBsYWNlKGRpc2RvLlVQUEVSQ0FTRV9QQVRURVJOLCBmdW5jdGlvbiBvblJlcGxhY2UobWF0Y2gpIHtcblx0XHRcdHJldHVybiBtYXRjaC5yZXBsYWNlKG1hdGNoLCBcIiBcIiArIG1hdGNoKTtcblx0XHR9KS5yZXBsYWNlKGRpc2RvLlNQQUNFX1BBVFRFUk4sIFwiIFwiKS5yZXBsYWNlKGRpc2RvLkRST1BfUEFUVEVSTiwgXCJcIik7XG5cdH07XG5cdFxuXHRoYXJkZW4uYmluZChkaXNkbykoXCJDTEVBTl9QQVRURVJOXCIsIC9bXmEtekEtWjAtOV0rL2cpLmhhcmRlbihcIlVQUEVSQ0FTRV9QQVRURVJOXCIsIC9bQS1aXSsvZykuaGFyZGVuKFwiU1BBQ0VfUEFUVEVSTlwiLCAvXFxzKy9nKS5oYXJkZW4oXCJEUk9QX1BBVFRFUk5cIiwgL15bXmEtekEtWjAtOV0rfFteYS16QS1aMC05XSskL2cpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBkaXNkbztcblxuXG4vKioqLyB9LFxuLyogMTE4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdC8qO1xuXHRcdEBtb2R1bGUtbGljZW5zZTpcblx0XHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdFx0QG1pdC1saWNlbnNlXG5cdFxuXHRcdFx0Q29weXJpZ2h0IChAYykgMjAxNiBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cdFxuXHRcdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdFx0aW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuXHRcdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0XHRmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXHRcblx0XHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdFx0Y29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblx0XG5cdFx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0XHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0XHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdFx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0XHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0XHRTT0ZUV0FSRS5cblx0XHRAZW5kLW1vZHVsZS1saWNlbnNlXG5cdFxuXHRcdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHRcdHtcblx0XHRcdFx0XCJwYWNrYWdlXCI6IFwib3B0Zm9yXCIsXG5cdFx0XHRcdFwicGF0aFwiOiBcIm9wdGZvci9vcHRmb3IuanNcIixcblx0XHRcdFx0XCJmaWxlXCI6IFwib3B0Zm9yLmpzXCIsXG5cdFx0XHRcdFwibW9kdWxlXCI6IFwib3B0Zm9yXCIsXG5cdFx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcdFwiY29udHJpYnV0b3JzXCI6IFtcblx0XHRcdFx0XHRcIkpvaG4gTGVub24gTWFnaGFub3kgPGpvaG5sZW5vbm1hZ2hhbm95QGdtYWlsLmNvbT5cIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XHRcInJlcG9zaXRvcnlcIjogXCJodHRwczovL2dpdGh1Yi5jb20vdm9sa292YXN5c3RlbXMvb3B0Zm9yLmdpdFwiLFxuXHRcdFx0XHRcInRlc3RcIjogXCJvcHRmb3ItdGVzdC5qc1wiLFxuXHRcdFx0XHRcImdsb2JhbFwiOiB0cnVlXG5cdFx0XHR9XG5cdFx0QGVuZC1tb2R1bGUtY29uZmlndXJhdGlvblxuXHRcblx0XHRAbW9kdWxlLWRvY3VtZW50YXRpb246XG5cdFx0XHRQaWNrIHRoZSBlbGVtZW50IHRoYXQgc2F0aXNmeSB0aGUgY29uZGl0aW9uIHdpdGggbW9kaWZpZXIuXG5cdFxuXHRcdFx0TW9kaWZpZXIgY2FuIGJlIGEgYm9vbGVhbiBmbGFnIG9yIGEgZnVuY3Rpb24uXG5cdFx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXHRcblx0XHRAaW5jbHVkZTpcblx0XHRcdHtcblx0XHRcdFx0XCJkb3VidFwiOiBcImRvdWJ0XCIsXG5cdFx0XHRcdFwiZmFsemVcIjogXCJmYWx6ZVwiLFxuXHRcdFx0XHRcImhhcmRlblwiOiBcImhhcmRlblwiLFxuXHRcdFx0XHRcIm9wdGFsbFwiOiBcIm9wdGFsbFwiLFxuXHRcdFx0XHRcInByb3R5cGVcIjogXCJwcm90eXBlXCIsXG5cdFx0XHRcdFwiemVsZlwiOiBcInplbGZcIlxuXHRcdFx0fVxuXHRcdEBlbmQtaW5jbHVkZVxuXHQqL1xuXHRcblx0dmFyIGRvdWJ0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OCk7XG5cdHZhciBmYWx6ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTE5KTtcblx0dmFyIGhhcmRlbiA9IF9fd2VicGFja19yZXF1aXJlX18oODUpO1xuXHR2YXIgb3B0YWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjEpO1xuXHR2YXIgcHJvdHlwZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTApO1xuXHR2YXIgemVsZiA9IF9fd2VicGFja19yZXF1aXJlX18oMTIzKTtcblx0XG5cdGhhcmRlbihcIkJPT0xFQU5cIiwgXCJib29sZWFuXCIpO1xuXHRoYXJkZW4oXCJGVU5DVElPTlwiLCBcImZ1bmN0aW9uXCIpO1xuXHRoYXJkZW4oXCJOVU1CRVJcIiwgXCJudW1iZXJcIik7XG5cdGhhcmRlbihcIk9CSkVDVFwiLCBcIm9iamVjdFwiKTtcblx0aGFyZGVuKFwiU1RSSU5HXCIsIFwic3RyaW5nXCIpO1xuXHRoYXJkZW4oXCJVTkRFRklORURcIiwgXCJ1bmRlZmluZWRcIik7XG5cdGhhcmRlbihcIlNZTUJPTFwiLCBcInN5bWJvbFwiKTtcblx0XG5cdHZhciBvcHRmb3IgPSBmdW5jdGlvbiBvcHRmb3IobGlzdCwgY29uZGl0aW9uLCBtb2RpZmllcikge1xuXHRcdC8qO1xuXHQgXHRAbWV0YS1jb25maWd1cmF0aW9uOlxuXHQgXHRcdHtcblx0IFx0XHRcdFwibGlzdDpyZXF1aXJlZFwiOiBbXG5cdCBcdFx0XHRcdFwiQXJndW1lbnRzXCIsXG5cdCBcdFx0XHRcdFwiWypdXCJcblx0IFx0XHRcdF0sXG5cdCBcdFx0XHRcImNvbmRpdGlvbjpyZXF1aXJlZFwiOiBbXG5cdCBcdFx0XHRcdFwic3RyaW5nXCIsXG5cdCBcdFx0XHRcdFwiZnVuY3Rpb25cIixcblx0IFx0XHRcdFx0Qk9PTEVBTixcblx0IFx0XHRcdFx0RlVOQ1RJT04sXG5cdCBcdFx0XHRcdE5VTUJFUixcblx0IFx0XHRcdFx0T0JKRUNULFxuXHQgXHRcdFx0XHRTVFJJTkcsXG5cdCBcdFx0XHRcdFVOREVGSU5FRCxcblx0IFx0XHRcdFx0U1lNQk9MLFxuXHQgXHRcdFx0XHRcIltzdHJpbmcsIGZ1bmN0aW9uXVwiXG5cdCBcdFx0XHRdLFxuXHQgXHRcdFx0XCJtb2RpZmllclwiOiBbXG5cdCBcdFx0XHRcdFwiZnVuY3Rpb25cIixcblx0IFx0XHRcdFx0XCJib29sZWFuXCJcblx0IFx0XHRcdF1cblx0IFx0XHR9XG5cdCBcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG5cdCAqL1xuXHRcblx0XHRpZiAoIWRvdWJ0KGxpc3QsIEFTX0FSUkFZKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBsaXN0XCIpO1xuXHRcdH1cblx0XG5cdFx0aWYgKGZhbHplKGNvbmRpdGlvbikpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY29uZGl0aW9uXCIpO1xuXHRcdH1cblx0XG5cdFx0dmFyIHNlbGYgPSB6ZWxmKHRoaXMpO1xuXHRcblx0XHR2YXIgZWxlbWVudCA9IG9wdGFsbC5iaW5kKHNlbGYpKGxpc3QsIGNvbmRpdGlvbiwgbW9kaWZpZXIpWzBdO1xuXHRcblx0XHR2YXIgbW9kaWZpZXJUeXBlID0gcHJvdHlwZShtb2RpZmllcik7XG5cdFx0aWYgKG1vZGlmaWVyVHlwZS5GVU5DVElPTikge1xuXHRcdFx0cmV0dXJuIG1vZGlmaWVyLmJpbmQoc2VsZikoZWxlbWVudCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBlbGVtZW50O1xuXHRcdH1cblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gb3B0Zm9yO1xuXG5cbi8qKiovIH0sXG4vKiAxMTkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0Lyo7XG5cdFx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFx0VGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cdFx0XHRAbWl0LWxpY2Vuc2Vcblx0XG5cdFx0XHRDb3B5cmlnaHQgKEBjKSAyMDE2IFJpY2hldmUgU2lvZGluYSBCZWJlZG9yXG5cdFx0XHRAZW1haWw6IHJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cblx0XG5cdFx0XHRQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5cdFx0XHRvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5cdFx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0XHR0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5cdFx0XHRjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcblx0XHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cdFxuXHRcdFx0VGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5cdFx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXHRcblx0XHRcdFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcblx0XHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdFx0RklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5cdFx0XHRBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5cdFx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdFx0T1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblx0XHRcdFNPRlRXQVJFLlxuXHRcdEBlbmQtbW9kdWxlLWxpY2Vuc2Vcblx0XG5cdFx0QG1vZHVsZS1jb25maWd1cmF0aW9uOlxuXHRcdFx0e1xuXHRcdFx0XHRcInBhY2thZ2VcIjogXCJmYWx6ZVwiLFxuXHRcdFx0XHRcInBhdGhcIjogXCJmYWx6ZS9mYWx6ZS5qc1wiLFxuXHRcdFx0XHRcImZpbGVcIjogXCJmYWx6ZS5qc1wiLFxuXHRcdFx0XHRcIm1vZHVsZVwiOiBcImZhbHplXCIsXG5cdFx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcdFwiY29udHJpYnV0b3JzXCI6IFtcblx0XHRcdFx0XHRcIkpvaG4gTGVub24gTWFnaGFub3kgPGpvaG5sZW5vbm1hZ2hhbm95QGdtYWlsLmNvbT5cIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XHRcInJlcG9zaXRvcnlcIjogXCJodHRwczovL2dpdGh1Yi5jb20vdm9sa292YXN5c3RlbXMvZmFsemUuZ2l0XCIsXG5cdFx0XHRcdFwidGVzdFwiOiBcImZhbHplLXRlc3QuanNcIixcblx0XHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdFx0fVxuXHRcdEBlbmQtbW9kdWxlLWNvbmZpZ3VyYXRpb25cblx0XG5cdFx0QG1vZHVsZS1kb2N1bWVudGF0aW9uOlxuXHRcdFx0Q2hlY2sgaWYgZW50aXR5IGlzIGZhbHN5IG9yIGVtcHR5LlxuXHRcdEBlbmQtbW9kdWxlLWRvY3VtZW50YXRpb25cblx0XG5cdFx0QGluY2x1ZGU6XG5cdFx0XHR7XG5cdFx0XHRcdFwiYXJpZFwiOiBcImFyaWRcIixcblx0XHRcdFx0XCJkb3VidFwiOiBcImRvdWJ0XCIsXG5cdFx0XHRcdFwiZW1wdFwiOiBcImVtcHRcIixcblx0XHRcdFx0XCJmYWx6eVwiOiBcImZhbHp5XCIsXG5cdFx0XHRcdFwicHJvdHlwZVwiOiBcInByb3R5cGVcIlxuXHRcdFx0fVxuXHRcdEBlbmQtaW5jbHVkZVxuXHQqL1xuXHRcblx0dmFyIGFyaWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwNik7XG5cdHZhciBkb3VidCA9IF9fd2VicGFja19yZXF1aXJlX18oNDgpO1xuXHR2YXIgZW1wdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTIwKTtcblx0dmFyIGZhbHp5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTApO1xuXHR2YXIgcHJvdHlwZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTApO1xuXHRcblx0dmFyIGZhbHplID0gZnVuY3Rpb24gZmFsemUoZW50aXR5KSB7XG5cdFx0Lyo7XG5cdCBcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdCBcdFx0e1xuXHQgXHRcdFx0XCJlbnRpdHk6cmVxdWlyZWRcIjogXCIqXCJcblx0IFx0XHR9XG5cdCBcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG5cdCAqL1xuXHRcblx0XHRpZiAoZG91YnQoZW50aXR5KS5BU19BUlJBWSkge1xuXHRcdFx0cmV0dXJuIGFyaWQoZW50aXR5KTtcblx0XHR9XG5cdFxuXHRcdGlmIChwcm90eXBlKGVudGl0eSwgT0JKRUNUKSkge1xuXHRcdFx0cmV0dXJuIGVtcHQoZW50aXR5KTtcblx0XHR9XG5cdFxuXHRcdHJldHVybiBmYWx6eShlbnRpdHkpO1xuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmYWx6ZTtcblxuXG4vKioqLyB9LFxuLyogMTIwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdC8qO1xuXHRcdEBtb2R1bGUtbGljZW5zZTpcblx0XHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdFx0QG1pdC1saWNlbnNlXG5cdFxuXHRcdFx0Q29weXJpZ2h0IChAYykgMjAxNiBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cdFxuXHRcdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdFx0aW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuXHRcdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0XHRmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXHRcblx0XHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdFx0Y29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblx0XG5cdFx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0XHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0XHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdFx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0XHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0XHRTT0ZUV0FSRS5cblx0XHRAZW5kLW1vZHVsZS1saWNlbnNlXG5cdFxuXHRcdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHRcdHtcblx0XHRcdFx0XCJwYWNrYWdlXCI6IFwiZW1wdFwiLFxuXHRcdFx0XHRcInBhdGhcIjogXCJlbXB0L2VtcHQuanNcIixcblx0XHRcdFx0XCJmaWxlXCI6IFwiZW1wdC5qc1wiLFxuXHRcdFx0XHRcIm1vZHVsZVwiOiBcImVtcHRcIixcblx0XHRcdFx0XCJhdXRob3JcIjogXCJSaWNoZXZlIFMuIEJlYmVkb3JcIixcblx0XHRcdFx0XCJlTWFpbFwiOiBcInJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cIixcblx0XHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZvbGtvdmFzeXN0ZW1zL2VtcHQuZ2l0XCIsXG5cdFx0XHRcdFwidGVzdFwiOiBcImVtcHQtdGVzdC5qc1wiLFxuXHRcdFx0XHRcImdsb2JhbFwiOiB0cnVlXG5cdFx0XHR9XG5cdFx0QGVuZC1tb2R1bGUtY29uZmlndXJhdGlvblxuXHRcblx0XHRAbW9kdWxlLWRvY3VtZW50YXRpb246XG5cdFx0XHRDaGVjayBpZiBvYmplY3QgaGFzIG5vIGVudW1lcmFibGUgcHJvcGVydGllcy5cblx0XHRAZW5kLW1vZHVsZS1kb2N1bWVudGF0aW9uXG5cdFxuXHRcdEBpbmNsdWRlOlxuXHRcdFx0e1xuXHRcdFx0XHRcImRvdWJ0XCI6IFwiZG91YnRcIixcblx0XHRcdFx0XCJrb3VudFwiOiBcImtvdW50XCIsXG5cdFx0XHRcdFwicHJvdHlwZVwiOiBcInByb3R5cGVcIlxuXHRcdFx0fVxuXHRcdEBlbmQtaW5jbHVkZVxuXHQqL1xuXHRcblx0dmFyIGRvdWJ0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OCk7XG5cdHZhciBrb3VudCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdHZhciBwcm90eXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MCk7XG5cdFxuXHR2YXIgZW1wdCA9IGZ1bmN0aW9uIGVtcHQob2JqZWN0KSB7XG5cdFx0Lyo7XG5cdCBcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdCBcdFx0e1xuXHQgXHRcdFx0XCJvYmplY3Q6cmVxdWlyZWRcIjogXCJvYmplY3RcIlxuXHQgXHRcdH1cblx0IFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cblx0ICovXG5cdFxuXHRcdGlmIChkb3VidChvYmplY3QpLkFTX0FSUkFZIHx8ICFwcm90eXBlKG9iamVjdCwgT0JKRUNUKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBvYmplY3RcIik7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gb2JqZWN0ID09PSBudWxsIHx8IGtvdW50KG9iamVjdCkgPT0gMDtcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZW1wdDtcblxuXG4vKioqLyB9LFxuLyogMTIxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdC8qO1xuXHRcdEBtb2R1bGUtbGljZW5zZTpcblx0XHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdFx0QG1pdC1saWNlbnNlXG5cdFxuXHRcdFx0Q29weXJpZ2h0IChAYykgMjAxNiBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cdFxuXHRcdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdFx0aW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuXHRcdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0XHRmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXHRcblx0XHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdFx0Y29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblx0XG5cdFx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0XHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0XHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdFx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0XHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0XHRTT0ZUV0FSRS5cblx0XHRAZW5kLW1vZHVsZS1saWNlbnNlXG5cdFxuXHRcdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHRcdHtcblx0XHRcdFx0XCJwYWNrYWdlXCI6IFwib3B0YWxsXCIsXG5cdFx0XHRcdFwicGF0aFwiOiBcIm9wdGFsbC9vcHRhbGwuanNcIixcblx0XHRcdFx0XCJmaWxlXCI6IFwib3B0YWxsLmpzXCIsXG5cdFx0XHRcdFwibW9kdWxlXCI6IFwib3B0YWxsXCIsXG5cdFx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcdFwiZU1haWxcIjogXCJyaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXCIsXG5cdFx0XHRcdFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b2xrb3Zhc3lzdGVtcy9vcHRhbGwuZ2l0XCIsXG5cdFx0XHRcdFwidGVzdFwiOiBcIm9wdGFsbC10ZXN0LmpzXCIsXG5cdFx0XHRcdFwiZ2xvYmFsXCI6IHRydWVcblx0XHRcdH1cblx0XHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cdFxuXHRcdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRcdEV4dHJhY3QgYWxsIGRlc2lnbmF0ZWQgZWxlbWVudHMgd2l0aCBtb2RpZmllci5cblx0XG5cdFx0XHRNb2RpZmllciBjYW4gYmUgYSBib29sZWFuIGZsYWcgb3IgYSBmdW5jdGlvbi5cblx0XHRAZW5kLW1vZHVsZS1kb2N1bWVudGF0aW9uXG5cdFxuXHRcdEBpbmNsdWRlOlxuXHRcdFx0e1xuXHRcdFx0XHRcImRvdWJ0XCI6IFwiZG91YnRcIixcblx0XHRcdFx0XCJmYWx6ZVwiOiBcImZhbHplXCIsXG5cdFx0XHRcdFwiaGFyZGVuXCI6IFwiaGFyZGVuXCIsXG5cdFx0XHRcdFwicHJvdHlwZVwiOiBcInByb3R5cGVcIixcblx0XHRcdFx0XCJweWNrXCI6IFwicHlja1wiLFxuXHRcdFx0XHRcInplbGZcIjogXCJ6ZWxmXCJcblx0XHRcdH1cblx0XHRAZW5kLWluY2x1ZGVcblx0Ki9cblx0XG5cdHZhciBkb3VidCA9IF9fd2VicGFja19yZXF1aXJlX18oNDgpO1xuXHR2YXIgZmFsemUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExOSk7XG5cdHZhciBoYXJkZW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1KTtcblx0dmFyIHByb3R5cGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkwKTtcblx0dmFyIHB5Y2sgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMik7XG5cdHZhciB6ZWxmID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjMpO1xuXHRcblx0aGFyZGVuKFwiQk9PTEVBTlwiLCBcImJvb2xlYW5cIik7XG5cdGhhcmRlbihcIkZVTkNUSU9OXCIsIFwiZnVuY3Rpb25cIik7XG5cdGhhcmRlbihcIk5VTUJFUlwiLCBcIm51bWJlclwiKTtcblx0aGFyZGVuKFwiT0JKRUNUXCIsIFwib2JqZWN0XCIpO1xuXHRoYXJkZW4oXCJTVFJJTkdcIiwgXCJzdHJpbmdcIik7XG5cdGhhcmRlbihcIlVOREVGSU5FRFwiLCBcInVuZGVmaW5lZFwiKTtcblx0aGFyZGVuKFwiU1lNQk9MXCIsIFwic3ltYm9sXCIpO1xuXHRcblx0dmFyIG9wdGFsbCA9IGZ1bmN0aW9uIG9wdGFsbChsaXN0LCBjb25kaXRpb24sIG1vZGlmaWVyKSB7XG5cdFx0Lyo7XG5cdCBcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdCBcdFx0e1xuXHQgXHRcdFx0XCJsaXN0OnJlcXVpcmVkXCI6IFtcblx0IFx0XHRcdFx0XCJBcmd1bWVudHNcIixcblx0IFx0XHRcdFx0XCJbKl1cIlxuXHQgXHRcdFx0XSxcblx0IFx0XHRcdFwiY29uZGl0aW9uOnJlcXVpcmVkXCI6IFtcblx0IFx0XHRcdFx0XCJzdHJpbmdcIixcblx0IFx0XHRcdFx0XCJmdW5jdGlvblwiLFxuXHQgXHRcdFx0XHRCT09MRUFOLFxuXHQgXHRcdFx0XHRGVU5DVElPTixcblx0IFx0XHRcdFx0TlVNQkVSLFxuXHQgXHRcdFx0XHRPQkpFQ1QsXG5cdCBcdFx0XHRcdFNUUklORyxcblx0IFx0XHRcdFx0VU5ERUZJTkVELFxuXHQgXHRcdFx0XHRTWU1CT0wsXG5cdCBcdFx0XHRcdFwiW3N0cmluZywgZnVuY3Rpb25dXCJcblx0IFx0XHRcdF0sXG5cdCBcdFx0XHRcIm1vZGlmaWVyXCI6IFtcblx0IFx0XHRcdFx0XCJmdW5jdGlvblwiLFxuXHQgXHRcdFx0XHRcImJvb2xlYW5cIlxuXHQgXHRcdFx0XVxuXHQgXHRcdH1cblx0IFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cblx0ICovXG5cdFxuXHRcdGlmICghZG91YnQobGlzdCwgQVNfQVJSQVkpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGxpc3RcIik7XG5cdFx0fVxuXHRcblx0XHRpZiAoZmFsemUoY29uZGl0aW9uKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjb25kaXRpb25cIik7XG5cdFx0fVxuXHRcblx0XHR2YXIgc2VsZiA9IHplbGYodGhpcyk7XG5cdFxuXHRcdHZhciBtb2RpZmllclR5cGUgPSBwcm90eXBlKG1vZGlmaWVyKTtcblx0XG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xuXHRcblx0XHRpZiAobW9kaWZpZXJUeXBlLkJPT0xFQU4pIHtcblx0XHRcdHJlc3VsdCA9IHB5Y2suYmluZChzZWxmKShsaXN0LCBjb25kaXRpb24sIG1vZGlmaWVyKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gcHljay5iaW5kKHNlbGYpKGxpc3QsIGNvbmRpdGlvbik7XG5cdFx0fVxuXHRcblx0XHRpZiAobW9kaWZpZXJUeXBlLkZVTkNUSU9OKSB7XG5cdFx0XHRyZXR1cm4gcmVzdWx0Lm1hcChtb2RpZmllcik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBvcHRhbGw7XG5cblxuLyoqKi8gfSxcbi8qIDEyMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHQvKjtcblx0XHRAbW9kdWxlLWxpY2Vuc2U6XG5cdFx0XHRUaGUgTUlUIExpY2Vuc2UgKE1JVClcblx0XHRcdEBtaXQtbGljZW5zZVxuXHRcblx0XHRcdENvcHlyaWdodCAoQGMpIDIwMTYgUmljaGV2ZSBTaW9kaW5hIEJlYmVkb3Jcblx0XHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXHRcblx0XHRcdFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcblx0XHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRcdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0XHRcdHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcblx0XHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdFx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblx0XG5cdFx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRcdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cdFxuXHRcdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdFx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdFx0XHRGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcblx0XHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRcdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdFx0XHRPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuXHRcdFx0U09GVFdBUkUuXG5cdFx0QGVuZC1tb2R1bGUtbGljZW5zZVxuXHRcblx0XHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0XHR7XG5cdFx0XHRcdFwicGFja2FnZVwiOiBcInB5Y2tcIixcblx0XHRcdFx0XCJwYXRoXCI6IFwicHljay9weWNrLmpzXCIsXG5cdFx0XHRcdFwiZmlsZVwiOiBcInB5Y2suanNcIixcblx0XHRcdFx0XCJtb2R1bGVcIjogXCJweWNrXCIsXG5cdFx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcdFwiY29udHJpYnV0b3JzXCI6IFtcblx0XHRcdFx0XHRcIkpvaG4gTGVub24gTWFnaGFub3kgPGpvaG5sZW5vbm1hZ2hhbm95QGdtYWlsLmNvbT5cIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XHRcInJlcG9zaXRvcnlcIjogXCJodHRwczovL2dpdGh1Yi5jb20vdm9sa292YXN5c3RlbXMvcHljay5naXRcIixcblx0XHRcdFx0XCJ0ZXN0XCI6IFwicHljay10ZXN0LmpzXCIsXG5cdFx0XHRcdFwiZ2xvYmFsXCI6IHRydWVcblx0XHRcdH1cblx0XHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cdFxuXHRcdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRcdFBpY2sgZWxlbWVudHMgYmFzZWQgb24gY29uZGl0aW9uLlxuXHRcblx0XHRcdENvbmRpdGlvbnMgbWF5IGJlIHR5cGUsIGZ1bmN0aW9uLCBjbGFzcyBvciBhY3R1YWwgdmFsdWUgdG8gYmUgY29tcGFyZWQuXG5cdFxuXHRcdFx0U2V0dGluZyBzdGF0ZSB3aWxsIGZ1cnRoZXIgY2hlY2sgaWYgdGhlIGVsZW1lbnQgaXMgbm9uLW51bGwsIG5vbi11bmRlZmluZWQsXG5cdFx0XHRcdG5vbi1lbXB0eSBzdHJpbmcsIG9iamVjdCBvciBhcnJheSwgbm90IEluZmluaXR5IGFuZCBOYU4gaWYgc3RhdGUgaXMgdHJ1ZSBvdGhlcndpc2Vcblx0XHRcdFx0aXQgd2lsbCBjaGVjayBmb3IgZmFsc3kgdmFsdWVzLlxuXHRcblx0XHRcdElmIGNvbmRpdGlvbiBpcyBhIGZ1bmN0aW9uIGl0IHNob3VsZCByZXR1cm4gYSBib29sZWFuIHJlc3VsdCBlbHNlLFxuXHRcdFx0XHR0aGlzIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG5cdFx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXHRcblx0XHRAaW5jbHVkZTpcblx0XHRcdHtcblx0XHRcdFx0XCJkb3VidFwiOiBcImRvdWJ0XCIsXG5cdFx0XHRcdFwiZmFsemVcIjogXCJmYWx6ZVwiLFxuXHRcdFx0XHRcImZhbHp5XCI6IFwiZmFsenlcIixcblx0XHRcdFx0XCJoYXJkZW5cIjogXCJoYXJkZW5cIixcblx0XHRcdFx0XCJwcm90eXBlXCI6IFwicHJvdHlwZVwiLFxuXHRcdFx0XHRcInJhemVcIjogXCJyYXplXCIsXG5cdFx0XHRcdFwidHJ1dVwiOiBcInRydXVcIixcblx0XHRcdFx0XCJ6ZWxmXCI6IFwiemVsZlwiXG5cdFx0XHR9XG5cdFx0QGVuZC1pbmNsdWRlXG5cdCovXG5cdFxuXHR2YXIgZG91YnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4KTtcblx0dmFyIGZhbHplID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTkpO1xuXHR2YXIgZmFsenkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMCk7XG5cdHZhciBoYXJkZW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1KTtcblx0dmFyIHByb3R5cGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkwKTtcblx0dmFyIHJhemUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMyk7XG5cdHZhciB0cnV1ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDEpO1xuXHR2YXIgemVsZiA9IF9fd2VicGFja19yZXF1aXJlX18oMTIzKTtcblx0XG5cdGhhcmRlbihcIkJPT0xFQU5cIiwgXCJib29sZWFuXCIpO1xuXHRoYXJkZW4oXCJGVU5DVElPTlwiLCBcImZ1bmN0aW9uXCIpO1xuXHRoYXJkZW4oXCJOVU1CRVJcIiwgXCJudW1iZXJcIik7XG5cdGhhcmRlbihcIk9CSkVDVFwiLCBcIm9iamVjdFwiKTtcblx0aGFyZGVuKFwiU1RSSU5HXCIsIFwic3RyaW5nXCIpO1xuXHRoYXJkZW4oXCJVTkRFRklORURcIiwgXCJ1bmRlZmluZWRcIik7XG5cdGhhcmRlbihcIlNZTUJPTFwiLCBcInN5bWJvbFwiKTtcblx0XG5cdHZhciBweWNrID0gZnVuY3Rpb24gcHljayhsaXN0LCBjb25kaXRpb24sIHN0YXRlKSB7XG5cdFx0Lyo7XG5cdCBcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdCBcdFx0e1xuXHQgXHRcdFx0XCJsaXN0OnJlcXVpcmVkXCI6IFtcblx0IFx0XHRcdFx0XCJBcmd1bWVudHNcIixcblx0IFx0XHRcdFx0XCJbKl1cIlxuXHQgXHRcdFx0XSxcblx0IFx0XHRcdFwiY29uZGl0aW9uOnJlcXVpcmVkXCI6IFtcblx0IFx0XHRcdFx0XCJzdHJpbmdcIixcblx0IFx0XHRcdFx0XCJmdW5jdGlvblwiLFxuXHQgXHRcdFx0XHRCT09MRUFOLFxuXHQgXHRcdFx0XHRGVU5DVElPTixcblx0IFx0XHRcdFx0TlVNQkVSLFxuXHQgXHRcdFx0XHRPQkpFQ1QsXG5cdCBcdFx0XHRcdFNUUklORyxcblx0IFx0XHRcdFx0VU5ERUZJTkVELFxuXHQgXHRcdFx0XHRTWU1CT0wsXG5cdCBcdFx0XHRcdFwiW3N0cmluZywgZnVuY3Rpb25dXCJcblx0IFx0XHRcdF0sXG5cdCBcdFx0XHRcInN0YXRlXCI6IFwiYm9vbGVhblwiXG5cdCBcdFx0fVxuXHQgXHRAZW5kLW1ldGEtY29uZmlndXJhdGlvblxuXHQgKi9cblx0XG5cdFx0aWYgKGRvdWJ0KGNvbmRpdGlvbikuQVJSQVkpIHtcblx0XHRcdHJldHVybiBjb25kaXRpb24ucmVkdWNlKGZ1bmN0aW9uIG9uRWFjaENvbmRpdGlvbihhY2N1bXVsYW50LCBjb25kaXRpb24pIHtcblx0XHRcdFx0cmV0dXJuIGFjY3VtdWxhbnQuY29uY2F0KHB5Y2sobGlzdCwgY29uZGl0aW9uKSk7XG5cdFx0XHR9LCBbXSk7XG5cdFx0fSBlbHNlIGlmIChmYWx6eShjb25kaXRpb24pKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNvbmRpdGlvblwiKTtcblx0XHR9XG5cdFxuXHRcdHZhciBzZWxmID0gemVsZih0aGlzKTtcblx0XG5cdFx0dmFyIGNvbmRpdGlvblR5cGUgPSBwcm90eXBlKGNvbmRpdGlvbik7XG5cdFxuXHRcdHJldHVybiByYXplKGxpc3QpLmZpbHRlcihmdW5jdGlvbiBvbkVhY2hFbGVtZW50KGVsZW1lbnQsIGluZGV4KSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRpZiAoZWxlbWVudCA9PT0gY29uZGl0aW9uKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0gZWxzZSBpZiAoY29uZGl0aW9uVHlwZS5TVFJJTkcgJiYgKGNvbmRpdGlvbiA9PSBCT09MRUFOIHx8IGNvbmRpdGlvbiA9PSBGVU5DVElPTiB8fCBjb25kaXRpb24gPT0gTlVNQkVSIHx8IGNvbmRpdGlvbiA9PSBPQkpFQ1QgfHwgY29uZGl0aW9uID09IFNUUklORyB8fCBjb25kaXRpb24gPT0gVU5ERUZJTkVEIHx8IGNvbmRpdGlvbiA9PSBTWU1CT0wpKSB7XG5cdFx0XHRcdFx0dmFyIHJlc3VsdCA9IHByb3R5cGUoZWxlbWVudCwgY29uZGl0aW9uKTtcblx0XG5cdFx0XHRcdFx0aWYgKHN0YXRlID09PSB0cnVlICYmIHRydXUoZWxlbWVudCkgJiYgcmVzdWx0KSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHN0YXRlID09PSB0cnVlKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChzdGF0ZSA9PT0gZmFsc2UgJiYgZmFsemUoZWxlbWVudCkpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoc3RhdGUgPT09IGZhbHNlKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKGNvbmRpdGlvblR5cGUuRlVOQ1RJT04gJiYgL15bQS1aXS8udGVzdChjb25kaXRpb24ubmFtZSkpIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbWVudCBpbnN0YW5jZW9mIGNvbmRpdGlvbjtcblx0XHRcdFx0fSBlbHNlIGlmIChjb25kaXRpb25UeXBlLkZVTkNUSU9OKSB7XG5cdFx0XHRcdFx0dmFyIF9yZXN1bHQgPSBjb25kaXRpb24uYmluZChzZWxmKShlbGVtZW50LCBpbmRleCk7XG5cdFxuXHRcdFx0XHRcdGlmICghcHJvdHlwZShfcmVzdWx0LCBCT09MRUFOKSkge1xuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjb25kaXRpb24gcmVzdWx0LCBcIiArIF9yZXN1bHQpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gX3Jlc3VsdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcImVycm9yIHRlc3RpbmcgY29uZGl0aW9uLCBcIiArIGVsZW1lbnQgKyBcIiwgXCIgKyBpbmRleCArIFwiLCBcIiArIGVycm9yKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gcHljaztcblxuXG4vKioqLyB9LFxuLyogMTIzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHQvKjtcblx0XHRAbW9kdWxlLWxpY2Vuc2U6XG5cdFx0XHRUaGUgTUlUIExpY2Vuc2UgKE1JVClcblx0XHRcdEBtaXQtbGljZW5zZVxuXHRcblx0XHRcdENvcHlyaWdodCAoQGMpIDIwMTYgUmljaGV2ZSBTaW9kaW5hIEJlYmVkb3Jcblx0XHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXHRcblx0XHRcdFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcblx0XHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRcdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0XHRcdHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcblx0XHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdFx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblx0XG5cdFx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRcdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cdFxuXHRcdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdFx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdFx0XHRGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcblx0XHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRcdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdFx0XHRPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuXHRcdFx0U09GVFdBUkUuXG5cdFx0QGVuZC1tb2R1bGUtbGljZW5zZVxuXHRcblx0XHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0XHR7XG5cdFx0XHRcdFwicGFja2FnZVwiOiBcInplbGZcIixcblx0XHRcdFx0XCJwYXRoXCI6IFwiemVsZi96ZWxmLmpzXCIsXG5cdFx0XHRcdFwiZmlsZVwiOiBcInplbGYuanNcIixcblx0XHRcdFx0XCJtb2R1bGVcIjogXCJ6ZWxmXCIsXG5cdFx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcdFwiZU1haWxcIjogXCJyaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXCIsXG5cdFx0XHRcdFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b2xrb3Zhc3lzdGVtcy96ZWxmLmdpdFwiLFxuXHRcdFx0XHRcInRlc3RcIjogXCJ6ZWxmLXRlc3QuanNcIixcblx0XHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdFx0fVxuXHRcdEBlbmQtbW9kdWxlLWNvbmZpZ3VyYXRpb25cblx0XG5cdFx0QG1vZHVsZS1kb2N1bWVudGF0aW9uOlxuXHRcdFx0UmV0dXJucyB3aW5kb3cgZm9yIGNsaWVudCwgZ2xvYmFsIGZvciBzZXJ2ZXIgYW5kIGlmIG5vdGhpbmcgbWF0Y2gsIHJldHVybiBpdHNlbGYuXG5cdFx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXHRcblx0XHRAaW5jbHVkZTpcblx0XHRcdHtcblx0XHRcdFx0XCJhc2VhXCI6IFwiYXNlYVwiXG5cdFx0XHR9XG5cdFx0QGVuZC1pbmNsdWRlXG5cdCovXG5cdFxuXHR2YXIgYXNlYSA9IF9fd2VicGFja19yZXF1aXJlX18oMTI0KTtcblx0XG5cdHZhciB6ZWxmID0gZnVuY3Rpb24gemVsZihzZWxmKSB7XG5cdFx0Lyo7XG5cdCBcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdCBcdFx0e1xuXHQgXHRcdFx0XCJzZWxmOnJlcXVpcmVkXCI6IFwib2JqZWN0XCJcblx0IFx0XHR9XG5cdCBcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG5cdCAqL1xuXHRcblx0XHRzZWxmID0gc2VsZiB8fCB0aGlzO1xuXHRcblx0XHRpZiAoYXNlYS5zZXJ2ZXIgJiYgKHNlbGYgPT09IGdsb2JhbCB8fCB0eXBlb2Ygc2VsZiA9PSBcInVuZGVmaW5lZFwiIHx8IHNlbGYgPT09IG51bGwpKSB7XG5cdFx0XHRyZXR1cm4gZ2xvYmFsO1xuXHRcdH1cblx0XG5cdFx0aWYgKGFzZWEuY2xpZW50ICYmIChzZWxmID09PSB3aW5kb3cgfHwgdHlwZW9mIHNlbGYgPT0gXCJ1bmRlZmluZWRcIiB8fCBzZWxmID09PSBudWxsKSkge1xuXHRcdFx0cmV0dXJuIHdpbmRvdztcblx0XHR9XG5cdFxuXHRcdGlmIChhc2VhLnNlcnZlciAmJiB0eXBlb2Ygc2VsZiA9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRyZXR1cm4gZ2xvYmFsO1xuXHRcdH1cblx0XG5cdFx0aWYgKGFzZWEuY2xpZW50ICYmIHR5cGVvZiBzZWxmID09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHJldHVybiB3aW5kb3c7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gc2VsZjtcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gemVsZjtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KCkpKSlcblxuLyoqKi8gfSxcbi8qIDEyNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkge1widXNlIHN0cmljdFwiO1xuXHRcblx0Lyo7XG5cdFx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFx0VGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cdFx0XHRAbWl0LWxpY2Vuc2Vcblx0XG5cdFx0XHRDb3B5cmlnaHQgKEBjKSAyMDE2IFJpY2hldmUgU2lvZGluYSBCZWJlZG9yXG5cdFx0XHRAZW1haWw6IHJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cblx0XG5cdFx0XHRQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5cdFx0XHRvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5cdFx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0XHR0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5cdFx0XHRjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcblx0XHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cdFxuXHRcdFx0VGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5cdFx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXHRcblx0XHRcdFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcblx0XHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdFx0RklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5cdFx0XHRBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5cdFx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdFx0T1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblx0XHRcdFNPRlRXQVJFLlxuXHRcdEBlbmQtbW9kdWxlLWxpY2Vuc2Vcblx0XG5cdFx0QG1vZHVsZS1jb25maWd1cmF0aW9uOlxuXHRcdFx0e1xuXHRcdFx0XHRcInBhY2thZ2VcIjogXCJhc2VhXCIsXG5cdFx0XHRcdFwicGF0aFwiOiBcImFzZWEvYXNlYS5qc1wiLFxuXHRcdFx0XHRcImZpbGVcIjogXCJhc2VhLmpzXCIsXG5cdFx0XHRcdFwibW9kdWxlXCI6IFwiYXNlYVwiLFxuXHRcdFx0XHRcImF1dGhvclwiOiBcIlJpY2hldmUgUy4gQmViZWRvclwiLFxuXHRcdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XHRcInJlcG9zaXRvcnlcIjogXCJodHRwczovL2dpdGh1Yi5jb206dm9sa292YXN5c3RlbXMvYXNlYS5naXRcIixcblx0XHRcdFx0XCJ0ZXN0XCI6IFwiYXNlYS10ZXN0LmpzXCIsXG5cdFx0XHRcdFwiZ2xvYmFsXCI6IHRydWVcblx0XHRcdH1cblx0XHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cdFxuXHRcdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRcdERldGVybWluZXMgaWYgeW91J3JlIG9uIGEgc2VydmVyIGVudmlyb25tZW50IG9yIGEgY2xpZW50IGVudmlyb25tZW50LlxuXHRcblx0XHRcdFJldHVybnMgdW5rbm93biBpZiB0aGUgZW52aXJvbm1lbnQgY2Fubm90IGJlIGRldGVybWluZWQuXG5cdFx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXHRcblx0XHRAaW5jbHVkZTpcblx0XHRcdHtcblx0XHRcdFx0XCJoYXJkZW5cIjogXCJoYXJkZW5cIlxuXHRcdFx0fVxuXHRcdEBlbmQtaW5jbHVkZVxuXHQqL1xuXHRcblx0dmFyIGhhcmRlbiA9IF9fd2VicGFja19yZXF1aXJlX18oODUpO1xuXHRcblx0aGFyZGVuKFwiQ0xJRU5UXCIsIFwiY2xpZW50XCIpO1xuXHRoYXJkZW4oXCJTRVJWRVJcIiwgXCJzZXJ2ZXJcIik7XG5cdGhhcmRlbihcIlVOS05PV05cIiwgXCJ1bmtub3duXCIpO1xuXHRcblx0dmFyIGFzZWEgPSBmdW5jdGlvbiBhc2VhKCkge1xuXHRcdGlmIChhc2VhLmNsaWVudCkge1xuXHRcdFx0cmV0dXJuIENMSUVOVDtcblx0XHR9IGVsc2UgaWYgKGFzZWEuc2VydmVyKSB7XG5cdFx0XHRyZXR1cm4gU0VSVkVSO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gVU5LTk9XTjtcblx0XHR9XG5cdH07XG5cdFxuXHRoYXJkZW4oXCJjbGllbnRcIiwgdHlwZW9mIHdpbmRvdyAhPSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBkb2N1bWVudCAhPSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuY29uc3RydWN0b3IgPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBkb2N1bWVudC5jb25zdHJ1Y3RvciA9PSBcImZ1bmN0aW9uXCIgJiYgd2luZG93LmNvbnN0cnVjdG9yLm5hbWUgPT0gXCJXaW5kb3dcIiAmJiBkb2N1bWVudC5jb25zdHJ1Y3Rvci5uYW1lID09IFwiSFRNTERvY3VtZW50XCIsIGFzZWEpO1xuXHRcblx0aGFyZGVuKFwic2VydmVyXCIsIHR5cGVvZiBtb2R1bGUgIT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgZ2xvYmFsICE9IFwidW5kZWZpbmVkXCIgJiYgISFtb2R1bGUuZXhwb3J0cyAmJiAhIWdsb2JhbC5wcm9jZXNzICYmICEhZ2xvYmFsLnByb2Nlc3MuZW52LCBhc2VhKTtcblx0XG5cdGhhcmRlbihcInVua25vd25cIiwgYXNlYS5jbGllbnQgPT09IGZhbHNlICYmIGFzZWEuc2VydmVyID09PSBmYWxzZSwgYXNlYSk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGFzZWE7XG5cdFxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSgpKSkpXG5cbi8qKiovIH0sXG4vKiAxMjUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0Lyo7XG5cdFx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFx0VGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cdFx0XHRAbWl0LWxpY2Vuc2Vcblx0XG5cdFx0XHRDb3B5cmlnaHQgKEBjKSAyMDE2IFJpY2hldmUgU2lvZGluYSBCZWJlZG9yXG5cdFx0XHRAZW1haWw6IHJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cblx0XG5cdFx0XHRQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5cdFx0XHRvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5cdFx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0XHR0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5cdFx0XHRjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcblx0XHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cdFxuXHRcdFx0VGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5cdFx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXHRcblx0XHRcdFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcblx0XHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdFx0RklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5cdFx0XHRBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5cdFx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdFx0T1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblx0XHRcdFNPRlRXQVJFLlxuXHRcdEBlbmQtbW9kdWxlLWxpY2Vuc2Vcblx0XG5cdFx0QG1vZHVsZS1jb25maWd1cmF0aW9uOlxuXHRcdFx0e1xuXHRcdFx0XHRcInBhY2thZ2VcIjogXCJwbG91Z2hcIixcblx0XHRcdFx0XCJwYXRoXCI6IFwicGxvdWdoL3Bsb3VnaC5qc1wiLFxuXHRcdFx0XHRcImZpbGVcIjogXCJwbG91Z2guanNcIixcblx0XHRcdFx0XCJtb2R1bGVcIjogXCJwbG91Z2hcIixcblx0XHRcdFx0XCJhdXRob3JcIjogXCJSaWNoZXZlIFMuIEJlYmVkb3JcIixcblx0XHRcdFx0XCJjb250cmlidXRvcnNcIjogW1xuXHRcdFx0XHRcdFwiSm9obiBMZW5vbiBNYWdoYW5veSA8am9obmxlbm9ubWFnaGFub3lAZ21haWwuY29tPlwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZU1haWxcIjogXCJyaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXCIsXG5cdFx0XHRcdFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b2xrb3Zhc3lzdGVtcy9wbG91Z2guZ2l0XCIsXG5cdFx0XHRcdFwidGVzdFwiOiBcInBsb3VnaC10ZXN0LmpzXCIsXG5cdFx0XHRcdFwiZ2xvYmFsXCI6IHRydWVcblx0XHRcdH1cblx0XHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cdFxuXHRcdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRcdEZsYXR0ZW4gYXJyYXlzXG5cdFx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXHRcblx0XHRAaW5jbHVkZTpcblx0XHRcdHtcblx0XHRcdFx0XCJhcmlkXCI6IFwiYXJpZFwiLFxuXHRcdFx0XHRcImRlY3JlYXNlXCI6IFwiZGVjcmVhc2VcIixcblx0XHRcdFx0XCJkb3VidFwiOiBcImRvdWJ0XCIsXG5cdFx0XHRcdFwiaGFyZGVuXCI6IFwiaGFyZGVuXCIsXG5cdFx0XHRcdFwicmF6ZVwiOiBcInJhemVcIlxuXHRcdFx0fVxuXHRcdEBlbmQtaW5jbHVkZVxuXHQqL1xuXHRcblx0dmFyIGFyaWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwNik7XG5cdHZhciBkZWNyZWFzZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTI2KTtcblx0dmFyIGRvdWJ0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OCk7XG5cdHZhciBoYXJkZW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1KTtcblx0dmFyIHJhemUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMyk7XG5cdFxuXHR2YXIgcGxvdWdoID0gZnVuY3Rpb24gcGxvdWdoKGFycmF5KSB7XG5cdFx0Lyo7XG5cdCBcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdCBcdFx0e1xuXHQgXHRcdFx0XCJhcnJheTpyZXF1aXJlZFwiOiBbXG5cdCBcdFx0XHRcdFwiWypdXCIsXG5cdCBcdFx0XHRcdFwiLi4uXCJcblx0IFx0XHRcdF1cblx0IFx0XHR9XG5cdCBcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG5cdCAqL1xuXHRcblx0XHRhcnJheSA9IHJhemUoYXJndW1lbnRzKTtcblx0XG5cdFx0aWYgKGFyaWQoYXJyYXkpKSB7XG5cdFx0XHRhcnJheSA9IGRvdWJ0KHRoaXMpLkFSUkFZID8gdGhpcyA6IFtdO1xuXHRcdH1cblx0XG5cdFx0aWYgKGRvdWJ0KHRoaXMpLkFSUkFZICYmIGFycmF5ICE9IHRoaXMpIHtcblx0XHRcdGFycmF5ID0gdGhpcy5jb25jYXQoYXJyYXkpO1xuXHRcdH1cblx0XG5cdFx0dmFyIGxpc3QgPSBkZWNyZWFzZShhcnJheSwgZnVuY3Rpb24gZmxhdHRlbihwcmV2aW91cywgY3VycmVudCkge1xuXHRcdFx0dmFyIGVsZW1lbnQgPSBkb3VidChjdXJyZW50KS5BU19BUlJBWSA/IHBsb3VnaC5hcHBseShudWxsLCBjdXJyZW50KSA6IGN1cnJlbnQ7XG5cdFxuXHRcdFx0cmV0dXJuIHByZXZpb3VzLmNvbmNhdChlbGVtZW50KTtcblx0XHR9LCBbXSk7XG5cdFxuXHRcdGhhcmRlbihcInBsb3VnaFwiLCBwbG91Z2guYmluZChsaXN0KSwgbGlzdCk7XG5cdFxuXHRcdHJldHVybiBsaXN0O1xuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBwbG91Z2g7XG5cblxuLyoqKi8gfSxcbi8qIDEyNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHQvKjtcblx0XHRAbW9kdWxlLWxpY2Vuc2U6XG5cdFx0XHRUaGUgTUlUIExpY2Vuc2UgKE1JVClcblx0XHRcdEBtaXQtbGljZW5zZVxuXHRcblx0XHRcdENvcHlyaWdodCAoQGMpIDIwMTYgUmljaGV2ZSBTaW9kaW5hIEJlYmVkb3Jcblx0XHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXHRcblx0XHRcdFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcblx0XHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRcdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0XHRcdHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcblx0XHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdFx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblx0XG5cdFx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRcdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cdFxuXHRcdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdFx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdFx0XHRGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcblx0XHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRcdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdFx0XHRPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuXHRcdFx0U09GVFdBUkUuXG5cdFx0QGVuZC1tb2R1bGUtbGljZW5zZVxuXHRcblx0XHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0XHR7XG5cdFx0XHRcdFwicGFja2FnZVwiOiBcImRlY3JlYXNlXCIsXG5cdFx0XHRcdFwicGF0aFwiOiBcImRlY3JlYXNlL2RlY3JlYXNlLmpzXCIsXG5cdFx0XHRcdFwiZmlsZVwiOiBcImRlY3JlYXNlLmpzXCIsXG5cdFx0XHRcdFwibW9kdWxlXCI6IFwiZGVjcmVhc2VcIixcblx0XHRcdFx0XCJhdXRob3JcIjogXCJSaWNoZXZlIFMuIEJlYmVkb3JcIixcblx0XHRcdFx0XCJjb250cmlidXRvcnNcIjogW1xuXHRcdFx0XHRcdFwiSm9obiBMZW5vbiBNYWdoYW5veSA8am9obmxlbm9ubWFnaGFub3lAZ21haWwuY29tPlwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZU1haWxcIjogXCJyaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXCIsXG5cdFx0XHRcdFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b2xrb3Zhc3lzdGVtcy9kZWNyZWFzZS5naXRcIixcblx0XHRcdFx0XCJ0ZXN0XCI6IFwiZGVjcmVhc2UtdGVzdC5qc1wiLFxuXHRcdFx0XHRcImdsb2JhbFwiOiB0cnVlXG5cdFx0XHR9XG5cdFx0QGVuZC1tb2R1bGUtY29uZmlndXJhdGlvblxuXHRcblx0XHRAbW9kdWxlLWRvY3VtZW50YXRpb246XG5cdFx0XHRSZWR1Y2UgdGhlIGFycmF5LiBUaGlzIHdpbGwgYWx3YXlzIHJldHVybiBhbiBhcnJheS5cblx0XHRAZW5kLW1vZHVsZS1kb2N1bWVudGF0aW9uXG5cdFxuXHRcdEBpbmNsdWRlOlxuXHRcdFx0e1xuXHRcdFx0XHRcImRvdWJ0XCI6IFwiZG91YnRcIixcblx0XHRcdFx0XCJoYXJkZW5cIjogXCJoYXJkZW5cIixcblx0XHRcdFx0XCJwcm90eXBlXCI6IFwicHJvdHlwZVwiLFxuXHRcdFx0XHRcInJhemVcIjogXCJyYXplXCIsXG5cdFx0XHRcdFwidHJ1bHlcIjogXCJ0cnVseVwiXG5cdFx0XHR9XG5cdFx0QGVuZC1pbmNsdWRlXG5cdCovXG5cdFxuXHR2YXIgZG91YnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4KTtcblx0dmFyIGhhcmRlbiA9IF9fd2VicGFja19yZXF1aXJlX18oODUpO1xuXHR2YXIgcHJvdHlwZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTApO1xuXHR2YXIgcmF6ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTAzKTtcblx0dmFyIHRydWx5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDApO1xuXHRcblx0Ly86IEBzdXBwb3J0LW1vZHVsZTpcblx0Ly86IEByZWZlcmVuY2U6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L3JlZHVjZVxuXHRBcnJheS5wcm90b3R5cGUucmVkdWNlIHx8IChBcnJheS5wcm90b3R5cGUucmVkdWNlID0gZnVuY3Rpb24gKHIpIHtcblx0XHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdFx0aWYgKG51bGwgPT0gdGhpcykgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFycmF5LnByb3RvdHlwZS5yZWR1Y2UgY2FsbGVkIG9uIG51bGwgb3IgdW5kZWZpbmVkXCIpO1xuXHRcdGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIHIpIHRocm93IG5ldyBUeXBlRXJyb3IociArIFwiIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuXHRcdHZhciBlLFxuXHRcdCAgICB0ID0gT2JqZWN0KHRoaXMpLFxuXHRcdCAgICBuID0gdC5sZW5ndGggPj4+IDAsXG5cdFx0ICAgIG8gPSAwO2lmICgyID09IGFyZ3VtZW50cy5sZW5ndGgpIGUgPSBhcmd1bWVudHNbMV07ZWxzZSB7XG5cdFx0XHRmb3IgKDsgbiA+IG8gJiYgIShvIGluIHQpOykge1xuXHRcdFx0XHRvKys7XG5cdFx0XHR9aWYgKG8gPj0gbikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlJlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWVcIik7XG5cdFx0XHRlID0gdFtvKytdO1xuXHRcdH1mb3IgKDsgbiA+IG87IG8rKykge1xuXHRcdFx0byBpbiB0ICYmIChlID0gcihlLCB0W29dLCBvLCB0KSk7XG5cdFx0fXJldHVybiBlO1xuXHR9KTtcblx0Ly86IEBlbmQtc3VwcG9ydC1tb2R1bGVcblx0XG5cdHZhciBkZWNyZWFzZSA9IGZ1bmN0aW9uIGRlY3JlYXNlKGFycmF5LCBtZXRob2QsIHZhbHVlKSB7XG5cdFx0Lyo7XG5cdCBcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdCBcdFx0e1xuXHQgXHRcdFx0XCJhcnJheTpyZXF1aXJlZFwiOiBcIlsqXVwiLFxuXHQgXHRcdFx0XCJtZXRob2Q6b3B0aW9uYWxcIjogXCJmdW5jdGlvblwiLFxuXHQgXHRcdFx0XCJ2YWx1ZTpvcHRpb25hbFwiOiBcIipcIlxuXHQgXHRcdH1cblx0IFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cblx0ICovXG5cdFxuXHRcdHZhciBwYXJhbWV0ZXIgPSByYXplKGFyZ3VtZW50cyk7XG5cdFxuXHRcdGFycmF5ID0gZG91YnQocGFyYW1ldGVyWzBdKS5BUlJBWSA/IHBhcmFtZXRlclswXSA6IGRvdWJ0KHRoaXMpLkFSUkFZID8gdGhpcyA6IFtdO1xuXHRcblx0XHQvKjtcblx0IFx0QG5vdGU6XG5cdCBcdFx0Q2xvbmUgdGhlIGFycmF5IHNvIHRoYXQgd2Ugd2lsbCBub3QgZGVzdHJveSBpdC5cblx0IFx0XHREZWVwIGxldmVsIHJlZmVyZW5jZXMgd2lsbCBub3QgYmUgc3VwcG9ydGVkLlxuXHQgXHRAZW5kLW5vdGVcblx0ICovXG5cdFx0YXJyYXkgPSBbXS5jb25jYXQoYXJyYXkpO1xuXHRcblx0XHRtZXRob2QgPSBwcm90eXBlKHBhcmFtZXRlclswXSwgRlVOQ1RJT04pID8gcGFyYW1ldGVyWzBdIDogcHJvdHlwZShwYXJhbWV0ZXJbMV0sIEZVTkNUSU9OKSA/IHBhcmFtZXRlclsxXSA6IGZ1bmN0aW9uIHJlZHVjZShwcmV2aW91cywgY3VycmVudCwgaW5kZXgsIGFycmF5KSB7XG5cdFx0XHRpZiAoaW5kZXggPT0gYXJyYXkubGVuZ3RoIC0gMSkge1xuXHRcdFx0XHRhcnJheS5wb3AoKTtcblx0XG5cdFx0XHRcdHJldHVybiBhcnJheTtcblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gY3VycmVudDtcblx0XHR9O1xuXHRcblx0XHR2YWx1ZSA9IHRydWx5KHZhbHVlKSA/IHZhbHVlIDogYXJyYXlbMF07XG5cdFxuXHRcdHZhbHVlID0gYXJyYXkucmVkdWNlKG1ldGhvZCwgdmFsdWUpO1xuXHRcblx0XHRpZiAoIWRvdWJ0KHZhbHVlKS5BUlJBWSkge1xuXHRcdFx0dmFsdWUgPSBbdmFsdWVdO1xuXHRcdH1cblx0XG5cdFx0aGFyZGVuKFwiZGVjcmVhc2VcIiwgZGVjcmVhc2UuYmluZCh2YWx1ZSksIHZhbHVlKTtcblx0XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBkZWNyZWFzZTtcblxuXG4vKioqLyB9XG4vKioqKioqLyBdKVxufSk7XG47XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGRlZXF1YWwuZGVwbG95LmpzIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgMzI3ZmNjMTJkYzMyZjYxYzA5ZWMiLCIvKjtcblx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdEBtaXQtbGljZW5zZVxuXG5cdFx0Q29weXJpZ2h0IChAYykgMjAxNyBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXG5cdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5cdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0U09GVFdBUkUuXG5cdEBlbmQtbW9kdWxlLWxpY2Vuc2VcblxuXHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0e1xuXHRcdFx0XCJwYWNrYWdlXCI6IFwiZGVlcXVhbFwiLFxuXHRcdFx0XCJwYXRoXCI6IFwiZGVlcXVhbC9kZWVxdWFsLmpzXCIsXG5cdFx0XHRcImZpbGVcIjogXCJkZWVxdWFsLmpzXCIsXG5cdFx0XHRcIm1vZHVsZVwiOiBcImRlZXF1YWxcIixcblx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZvbGtvdmFzeXN0ZW1zL2RlZXF1YWwuZ2l0XCIsXG5cdFx0XHRcImdsb2JhbFwiOiB0cnVlLFxuXHRcdFx0XCJjbGFzc1wiOiB0cnVlXG5cdFx0fVxuXHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cblx0QG1vZHVsZS1kb2N1bWVudGF0aW9uOlxuXHRcdERlZXAgZXF1YWwuXG5cdEBlbmQtbW9kdWxlLWRvY3VtZW50YXRpb25cblxuXHRAaW5jbHVkZTpcblx0XHR7XG5cdFx0XHRcImtvdW50XCI6IFwia291bnRcIixcblx0XHRcdFwibG9vc2VuXCI6IFwibG9vc2VuXCIsXG5cdFx0XHRcInByb3R5cGVcIjogXCJwcm90eXBlXCJcblx0XHR9XG5cdEBlbmQtaW5jbHVkZVxuKi9cblxuY29uc3Qga291bnQgPSByZXF1aXJlKCBcImtvdW50XCIgKTtcbmNvbnN0IGxvb3NlbiA9IHJlcXVpcmUoIFwibG9vc2VuXCIgKTtcbmNvbnN0IHByb3R5cGUgPSByZXF1aXJlKCBcInByb3R5cGVcIiApO1xuXG5jb25zdCBkZWVxdWFsID0gZnVuY3Rpb24gZGVlcXVhbCggc291cmNlLCB0YXJnZXQgKXtcblx0Lyo7XG5cdFx0QG1ldGEtY29uZmlndXJhdGlvbjpcblx0XHRcdHtcblx0XHRcdFx0XCJzb3VyY2U6cmVxdWlyZWRcIjogW1xuXHRcdFx0XHRcdFwib2JqZWN0XCIsXG5cdFx0XHRcdFx0QXJyYXlcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJ0YXJnZXQ6cmVxdWlyZWRcIjogW1xuXHRcdFx0XHRcdFwib2JqZWN0XCIsXG5cdFx0XHRcdFx0QXJyYXlcblx0XHRcdFx0XVxuXHRcdFx0fVxuXHRcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG5cdCovXG5cblx0aWYoICFwcm90eXBlKCBzb3VyY2UsIE9CSkVDVCApIHx8ICFwcm90eXBlKCB0YXJnZXQsIE9CSkVDVCApICl7XG5cdFx0dHJ5e1xuXHRcdFx0aWYoIHByb3R5cGUoIHNvdXJjZSwgRlVOQ1RJT04gKSAmJiBwcm90eXBlKCB0YXJnZXQsIEZVTkNUSU9OICkgKXtcblx0XHRcdFx0cmV0dXJuIHNvdXJjZSA9PT0gdGFyZ2V0IHx8IHNvdXJjZS50b1N0cmluZyggKSA9PSB0YXJnZXQudG9TdHJpbmcoICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzb3VyY2UgPT09IHRhcmdldDtcblxuXHRcdH1jYXRjaCggZXJyb3IgKXtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHRzb3VyY2UgPSBsb29zZW4oIHNvdXJjZSApO1xuXHRmb3IoIGxldCBwcm9wZXJ0eSBpbiBzb3VyY2UgKXtcblx0XHRpZiggcHJvdHlwZSggc291cmNlWyBwcm9wZXJ0eSBdLCBPQkpFQ1QgKSApe1xuXHRcdFx0ZGVsZXRlIHNvdXJjZVsgcHJvcGVydHkgXTtcblx0XHR9XG5cdH1cblxuXHR0YXJnZXQgPSBsb29zZW4oIHRhcmdldCApO1xuXHRmb3IoIGxldCBwcm9wZXJ0eSBpbiB0YXJnZXQgKXtcblx0XHRpZiggcHJvdHlwZSggdGFyZ2V0WyBwcm9wZXJ0eSBdLCBPQkpFQ1QgKSApe1xuXHRcdFx0ZGVsZXRlIHRhcmdldFsgcHJvcGVydHkgXTtcblx0XHR9XG5cdH1cblxuXHQvKjtcblx0XHRAbm90ZTpcblx0XHRcdENoZWNrcyBmb3IgdmFsdWUgZXF1YWxpdHkuXG5cdFx0QGVuZC1ub3RlXG5cdCovXG5cdGZvciggbGV0IHByb3BlcnR5IGluIHNvdXJjZSApe1xuXHRcdGlmKCBzb3VyY2VbIHByb3BlcnR5IF0gIT09IHRhcmdldFsgcHJvcGVydHkgXSApe1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdC8qO1xuXHRcdEBub3RlOlxuXHRcdFx0Q2hlY2tzIGZvciBrZXkgY291bnQgZXF1YWxpdHkuXG5cdFx0QGVuZC1ub3RlXG5cdCovXG5cdHJldHVybiBrb3VudCggc291cmNlICkgPT09IGtvdW50KCB0YXJnZXQgKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZGVlcXVhbDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBkZWVxdWFsLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qO1xuXHRAbW9kdWxlLWxpY2Vuc2U6XG5cdFx0VGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cdFx0QG1pdC1saWNlbnNlXG5cblx0XHRDb3B5cmlnaHQgKEBjKSAyMDE3IFJpY2hldmUgU2lvZGluYSBCZWJlZG9yXG5cdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cblx0XHRQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5cdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0XHR0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5cdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuXHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdFx0RklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5cdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdFx0T1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblx0XHRTT0ZUV0FSRS5cblx0QGVuZC1tb2R1bGUtbGljZW5zZVxuXG5cdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHR7XG5cdFx0XHRcInBhY2thZ2VcIjogXCJrb3VudFwiLFxuXHRcdFx0XCJwYXRoXCI6IFwia291bnQva291bnQuanNcIixcblx0XHRcdFwiZmlsZVwiOiBcImtvdW50LmpzXCIsXG5cdFx0XHRcIm1vZHVsZVwiOiBcImtvdW50XCIsXG5cdFx0XHRcImF1dGhvclwiOiBcIlJpY2hldmUgUy4gQmViZWRvclwiLFxuXHRcdFx0XCJjb250cmlidXRvcnNcIjogW1xuXHRcdFx0XHRcIkpvaG4gTGVub24gTWFnaGFub3kgPGpvaG5sZW5vbm1hZ2hhbm95QGdtYWlsLmNvbT5cIlxuXHRcdFx0XSxcblx0XHRcdFwiZU1haWxcIjogXCJyaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXCIsXG5cdFx0XHRcInJlcG9zaXRvcnlcIjogXCJodHRwczovL2dpdGh1Yi5jb20vdm9sa292YXN5c3RlbXMva291bnQuZ2l0XCIsXG5cdFx0XHRcInRlc3RcIjogXCJrb3VudC10ZXN0LmpzXCIsXG5cdFx0XHRcImdsb2JhbFwiOiB0cnVlXG5cdFx0fVxuXHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cblx0QG1vZHVsZS1kb2N1bWVudGF0aW9uOlxuXHRcdENvdW50IG9iamVjdCdzIGtleXMuXG5cblx0XHRUaGlzIHdpbGwgb25seSBjb3VudCBvYmplY3QncyBvd25lZCBlbnVtYmVyYWJsZSBwcm9wZXJ0aWVzLlxuXHRAZW5kLW1vZHVsZS1kb2N1bWVudGF0aW9uXG4qL1xuXG5jb25zdCBrb3VudCA9IGZ1bmN0aW9uIGtvdW50KCBlbnRpdHkgKXtcblx0Lyo7XG5cdFx0QG1ldGEtY29uZmlndXJhdGlvbjpcblx0XHRcdHtcblx0XHRcdFx0XCJlbnRpdHk6cmVxdWlyZWRcIjogXCJvYmplY3RcIlxuXHRcdFx0fVxuXHRcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG5cdCovXG5cblx0dHJ5e1xuXHRcdHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyggZW50aXR5IClcblx0XHRcdC5maWx0ZXIoICggcHJvcGVydHkgKSA9PiB7XG5cdFx0XHRcdHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKCBlbnRpdHksIHByb3BlcnR5ICkuZW51bWVyYWJsZTtcblx0XHRcdH0gKVxuXHRcdFx0Lmxlbmd0aDtcblxuXHR9Y2F0Y2goIGVycm9yICl7XG5cdFx0cmV0dXJuIDA7XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ga291bnQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8ga291bnQuanMiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvclwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXtcbiAgcmV0dXJuICRPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxudmFyIHRvSU9iamVjdCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSl7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qc1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpXG4gICwgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lvYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvZi5qc1xuLy8gbW9kdWxlIGlkID0gN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKGl0ID09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZWZpbmVkLmpzXG4vLyBtb2R1bGUgaWQgPSA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBwSUUgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKVxuICAsIGNyZWF0ZURlc2MgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgdG9JT2JqZWN0ICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCB0b1ByaW1pdGl2ZSAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKVxuICAsIGdPUEQgICAgICAgICAgID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCl7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICBpZihoYXMoTywgUCkpcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BkLmpzXG4vLyBtb2R1bGUgaWQgPSA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXBpZS5qc1xuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihiaXRtYXAsIHZhbHVlKXtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlICA6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlICAgIDogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZSAgICAgICA6IHZhbHVlXG4gIH07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qc1xuLy8gbW9kdWxlIGlkID0gMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgUyl7XG4gIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICBpZih0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIGlmKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1wcmltaXRpdmUuanNcbi8vIG1vZHVsZSBpZCA9IDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBrZXkpe1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oYXMuanNcbi8vIG1vZHVsZSBpZCA9IDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3O1xufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qc1xuLy8gbW9kdWxlIGlkID0gMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3O1xufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZXNjcmlwdG9ycy5qc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qc1xuLy8gbW9kdWxlIGlkID0gMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50XG4gIC8vIGluIG9sZCBJRSB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0J1xuICAsIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZih0eXBlb2YgX19nID09ICdudW1iZXInKV9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBjb3JlICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgZmFpbHMgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgZXhlYyl7XG4gIHZhciBmbiAgPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV1cbiAgICAsIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCl7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXNhcC5qc1xuLy8gbW9kdWxlIGlkID0gMjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgY29yZSAgICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgY3R4ICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBoaWRlICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbih0eXBlLCBuYW1lLCBzb3VyY2Upe1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRlxuICAgICwgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuR1xuICAgICwgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuU1xuICAgICwgSVNfUFJPVE8gID0gdHlwZSAmICRleHBvcnQuUFxuICAgICwgSVNfQklORCAgID0gdHlwZSAmICRleHBvcnQuQlxuICAgICwgSVNfV1JBUCAgID0gdHlwZSAmICRleHBvcnQuV1xuICAgICwgZXhwb3J0cyAgID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSlcbiAgICAsIGV4cFByb3RvICA9IGV4cG9ydHNbUFJPVE9UWVBFXVxuICAgICwgdGFyZ2V0ICAgID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXVxuICAgICwga2V5LCBvd24sIG91dDtcbiAgaWYoSVNfR0xPQkFMKXNvdXJjZSA9IG5hbWU7XG4gIGZvcihrZXkgaW4gc291cmNlKXtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmKG93biAmJiBrZXkgaW4gZXhwb3J0cyljb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG4gICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uKEMpe1xuICAgICAgdmFyIEYgPSBmdW5jdGlvbihhLCBiLCBjKXtcbiAgICAgICAgaWYodGhpcyBpbnN0YW5jZW9mIEMpe1xuICAgICAgICAgIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZihJU19QUk9UTyl7XG4gICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7XG4gICAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUucHJvdG90eXBlLiVOQU1FJVxuICAgICAgaWYodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSloaWRlKGV4cFByb3RvLCBrZXksIG91dCk7XG4gICAgfVxuICB9XG59O1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YCBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2V4cG9ydC5qc1xuLy8gbW9kdWxlIGlkID0gMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHt2ZXJzaW9uOiAnMi40LjAnfTtcbmlmKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qc1xuLy8gbW9kdWxlIGlkID0gMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgdGhhdCwgbGVuZ3RoKXtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYodGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjtcbiAgc3dpdGNoKGxlbmd0aCl7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24oYSl7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKGEsIGIpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbihhLCBiLCBjKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2N0eC5qc1xuLy8gbW9kdWxlIGlkID0gMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZFAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24ob2JqZWN0LCBrZXksIHZhbHVlKXtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzXG4vLyBtb2R1bGUgaWQgPSAyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKVxuICAsIHRvUHJpbWl0aXZlICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBkUCAgICAgICAgICAgICA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpe1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgaWYoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKXRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmKCd2YWx1ZScgaW4gQXR0cmlidXRlcylPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzXG4vLyBtb2R1bGUgaWQgPSAyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZighaXNPYmplY3QoaXQpKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LW5hbWVzXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qc1xuLy8gbW9kdWxlIGlkID0gMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7XG4gIHJldHVybiAkT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaXQpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzXG4vLyBtb2R1bGUgaWQgPSAyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpLmY7XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzXG4vLyBtb2R1bGUgaWQgPSAzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgZ09QTiAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mXG4gICwgdG9TdHJpbmcgID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbihpdCl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanNcbi8vIG1vZHVsZSBpZCA9IDMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKVxuICAsIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTyl7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qc1xuLy8gbW9kdWxlIGlkID0gMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGhhcyAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgdG9JT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSlcbiAgLCBJRV9QUk9UTyAgICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBuYW1lcyl7XG4gIHZhciBPICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KVxuICAgICwgaSAgICAgID0gMFxuICAgICwgcmVzdWx0ID0gW11cbiAgICAsIGtleTtcbiAgZm9yKGtleSBpbiBPKWlmKGtleSAhPSBJRV9QUk9UTyloYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpaWYoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKXtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanNcbi8vIG1vZHVsZSBpZCA9IDMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9MZW5ndGggID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCB0b0luZGV4ICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihJU19JTkNMVURFUyl7XG4gIHJldHVybiBmdW5jdGlvbigkdGhpcywgZWwsIGZyb21JbmRleCl7XG4gICAgdmFyIE8gICAgICA9IHRvSU9iamVjdCgkdGhpcylcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IHRvSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpXG4gICAgICAsIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICBpZihJU19JTkNMVURFUyAmJiBlbCAhPSBlbCl3aGlsZShsZW5ndGggPiBpbmRleCl7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICBpZih2YWx1ZSAhPSB2YWx1ZSlyZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSN0b0luZGV4IGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTyl7XG4gICAgICBpZihPW2luZGV4XSA9PT0gZWwpcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBtaW4gICAgICAgPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWxlbmd0aC5qc1xuLy8gbW9kdWxlIGlkID0gMzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCAgPSBNYXRoLmNlaWxcbiAgLCBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW50ZWdlci5qc1xuLy8gbW9kdWxlIGlkID0gMzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIG1heCAgICAgICA9IE1hdGgubWF4XG4gICwgbWluICAgICAgID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGluZGV4LCBsZW5ndGgpe1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWluZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKVxuICAsIHVpZCAgICA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC1rZXkuanNcbi8vIG1vZHVsZSBpZCA9IDM4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nXG4gICwgc3RvcmUgID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHt9KTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQuanNcbi8vIG1vZHVsZSBpZCA9IDM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBpZCA9IDBcbiAgLCBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdWlkLmpzXG4vLyBtb2R1bGUgaWQgPSA0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanNcbi8vIG1vZHVsZSBpZCA9IDQxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG4vKjtcblx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdEBtaXQtbGljZW5zZVxuXG5cdFx0Q29weXJpZ2h0IChAYykgMjAxNyBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXG5cdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5cdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0U09GVFdBUkUuXG5cdEBlbmQtbW9kdWxlLWxpY2Vuc2VcblxuXHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0e1xuXHRcdFx0XCJwYWNrYWdlXCI6IFwibG9vc2VuXCIsXG5cdFx0XHRcInBhdGhcIjogXCJsb29zZW4vbG9vc2VuLmpzXCIsXG5cdFx0XHRcImZpbGVcIjogXCJsb29zZW4uanNcIixcblx0XHRcdFwibW9kdWxlXCI6IFwibG9vc2VuXCIsXG5cdFx0XHRcImF1dGhvclwiOiBcIlJpY2hldmUgUy4gQmViZWRvclwiLFxuXHRcdFx0XCJjb250cmlidXRvcnNcIjogW1xuXHRcdFx0XHRcIkpvaG4gTGVub24gTWFnaGFub3kgPGpvaG5sZW5vbm1hZ2hhbm95QGdtYWlsLmNvbT5cIlxuXHRcdFx0XSxcblx0XHRcdFwiZU1haWxcIjogXCJyaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXCIsXG5cdFx0XHRcInJlcG9zaXRvcnlcIjogXCJodHRwczovL2dpdGh1Yi5jb20vdm9sa292YXN5c3RlbXMvbG9vc2VuLmdpdFwiLFxuXHRcdFx0XCJ0ZXN0XCI6IFwibG9vc2VuLXRlc3QuanNcIixcblx0XHRcdFwiZ2xvYmFsXCI6IHRydWVcblx0XHR9XG5cdEBlbmQtbW9kdWxlLWNvbmZpZ3VyYXRpb25cblxuXHRAbW9kdWxlLWRvY3VtZW50YXRpb246XG5cdFx0VHJhbnNmb3JtIGRlZXAgb2JqZWN0IGludG8gc2hhbGxvdyBvYmplY3QuXG5cdEBlbmQtbW9kdWxlLWRvY3VtZW50YXRpb25cblxuXHRAaW5jbHVkZTpcblx0XHR7XG5cdFx0XHRcImRvdWJ0XCI6IFwiZG91YnRcIixcblx0XHRcdFwiaGFyZGVuXCI6IFwiaGFyZGVuXCIsXG5cdFx0XHRcInByb3R5cGVcIjogXCJwcm90eXBlXCIsXG5cdFx0XHRcInRydWx5XCI6IFwidHJ1bHlcIixcblx0XHRcdFwiVTIwMGJcIjogXCJ1MjAwYlwiXG5cdFx0fVxuXHRAZW5kLWluY2x1ZGVcbiovXG5cbmNvbnN0IGRvdWJ0ID0gcmVxdWlyZSggXCJkb3VidFwiICk7XG5jb25zdCBoYXJkZW4gPSByZXF1aXJlKCBcImhhcmRlblwiICk7XG5jb25zdCBwcm90eXBlID0gcmVxdWlyZSggXCJwcm90eXBlXCIgKTtcbmNvbnN0IHRydWx5ID0gcmVxdWlyZSggXCJ0cnVseVwiICk7XG5jb25zdCB0cnV1ID0gcmVxdWlyZSggXCJ0cnV1XCIgKTtcbmNvbnN0IFUyMDBiID0gcmVxdWlyZSggXCJ1MjAwYlwiICk7XG5cbmNvbnN0IExPT1NFTkVEID0gXCJsb29zZW5lZFwiO1xuY29uc3QgUkVGRVJFTkNFX1BBVFRFUk4gPSAvXlxcLi87XG5jb25zdCBBQ0NVTVVMQVRPUl9QQVRURVJOID0gL15cXC4vO1xuXG5jb25zdCBsb29zZW4gPSBmdW5jdGlvbiBsb29zZW4oIGVudGl0eSwgcGF0aCwgY2FjaGUgKXtcblx0Lyo7XG5cdFx0QG1ldGEtY29uZmlndXJhdGlvbjpcblx0XHRcdHtcblx0XHRcdFx0XCJlbnRpdHk6cmVxdWlyZWRcIjogW1xuXHRcdFx0XHRcdEFycmF5LFxuXHRcdFx0XHRcdFwib2JqZWN0XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJwYXRoXCI6IFwic3RyaW5nXCIsXG5cdFx0XHRcdFwiY2FjaGVcIjogXCJvYmplY3RcIlxuXHRcdFx0fVxuXHRcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG5cdCovXG5cblx0aWYoICFwcm90eXBlKCBlbnRpdHksIE9CSkVDVCApICl7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBcImludmFsaWQgZW50aXR5XCIgKTtcblx0fVxuXG5cdGlmKCB0cnVseSggcGF0aCApICYmICFwcm90eXBlKCBwYXRoLCBTVFJJTkcgKSApe1xuXHRcdHRocm93IG5ldyBFcnJvciggXCJpbnZhbGlkIHBhdGhcIiApO1xuXHR9XG5cblx0aWYoIHRydXUoIGNhY2hlICkgJiYgIXByb3R5cGUoIGNhY2hlLCBPQkpFQ1QgKSApe1xuXHRcdHRocm93IG5ldyBFcnJvciggXCJpbnZhbGlkIGNhY2hlXCIgKTtcblx0fVxuXG5cdGVudGl0eSA9IGVudGl0eSB8fCB7IH07XG5cblx0aWYoIGVudGl0eS5MT09TRU5FRCA9PT0gTE9PU0VORUQgKXtcblx0XHRyZXR1cm4gZW50aXR5O1xuXHR9XG5cblx0Y2FjaGUgPSBjYWNoZSB8fCB7IH07XG5cblx0cGF0aCA9IHBhdGggfHwgXCJcIjtcblxuXHRsZXQgZWxlbWVudCA9IG51bGw7XG5cdGlmKCBkb3VidCggZW50aXR5LCBBUlJBWSApICl7XG5cdFx0bGV0IGtleSA9IFwiXCI7XG5cblx0XHRmb3IoIGxldCBpbmRleCA9IDAsIGxlbmd0aCA9IGVudGl0eS5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICl7XG5cdFx0XHRrZXkgPSBVMjAwYiggcGF0aCwgaW5kZXggKS5qb2luKCBcIi5cIiApLnJlcGxhY2UoIFJFRkVSRU5DRV9QQVRURVJOLCBcIlwiICk7XG5cblx0XHRcdGVsZW1lbnQgPSBlbnRpdHlbIGluZGV4IF07XG5cblx0XHRcdGNhY2hlWyBrZXkgXSA9IGVsZW1lbnQ7XG5cblx0XHRcdGlmKCBwcm90eXBlKCBlbGVtZW50LCBPQkpFQ1QgKSApe1xuXHRcdFx0XHRsb29zZW4oIGVsZW1lbnQsIGtleSwgY2FjaGUgKTtcblxuXHRcdFx0XHRmb3IoIGxldCBwcm9wZXJ0eSBpbiBlbGVtZW50ICl7XG5cdFx0XHRcdFx0bGV0IGtleSA9IFUyMDBiKCBwYXRoLCBwcm9wZXJ0eSApLmpvaW4oIFwiLi4uXCIgKS5yZXBsYWNlKCBBQ0NVTVVMQVRPUl9QQVRURVJOLCBcIlwiICk7XG5cblx0XHRcdFx0XHRsZXQgbGlzdCA9IGNhY2hlWyBrZXkgXSA9IGNhY2hlWyBrZXkgXSB8fCBbIF07XG5cblx0XHRcdFx0XHRsZXQgZGF0YSA9IGVsZW1lbnRbIHByb3BlcnR5IF07XG5cdFx0XHRcdFx0bGlzdC5wdXNoKCBkYXRhICk7XG5cblx0XHRcdFx0XHRpZiggcHJvdHlwZSggZGF0YSwgT0JKRUNUICkgKXtcblx0XHRcdFx0XHRcdGxvb3NlbiggZGF0YSwga2V5LCBjYWNoZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHR9ZWxzZSBpZiggcHJvdHlwZSggZW50aXR5LCBPQkpFQ1QgKSApe1xuXHRcdE9iamVjdC5rZXlzKCBlbnRpdHkgKVxuXHRcdFx0LmZvckVhY2goIGZ1bmN0aW9uIG9uRWFjaEtleSgga2V5ICl7XG5cdFx0XHRcdGVsZW1lbnQgPSBlbnRpdHlbIGtleSBdO1xuXG5cdFx0XHRcdGtleSA9IFUyMDBiKCBwYXRoLCBrZXkgKS5qb2luKCBcIi5cIiApLnJlcGxhY2UoIFJFRkVSRU5DRV9QQVRURVJOLCBcIlwiICk7XG5cblx0XHRcdFx0Y2FjaGVbIGtleSBdID0gZWxlbWVudDtcblxuXHRcdFx0XHRpZiggcHJvdHlwZSggZWxlbWVudCwgT0JKRUNUICkgKXtcblx0XHRcdFx0XHRsb29zZW4oIGVsZW1lbnQsIGtleSwgY2FjaGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9XG5cblx0aGFyZGVuKCBcIkxPT1NFTkVEXCIsIExPT1NFTkVELCBjYWNoZSApO1xuXG5cdHJldHVybiBjYWNoZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbG9vc2VuO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGxvb3Nlbi5qcyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5c1wiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMuanNcbi8vIG1vZHVsZSBpZCA9IDQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Qua2V5cztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSA0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgJGtleXMgICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbigpe1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCl7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSA0NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKVxuICAsIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTyl7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanNcbi8vIG1vZHVsZSBpZCA9IDQ3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG4vKjtcblx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdEBtaXQtbGljZW5zZVxuXG5cdFx0Q29weXJpZ2h0IChAYykgMjAxNyBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXG5cdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5cdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0U09GVFdBUkUuXG5cdEBlbmQtbW9kdWxlLWxpY2Vuc2VcblxuXHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0e1xuXHRcdFx0XCJwYWNrYWdlXCI6IFwiZG91YnRcIixcblx0XHRcdFwicGF0aFwiOiBcImRvdWJ0L2RvdWJ0LmpzXCIsXG5cdFx0XHRcImZpbGVcIjogXCJkb3VidC5qc1wiLFxuXHRcdFx0XCJtb2R1bGVcIjogXCJkb3VidFwiLFxuXHRcdFx0XCJhdXRob3JcIjogXCJSaWNoZXZlIFMuIEJlYmVkb3JcIixcblx0XHRcdFwiY29udHJpYnV0b3JzXCI6IFtcblx0XHRcdFx0XCJKb2huIExlbm9uIE1hZ2hhbm95IDxqb2hubGVub25tYWdoYW5veUBnbWFpbC5jb20+XCJcblx0XHRcdF0sXG5cdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZvbGtvdmFzeXN0ZW1zL2RvdWJ0LmdpdFwiLFxuXHRcdFx0XCJ0ZXN0XCI6IFwiZG91YnQtdGVzdC5qc1wiLFxuXHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdH1cblx0QGVuZC1tb2R1bGUtY29uZmlndXJhdGlvblxuXG5cdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRGaW5hbGx5LCB0aGUgb25lIHRoYXQgd2lsbCBmaXggeW91ciBkb3VidHMgaWYgYXJyYXkgaXMgYW4gYXJyYXksXG5cdFx0XHRhcmd1bWVudHMsIGl0ZXJhYmxlIG9yIGFycmF5LWxpa2UuXG5cdEBlbmQtbW9kdWxlLWRvY3VtZW50YXRpb25cblxuXHRAaW5jbHVkZTpcblx0XHR7XG5cdFx0XHRcImNlbWVudG9cIjogXCJjZW1lbnRvXCIsXG5cdFx0XHRcImhhcmRlblwiOiBcImhhcmRlblwiLFxuXHRcdFx0XCJwcm90eXBlXCI6IFwicHJvdHlwZVwiXG5cdFx0fVxuXHRAZW5kLWluY2x1ZGVcbiovXG5cbmNvbnN0IGNlbWVudG8gPSByZXF1aXJlKCBcImNlbWVudG9cIiApO1xuY29uc3QgaGFyZGVuID0gcmVxdWlyZSggXCJoYXJkZW5cIiApO1xuY29uc3QgcHJvdHlwZSA9IHJlcXVpcmUoIFwicHJvdHlwZVwiICk7XG5cbi8vOiBAc3VwcG9ydC1tb2R1bGU6XG5cdC8vOiBAcmVmZXJlbmNlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9pc0FycmF5XG5cdEFycmF5LmlzQXJyYXl8fChBcnJheS5pc0FycmF5PWZ1bmN0aW9uKHIpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChyKX0pO1xuLy86IEBlbmQtc3VwcG9ydC1tb2R1bGVcblxuaGFyZGVuKCBcIkFSUkFZXCIsIFwiYXJyYXlcIiApO1xuaGFyZGVuKCBcIkFTX0FSUkFZXCIsIFwiYXMtYXJyYXlcIiApO1xuaGFyZGVuKCBcIkFSR1VNRU5UU1wiLCBcImFyZ3VtZW50c1wiICk7XG5oYXJkZW4oIFwiQVJSQVlfTElLRVwiLCBcImFycmF5LWxpa2VcIiApO1xuaGFyZGVuKCBcIklURVJBQkxFXCIsIFwiaXRlcmFibGVcIiApO1xuXG5jb25zdCBkb3VidCA9IGZ1bmN0aW9uIGRvdWJ0KCBhcnJheSwgY29uZGl0aW9uICl7XG5cdC8qO1xuXHRcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdFx0XHR7XG5cdFx0XHRcdFwiYXJyYXk6cmVxdWlyZWRcIjogW1xuXHRcdFx0XHRcdFwiWypdXCIsXG5cdFx0XHRcdFx0XCJBcnJheVwiLFxuXHRcdFx0XHRcdFwiQXJndW1lbnRzXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJjb25kaXRpb25cIjogXCJzdHJpbmdcIlxuXHRcdFx0fVxuXHRcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG5cdCovXG5cblx0bGV0IGNvbmRpdGlvblR5cGUgPSBwcm90eXBlKCBjb25kaXRpb24gKTtcblx0aWYoIGNvbmRpdGlvblR5cGUuU1RSSU5HICYmXG5cdFx0Y29uZGl0aW9uICE9IEFSUkFZICYmXG5cdFx0Y29uZGl0aW9uICE9IEFTX0FSUkFZICYmXG5cdFx0Y29uZGl0aW9uICE9IEFSR1VNRU5UUyAmJlxuXHRcdGNvbmRpdGlvbiAhPSBBUlJBWV9MSUtFICYmXG5cdFx0Y29uZGl0aW9uICE9IElURVJBQkxFIClcblx0e1xuXHRcdHRocm93IG5ldyBFcnJvciggXCJpbnZhbGlkIGNvbmRpdGlvblwiICk7XG5cdH1cblxuXHRpZiggY29uZGl0aW9uVHlwZS5TVFJJTkcgKXtcblx0XHRsZXQgYXJyYXlUeXBlID0gcHJvdHlwZSggYXJyYXkgKTtcblx0XHRpZiggYXJyYXlUeXBlLlNUUklORyB8fFxuXHRcdFx0YXJyYXlUeXBlLk5VTUJFUiB8fFxuXHRcdFx0YXJyYXlUeXBlLkJPT0xFQU4gfHxcblx0XHRcdGFycmF5VHlwZS5VTkRFRklORUQgfHxcblx0XHRcdGFycmF5VHlwZS5TWU1CT0wgfHxcblx0XHRcdGFycmF5ID09PSBudWxsIClcblx0XHR7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYoIGNvbmRpdGlvbiA9PSBBUlJBWSApe1xuXHRcdFx0cmV0dXJuIEFycmF5LmlzQXJyYXkoIGFycmF5ICk7XG5cblx0XHR9ZWxzZSBpZiggY29uZGl0aW9uID09IEFTX0FSUkFZICl7XG5cdFx0XHRyZXR1cm4gKCBkb3VidCggYXJyYXksIEFSUkFZICkgfHxcblx0XHRcdFx0ZG91YnQoIGFycmF5LCBBUkdVTUVOVFMgKSB8fFxuXHRcdFx0XHRkb3VidCggYXJyYXksIEFSUkFZX0xJS0UgKSB8fFxuXHRcdFx0XHRkb3VidCggYXJyYXksIElURVJBQkxFICkgKTtcblxuXHRcdH1lbHNlIGlmKCBjb25kaXRpb24gPT0gQVJHVU1FTlRTICl7XG5cdFx0XHRyZXR1cm4gKCBwcm90eXBlKCBhcnJheSApLk9CSkVDVCAmJlxuXHRcdFx0XHQoIC9Bcmd1bWVudHMvICkudGVzdCggYXJyYXkudG9TdHJpbmcoICkgKSApO1xuXG5cdFx0fWVsc2UgaWYoIGNvbmRpdGlvbiA9PSBBUlJBWV9MSUtFICl7XG5cdFx0XHRyZXR1cm4gKCBwcm90eXBlKCBhcnJheS5sZW5ndGgsIE5VTUJFUiApICYmXG5cdFx0XHRcdCEhT2JqZWN0LmtleXMoIGFycmF5ICkubGVuZ3RoICYmXG5cdFx0XHRcdE9iamVjdC5rZXlzKCBhcnJheSApXG5cdFx0XHRcdFx0LnNvbWUoIGZ1bmN0aW9uIG9uRWFjaEluZGV4KCBpbmRleCApe1xuXHRcdFx0XHRcdFx0cmV0dXJuIHByb3R5cGUoIGluZGV4LCBOVU1CRVIgKTtcblx0XHRcdFx0XHR9ICkgKTtcblxuXHRcdH1lbHNlIGlmKCBjb25kaXRpb24gPT0gSVRFUkFCTEUgKXtcblx0XHRcdHJldHVybiAoIHByb3R5cGUoIFN5bWJvbCwgRlVOQ1RJT04gKSAmJlxuXHRcdFx0XHRwcm90eXBlKCBTeW1ib2wuaXRlcmF0b3IsIFNZTUJPTCApICYmXG5cdFx0XHRcdCEhYXJyYXlbIFN5bWJvbC5pdGVyYXRvciBdICk7XG5cblx0XHR9ZWxzZXtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0fWVsc2V7XG5cdFx0cmV0dXJuIGNlbWVudG8oIHtcblx0XHRcdFwiQVJSQVlcIjogZG91YnQoIGFycmF5LCBBUlJBWSApLFxuXHRcdFx0XCJBU19BUlJBWVwiOiBkb3VidCggYXJyYXksIEFTX0FSUkFZICksXG5cdFx0XHRcIkFSR1VNRU5UU1wiOiBkb3VidCggYXJyYXksIEFSR1VNRU5UUyApLFxuXHRcdFx0XCJBUlJBWV9MSUtFXCI6IGRvdWJ0KCBhcnJheSwgQVJSQVlfTElLRSApLFxuXHRcdFx0XCJJVEVSQUJMRVwiOiBkb3VidCggYXJyYXksIElURVJBQkxFIClcblx0XHR9ICk7XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZG91YnQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZG91YnQuanMiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDQ5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX3drcy1leHQnKS5mKCdpdGVyYXRvcicpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSA1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ICA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uKGl0ZXJhdGVkKXtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24oKXtcbiAgdmFyIE8gICAgID0gdGhpcy5fdFxuICAgICwgaW5kZXggPSB0aGlzLl9pXG4gICAgLCBwb2ludDtcbiAgaWYoaW5kZXggPj0gTy5sZW5ndGgpcmV0dXJuIHt2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHt2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlfTtcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSA1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgZGVmaW5lZCAgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oVE9fU1RSSU5HKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKHRoYXQsIHBvcyl7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSlcbiAgICAgICwgaSA9IHRvSW50ZWdlcihwb3MpXG4gICAgICAsIGwgPSBzLmxlbmd0aFxuICAgICAgLCBhLCBiO1xuICAgIGlmKGkgPCAwIHx8IGkgPj0gbClyZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3N0cmluZy1hdC5qc1xuLy8gbW9kdWxlIGlkID0gNTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHJlZGVmaW5lICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIGhpZGUgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIEl0ZXJhdG9ycyAgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCAkaXRlckNyZWF0ZSAgICA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIElURVJBVE9SICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBCVUdHWSAgICAgICAgICA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKSAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gICwgRkZfSVRFUkFUT1IgICAgPSAnQEBpdGVyYXRvcidcbiAgLCBLRVlTICAgICAgICAgICA9ICdrZXlzJ1xuICAsIFZBTFVFUyAgICAgICAgID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKXtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24oa2luZCl7XG4gICAgaWYoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaChraW5kKXtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHICAgICAgICA9IE5BTUUgKyAnIEl0ZXJhdG9yJ1xuICAgICwgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTXG4gICAgLCBWQUxVRVNfQlVHID0gZmFsc2VcbiAgICAsIHByb3RvICAgICAgPSBCYXNlLnByb3RvdHlwZVxuICAgICwgJG5hdGl2ZSAgICA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXVxuICAgICwgJGRlZmF1bHQgICA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpXG4gICAgLCAkZW50cmllcyAgID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZFxuICAgICwgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmVcbiAgICAsIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYoJGFueU5hdGl2ZSl7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UpKTtcbiAgICBpZihJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSl7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYoIUxJQlJBUlkgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKWhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZihERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpe1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKXtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddICA9IHJldHVyblRoaXM7XG4gIGlmKERFRkFVTFQpe1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6ICBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6ICAgIElTX1NFVCAgICAgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZihGT1JDRUQpZm9yKGtleSBpbiBtZXRob2RzKXtcbiAgICAgIGlmKCEoa2V5IGluIHByb3RvKSlyZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDUzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gdHJ1ZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanNcbi8vIG1vZHVsZSBpZCA9IDU0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faGlkZScpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDU1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0ge307XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyYXRvcnMuanNcbi8vIG1vZHVsZSBpZCA9IDU2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKVxuICAsIGRlc2NyaXB0b3IgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCl7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwge25leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCl9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDU3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBkUHMgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKVxuICAsIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpXG4gICwgSUVfUFJPVE8gICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJylcbiAgLCBFbXB0eSAgICAgICA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH1cbiAgLCBQUk9UT1RZUEUgICA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uKCl7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpXG4gICAgLCBpICAgICAgPSBlbnVtQnVnS2V5cy5sZW5ndGhcbiAgICAsIGx0ICAgICA9ICc8J1xuICAgICwgZ3QgICAgID0gJz4nXG4gICAgLCBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZShpLS0pZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpe1xuICB2YXIgcmVzdWx0O1xuICBpZihPICE9PSBudWxsKXtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5O1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gNThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGRQICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgZ2V0S2V5cyAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcyl7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyAgID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKVxuICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAsIGkgPSAwXG4gICAgLCBQO1xuICB3aGlsZShsZW5ndGggPiBpKWRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcHMuanNcbi8vIG1vZHVsZSBpZCA9IDU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qc1xuLy8gbW9kdWxlIGlkID0gNjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCBoYXMgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCB0YWcsIHN0YXQpe1xuICBpZihpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKWRlZihpdCwgVEFHLCB7Y29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnfSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanNcbi8vIG1vZHVsZSBpZCA9IDYxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBzdG9yZSAgICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpXG4gICwgdWlkICAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpXG4gICwgU3ltYm9sICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbFxuICAsIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSl7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLmpzXG4vLyBtb2R1bGUgaWQgPSA2MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCB0b09iamVjdCAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgSUVfUFJPVE8gICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJylcbiAgLCBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uKE8pe1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmKGhhcyhPLCBJRV9QUk9UTykpcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZih0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKXtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdwby5qc1xuLy8gbW9kdWxlIGlkID0gNjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwicmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnbG9iYWwgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBoaWRlICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgSXRlcmF0b3JzICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgVE9fU1RSSU5HX1RBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5mb3IodmFyIGNvbGxlY3Rpb25zID0gWydOb2RlTGlzdCcsICdET01Ub2tlbkxpc3QnLCAnTWVkaWFMaXN0JywgJ1N0eWxlU2hlZXRMaXN0JywgJ0NTU1J1bGVMaXN0J10sIGkgPSAwOyBpIDwgNTsgaSsrKXtcbiAgdmFyIE5BTUUgICAgICAgPSBjb2xsZWN0aW9uc1tpXVxuICAgICwgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXVxuICAgICwgcHJvdG8gICAgICA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIGlmKHByb3RvICYmICFwcm90b1tUT19TVFJJTkdfVEFHXSloaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgSXRlcmF0b3JzW05BTUVdID0gSXRlcmF0b3JzLkFycmF5O1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSA2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpXG4gICwgc3RlcCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpXG4gICwgSXRlcmF0b3JzICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgdG9JT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbihpdGVyYXRlZCwga2luZCl7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24oKXtcbiAgdmFyIE8gICAgID0gdGhpcy5fdFxuICAgICwga2luZCAgPSB0aGlzLl9rXG4gICAgLCBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpe1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYoa2luZCA9PSAna2V5cycgIClyZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmKGtpbmQgPT0gJ3ZhbHVlcycpcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDY1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qc1xuLy8gbW9kdWxlIGlkID0gNjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihkb25lLCB2YWx1ZSl7XG4gIHJldHVybiB7dmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmV9O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItc3RlcC5qc1xuLy8gbW9kdWxlIGlkID0gNjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZXh0LmpzXG4vLyBtb2R1bGUgaWQgPSA2OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wuanNcbi8vIG1vZHVsZSBpZCA9IDY5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3ltYm9sO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA3MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBERVNDUklQVE9SUyAgICA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJylcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgcmVkZWZpbmUgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgTUVUQSAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZXG4gICwgJGZhaWxzICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgc2hhcmVkICAgICAgICAgPSByZXF1aXJlKCcuL19zaGFyZWQnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIHVpZCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJylcbiAgLCB3a3MgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcycpXG4gICwgd2tzRXh0ICAgICAgICAgPSByZXF1aXJlKCcuL193a3MtZXh0JylcbiAgLCB3a3NEZWZpbmUgICAgICA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKVxuICAsIGtleU9mICAgICAgICAgID0gcmVxdWlyZSgnLi9fa2V5b2YnKVxuICAsIGVudW1LZXlzICAgICAgID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJylcbiAgLCBpc0FycmF5ICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLWFycmF5JylcbiAgLCBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9JT2JqZWN0ICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCB0b1ByaW1pdGl2ZSAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgY3JlYXRlRGVzYyAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJylcbiAgLCBfY3JlYXRlICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKVxuICAsIGdPUE5FeHQgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JylcbiAgLCAkR09QRCAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJylcbiAgLCAkRFAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgJGtleXMgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpXG4gICwgZ09QRCAgICAgICAgICAgPSAkR09QRC5mXG4gICwgZFAgICAgICAgICAgICAgPSAkRFAuZlxuICAsIGdPUE4gICAgICAgICAgID0gZ09QTkV4dC5mXG4gICwgJFN5bWJvbCAgICAgICAgPSBnbG9iYWwuU3ltYm9sXG4gICwgJEpTT04gICAgICAgICAgPSBnbG9iYWwuSlNPTlxuICAsIF9zdHJpbmdpZnkgICAgID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5XG4gICwgUFJPVE9UWVBFICAgICAgPSAncHJvdG90eXBlJ1xuICAsIEhJRERFTiAgICAgICAgID0gd2tzKCdfaGlkZGVuJylcbiAgLCBUT19QUklNSVRJVkUgICA9IHdrcygndG9QcmltaXRpdmUnKVxuICAsIGlzRW51bSAgICAgICAgID0ge30ucHJvcGVydHlJc0VudW1lcmFibGVcbiAgLCBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5JylcbiAgLCBBbGxTeW1ib2xzICAgICA9IHNoYXJlZCgnc3ltYm9scycpXG4gICwgT1BTeW1ib2xzICAgICAgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKVxuICAsIE9iamVjdFByb3RvICAgID0gT2JqZWN0W1BST1RPVFlQRV1cbiAgLCBVU0VfTkFUSVZFICAgICA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbidcbiAgLCBRT2JqZWN0ICAgICAgICA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbigpe1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7dmFsdWU6IDd9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uKGl0LCBrZXksIEQpe1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYocHJvdG9EZXNjKWRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bylkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uKHRhZyl7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbihpdCl7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpe1xuICBpZihpdCA9PT0gT2JqZWN0UHJvdG8pJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYoaGFzKEFsbFN5bWJvbHMsIGtleSkpe1xuICAgIGlmKCFELmVudW1lcmFibGUpe1xuICAgICAgaWYoIWhhcyhpdCwgSElEREVOKSlkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZihoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKWl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwge2VudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCl7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKVxuICAgICwgaSAgICA9IDBcbiAgICAsIGwgPSBrZXlzLmxlbmd0aFxuICAgICwga2V5O1xuICB3aGlsZShsID4gaSkkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKXtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpe1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZih0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSlyZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXtcbiAgaXQgID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKXJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZihEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7XG4gIHZhciBuYW1lcyAgPSBnT1BOKHRvSU9iamVjdChpdCkpXG4gICAgLCByZXN1bHQgPSBbXVxuICAgICwgaSAgICAgID0gMFxuICAgICwga2V5O1xuICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKXtcbiAgICBpZighaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KXtcbiAgdmFyIElTX09QICA9IGl0ID09PSBPYmplY3RQcm90b1xuICAgICwgbmFtZXMgID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpXG4gICAgLCByZXN1bHQgPSBbXVxuICAgICwgaSAgICAgID0gMFxuICAgICwga2V5O1xuICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKXtcbiAgICBpZihoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZighVVNFX05BVElWRSl7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKXtcbiAgICBpZih0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCl0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgIGlmKHRoaXMgPT09IE9iamVjdFByb3RvKSRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZihERVNDUklQVE9SUyAmJiBzZXR0ZXIpc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7Y29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXR9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiAgID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5Jykpe1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbihuYW1lKXtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHtTeW1ib2w6ICRTeW1ib2x9KTtcblxuZm9yKHZhciBzeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGkgPSAwOyBzeW1ib2xzLmxlbmd0aCA+IGk7ICl3a3Moc3ltYm9sc1tpKytdKTtcblxuZm9yKHZhciBzeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgaSA9IDA7IHN5bWJvbHMubGVuZ3RoID4gaTsgKXdrc0RlZmluZShzeW1ib2xzW2krK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uKGtleSl7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihrZXkpe1xuICAgIGlmKGlzU3ltYm9sKGtleSkpcmV0dXJuIGtleU9mKFN5bWJvbFJlZ2lzdHJ5LCBrZXkpO1xuICAgIHRocm93IFR5cGVFcnJvcihrZXkgKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbigpeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uKCl7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uKCl7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHthOiBTfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KXtcbiAgICBpZihpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSlyZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICB2YXIgYXJncyA9IFtpdF1cbiAgICAgICwgaSAgICA9IDFcbiAgICAgICwgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZShhcmd1bWVudHMubGVuZ3RoID4gaSlhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZih0eXBlb2YgcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykkcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgICBpZigkcmVwbGFjZXIgfHwgIWlzQXJyYXkocmVwbGFjZXIpKXJlcGxhY2VyID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSl7XG4gICAgICBpZigkcmVwbGFjZXIpdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmKCFpc1N5bWJvbCh2YWx1ZSkpcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN5bWJvbC5qc1xuLy8gbW9kdWxlIGlkID0gNzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIE1FVEEgICAgID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKVxuICAsIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBoYXMgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgc2V0RGVzYyAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgaWQgICAgICAgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24oaXQpe1xuICBzZXREZXNjKGl0LCBNRVRBLCB7dmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9fSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbihpdCwgY3JlYXRlKXtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZighaXNPYmplY3QoaXQpKXJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmKCFoYXMoaXQsIE1FVEEpKXtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmKCFpc0V4dGVuc2libGUoaXQpKXJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZighY3JlYXRlKXJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24oaXQsIGNyZWF0ZSl7XG4gIGlmKCFoYXMoaXQsIE1FVEEpKXtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmKCFpc0V4dGVuc2libGUoaXQpKXJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYoIWNyZWF0ZSlyZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKXNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiAgICAgIE1FVEEsXG4gIE5FRUQ6ICAgICBmYWxzZSxcbiAgZmFzdEtleTogIGZhc3RLZXksXG4gIGdldFdlYWs6ICBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19tZXRhLmpzXG4vLyBtb2R1bGUgaWQgPSA3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZ2xvYmFsICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGNvcmUgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgTElCUkFSWSAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JylcbiAgLCB3a3NFeHQgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcy1leHQnKVxuICAsIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSl7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwge3ZhbHVlOiB3a3NFeHQuZihuYW1lKX0pO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1kZWZpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDczXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBnZXRLZXlzICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpXG4gICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIGVsKXtcbiAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpXG4gICAgLCBrZXlzICAgPSBnZXRLZXlzKE8pXG4gICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICwgaW5kZXggID0gMFxuICAgICwga2V5O1xuICB3aGlsZShsZW5ndGggPiBpbmRleClpZihPW2tleSA9IGtleXNbaW5kZXgrK11dID09PSBlbClyZXR1cm4ga2V5O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2tleW9mLmpzXG4vLyBtb2R1bGUgaWQgPSA3NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpXG4gICwgZ09QUyAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJylcbiAgLCBwSUUgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHZhciByZXN1bHQgICAgID0gZ2V0S2V5cyhpdClcbiAgICAsIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmKGdldFN5bWJvbHMpe1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdClcbiAgICAgICwgaXNFbnVtICA9IHBJRS5mXG4gICAgICAsIGkgICAgICAgPSAwXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShzeW1ib2xzLmxlbmd0aCA+IGkpaWYoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0ta2V5cy5qc1xuLy8gbW9kdWxlIGlkID0gNzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BzLmpzXG4vLyBtb2R1bGUgaWQgPSA3NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKXtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXkuanNcbi8vIG1vZHVsZSBpZCA9IDc3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSA3OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ29ic2VydmFibGUnKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSA4MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcblxuLyo7XG5cdEBtb2R1bGUtbGljZW5zZTpcblx0XHRUaGUgTUlUIExpY2Vuc2UgKE1JVClcblx0XHRAbWl0LWxpY2Vuc2VcblxuXHRcdENvcHlyaWdodCAoQGMpIDIwMTcgUmljaGV2ZSBTaW9kaW5hIEJlYmVkb3Jcblx0XHRAZW1haWw6IHJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cblxuXHRcdFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcblx0XHRvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5cdFx0aW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuXHRcdHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcblx0XHRjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcblx0XHRmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5cdFx0VGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5cdFx0Y29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuXHRcdFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcblx0XHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0XHRGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcblx0XHRBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5cdFx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0XHRPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuXHRcdFNPRlRXQVJFLlxuXHRAZW5kLW1vZHVsZS1saWNlbnNlXG5cblx0QG1vZHVsZS1jb25maWd1cmF0aW9uOlxuXHRcdHtcblx0XHRcdFwicGFja2FnZVwiOiBcImNlbWVudG9cIixcblx0XHRcdFwicGF0aFwiOiBcImNlbWVudG8vY2VtZW50by5qc1wiLFxuXHRcdFx0XCJmaWxlXCI6IFwiY2VtZW50by5qc1wiLFxuXHRcdFx0XCJtb2R1bGVcIjogXCJjZW1lbnRvXCIsXG5cdFx0XHRcImF1dGhvclwiOiBcIlJpY2hldmUgUy4gQmViZWRvclwiLFxuXHRcdFx0XCJjb250cmlidXRvcnNcIjogW1xuXHRcdFx0XHRcIkpvaG4gTGVub24gTWFnaGFub3kgPGpvaG5sZW5vbm1hZ2hhbm95QGdtYWlsLmNvbT5cIlxuXHRcdFx0XSxcblx0XHRcdFwiZU1haWxcIjogXCJyaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXCIsXG5cdFx0XHRcInJlcG9zaXRvcnlcIjogXCJodHRwczovL2dpdGh1Yi5jb20vdm9sa292YXN5c3RlbXMvY2VtZW50by5naXRcIixcblx0XHRcdFwidGVzdFwiOiBcImNlbWVudG8tdGVzdC5qc1wiLFxuXHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdH1cblx0QGVuZC1tb2R1bGUtY29uZmlndXJhdGlvblxuXG5cdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRIYXJkZW4gcHJvcGVydGllcyBvZiBlbnRpdHkuXG5cblx0XHRUaGlzIHdpbGwgcmVwbGFjZSBlbnVtZXJhYmxlIHByb3BlcnRpZXMgd2l0aCBub24tZW51bWVyYWJsZS5cblxuXHRcdFRoaXMgd2lsbCBmcmVlemUgdGhlIG9iamVjdC5cblx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXG5cdEBpbmNsdWRlOlxuXHRcdHtcblx0XHRcdFwiaGFyZGVuXCI6IFwiaGFyZGVuXCJcblx0XHR9XG5cdEBlbmQtaW5jbHVkZVxuKi9cblxuY29uc3QgaGFyZGVuID0gcmVxdWlyZSggXCJoYXJkZW5cIiApO1xuXG5jb25zdCBjZW1lbnRvID0gZnVuY3Rpb24gY2VtZW50byggZW50aXR5ICl7XG5cdC8qO1xuXHRcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdFx0XHR7XG5cdFx0XHRcdFwiZW50aXR5OnJlcXVpcmVkXCI6IFwiKlwiXG5cdFx0XHR9XG5cdFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cblx0Ki9cblxuXHRpZiggdHlwZW9mIGVudGl0eSA9PSBcInVuZGVmaW5lZFwiIHx8XG5cdFx0IWVudGl0eSB8fFxuXHRcdE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKCBlbnRpdHkgKS5sZW5ndGggPT0gMCApXG5cdHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIFwiaW52YWxpZCBlbnRpdHlcIiApO1xuXHR9XG5cblx0Zm9yKCBsZXQgcHJvcGVydHkgaW4gZW50aXR5ICl7XG5cdFx0aWYoIGVudGl0eS5oYXNPd25Qcm9wZXJ0eSggcHJvcGVydHkgKSApe1xuXHRcdFx0bGV0IHZhbHVlID0gZW50aXR5WyBwcm9wZXJ0eSBdO1xuXHRcdFx0dHJ5e1xuXHRcdFx0XHRkZWxldGUgZW50aXR5WyBwcm9wZXJ0eSBdO1xuXHRcdFx0fWNhdGNoKCBlcnJvciApeyB9XG5cblx0XHRcdGVudGl0eSA9ICggZW50aXR5LmhhcmRlbiAmJiB0eXBlb2YgZW50aXR5LmhhcmRlbiA9PSBcImZ1bmN0aW9uXCIgKT9cblx0XHRcdFx0ZW50aXR5LmhhcmRlbiggcHJvcGVydHksIHZhbHVlICkgOlxuXHRcdFx0XHRoYXJkZW4oIHByb3BlcnR5LCB2YWx1ZSwgZW50aXR5ICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIE9iamVjdC5mcmVlemUoIGVudGl0eSApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjZW1lbnRvO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGNlbWVudG8uanMiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2ZyZWV6ZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2ZyZWV6ZS5qc1xuLy8gbW9kdWxlIGlkID0gODJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmZyZWV6ZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9mcmVlemUuanNcbi8vIG1vZHVsZSBpZCA9IDgzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgbWV0YSAgICAgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZnJlZXplJywgZnVuY3Rpb24oJGZyZWV6ZSl7XG4gIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpe1xuICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanNcbi8vIG1vZHVsZSBpZCA9IDg0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG4vKjtcblx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdEBtaXQtbGljZW5zZVxuXG5cdFx0Q29weXJpZ2h0IChAYykgMjAxNyBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXG5cdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5cdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0U09GVFdBUkUuXG5cdEBlbmQtbW9kdWxlLWxpY2Vuc2VcblxuXHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0e1xuXHRcdFx0XCJwYWNrYWdlXCI6IFwiaGFyZGVuXCIsXG5cdFx0XHRcInBhdGhcIjogXCJoYXJkZW4vaGFyZGVuLmpzXCIsXG5cdFx0XHRcImZpbGVcIjogXCJoYXJkZW4uanNcIixcblx0XHRcdFwibW9kdWxlXCI6IFwiaGFyZGVuXCIsXG5cdFx0XHRcImF1dGhvclwiOiBcIlJpY2hldmUgUy4gQmViZWRvclwiLFxuXHRcdFx0XCJlTWFpbFwiOiBcInJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cIixcblx0XHRcdFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b2xrb3Zhc3lzdGVtcy9oYXJkZW4uZ2l0XCIsXG5cdFx0XHRcInRlc3RcIjogXCJoYXJkZW4tdGVzdC5qc1wiLFxuXHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdH1cblx0QGVuZC1tb2R1bGUtY29uZmlndXJhdGlvblxuXG5cdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRNYWtlcyB5b3VyIHByb3BlcnR5LXZhbHVlIG5vbi1lbnVtZXJhYmxlLCBub24tY29uZmlndXJhYmxlIGFuZCBub24td3JpdGFibGUuXG5cblx0XHRJZiBlbnRpdHkgaXMgZ2l2ZW4sIHRoZSBwcm9wZXJ0eSB3aWxsIGJlIGJvdW5kIHRvIHRoZSBlbnRpdHkuXG5cblx0XHRFbHNlLCBpZiB0aGlzIG1vZHVsZSBpcyB1c2VkIGluIHRoZSBicm93c2VyLCB0aGUgZW50aXR5IGRlZmF1bHRzIHRvIHRoZSBAY29kZTp3aW5kb3c7LlxuXG5cdFx0RWxzZSwgaWYgdGhpcyBtb2R1bGUgaXMgdXNlZCBpbiBhIE5vZGVKUyBlbnZpcm9ubWVudCwgdGhlIGVudGl0eSBkZWZhdWx0cyB0byBAY29kZTpnbG9iYWw7LlxuXG5cdFx0Tm90ZSB0aGF0IGlmIHRoZSBlbnRpdHkgaXMgaGFyZGVuZWQsIHlvdSBjYW5ub3QgdXNlIEBjb2RlOmRlbGV0ZTsgb24gaXQuXG5cdEBlbmQtbW9kdWxlLWRvY3VtZW50YXRpb25cbiovXG5cbmNvbnN0IGhhcmRlbiA9IGZ1bmN0aW9uIGhhcmRlbiggcHJvcGVydHksIHZhbHVlLCBlbnRpdHkgKXtcblx0Lyo7XG5cdFx0QG1ldGEtY29uZmlndXJhdGlvbjpcblx0XHRcdHtcblx0XHRcdFx0XCJwcm9wZXJ0eTpyZXF1aXJlZFwiOiBbXG5cdFx0XHRcdFx0XCJzdHJpbmdcIixcblx0XHRcdFx0XHRcInN5bWJvbFwiLFxuXHRcdFx0XHRcdFwibnVtYmVyXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJ2YWx1ZTpyZXF1aXJlZFwiOiBcIipcIixcblx0XHRcdFx0XCJlbnRpdHk6b3B0aW9uYWxcIjogXCJvYmplY3RcIlxuXHRcdFx0fVxuXHRcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG5cdCovXG5cblx0aWYoIHByb3BlcnR5ID09PSBcIlwiIHx8XG5cdFx0KCB0eXBlb2YgcHJvcGVydHkgIT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0dHlwZW9mIHByb3BlcnR5ICE9IFwic3ltYm9sXCIgJiZcblx0XHQgXHR0eXBlb2YgcHJvcGVydHkgIT0gXCJudW1iZXJcIiApIClcblx0e1xuXHRcdHRocm93IG5ldyBFcnJvciggXCJpbnZhbGlkIHByb3BlcnR5XCIgKTtcblx0fVxuXG5cdGxldCBzZWxmID0gdGhpcztcblx0aWYoIHR5cGVvZiBlbnRpdHkgIT0gXCJ1bmRlZmluZWRcIiApe1xuXHRcdHNlbGYgPSBlbnRpdHk7XG5cblx0fWVsc2UgaWYoIHR5cGVvZiBnbG9iYWwgIT0gXCJ1bmRlZmluZWRcIiAmJiB0aGlzID09PSBnbG9iYWwgKXtcblx0XHRzZWxmID0gZ2xvYmFsO1xuXG5cdH1lbHNlIGlmKCB0eXBlb2Ygd2luZG93ICE9IFwidW5kZWZpbmVkXCIgJiYgdGhpcyA9PT0gd2luZG93ICl7XG5cdFx0c2VsZiA9IHdpbmRvdztcblx0fVxuXG5cdGVudGl0eSA9IGVudGl0eSB8fCBzZWxmO1xuXG5cdGlmKCB0eXBlb2YgZW50aXR5ID09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIGdsb2JhbCAhPSBcInVuZGVmaW5lZFwiICl7XG5cdFx0ZW50aXR5ID0gZ2xvYmFsO1xuXG5cdH1lbHNlIGlmKCB0eXBlb2YgZW50aXR5ID09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdyAhPSBcInVuZGVmaW5lZFwiICl7XG5cdFx0ZW50aXR5ID0gd2luZG93O1xuXHR9XG5cblx0aWYoIHR5cGVvZiBlbnRpdHlbIHByb3BlcnR5IF0gIT0gXCJ1bmRlZmluZWRcIiApe1xuXHRcdHJldHVybiBlbnRpdHk7XG5cdH1cblxuXHR0cnl7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBlbnRpdHksIHByb3BlcnR5LCB7XG5cdFx0XHRcImVudW1lcmFibGVcIjogZmFsc2UsXG5cdFx0XHRcImNvbmZpZ3VyYWJsZVwiOiBmYWxzZSxcblx0XHRcdFwid3JpdGFibGVcIjogZmFsc2UsXG5cdFx0XHRcInZhbHVlXCI6IHZhbHVlXG5cdFx0fSApO1xuXG5cdH1jYXRjaCggZXJyb3IgKXtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIGBjYW5ub3QgaGFyZGVuIHByb3BlcnR5LCAkeyBwcm9wZXJ0eSB9LCBlcnJvciwgJHsgZXJyb3IgfWAgKTtcblx0fVxuXG5cdGlmKCAoICggdHlwZW9mIGdsb2JhbCAhPSBcInVuZGVmaW5lZFwiICYmIGVudGl0eSAhPT0gZ2xvYmFsICkgfHxcblx0XHQoIHR5cGVvZiB3aW5kb3cgIT0gXCJ1bmRlZmluZWRcIiAmJiBlbnRpdHkgIT09IHdpbmRvdyApICkgJiZcblx0XHR0eXBlb2YgZW50aXR5LmhhcmRlbiA9PSBcInVuZGVmaW5lZFwiIClcblx0e1xuXHRcdHRyeXtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggZW50aXR5LCBcImhhcmRlblwiLCB7XG5cdFx0XHRcdFwiZW51bWVyYWJsZVwiOiBmYWxzZSxcblx0XHRcdFx0XCJjb25maWd1cmFibGVcIjogZmFsc2UsXG5cdFx0XHRcdFwid3JpdGFibGVcIjogZmFsc2UsXG5cdFx0XHRcdFwidmFsdWVcIjogaGFyZGVuLmJpbmQoIHNlbGYgKVxuXHRcdFx0fSApO1xuXG5cdFx0fWNhdGNoKCBlcnJvciApe1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCBgY2Fubm90IGJpbmQgaGFyZGVuLCBlcnJvciwgJHsgZXJyb3IgfWAgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZW50aXR5O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBoYXJkZW47XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gaGFyZGVuLmpzIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHkuanNcbi8vIG1vZHVsZSBpZCA9IDg2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYyl7XG4gIHJldHVybiAkT2JqZWN0LmRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2MpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHkuanNcbi8vIG1vZHVsZSBpZCA9IDg3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHtkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qc1xuLy8gbW9kdWxlIGlkID0gODhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfaXRlcmF0b3IgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9zeW1ib2wvaXRlcmF0b3JcIik7XG5cbnZhciBfaXRlcmF0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXRlcmF0b3IpO1xuXG52YXIgX3N5bWJvbCA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbFwiKTtcblxudmFyIF9zeW1ib2wyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3ltYm9sKTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBfaXRlcmF0b3IyLmRlZmF1bHQgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBfdHlwZW9mKF9pdGVyYXRvcjIuZGVmYXVsdCkgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKTtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgJiYgb2JqICE9PSBfc3ltYm9sMi5kZWZhdWx0LnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YuanNcbi8vIG1vZHVsZSBpZCA9IDg5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG4vKjtcblx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdEBtaXQtbGljZW5zZVxuXG5cdFx0Q29weXJpZ2h0IChAYykgMjAxNyBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXG5cdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5cdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0U09GVFdBUkUuXG5cdEBlbmQtbW9kdWxlLWxpY2Vuc2VcblxuXHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0e1xuXHRcdFx0XCJwYWNrYWdlXCI6IFwicHJvdHlwZVwiLFxuXHRcdFx0XCJwYXRoXCI6IFwicHJvdHlwZS9wcm90eXBlLmpzXCIsXG5cdFx0XHRcImZpbGVcIjogXCJwcm90eXBlLmpzXCIsXG5cdFx0XHRcIm1vZHVsZVwiOiBcInByb3R5cGVcIixcblx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcImNvbnRyaWJ1dG9yc1wiOiBbXG5cdFx0XHRcdFwiSm9obiBMZW5vbiBNYWdoYW5veSA8am9obmxlbm9ubWFnaGFub3lAZ21haWwuY29tPlwiXG5cdFx0XHRdLFxuXHRcdFx0XCJlTWFpbFwiOiBcInJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cIixcblx0XHRcdFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b2xrb3Zhc3lzdGVtcy9wcm90eXBlLmdpdFwiLFxuXHRcdFx0XCJ0ZXN0XCI6IFwicHJvdHlwZS10ZXN0LmpzXCIsXG5cdFx0XHRcImdsb2JhbFwiOiB0cnVlXG5cdFx0fVxuXHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cblx0QG1vZHVsZS1kb2N1bWVudGF0aW9uOlxuXHRcdERldGVybWluZSB0eXBlIG9mIHByb3BlcnR5LlxuXG5cdFx0UGFzc2luZyBtdWx0aXBsZSB0eXBlIHdpbGwgZG8gdHJ5IHRvIG1hdGNoIGFueSBvbmUgb2YgaXQuXG5cdEBlbmQtbW9kdWxlLWRvY3VtZW50YXRpb25cblxuXHRAaW5jbHVkZTpcblx0XHR7XG5cdFx0XHRcImNlbWVudG9cIjogXCJjZW1lbnRvXCIsXG5cdFx0XHRcImhhcmRlblwiOiBcImhhcmRlblwiXG5cdFx0fVxuXHRAZW5kLWluY2x1ZGVcbiovXG5cbmNvbnN0IGNlbWVudG8gPSByZXF1aXJlKCBcImNlbWVudG9cIiApO1xuY29uc3QgaGFyZGVuID0gcmVxdWlyZSggXCJoYXJkZW5cIiApO1xuXG4vLzogQHN1cHBvcnQtbW9kdWxlOlxuXHQvLzogQHJlZmVyZW5jZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvaXNBcnJheVxuXHRBcnJheS5pc0FycmF5fHwoQXJyYXkuaXNBcnJheT1mdW5jdGlvbihyKXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocil9KTtcbi8vOiBAZW5kLXN1cHBvcnQtbW9kdWxlXG5cbi8vOiBAc3VwcG9ydC1tb2R1bGU6XG5cdC8vOiBAcmVmZXJlbmNlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9mcm9tXG5cdEFycmF5LmZyb218fChBcnJheS5mcm9tPWZ1bmN0aW9uKCl7dmFyIHI9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxuPWZ1bmN0aW9uKG4pe1xuXHRyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBufHxcIltvYmplY3QgRnVuY3Rpb25dXCI9PT1yLmNhbGwobil9LHQ9ZnVuY3Rpb24ocil7dmFyIG49TnVtYmVyKHIpO1xuXHRyZXR1cm4gaXNOYU4obik/MDowIT09biYmaXNGaW5pdGUobik/KG4+MD8xOi0xKSpNYXRoLmZsb29yKE1hdGguYWJzKG4pKTpufSxcblx0ZT1NYXRoLnBvdygyLDUzKS0xLG89ZnVuY3Rpb24ocil7dmFyIG49dChyKTtyZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwwKSxlKX07XG5cdHJldHVybiBmdW5jdGlvbihyKXt2YXIgdD10aGlzLGU9T2JqZWN0KHIpO1xuXHRpZihudWxsPT1yKXRocm93IG5ldyBUeXBlRXJyb3IoXCJBcnJheS5mcm9tIHJlcXVpcmVzIGFuIGFycmF5LWxpa2Ugb2JqZWN0IC0gbm90IG51bGwgb3IgdW5kZWZpbmVkXCIpO1xuXHR2YXIgYSx1PWFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB1KXtcblx0aWYoIW4odSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFycmF5LmZyb206IHdoZW4gcHJvdmlkZWQsIHRoZSBzZWNvbmQgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuXHRhcmd1bWVudHMubGVuZ3RoPjImJihhPWFyZ3VtZW50c1syXSl9Zm9yKHZhciBpLGY9byhlLmxlbmd0aCksYz1uKHQpP1xuXHRPYmplY3QobmV3IHQoZikpOm5ldyBBcnJheShmKSxoPTA7Zj5oOylpPWVbaF0sXG5cdHU/Y1toXT1cInVuZGVmaW5lZFwiPT10eXBlb2YgYT91KGksaCk6dS5jYWxsKGEsaSxoKTpjW2hdPWksaCs9MTtyZXR1cm4gYy5sZW5ndGg9ZixjfX0oKSk7XG4vLzogQGVuZC1zdXBwb3J0LW1vZHVsZVxuXG4vLzsgQHN1cHBvcnQtbW9kdWxlOlxuXHQvLzogQHJlZmVyZW5jZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvc29tZVxuXHRBcnJheS5wcm90b3R5cGUuc29tZT1BcnJheS5wcm90b3R5cGUuc29tZXx8ZnVuY3Rpb24oZXZhbHVhdG9yLHRoaXNBcmcpe1widXNlIHN0cmljdFwiO1xuXHRpZighdGhpcyl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJyYXkucHJvdG90eXBlLnNvbWUgY2FsbGVkIG9uIG51bGwgb3IgdW5kZWZpbmVkXCIpO1xuXHRpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBldmFsdWF0b3Ipe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBldmFsdWF0b3IpdGhyb3cgbmV3IFR5cGVFcnJvcjtcblx0aWYoIShldmFsdWF0b3I9ZXZhbChldmFsdWF0b3IpKSl0aHJvdyBuZXcgVHlwZUVycm9yfXZhciBpO1xuXHRpZih2b2lkIDA9PT10aGlzQXJnKXtmb3IoaSBpbiB0aGlzKWlmKGV2YWx1YXRvcih0aGlzW2ldLGksdGhpcykpcmV0dXJuITA7cmV0dXJuITF9XG5cdGZvcihpIGluIHRoaXMpaWYoZXZhbHVhdG9yLmNhbGwodGhpc0FyZyx0aGlzW2ldLGksdGhpcykpcmV0dXJuITA7cmV0dXJuITF9O1xuLy87IEBlbmQtc3VwcG9ydC1tb2R1bGVcblxuLy86IEBzdXBwb3J0LW1vZHVsZTpcblx0Ly86IEByZWZlcmVuY2U6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L3JlZHVjZVxuXHRBcnJheS5wcm90b3R5cGUucmVkdWNlfHwoQXJyYXkucHJvdG90eXBlLnJlZHVjZT1mdW5jdGlvbihyKXtcInVzZSBzdHJpY3RcIjtcblx0aWYobnVsbD09dGhpcyl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJyYXkucHJvdG90eXBlLnJlZHVjZSBjYWxsZWQgb24gbnVsbCBvciB1bmRlZmluZWRcIik7XG5cdGlmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHIpdGhyb3cgbmV3IFR5cGVFcnJvcihyK1wiIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuXHR2YXIgZSx0PU9iamVjdCh0aGlzKSxuPXQubGVuZ3RoPj4+MCxvPTA7aWYoMj09YXJndW1lbnRzLmxlbmd0aCllPWFyZ3VtZW50c1sxXTtcblx0ZWxzZXtmb3IoO24+byYmIShvIGluIHQpOylvKys7aWYobz49bil0aHJvdyBuZXcgVHlwZUVycm9yKFwiUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZVwiKTtcblx0ZT10W28rK119Zm9yKDtuPm87bysrKW8gaW4gdCYmKGU9cihlLHRbb10sbyx0KSk7cmV0dXJuIGV9KTtcbi8vOiBAZW5kLXN1cHBvcnQtbW9kdWxlXG5cbmhhcmRlbiggXCJTVFJJTkdcIiwgXCJzdHJpbmdcIiApO1xuaGFyZGVuKCBcIk5VTUJFUlwiLCBcIm51bWJlclwiICk7XG5oYXJkZW4oIFwiQk9PTEVBTlwiLCBcImJvb2xlYW5cIiApO1xuaGFyZGVuKCBcIkZVTkNUSU9OXCIsIFwiZnVuY3Rpb25cIiApO1xuaGFyZGVuKCBcIk9CSkVDVFwiLCBcIm9iamVjdFwiICk7XG5oYXJkZW4oIFwiVU5ERUZJTkVEXCIsIFwidW5kZWZpbmVkXCIgKTtcbmhhcmRlbiggXCJTWU1CT0xcIiwgXCJzeW1ib2xcIiApO1xuXG5jb25zdCBwcm90eXBlID0gZnVuY3Rpb24gcHJvdHlwZSggcHJvcGVydHksIHR5cGUgKXtcblx0Lyo7XG5cdFx0QG1ldGEtY29uZmlndXJhdGlvbjpcblx0XHRcdHtcblx0XHRcdFx0XCJwcm9wZXJ0eTpyZXF1aXJlZFwiOiBcIipcIixcblx0XHRcdFx0XCJ0eXBlXCI6IFtcblx0XHRcdFx0XHRcInN0cmluZ1wiLFxuXHRcdFx0XHRcdFNUUklORyxcblx0XHRcdFx0XHROVU1CRVIsXG5cdFx0XHRcdFx0Qk9PTEVBTixcblx0XHRcdFx0XHRGVU5DVElPTixcblx0XHRcdFx0XHRPQkpFQ1QsXG5cdFx0XHRcdFx0VU5ERUZJTkVELFxuXHRcdFx0XHRcdFNZTUJPTCxcblx0XHRcdFx0XHRcIi4uLlwiLFxuXHRcdFx0XHRcdEFycmF5XG5cdFx0XHRcdF1cblx0XHRcdH1cblx0XHRAZW5kLW1ldGEtY29uZmlndXJhdGlvblxuXHQqL1xuXG5cdGlmKCB0eXBlICYmXG5cdFx0dHlwZW9mIHR5cGUgPT0gXCJzdHJpbmdcIiAmJlxuXHRcdHR5cGUgIT0gU1RSSU5HICYmXG5cdFx0dHlwZSAhPSBOVU1CRVIgJiZcblx0XHR0eXBlICE9IEJPT0xFQU4gJiZcblx0XHR0eXBlICE9IEZVTkNUSU9OICYmXG5cdFx0dHlwZSAhPSBPQkpFQ1QgJiZcblx0XHR0eXBlICE9IFVOREVGSU5FRCAmJlxuXHRcdHR5cGUgIT0gU1lNQk9MIClcblx0e1xuXHRcdHRocm93IG5ldyBFcnJvciggXCJpbnZhbGlkIHR5cGVcIiApO1xuXHR9XG5cblx0aWYoIHR5cGUgKXtcblx0XHRsZXQgZmxhdHRlbiA9IGZ1bmN0aW9uIGZsYXR0ZW4oIGN1cnJlbnQgKXtcblx0XHRcdHJldHVybiBjdXJyZW50LnJlZHVjZSggKCBwcmV2aW91cywgY3VycmVudCApID0+IHtcblx0XHRcdFx0bGV0IGVsZW1lbnQgPSBBcnJheS5pc0FycmF5KCBjdXJyZW50ICk/IGZsYXR0ZW4oIGN1cnJlbnQgKSA6IGN1cnJlbnQ7XG5cblx0XHRcdFx0cmV0dXJuIHByZXZpb3VzLmNvbmNhdCggZWxlbWVudCApO1xuXHRcdFx0fSwgWyBdICk7XG5cdFx0fTtcblxuXHRcdHJldHVybiBBcnJheS5mcm9tKCBhcmd1bWVudHMgKS5zcGxpY2UoIDEgKVxuXHRcdFx0LnJlZHVjZSggKCBwcmV2aW91cywgY3VycmVudCApID0+IHtcblx0XHRcdFx0bGV0IGVsZW1lbnQgPSBBcnJheS5pc0FycmF5KCBjdXJyZW50ICk/IGZsYXR0ZW4oIGN1cnJlbnQgKSA6IGN1cnJlbnQ7XG5cblx0XHRcdFx0cmV0dXJuIHByZXZpb3VzLmNvbmNhdCggZWxlbWVudCApO1xuXHRcdFx0fSwgWyBdIClcblx0XHRcdC5maWx0ZXIoICggdHlwZSApID0+IHsgcmV0dXJuICggdHlwZW9mIHR5cGUgPT0gU1RSSU5HICk7IH0gKVxuXHRcdFx0LmZpbHRlciggKCB0eXBlICkgPT4ge1xuXHRcdFx0XHRyZXR1cm4gKCB0eXBlID09IFNUUklORyB8fFxuXHRcdFx0XHRcdHR5cGUgPT0gTlVNQkVSIHx8XG5cdFx0XHRcdFx0dHlwZSA9PSBCT09MRUFOIHx8XG5cdFx0XHRcdFx0dHlwZSA9PSBGVU5DVElPTiB8fFxuXHRcdFx0XHRcdHR5cGUgPT0gT0JKRUNUIHx8XG5cdFx0XHRcdFx0dHlwZSA9PSBVTkRFRklORUQgfHxcblx0XHRcdFx0XHR0eXBlID09IFNZTUJPTCApO1xuXHRcdFx0fSApXG5cdFx0XHQuc29tZSggKCB0eXBlICkgPT4geyByZXR1cm4gKCB0eXBlb2YgcHJvcGVydHkgPT0gdHlwZSApOyB9ICk7XG5cblx0fWVsc2V7XG5cdFx0cmV0dXJuIGNlbWVudG8oIHtcblx0XHRcdFwiU1RSSU5HXCI6IHByb3R5cGUoIHByb3BlcnR5LCBTVFJJTkcgKSxcblx0XHRcdFwiTlVNQkVSXCI6IHByb3R5cGUoIHByb3BlcnR5LCBOVU1CRVIgKSxcblx0XHRcdFwiQk9PTEVBTlwiOiBwcm90eXBlKCBwcm9wZXJ0eSwgQk9PTEVBTiApLFxuXHRcdFx0XCJGVU5DVElPTlwiOiBwcm90eXBlKCBwcm9wZXJ0eSwgRlVOQ1RJT04gKSxcblx0XHRcdFwiT0JKRUNUXCI6IHByb3R5cGUoIHByb3BlcnR5LCBPQkpFQ1QgKSxcblx0XHRcdFwiVU5ERUZJTkVEXCI6IHByb3R5cGUoIHByb3BlcnR5LCBVTkRFRklORUQgKSxcblx0XHRcdFwiU1lNQk9MXCI6IHByb3R5cGUoIHByb3BlcnR5LCBTWU1CT0wgKSxcblx0XHRcdFwidHlwZVwiOiAoIHR5cGVvZiBwcm9wZXJ0eSApXG5cdFx0fSApO1xuXHR9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHByb3R5cGU7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gcHJvdHlwZS5qcyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9hcnJheS9mcm9tXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9hcnJheS9mcm9tLmpzXG4vLyBtb2R1bGUgaWQgPSA5MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLkFycmF5LmZyb207XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9mbi9hcnJheS9mcm9tLmpzXG4vLyBtb2R1bGUgaWQgPSA5MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgY3R4ICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b09iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgY2FsbCAgICAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKVxuICAsIGlzQXJyYXlJdGVyICAgID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpXG4gICwgdG9MZW5ndGggICAgICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5JylcbiAgLCBnZXRJdGVyRm4gICAgICA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24oaXRlcil7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UvKiwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQqLyl7XG4gICAgdmFyIE8gICAgICAgPSB0b09iamVjdChhcnJheUxpa2UpXG4gICAgICAsIEMgICAgICAgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5XG4gICAgICAsIGFMZW4gICAgPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIG1hcGZuICAgPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZFxuICAgICAgLCBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZFxuICAgICAgLCBpbmRleCAgID0gMFxuICAgICAgLCBpdGVyRm4gID0gZ2V0SXRlckZuKE8pXG4gICAgICAsIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZihtYXBwaW5nKW1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpe1xuICAgICAgZm9yKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4Kyspe1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvcihyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKyl7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LmFycmF5LmZyb20uanNcbi8vIG1vZHVsZSBpZCA9IDkzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoKGUpe1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYocmV0ICE9PSB1bmRlZmluZWQpYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jYWxsLmpzXG4vLyBtb2R1bGUgaWQgPSA5NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgSVRFUkFUT1IgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qc1xuLy8gbW9kdWxlIGlkID0gOTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgY3JlYXRlRGVzYyAgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgaW5kZXgsIHZhbHVlKXtcbiAgaWYoaW5kZXggaW4gb2JqZWN0KSRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzXG4vLyBtb2R1bGUgaWQgPSA5NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgY2xhc3NvZiAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpXG4gICwgSVRFUkFUT1IgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24oaXQpe1xuICBpZihpdCAhPSB1bmRlZmluZWQpcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzXG4vLyBtb2R1bGUgaWQgPSA5N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpXG4gICwgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJylcbiAgLy8gRVMzIHdyb25nIGhlcmVcbiAgLCBBUkcgPSBjb2YoZnVuY3Rpb24oKXsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbihpdCwga2V5KXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY2xhc3NvZi5qc1xuLy8gbW9kdWxlIGlkID0gOThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIElURVJBVE9SICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24oKXsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24oKXsgdGhyb3cgMjsgfSk7XG59IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYywgc2tpcENsb3Npbmcpe1xuICBpZighc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORylyZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciAgPSBbN11cbiAgICAgICwgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbigpeyByZXR1cm4ge2RvbmU6IHNhZmUgPSB0cnVlfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24oKXsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSA5OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcblxuLyo7XG5cdEBtb2R1bGUtbGljZW5zZTpcblx0XHRUaGUgTUlUIExpY2Vuc2UgKE1JVClcblx0XHRAbWl0LWxpY2Vuc2VcblxuXHRcdENvcHlyaWdodCAoQGMpIDIwMTcgUmljaGV2ZSBTaW9kaW5hIEJlYmVkb3Jcblx0XHRAZW1haWw6IHJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cblxuXHRcdFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcblx0XHRvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5cdFx0aW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuXHRcdHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcblx0XHRjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcblx0XHRmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5cdFx0VGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5cdFx0Y29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuXHRcdFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcblx0XHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0XHRGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcblx0XHRBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5cdFx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0XHRPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuXHRcdFNPRlRXQVJFLlxuXHRAZW5kLW1vZHVsZS1saWNlbnNlXG5cblx0QG1vZHVsZS1jb25maWd1cmF0aW9uOlxuXHRcdHtcblx0XHRcdFwicGFja2FnZVwiOiBcInRydWx5XCIsXG5cdFx0XHRcInBhdGhcIjogXCJ0cnVseS90cnVseS5qc1wiLFxuXHRcdFx0XCJmaWxlXCI6IFwidHJ1bHkuanNcIixcblx0XHRcdFwibW9kdWxlXCI6IFwidHJ1bHlcIixcblx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcImNvbnRyaWJ1dG9yc1wiOiBbXG5cdFx0XHRcdFwiSm9obiBMZW5vbiBNYWdoYW5veSA8am9obmxlbm9ubWFnaGFub3lAZ21haWwuY29tPlwiXG5cdFx0XHRdLFxuXHRcdFx0XCJlTWFpbFwiOiBcInJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cIixcblx0XHRcdFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b2xrb3Zhc3lzdGVtcy90cnVseS5naXRcIixcblx0XHRcdFwidGVzdFwiOiBcInRydWx5LXRlc3QuanNcIixcblx0XHRcdFwiZ2xvYmFsXCI6IHRydWVcblx0XHR9XG5cdEBlbmQtbW9kdWxlLWNvbmZpZ3VyYXRpb25cblxuXHRAbW9kdWxlLWRvY3VtZW50YXRpb246XG5cdFx0Q2hlY2sgaWYgdGhlIHZhbHVlIGlzIG5vdCB1bmRlZmluZWQsIG51bGwsIGVtcHR5IHN0cmluZywgTmFOIGFuZCBJbmZpbml0eS5cblx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXG5cdEBpbmNsdWRlOlxuXHRcdHtcblx0XHRcdFwicHJvdHlwZVwiOiBcInByb3R5cGVcIlxuXHRcdH1cblx0QGVuZC1pbmNsdWRlXG4qL1xuXG5jb25zdCBwcm90eXBlID0gcmVxdWlyZSggXCJwcm90eXBlXCIgKTtcblxuY29uc3QgdHJ1bHkgPSBmdW5jdGlvbiB0cnVseSggdmFsdWUgKXtcblx0Lyo7XG5cdFx0QG1ldGEtY29uZmlndXJhdGlvbjpcblx0XHRcdHtcblx0XHRcdFx0XCJ2YWx1ZTpyZXF1aXJlZFwiOiBcIipcIlxuXHRcdFx0fVxuXHRcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG5cdCovXG5cblx0bGV0IHZhbHVlVHlwZSA9IHByb3R5cGUoIHZhbHVlICk7XG5cdGlmKCB2YWx1ZVR5cGUuTlVNQkVSICl7XG5cdFx0cmV0dXJuICggIWlzTmFOKCB2YWx1ZSApICYmIGlzRmluaXRlKCB2YWx1ZSApICk7XG5cdH1cblxuXHRyZXR1cm4gKCAhdmFsdWVUeXBlLlVOREVGSU5FRCAmJiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gXCJcIiApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB0cnVseTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB0cnVseS5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKjtcblx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdEBtaXQtbGljZW5zZVxuXG5cdFx0Q29weXJpZ2h0IChAYykgMjAxNiBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXG5cdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5cdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0U09GVFdBUkUuXG5cdEBlbmQtbW9kdWxlLWxpY2Vuc2VcblxuXHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0e1xuXHRcdFx0XCJwYWNrYWdlXCI6IFwidHJ1dVwiLFxuXHRcdFx0XCJwYXRoXCI6IFwidHJ1dS90cnV1LmpzXCIsXG5cdFx0XHRcImZpbGVcIjogXCJ0cnV1LmpzXCIsXG5cdFx0XHRcIm1vZHVsZVwiOiBcInRydXVcIixcblx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcImNvbnRyaWJ1dG9yc1wiOiBbXG5cdFx0XHRcdFwiSm9obiBMZW5vbiBNYWdoYW5veSA8am9obmxlbm9ubWFnaGFub3lAZ21haWwuY29tPlwiXG5cdFx0XHRdLFxuXHRcdFx0XCJlTWFpbFwiOiBcInJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cIixcblx0XHRcdFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b2xrb3Zhc3lzdGVtcy90cnV1LmdpdFwiLFxuXHRcdFx0XCJ0ZXN0XCI6IFwidHJ1dS10ZXN0LmpzXCIsXG5cdFx0XHRcImdsb2JhbFwiOiB0cnVlXG5cdFx0fVxuXHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cblx0QG1vZHVsZS1kb2N1bWVudGF0aW9uOlxuXHRcdENoZWNrIGlmIGVudGl0eSBpcyBmYWxzeSBvciBlbXB0eS5cblx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXG5cdEBpbmNsdWRlOlxuXHRcdHtcblx0XHRcdFwiZG91YnRcIjogXCJkb3VidFwiLFxuXHRcdFx0XCJmaWxsZWRcIjogXCJmaWxsZWRcIixcblx0XHRcdFwicHJvdHlwZVwiOiBcInByb3R5cGVcIixcblx0XHRcdFwic3R1ZmZlZFwiOiBcInN0dWZmZWRcIixcblx0XHRcdFwidHJ1bHlcIjogXCJ0cnVseVwiXG5cdFx0fVxuXHRAZW5kLWluY2x1ZGVcbiovXG5cbnZhciBkb3VidCA9IHJlcXVpcmUoXCJkb3VidFwiKTtcbnZhciBmaWxsZWQgPSByZXF1aXJlKFwiZmlsbGVkXCIpO1xudmFyIHByb3R5cGUgPSByZXF1aXJlKFwicHJvdHlwZVwiKTtcbnZhciBzdHVmZmVkID0gcmVxdWlyZShcInN0dWZmZWRcIik7XG52YXIgdHJ1bHkgPSByZXF1aXJlKFwidHJ1bHlcIik7XG5cbnZhciB0cnV1ID0gZnVuY3Rpb24gdHJ1dShlbnRpdHkpIHtcblx0Lyo7XG4gXHRAbWV0YS1jb25maWd1cmF0aW9uOlxuIFx0XHR7XG4gXHRcdFx0XCJlbnRpdHk6cmVxdWlyZWRcIjogXCIqXCJcbiBcdFx0fVxuIFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cbiAqL1xuXG5cdGlmIChkb3VidChlbnRpdHkpLkFTX0FSUkFZKSB7XG5cdFx0cmV0dXJuIGZpbGxlZChlbnRpdHkpO1xuXHR9XG5cblx0aWYgKHByb3R5cGUoZW50aXR5LCBPQkpFQ1QpKSB7XG5cdFx0cmV0dXJuIHN0dWZmZWQoZW50aXR5KTtcblx0fVxuXG5cdHJldHVybiB0cnVseShlbnRpdHkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB0cnV1O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL3RydXUvdHJ1dS5zdXBwb3J0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qO1xuXHRAbW9kdWxlLWxpY2Vuc2U6XG5cdFx0VGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cdFx0QG1pdC1saWNlbnNlXG5cblx0XHRDb3B5cmlnaHQgKEBjKSAyMDE2IFJpY2hldmUgU2lvZGluYSBCZWJlZG9yXG5cdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cblx0XHRQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5cdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0XHR0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5cdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuXHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdFx0RklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5cdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdFx0T1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblx0XHRTT0ZUV0FSRS5cblx0QGVuZC1tb2R1bGUtbGljZW5zZVxuXG5cdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHR7XG5cdFx0XHRcInBhY2thZ2VcIjogXCJmaWxsZWRcIixcblx0XHRcdFwicGF0aFwiOiBcImZpbGxlZC9maWxsZWQuanNcIixcblx0XHRcdFwiZmlsZVwiOiBcImZpbGxlZC5qc1wiLFxuXHRcdFx0XCJtb2R1bGVcIjogXCJmaWxsZWRcIixcblx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcImNvbnRyaWJ1dG9yc1wiOiBbXG5cdFx0XHRcdFwiSm9obiBMZW5vbiBNYWdoYW5veSA8am9obmxlbm9ubWFnaGFub3lAZ21haWwuY29tPlwiXG5cdFx0XHRdLFxuXHRcdFx0XCJlTWFpbFwiOiBcInJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cIixcblx0XHRcdFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b2xrb3Zhc3lzdGVtcy9maWxsZWQuZ2l0XCIsXG5cdFx0XHRcInRlc3RcIjogXCJmaWxsZWQtdGVzdC5qc1wiLFxuXHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdH1cblx0QGVuZC1tb2R1bGUtY29uZmlndXJhdGlvblxuXG5cdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRDaGVjayBpZiBhcnJheSBjb250YWlucyBzb21ldGhpbmcuXG5cdEBlbmQtbW9kdWxlLWRvY3VtZW50YXRpb25cblxuXHRAaW5jbHVkZTpcblx0XHR7XG5cdFx0XHRcImRvdWJ0XCI6IFwiZG91YnRcIixcblx0XHRcdFwicmF6ZVwiOiBcInJhemVcIixcblx0XHRcdFwidHJ1bHlcIjogXCJ0cnVseVwiXG5cdFx0fVxuXHRAZW5kLWluY2x1ZGVcbiovXG5cbnZhciBkb3VidCA9IHJlcXVpcmUoXCJkb3VidFwiKTtcbnZhciByYXplID0gcmVxdWlyZShcInJhemVcIik7XG52YXIgdHJ1bHkgPSByZXF1aXJlKFwidHJ1bHlcIik7XG5cbnZhciBmaWxsZWQgPSBmdW5jdGlvbiBmaWxsZWQoYXJyYXkpIHtcblx0Lyo7XG4gXHRAbWV0YS1jb25maWd1cmF0aW9uOlxuIFx0XHR7XG4gXHRcdFx0XCJhcnJheTpyZXF1aXJlZFwiOiBcIlsqXVwiXG4gXHRcdH1cbiBcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG4gKi9cblxuXHRpZiAoIWRvdWJ0KGFycmF5KS5BU19BUlJBWSkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcImludmFsaWQgYXJyYXlcIik7XG5cdH1cblxuXHRhcnJheSA9IHJhemUoYXJyYXkpO1xuXG5cdHJldHVybiBhcnJheS5sZW5ndGggIT0gMCAmJiBhcnJheS5maWx0ZXIodHJ1bHkpLmxlbmd0aCAhPSAwO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmaWxsZWQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvZmlsbGVkL2ZpbGxlZC5zdXBwb3J0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qO1xuXHRAbW9kdWxlLWxpY2Vuc2U6XG5cdFx0VGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cdFx0QG1pdC1saWNlbnNlXG5cblx0XHRDb3B5cmlnaHQgKEBjKSAyMDE2IFJpY2hldmUgU2lvZGluYSBCZWJlZG9yXG5cdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cblx0XHRQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5cdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0XHR0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5cdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuXHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdFx0RklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5cdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdFx0T1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblx0XHRTT0ZUV0FSRS5cblx0QGVuZC1tb2R1bGUtbGljZW5zZVxuXG5cdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHR7XG5cdFx0XHRcInBhY2thZ2VcIjogXCJyYXplXCIsXG5cdFx0XHRcInBhdGhcIjogXCJyYXplL3JhemUuanNcIixcblx0XHRcdFwiZmlsZVwiOiBcInJhemUuanNcIixcblx0XHRcdFwibW9kdWxlXCI6IFwicmF6ZVwiLFxuXHRcdFx0XCJhdXRob3JcIjogXCJSaWNoZXZlIFMuIEJlYmVkb3JcIixcblx0XHRcdFwiY29udHJpYnV0b3JzXCI6IFtcblx0XHRcdFx0XCJKb2huIExlbm9uIE1hZ2hhbm95IDxqb2hubGVub25tYWdoYW5veUBnbWFpbC5jb20+XCJcblx0XHRcdF0sXG5cdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZvbGtvdmFzeXN0ZW1zL3JhemUuZ2l0XCIsXG5cdFx0XHRcInRlc3RcIjogXCJyYXplLXRlc3QuanNcIixcblx0XHRcdFwiZ2xvYmFsXCI6IHRydWVcblx0XHR9XG5cdEBlbmQtbW9kdWxlLWNvbmZpZ3VyYXRpb25cblxuXHRAbW9kdWxlLWRvY3VtZW50YXRpb246XG5cdFx0RGVsZWdhdGUgaW1wbGVtZW50YXRpb24gb2YgQGNvZGU6QXJyYXkuZnJvbTtcblxuXHRcdFRoaXMgbW9kdWxlIGxvYWRzIEBjb2RlOkFycmF5LmZyb207IHN1cHBvcnQgbW9kdWxlLlxuXG5cdFx0V2hlbiBhbiBhcnJheSBvciBhcnJheS1saWtlIGVudGl0eSBpcyByYXplLCBpdCB3aWxsIGF0dGFjaCBhIHJhemUgYm91bmQgdG8gaXQgc2VsZi5cblxuXHRcdElmIHRoZSBhIHJhemVkIGFycmF5IHJhemUgYW5vdGhlciBhcnJheSBpdCB3aWxsIGFwcGVuZCBlbGVtZW50cy5cblxuXHRcdE90aGVyIHBhcmFtZXRlcnMgZm9sbG93IHRoZSBkb2N1bWVudGF0aW9uIGZvciBAY29kZTpBcnJheS5mcm9tO1xuXHRAZW5kLW1vZHVsZS1kb2N1bWVudGF0aW9uXG5cblx0QGluY2x1ZGU6XG5cdFx0e1xuXHRcdFx0XCJkb3VidFwiOiBcImRvdWJ0XCIsXG5cdFx0XHRcImhhcmRlblwiOiBcImhhcmRlblwiXG5cdFx0fVxuXHRAZW5kLWluY2x1ZGVcbiovXG5cbnZhciBfZnJvbSA9IHJlcXVpcmUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvYXJyYXkvZnJvbVwiKTtcblxudmFyIF9mcm9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Zyb20pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZG91YnQgPSByZXF1aXJlKFwiZG91YnRcIik7XG52YXIgaGFyZGVuID0gcmVxdWlyZShcImhhcmRlblwiKTtcblxuLy86IEBzdXBwb3J0LW1vZHVsZTpcbi8vOiBAcmVmZXJlbmNlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9mcm9tXG5fZnJvbTIuZGVmYXVsdCB8fCAoQXJyYXkuZnJvbSA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLFxuXHQgICAgbiA9IGZ1bmN0aW9uIG4oX24pIHtcblx0XHRyZXR1cm4gXCJmdW5jdGlvblwiID09IHR5cGVvZiBfbiB8fCBcIltvYmplY3QgRnVuY3Rpb25dXCIgPT09IHIuY2FsbChfbik7XG5cdH0sXG5cdCAgICB0ID0gZnVuY3Rpb24gdChyKSB7XG5cdFx0dmFyIG4gPSBOdW1iZXIocik7XG5cdFx0cmV0dXJuIGlzTmFOKG4pID8gMCA6IDAgIT09IG4gJiYgaXNGaW5pdGUobikgPyAobiA+IDAgPyAxIDogLTEpICogTWF0aC5mbG9vcihNYXRoLmFicyhuKSkgOiBuO1xuXHR9LFxuXHQgICAgZSA9IE1hdGgucG93KDIsIDUzKSAtIDEsXG5cdCAgICBvID0gZnVuY3Rpb24gbyhyKSB7XG5cdFx0dmFyIG4gPSB0KHIpO3JldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCAwKSwgZSk7XG5cdH07XG5cdHJldHVybiBmdW5jdGlvbiAocikge1xuXHRcdHZhciB0ID0gdGhpcyxcblx0XHQgICAgZSA9IE9iamVjdChyKTtcblx0XHRpZiAobnVsbCA9PSByKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJyYXkuZnJvbSByZXF1aXJlcyBhbiBhcnJheS1saWtlIG9iamVjdCAtIG5vdCBudWxsIG9yIHVuZGVmaW5lZFwiKTtcblx0XHR2YXIgYSxcblx0XHQgICAgdSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdm9pZCAwO2lmIChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB1KSB7XG5cdFx0XHRpZiAoIW4odSkpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBcnJheS5mcm9tOiB3aGVuIHByb3ZpZGVkLCB0aGUgc2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvblwiKTtcblx0XHRcdGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIChhID0gYXJndW1lbnRzWzJdKTtcblx0XHR9Zm9yICh2YXIgaSwgZiA9IG8oZS5sZW5ndGgpLCBjID0gbih0KSA/IE9iamVjdChuZXcgdChmKSkgOiBuZXcgQXJyYXkoZiksIGggPSAwOyBmID4gaDspIHtcblx0XHRcdGkgPSBlW2hdLCB1ID8gY1toXSA9IFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIGEgPyB1KGksIGgpIDogdS5jYWxsKGEsIGksIGgpIDogY1toXSA9IGksIGggKz0gMTtcblx0XHR9cmV0dXJuIGMubGVuZ3RoID0gZiwgYztcblx0fTtcbn0oKSk7XG4vLzogQGVuZC1zdXBwb3J0LW1vZHVsZVxuXG52YXIgcmF6ZSA9IGZ1bmN0aW9uIHJhemUoYXJyYXksIG1hcCwgZW50aXR5KSB7XG5cdC8qO1xuIFx0QG1ldGEtY29uZmlndXJhdGlvbjpcbiBcdFx0e1xuIFx0XHRcdFwiYXJyYXk6cmVxdWlyZWRcIjogXCJbKl1cIixcbiBcdFx0XHRcIm1hcDpvcHRpb25hbFwiOiBcImZ1bmN0aW9uXCIsXG4gXHRcdFx0XCJlbnRpdHk6b3B0aW9uYWxcIjogXCJvYmplY3RcIlxuIFx0XHR9XG4gXHRAZW5kLW1ldGEtY29uZmlndXJhdGlvblxuICovXG5cblx0YXJyYXkgPSBkb3VidChhcnJheSkuQVNfQVJSQVkgPyBhcnJheSA6IGRvdWJ0KHRoaXMpLkFTX0FSUkFZID8gdGhpcyA6IFtdO1xuXG5cdHZhciBsaXN0ID0gKDAsIF9mcm9tMi5kZWZhdWx0KShhcnJheSwgbWFwLCBlbnRpdHkpO1xuXG5cdGlmIChhcnJheSAhPT0gdGhpcyAmJiBkb3VidCh0aGlzKS5BUlJBWSkge1xuXHRcdGxpc3QgPSBsaXN0LmNvbmNhdCh0aGlzKTtcblx0fVxuXG5cdGhhcmRlbihcInJhemVcIiwgcmF6ZS5iaW5kKGxpc3QpLCBsaXN0KTtcblxuXHRyZXR1cm4gbGlzdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcmF6ZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9yYXplL3JhemUuc3VwcG9ydC5qc1xuLy8gbW9kdWxlIGlkID0gMTAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG4vKjtcblx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdEBtaXQtbGljZW5zZVxuXG5cdFx0Q29weXJpZ2h0IChAYykgMjAxNiBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXG5cdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5cdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0U09GVFdBUkUuXG5cdEBlbmQtbW9kdWxlLWxpY2Vuc2VcblxuXHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0e1xuXHRcdFx0XCJwYWNrYWdlXCI6IFwic3R1ZmZlZFwiLFxuXHRcdFx0XCJwYXRoXCI6IFwic3R1ZmZlZC9zdHVmZmVkLmpzXCIsXG5cdFx0XHRcImZpbGVcIjogXCJzdHVmZmVkLmpzXCIsXG5cdFx0XHRcIm1vZHVsZVwiOiBcInN0dWZmZWRcIixcblx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcImNvbnRyaWJ1dG9yc1wiOiBbXG5cdFx0XHRcdFwiSm9obiBMZW5vbiBNYWdoYW5veSA8am9obmxlbm9ubWFnaGFub3lAZ21haWwuY29tPlwiXG5cdFx0XHRdLFxuXHRcdFx0XCJlTWFpbFwiOiBcInJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cIixcblx0XHRcdFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b2xrb3Zhc3lzdGVtcy9zdHVmZmVkLmdpdFwiLFxuXHRcdFx0XCJ0ZXN0XCI6IFwic3R1ZmZlZC10ZXN0LmpzXCIsXG5cdFx0XHRcImdsb2JhbFwiOiB0cnVlXG5cdFx0fVxuXHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cblx0QG1vZHVsZS1kb2N1bWVudGF0aW9uOlxuXHRcdENoZWNrIGlmIG9iamVjdCBjb250YWlucyBzb21ldGhpbmcuXG5cdEBlbmQtbW9kdWxlLWRvY3VtZW50YXRpb25cblxuXHRAaW5jbHVkZTpcblx0XHR7XG5cdFx0XHRcImRvdWJ0XCI6IFwiZG91YnRcIixcblx0XHRcdFwia291bnRcIjogXCJrb3VudFwiLFxuXHRcdFx0XCJwcm90eXBlXCI6IFwicHJvdHlwZVwiLFxuXHRcdFx0XCJ0cnVseVwiOiBcInRydWx5XCJcblx0XHR9XG5cdEBlbmQtaW5jbHVkZVxuKi9cblxudmFyIGRvdWJ0ID0gcmVxdWlyZShcImRvdWJ0XCIpO1xudmFyIGtvdW50ID0gcmVxdWlyZShcImtvdW50XCIpO1xudmFyIHByb3R5cGUgPSByZXF1aXJlKFwicHJvdHlwZVwiKTtcbnZhciB0cnVseSA9IHJlcXVpcmUoXCJ0cnVseVwiKTtcblxudmFyIHN0dWZmZWQgPSBmdW5jdGlvbiBzdHVmZmVkKG9iamVjdCkge1xuXHQvKjtcbiBcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG4gXHRcdHtcbiBcdFx0XHRcIm9iamVjdDpyZXF1aXJlZFwiOiBcIm9iamVjdFwiXG4gXHRcdH1cbiBcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG4gKi9cblxuXHRpZiAoZG91YnQob2JqZWN0KS5BU19BUlJBWSB8fCAhcHJvdHlwZShvYmplY3QsIE9CSkVDVCkpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIG9iamVjdFwiKTtcblx0fVxuXG5cdHJldHVybiB0cnVseShvYmplY3QpICYmIGtvdW50KG9iamVjdCkgIT0gMDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1ZmZlZDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9zdHVmZmVkL3N0dWZmZWQuc3VwcG9ydC5qc1xuLy8gbW9kdWxlIGlkID0gMTA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG4vKjtcblx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdEBtaXQtbGljZW5zZVxuXG5cdFx0Q29weXJpZ2h0IChAYykgMjAxNyBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXG5cdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5cdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0U09GVFdBUkUuXG5cdEBlbmQtbW9kdWxlLWxpY2Vuc2VcblxuXHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0e1xuXHRcdFx0XCJwYWNrYWdlXCI6IFwidTIwMGJcIixcblx0XHRcdFwicGF0aFwiOiBcInUyMDBiL3UyMDBiLmpzXCIsXG5cdFx0XHRcImZpbGVcIjogXCJ1MjAwYi5qc1wiLFxuXHRcdFx0XCJtb2R1bGVcIjogXCJ1MjAwYlwiLFxuXHRcdFx0XCJhdXRob3JcIjogXCJSaWNoZXZlIFMuIEJlYmVkb3JcIixcblx0XHRcdFwiY29udHJpYnV0b3JzXCI6IFtcblx0XHRcdFx0XCJKb2huIExlbm9uIE1hZ2hhbm95IDxqb2hubGVub25tYWdoYW5veUBnbWFpbC5jb20+XCJcblx0XHRcdF0sXG5cdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZvbGtvdmFzeXN0ZW1zL3UyMDBiLmdpdFwiLFxuXHRcdFx0XCJnbG9iYWxcIjogdHJ1ZSxcblx0XHRcdFwiY2xhc3NcIjogdHJ1ZVxuXHRcdH1cblx0QGVuZC1tb2R1bGUtY29uZmlndXJhdGlvblxuXG5cdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRBcHBlbmQsIHByZXBlbmQsIGFuZCBpbnNlcnQgemVyby13aWR0aCBzcGFjZSB0byBub24tZW1wdHkgc3RyaW5nLlxuXG5cdFx0VGhlIG1haW4gcHVycG9zZSBvZiB0aGlzIGlzIHRvIG1ha2UgdGhlIHN0cmluZyB2aXNpYmxlIGFzIGl0IGlzXG5cdFx0XHRidXQgd2UgY2FuIHN0aWxsIGRpdmlkZSBpdCB0aGUgd2F5IHdlIHdhbnQgaXQgdG8gYmUgZGl2aWRlZC5cblx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXG5cdEBpbmNsdWRlOlxuXHRcdHtcblx0XHRcdFwiYXJpZFwiOiBcImFyaWRcIixcblx0XHRcdFwiZGlhdG9tXCI6IFwiZGlhdG9tXCIsXG5cdFx0XHRcImhhcmRlblwiOiBcImhhcmRlblwiLFxuXHRcdFx0XCJvcHRmb3JcIjogXCJvcHRmb3JcIixcblx0XHRcdFwicGxvdWdoXCI6IFwicGxvdWdoXCIsXG5cdFx0XHRcInByb3R5cGVcIjogXCJwcm90eXBlXCIsXG5cdFx0XHRcInRydWx5XCI6IFwidHJ1bHlcIlxuXHRcdH1cblx0QGVuZC1pbmNsdWRlXG4qL1xuXG5jb25zdCBhcmlkID0gcmVxdWlyZSggXCJhcmlkXCIgKTtcbmNvbnN0IGNsYXpvZiA9IHJlcXVpcmUoIFwiY2xhem9mXCIgKTtcbmNvbnN0IGRpYXRvbSA9IHJlcXVpcmUoIFwiZGlhdG9tXCIgKTtcbmNvbnN0IGhhcmRlbiA9IHJlcXVpcmUoIFwiaGFyZGVuXCIgKTtcbmNvbnN0IG9wdGZvciA9IHJlcXVpcmUoIFwib3B0Zm9yXCIgKTtcbmNvbnN0IHBsb3VnaCA9IHJlcXVpcmUoIFwicGxvdWdoXCIgKTtcbmNvbnN0IHByb3R5cGUgPSByZXF1aXJlKCBcInByb3R5cGVcIiApO1xuY29uc3QgdHJ1bHkgPSByZXF1aXJlKCBcInRydWx5XCIgKTtcblxuY29uc3QgVTIwMGIgPSBkaWF0b20oIFwiVTIwMGJcIiApO1xuXG5oYXJkZW4oIFwiVTIwMEJcIiwgXCJcXHUyMDBiXCIgKTtcbmhhcmRlbiggXCJVMjAwQl9CQVNFMTZcIiwgXCJmZmZmZmZmZjAwMDAyMDBiZmZmZmZmZmZcIiApO1xuaGFyZGVuKCBcIklOU0VSVFwiLCBcImluc2VydFwiICk7XG5oYXJkZW4oIFwiUFJFUEVORFwiLCBcInByZXBlbmRcIiApO1xuaGFyZGVuKCBcIkFQUEVORFwiLCBcImFwcGVuZFwiICk7XG5cblUyMDBiLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gaW5pdGlhbGl6ZSggc3RyaW5nICl7XG5cdC8qO1xuXHRcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdFx0XHR7XG5cdFx0XHRcdFwic3RyaW5nXCI6IFtcblx0XHRcdFx0XHRcInN0cmluZ1wiLFxuXHRcdFx0XHRcdFwiW3N0cmluZ11cIixcblx0XHRcdFx0XHRcIi4uLlwiXG5cdFx0XHRcdF1cblx0XHRcdH1cblx0XHRAZW5kLW1ldGEtY29uZmlndXJhdGlvblxuXHQqL1xuXG5cdGxldCB0ZXh0ID0gcGxvdWdoKCBhcmd1bWVudHMgKVxuXHRcdC5tYXAoICggcGFyYW1ldGVyICkgPT4geyByZXR1cm4gcGFyYW1ldGVyLnRvU3RyaW5nKCApOyB9IClcblx0XHQuZmlsdGVyKCB0cnVseSApO1xuXG5cdC8vOiBUaGlzIHdpbGwgaGFuZGxlIHRoZSBtb2RpZmljYXRpb24gZG9uZSB0byB0aGUgc3RyaW5ncy5cblx0dGhpcy5oaXN0b3J5ID0gdGhpcy5oaXN0b3J5IHx8IFsgXTtcblxuXHQvLzogQ3JlYXRlIGFuIG9yaWdpbmFsIGNvcHkuXG5cdHRoaXMudGV4dCA9IFsgXS5jb25jYXQoIHRleHQgKTtcblxuXHR0aGlzLnN0cmluZyA9IHRleHQ7XG5cblx0dGhpcy5iYXNlKCBVMjAwQiApO1xuXG5cdHRoaXMuaWRlbnRpZnkoICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG4vKjtcblx0QG1ldGhvZC1kb2N1bWVudGF0aW9uOlxuXHRcdFRoaXMgd2lsbCBzZXQgdGhlIGRlZmF1bHQgYmFzZSB0eXBlIG9mIFUyMDBCXG5cdFx0XHR0byBhbnkgYmFzZSB0eXBlIGFzIGxvbmcgYXMgaXQgaXMgc3VwcG9ydGVkLlxuXG5cdFx0U2V0dGluZyB0byB1c2UgVTIwMEJfQkFTRTE2IHdpbGwgbWFrZSB0aGUgc3RyaW5nIHNpemUgYmlnZ2VyLlxuXHRAZW5kLW1ldGhvZC1kb2N1bWVudGF0aW9uXG4qL1xuVTIwMGIucHJvdG90eXBlLmJhc2UgPSBmdW5jdGlvbiBiYXNlKCB0eXBlICl7XG5cdC8qO1xuXHRcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdFx0XHR7XG5cdFx0XHRcdFwidHlwZTpyZXF1aXJlZFwiOiBbXG5cdFx0XHRcdFx0VTIwMEIsXG5cdFx0XHRcdFx0VTIwMEJfQkFTRTE2XG5cdFx0XHRcdF1cblx0XHRcdH1cblx0XHRAZW5kLW1ldGEtY29uZmlndXJhdGlvblxuXHQqL1xuXG5cdGlmKCB0eXBlICE9PSBVMjAwQiAmJiB0eXBlICE9PSBVMjAwQl9CQVNFMTYgKXtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIFwiaW52YWxpZCBiYXNlIHR5cGVcIiApO1xuXHR9XG5cblx0dGhpcy50eXBlID0gdHlwZTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbi8qO1xuXHRAbWV0aG9kLWRvY3VtZW50YXRpb246XG5cdFx0VGhpcyB3aWxsIGF1dG8taWRlbnRpZnkgdGhlIGJhc2UgdHlwZS5cblx0QGVuZC1tZXRob2QtZG9jdW1lbnRhdGlvblxuKi9cblUyMDBiLnByb3RvdHlwZS5pZGVudGlmeSA9IGZ1bmN0aW9uIGlkZW50aWZ5KCApe1xuXHRsZXQgc3RyaW5nID0gdGhpcy5zdHJpbmcuam9pbiggXCJcIiApO1xuXG5cdGlmKCAoIG5ldyBSZWdFeHAoIFUyMDBCLCBcImdcIiApICkudGVzdCggc3RyaW5nICkgKXtcblx0XHR0aGlzLnR5cGUgPSBVMjAwQjtcblxuXHR9ZWxzZSBpZiggKCBuZXcgUmVnRXhwKCBVMjAwQl9CQVNFMTYsIFwiZ1wiICkgKS50ZXN0KCBzdHJpbmcgKSApe1xuXHRcdHRoaXMudHlwZSA9IFUyMDBCX0JBU0UxNjtcblxuXHR9ZWxzZXtcblx0XHR0aGlzLnR5cGUgPSBVMjAwQjtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuVTIwMGIucHJvdG90eXBlLnNlcGFyYXRlID0gZnVuY3Rpb24gc2VwYXJhdGUoICl7XG5cdHJldHVybiB0aGlzLnN0cmluZy5qb2luKCBcIlwiICkuc3BsaXQoIHRoaXMudHlwZSApO1xufTtcblxuVTIwMGIucHJvdG90eXBlLnJlbGVhc2UgPSBmdW5jdGlvbiByZWxlYXNlKCApe1xuXHQvLzogSWYgdGhlcmUgYXJlIG5vIG1vZGlmaWNhdGlvbnMgZG8gdGhlIGRlZmF1bHQgaW5zZXJ0LlxuXHRpZiggYXJpZCggdGhpcy5oaXN0b3J5ICkgKXtcblx0XHR0aGlzLmluc2VydCggKTtcblx0fVxuXG5cdHJldHVybiBbIF0uY29uY2F0KCB0aGlzLnN0cmluZyApO1xufTtcblxuVTIwMGIucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBqb2luKCBzZXBhcmF0b3IgKXtcblx0cmV0dXJuIHRoaXMucmVsZWFzZSggKS5qb2luKCBzZXBhcmF0b3IgfHwgXCJcIiApO1xufTtcblxuVTIwMGIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoICl7XG5cdHJldHVybiB0aGlzLmpvaW4oICk7XG59O1xuXG5VMjAwYi5wcm90b3R5cGUudmFsdWVPZiA9IGZ1bmN0aW9uIHZhbHVlT2YoICl7XG5cdHJldHVybiB0aGlzLnJlbGVhc2UoICk7XG59O1xuXG5VMjAwYi5wcm90b3R5cGUucmF3ID0gZnVuY3Rpb24gcmF3KCApe1xuXHRyZXR1cm4gdGhpcy50b1N0cmluZyggKS5yZXBsYWNlKCBuZXcgUmVnRXhwKCB0aGlzLnR5cGUsIFwiZ1wiICksIFwiXCIgKTtcbn07XG5cbi8qO1xuXHRAbWV0aG9kLWRvY3VtZW50YXRpb246XG5cdFx0QXBwZW5kIHplcm8td2lkdGggc3BhY2Ugb24gZXZlcnkgZW5kIG9mIHRoZSBzdHJpbmcuXG5cblx0XHRJZiBuZXcgc3RyaW5ncyBwcm9jZWVkcyB0aGUgb2xkIHNldCBzdHJpbmdzXG5cdFx0XHR0aGV5IHdpbGwgYmUgYXBwZW5kZWQgYW5kIGFwcGxpZWQgd2l0aCB6ZXJvLXdpZHRoIHNwYWNlLlxuXHRAZW5kLW1ldGhvZC1kb2N1bWVudGF0aW9uXG4qL1xuVTIwMGIucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZCggc3RyaW5nICl7XG5cdC8qO1xuXHRcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdFx0XHR7XG5cdFx0XHRcdFwic3RyaW5nXCI6IFtcblx0XHRcdFx0XHRcInN0cmluZ1wiLFxuXHRcdFx0XHRcdFwiW3N0cmluZ11cIixcblx0XHRcdFx0XHRcIi4uLlwiXG5cdFx0XHRcdF1cblx0XHRcdH1cblx0XHRAZW5kLW1ldGEtY29uZmlndXJhdGlvblxuXHQqL1xuXG5cdGxldCB0ZXh0ID0gcGxvdWdoKCBhcmd1bWVudHMgKVxuXHRcdC5tYXAoICggcGFyYW1ldGVyICkgPT4geyByZXR1cm4gcGFyYW1ldGVyLnRvU3RyaW5nKCApOyB9IClcblx0XHQuZmlsdGVyKCB0cnVseSApIHx8IFsgXTtcblxuXHR0aGlzLnN0cmluZyA9IHRoaXMuc3RyaW5nXG5cdFx0LmNvbmNhdCggdGV4dCApXG5cdFx0Lm1hcCggKCBmdW5jdGlvbiBvbkVhY2hUb2tlbiggdG9rZW4gKXtcblx0XHRcdHJldHVybiB0b2tlbiArIHRoaXMudHlwZTtcblx0XHR9ICkuYmluZCggdGhpcyApICk7XG5cblx0dGhpcy5oaXN0b3J5LnB1c2goIEFQUEVORCApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxuLyo7XG5cdEBtZXRob2QtZG9jdW1lbnRhdGlvbjpcblx0XHRQcmVwZW5kIHplcm8td2lkdGggc3BhY2Ugb24gZXZlcnkgc3RhcnQgb2YgdGhlIHN0cmluZy5cblxuXHRcdElmIG5ldyBzdHJpbmdzIHByZWNlZWRzIHRoZSBvbGQgc2V0IHN0cmluZ3Ncblx0XHRcdHRoZXkgd2lsbCBiZSBwcmVwZW5kZWQgYW5kIGFwcGxpZWQgd2l0aCB6ZXJvLXdpZHRoIHNwYWNlLlxuXHRAZW5kLW1ldGhvZC1kb2N1bWVudGF0aW9uXG4qL1xuVTIwMGIucHJvdG90eXBlLnByZXBlbmQgPSBmdW5jdGlvbiBwcmVwZW5kKCBzdHJpbmcgKXtcblx0Lyo7XG5cdFx0QG1ldGEtY29uZmlndXJhdGlvbjpcblx0XHRcdHtcblx0XHRcdFx0XCJzdHJpbmdcIjogW1xuXHRcdFx0XHRcdFwic3RyaW5nXCIsXG5cdFx0XHRcdFx0XCJbc3RyaW5nXVwiLFxuXHRcdFx0XHRcdFwiLi4uXCJcblx0XHRcdFx0XVxuXHRcdFx0fVxuXHRcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG5cdCovXG5cblx0bGV0IHRleHQgPSBwbG91Z2goIGFyZ3VtZW50cyApXG5cdFx0Lm1hcCggKCBwYXJhbWV0ZXIgKSA9PiB7IHJldHVybiBwYXJhbWV0ZXIudG9TdHJpbmcoICk7IH0gKVxuXHRcdC5maWx0ZXIoIHRydWx5ICkgfHwgWyBdO1xuXG5cdHRoaXMuc3RyaW5nID0gdGV4dFxuXHRcdC5jb25jYXQoIHRoaXMuc3RyaW5nIClcblx0XHQubWFwKCAoIGZ1bmN0aW9uIG9uRWFjaFRva2VuKCB0b2tlbiApe1xuXHRcdFx0cmV0dXJuIHRoaXMudHlwZSArIHRva2VuO1xuXHRcdH0gKS5iaW5kKCB0aGlzICkgKTtcblxuXHR0aGlzLmhpc3RvcnkucHVzaCggUFJFUEVORCApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxuLyo7XG5cdEBtZXRob2QtZG9jdW1lbnRhdGlvbjpcblx0XHRJbnNlcnRzIHplcm8td2lkdGggc3BhY2Ugb24gZXZlcnkgZ2FwIG9mIHRoZSBzdHJpbmcuXG5cblx0XHRJZiBuZXcgc3RyaW5ncyBhcmUgaW5zZXJ0ZWQgd2l0aCB0aGUgb2xkIHNldCBzdHJpbmdzLFxuXHRcdFx0emVyby13aWR0aCBzcGFjZSB3aWxsIGJlIGFwcGxpZWQgYWxzby5cblxuXHRcdElmIGEgcGF0dGVybiBpcyBzdXBwbGllZCwgaXQgd2lsbCBpbnNlcnQgemVyby13aWR0aCBzcGFjZVxuXHRcdFx0b24gZXZlcnkgb2NjdXJyZW5jZSBvZiB0aGUgcGF0dGVybiBvbiB0aGUgc3RyaW5nLlxuXHRAZW5kLW1ldGhvZC1kb2N1bWVudGF0aW9uXG4qL1xuVTIwMGIucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uIGluc2VydCggc3RyaW5nLCBwYXR0ZXJuICl7XG5cdC8qO1xuXHRcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdFx0XHR7XG5cdFx0XHRcdFwic3RyaW5nXCI6IFtcblx0XHRcdFx0XHRcInN0cmluZ1wiLFxuXHRcdFx0XHRcdFwiW3N0cmluZ11cIixcblx0XHRcdFx0XHRcIi4uLlwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwicGF0dGVyblwiOiBcIlJlZ0V4cFwiXG5cdFx0XHR9XG5cdFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cblx0Ki9cblxuXHRsZXQgdGV4dCA9IHBsb3VnaCggYXJndW1lbnRzIClcblx0XHQubWFwKCBmdW5jdGlvbiBvbkVhY2hQYXJhbWV0ZXIoIHBhcmFtZXRlciApe1xuXHRcdFx0aWYoIGNsYXpvZiggcGFyYW1ldGVyLCBSZWdFeHAgKSApe1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHBhcmFtZXRlci50b1N0cmluZyggKTtcblx0XHR9IClcblx0XHQuZmlsdGVyKCB0cnVseSApIHx8IFsgXTtcblxuXHRsZXQgdGVtcGxhdGUgPSBvcHRmb3IoIGFyZ3VtZW50cywgUmVnRXhwICk7XG5cblx0aWYoIHRydWx5KCB0ZW1wbGF0ZSApICl7XG5cdFx0dGhpcy5zdHJpbmcgPSB0aGlzLnN0cmluZ1xuXHRcdFx0LmNvbmNhdCggdGV4dCApXG5cdFx0XHQubWFwKCAoIGZ1bmN0aW9uIG9uRWFjaFRva2VuKCB0b2tlbiApe1xuXHRcdFx0XHRyZXR1cm4gdG9rZW4ucmVwbGFjZSggdGVtcGxhdGUsIHRoaXMudHlwZSApO1xuXHRcdFx0fSApLmJpbmQoIHRoaXMgKSApO1xuXG5cdH1lbHNle1xuXHRcdHRoaXMuc3RyaW5nID0gdGhpcy5zdHJpbmdcblx0XHRcdC5jb25jYXQoIHRleHQgKVxuXHRcdFx0LmpvaW4oIHRoaXMudHlwZSArIFwiWyxdXCIgKVxuXHRcdFx0LnNwbGl0KCBcIlssXVwiICk7XG5cdH1cblxuXHR0aGlzLmhpc3RvcnkucHVzaCggSU5TRVJUICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG4vKjtcblx0QG1ldGhvZC1kb2N1bWVudGF0aW9uOlxuXHRcdFJldmVydHMgdG8gdGhlIG9yaWdpbmFsIHN0cmluZy5cblxuXHRcdENsZWFycyBoaXN0b3J5LlxuXG5cdFx0VGhpcyBkb2VzIG5vdCBpbmNsdWRlIGFwcGVuZGVkLCBwcmVwZW5kZWQgb3IgaW5zZXJ0ZWQgc3RyaW5ncy5cblx0XHRcdFNvIHRoZSBvcmlnaW5hbCBzdHJpbmcgaXMgdGhlIG9uZSB5b3UgaW5pdGlhbGl6ZS5cblx0QGVuZC1tZXRob2QtZG9jdW1lbnRhdGlvblxuKi9cblUyMDBiLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCApe1xuXHR0aGlzLnN0cmluZyA9IHRoaXMudGV4dDtcblxuXHR0aGlzLmhpc3RvcnkgPSBbIF07XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFUyMDBiO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHUyMDBiLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qO1xuXHRAbW9kdWxlLWxpY2Vuc2U6XG5cdFx0VGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cdFx0QG1pdC1saWNlbnNlXG5cblx0XHRDb3B5cmlnaHQgKEBjKSAyMDE2IFJpY2hldmUgU2lvZGluYSBCZWJlZG9yXG5cdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cblx0XHRQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5cdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0XHR0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5cdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuXHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdFx0RklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5cdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdFx0T1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblx0XHRTT0ZUV0FSRS5cblx0QGVuZC1tb2R1bGUtbGljZW5zZVxuXG5cdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHR7XG5cdFx0XHRcInBhY2thZ2VcIjogXCJhcmlkXCIsXG5cdFx0XHRcInBhdGhcIjogXCJhcmlkL2FyaWQuanNcIixcblx0XHRcdFwiZmlsZVwiOiBcImFyaWQuanNcIixcblx0XHRcdFwibW9kdWxlXCI6IFwiYXJpZFwiLFxuXHRcdFx0XCJhdXRob3JcIjogXCJSaWNoZXZlIFMuIEJlYmVkb3JcIixcblx0XHRcdFwiY29udHJpYnV0b3JzXCI6IFtcblx0XHRcdFx0XCJKb2huIExlbm9uIE1hZ2hhbm95IDxqb2hubGVub25tYWdoYW5veUBnbWFpbC5jb20+XCJcblx0XHRcdF0sXG5cdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZvbGtvdmFzeXN0ZW1zL2FyaWQuZ2l0XCIsXG5cdFx0XHRcInRlc3RcIjogXCJhcmlkLXRlc3QuanNcIixcblx0XHRcdFwiZ2xvYmFsXCI6IHRydWVcblx0XHR9XG5cdEBlbmQtbW9kdWxlLWNvbmZpZ3VyYXRpb25cblxuXHRAbW9kdWxlLWRvY3VtZW50YXRpb246XG5cdFx0Q2hlY2sgaWYgYXJyYXkgaXMgYWJzb2x1dGVseSBlbXB0eS5cblxuXHRcdEFycmF5IGNvbnRhaW5pbmcgZmFsc3kgdmFsdWVzIGNvbnNpZGVyZWQgYWJzb2x1dGUgZW1wdHkuXG5cdEBlbmQtbW9kdWxlLWRvY3VtZW50YXRpb25cblxuXHRAaW5jbHVkZTpcblx0XHR7XG5cdFx0XHRcImRvdWJ0XCI6IFwiZG91YnRcIixcblx0XHRcdFwidHJ1bHlcIjogXCJ0cnVseVwiXG5cdFx0fVxuXHRAZW5kLWluY2x1ZGVcbiovXG5cbnZhciBkb3VidCA9IHJlcXVpcmUoXCJkb3VidFwiKTtcbnZhciB0cnVseSA9IHJlcXVpcmUoXCJ0cnVseVwiKTtcblxudmFyIGFyaWQgPSBmdW5jdGlvbiBhcmlkKGFycmF5KSB7XG5cdC8qO1xuIFx0QG1ldGEtY29uZmlndXJhdGlvbjpcbiBcdFx0e1xuIFx0XHRcdFwiYXJyYXk6cmVxdWlyZWRcIjogXCJbKl1cIlxuIFx0XHR9XG4gXHRAZW5kLW1ldGEtY29uZmlndXJhdGlvblxuICovXG5cblx0aWYgKCFkb3VidChhcnJheSkuQVJSQVkpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGFycmF5XCIpO1xuXHR9XG5cblx0cmV0dXJuIGFycmF5Lmxlbmd0aCA9PSAwIHx8IGFycmF5LmZpbHRlcih0cnVseSkubGVuZ3RoID09IDA7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFyaWQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvYXJpZC9hcmlkLnN1cHBvcnQuanNcbi8vIG1vZHVsZSBpZCA9IDEwNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcblxuLyo7XG5cdEBtb2R1bGUtbGljZW5zZTpcblx0XHRUaGUgTUlUIExpY2Vuc2UgKE1JVClcblx0XHRAbWl0LWxpY2Vuc2VcblxuXHRcdENvcHlyaWdodCAoQGMpIDIwMTcgUmljaGV2ZSBTaW9kaW5hIEJlYmVkb3Jcblx0XHRAZW1haWw6IHJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cblxuXHRcdFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcblx0XHRvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5cdFx0aW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuXHRcdHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcblx0XHRjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcblx0XHRmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5cdFx0VGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5cdFx0Y29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuXHRcdFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcblx0XHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0XHRGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcblx0XHRBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5cdFx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0XHRPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuXHRcdFNPRlRXQVJFLlxuXHRAZW5kLW1vZHVsZS1saWNlbnNlXG5cblx0QG1vZHVsZS1jb25maWd1cmF0aW9uOlxuXHRcdHtcblx0XHRcdFwicGFja2FnZVwiOiBcImNsYXpvZlwiLFxuXHRcdFx0XCJwYXRoXCI6IFwiY2xhem9mL2NsYXpvZi5qc1wiLFxuXHRcdFx0XCJmaWxlXCI6IFwiY2xhem9mLmpzXCIsXG5cdFx0XHRcIm1vZHVsZVwiOiBcImNsYXpvZlwiLFxuXHRcdFx0XCJhdXRob3JcIjogXCJSaWNoZXZlIFMuIEJlYmVkb3JcIixcblx0XHRcdFwiY29udHJpYnV0b3JzXCI6IFtcblx0XHRcdFx0XCJKb2huIExlbm9uIE1hZ2hhbm95IDxqb2hubGVub25tYWdoYW5veUBnbWFpbC5jb20+XCJcblx0XHRcdF0sXG5cdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZvbGtvdmFzeXN0ZW1zL2NsYXpvZi5naXRcIixcblx0XHRcdFwidGVzdFwiOiBcImNsYXpvZi10ZXN0LmpzXCIsXG5cdFx0XHRcImdsb2JhbFwiOiB0cnVlXG5cdFx0fVxuXHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cblx0QG1vZHVsZS1kb2N1bWVudGF0aW9uOlxuXHRcdEZ1bmN0aW9uYWwgaW5zdGFuY2VvZi5cblxuXHRcdFRoaXMgd2lsbCB3YWxrIHRoZSBpbmhlcml0YW5jZSB0cmVlLlxuXHRAZW5kLW1vZHVsZS1kb2N1bWVudGF0aW9uXG5cblx0QGluY2x1ZGU6XG5cdFx0e1xuXHRcdFx0XCJlZW5cIjogXCJlZW5cIixcblx0XHRcdFwicHJvdHlwZVwiOiBcInByb3R5cGVcIlxuXHRcdH1cblx0QGVuZC1pbmNsdWRlXG4qL1xuXG52YXIgZWVuID0gcmVxdWlyZShcImVlblwiKTtcbnZhciBwcm90eXBlID0gcmVxdWlyZShcInByb3R5cGVcIik7XG5cbi8vOyBAc3VwcG9ydC1tb2R1bGU6XG4vLzogQHJlZmVyZW5jZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvc29tZVxuQXJyYXkucHJvdG90eXBlLnNvbWUgPSBBcnJheS5wcm90b3R5cGUuc29tZSB8fCBmdW5jdGlvbiAoZXZhbHVhdG9yLCB0aGlzQXJnKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICghdGhpcykgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFycmF5LnByb3RvdHlwZS5zb21lIGNhbGxlZCBvbiBudWxsIG9yIHVuZGVmaW5lZFwiKTtcblx0aWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZXZhbHVhdG9yKSB7XG5cdFx0aWYgKFwic3RyaW5nXCIgIT0gdHlwZW9mIGV2YWx1YXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuXHRcdGlmICghKGV2YWx1YXRvciA9IGV2YWwoZXZhbHVhdG9yKSkpIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcblx0fXZhciBpO1xuXHRpZiAodm9pZCAwID09PSB0aGlzQXJnKSB7XG5cdFx0Zm9yIChpIGluIHRoaXMpIHtcblx0XHRcdGlmIChldmFsdWF0b3IodGhpc1tpXSwgaSwgdGhpcykpIHJldHVybiAhMDtcblx0XHR9cmV0dXJuICExO1xuXHR9XG5cdGZvciAoaSBpbiB0aGlzKSB7XG5cdFx0aWYgKGV2YWx1YXRvci5jYWxsKHRoaXNBcmcsIHRoaXNbaV0sIGksIHRoaXMpKSByZXR1cm4gITA7XG5cdH1yZXR1cm4gITE7XG59O1xuLy87IEBlbmQtc3VwcG9ydC1tb2R1bGVcblxudmFyIGNsYXpvZiA9IGZ1bmN0aW9uIGNsYXpvZihlbnRpdHksIGJsdWVwcmludCkge1xuXHQvKjtcbiBcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG4gXHRcdHtcbiBcdFx0XHRcImVudGl0eTpyZXF1aXJlZFwiOiBcIipcIixcbiBcdFx0XHRcImJsdWVwcmludDpyZXF1aXJlZFwiOiBcImZ1bmN0aW9uXCJcbiBcdFx0fVxuIFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cbiAqL1xuXG5cdGlmICghcHJvdHlwZShibHVlcHJpbnQsIEZVTkNUSU9OKSkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcImludmFsaWQgYmx1ZXByaW50XCIpO1xuXHR9XG5cblx0aWYgKHByb3R5cGUoZW50aXR5LCBPQkpFQ1QpKSB7XG5cdFx0dmFyIHJlc3VsdCA9IGVudGl0eSBpbnN0YW5jZW9mIGJsdWVwcmludDtcblxuXHRcdC8qO1xuICBcdEB0b2RvOlxuICBcdFx0SWYgd2UgY2FuIHNlcGFyYXRlIHRoaXMgdG8gYW5vdGhlciBtb2R1bGUgdGhhdCBqdXN0IHdhbGsgdGhlIGluaGVyaXRhbmNlIHRyZWUuXG4gIFx0QGVuZC10b2RvXG4gICovXG5cdFx0aWYgKCFyZXN1bHQpIHtcblx0XHRcdHZhciBfY29uc3RydWN0b3IgPSBbXTtcblx0XHRcdHZhciBwb2ludCA9IGVudGl0eTtcblx0XHRcdHdoaWxlIChlZW4oX2NvbnN0cnVjdG9yLCBwb2ludC5jb25zdHJ1Y3RvcikpIHtcblx0XHRcdFx0X2NvbnN0cnVjdG9yLnB1c2gocG9pbnQuY29uc3RydWN0b3IpO1xuXHRcdFx0XHRwb2ludCA9IHBvaW50LmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblx0XHRcdH1cblxuXHRcdFx0cmVzdWx0ID0gX2NvbnN0cnVjdG9yLnNvbWUoZnVuY3Rpb24gb25FYWNoQ29uc3RydWN0b3IoY29uc3RydWN0b3IpIHtcblx0XHRcdFx0cmV0dXJuIGNsYXpvZihjb25zdHJ1Y3RvciwgYmx1ZXByaW50KTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICghcmVzdWx0KSB7XG5cdFx0XHR2YXIgX2NvbnN0cnVjdG9yMiA9IFtdO1xuXHRcdFx0dmFyIF9wb2ludCA9IGVudGl0eS5jb25zdHJ1Y3Rvcjtcblx0XHRcdHdoaWxlIChlZW4oX2NvbnN0cnVjdG9yMiwgX3BvaW50Ll9fcHJvdG9fXykpIHtcblx0XHRcdFx0X2NvbnN0cnVjdG9yMi5wdXNoKF9wb2ludC5fX3Byb3RvX18pO1xuXHRcdFx0XHRfcG9pbnQgPSBfcG9pbnQuX19wcm90b19fO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXN1bHQgPSBfY29uc3RydWN0b3IyLnNvbWUoZnVuY3Rpb24gb25FYWNoQ29uc3RydWN0b3IoY29uc3RydWN0b3IpIHtcblx0XHRcdFx0cmV0dXJuIGNsYXpvZihjb25zdHJ1Y3RvciwgYmx1ZXByaW50KTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0gZWxzZSBpZiAocHJvdHlwZShlbnRpdHksIEZVTkNUSU9OKSkge1xuXHRcdGVudGl0eS5uYW1lID09PSBibHVlcHJpbnQubmFtZSAmJiBlbnRpdHkudG9TdHJpbmcoKSA9PT0gYmx1ZXByaW50LnRvU3RyaW5nKCk7XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhem9mO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL2NsYXpvZi9jbGF6b2Yuc3VwcG9ydC5qc1xuLy8gbW9kdWxlIGlkID0gMTA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG4vKjtcblx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdEBtaXQtbGljZW5zZVxuXG5cdFx0Q29weXJpZ2h0IChAYykgMjAxNyBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXG5cdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5cdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0U09GVFdBUkUuXG5cdEBlbmQtbW9kdWxlLWxpY2Vuc2VcblxuXHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0e1xuXHRcdFx0XCJwYWNrYWdlXCI6IFwiZWVuXCIsXG5cdFx0XHRcInBhdGhcIjogXCJlZW4vZWVuLmpzXCIsXG5cdFx0XHRcImZpbGVcIjogXCJlZW4uanNcIixcblx0XHRcdFwibW9kdWxlXCI6IFwiZWVuXCIsXG5cdFx0XHRcImF1dGhvclwiOiBcIlJpY2hldmUgUy4gQmViZWRvclwiLFxuXHRcdFx0XCJlTWFpbFwiOiBcInJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cIixcblx0XHRcdFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b2xrb3Zhc3lzdGVtcy9lZW4uZ2l0XCIsXG5cdFx0XHRcInRlc3RcIjogXCJlZW4tdGVzdC5qc1wiLFxuXHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdH1cblx0QGVuZC1tb2R1bGUtY29uZmlndXJhdGlvblxuXG5cdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRDaGVja3MgaWYgYXJyYXkgY29udGFpbnMgdGhlIGdpdmVuIHZhbHVlLlxuXHRAZW5kLW1vZHVsZS1kb2N1bWVudGF0aW9uXG5cblx0QGluY2x1ZGU6XG5cdFx0e1xuXHRcdFx0XCJkb3VidFwiOiBcImRvdWJ0XCIsXG5cdFx0XHRcImtlaW5cIjogXCJrZWluXCIsXG5cdFx0XHRcInByb3R5cGVcIjogXCJwcm90eXBlXCIsXG5cdFx0XHRcInRydWx5XCI6IFwidHJ1bHlcIlxuXHRcdH1cblx0QGVuZC1pbmNsdWRlXG4qL1xuXG5jb25zdCBkb3VidCA9IHJlcXVpcmUoIFwiZG91YnRcIiApO1xuY29uc3Qga2VpbiA9IHJlcXVpcmUoIFwia2VpblwiICk7XG5jb25zdCBwcm90eXBlID0gcmVxdWlyZSggXCJwcm90eXBlXCIgKTtcbmNvbnN0IHRydWx5ID0gcmVxdWlyZSggXCJ0cnVseVwiICk7XG5cbi8vOyBAc3VwcG9ydC1tb2R1bGU6XG5cdC8vOiBAcmVmZXJlbmNlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9zb21lXG5cdEFycmF5LnByb3RvdHlwZS5zb21lPUFycmF5LnByb3RvdHlwZS5zb21lfHxmdW5jdGlvbihldmFsdWF0b3IsdGhpc0FyZyl7XCJ1c2Ugc3RyaWN0XCI7XG5cdGlmKCF0aGlzKXRocm93IG5ldyBUeXBlRXJyb3IoXCJBcnJheS5wcm90b3R5cGUuc29tZSBjYWxsZWQgb24gbnVsbCBvciB1bmRlZmluZWRcIik7XG5cdGlmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGV2YWx1YXRvcil7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGV2YWx1YXRvcil0aHJvdyBuZXcgVHlwZUVycm9yO1xuXHRpZighKGV2YWx1YXRvcj1ldmFsKGV2YWx1YXRvcikpKXRocm93IG5ldyBUeXBlRXJyb3J9dmFyIGk7XG5cdGlmKHZvaWQgMD09PXRoaXNBcmcpe2ZvcihpIGluIHRoaXMpaWYoZXZhbHVhdG9yKHRoaXNbaV0saSx0aGlzKSlyZXR1cm4hMDtyZXR1cm4hMX1cblx0Zm9yKGkgaW4gdGhpcylpZihldmFsdWF0b3IuY2FsbCh0aGlzQXJnLHRoaXNbaV0saSx0aGlzKSlyZXR1cm4hMDtyZXR1cm4hMX07XG4vLzsgQGVuZC1zdXBwb3J0LW1vZHVsZVxuXG5jb25zdCBlZW4gPSBmdW5jdGlvbiBlZW4oIGFycmF5LCB2YWx1ZSwgY29tcGFyYXRvciApe1xuXHQvKjtcblx0XHRAbWV0YS1jb25maWd1cmF0aW9uOlxuXHRcdFx0e1xuXHRcdFx0XHRcImFycmF5OnJlcXVpcmVkXCI6IFwiQXJyYXlcIixcblx0XHRcdFx0XCJ2YWx1ZTpyZXF1aXJlZFwiOiBcIipcIixcblx0XHRcdFx0XCJjb21wYXJhdG9yXCI6IFwiZnVuY3Rpb25cIlxuXHRcdFx0fVxuXHRcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG5cdCovXG5cblx0aWYoICFkb3VidCggYXJyYXksIEFTX0FSUkFZICkgKXtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIFwiaW52YWxpZCBhcnJheVwiICk7XG5cdH1cblxuXHRpZiggdHJ1bHkoIGNvbXBhcmF0b3IgKSAmJiAhcHJvdHlwZSggY29tcGFyYXRvciwgRlVOQ1RJT04gKSApe1xuXHRcdHRocm93IG5ldyBFcnJvciggXCJpbnZhbGlkIGNvbXBhcmF0b3JcIiApO1xuXHR9XG5cblx0Y29tcGFyYXRvciA9IGNvbXBhcmF0b3IgfHwgZnVuY3Rpb24gY29tcGFyYXRvciggaXRlbSwgdmFsdWUgKXtcblx0XHRpZiggcHJvdHlwZSggaXRlbSwgT0JKRUNUICkgJiYga2VpbiggaXRlbSwgXCJ0b1N0cmluZ1wiICkgJiYga2VpbiggdmFsdWUsIFwidG9TdHJpbmdcIiApICl7XG5cdFx0XHRyZXR1cm4gaXRlbS50b1N0cmluZyggKSA9PT0gdmFsdWUudG9TdHJpbmcoICkgfHwgaXRlbSA9PT0gdmFsdWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGl0ZW0gPT09IHZhbHVlO1xuXHR9O1xuXG5cdHJldHVybiBhcnJheS5zb21lKCAoIGl0ZW0sIGluZGV4ICkgPT4ge1xuXHRcdHJldHVybiBjb21wYXJhdG9yKCBpdGVtLCB2YWx1ZSwgaW5kZXggKTtcblx0fSApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlZW47XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZWVuLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qO1xuXHRAbW9kdWxlLWxpY2Vuc2U6XG5cdFx0VGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cdFx0QG1pdC1saWNlbnNlXG5cblx0XHRDb3B5cmlnaHQgKEBjKSAyMDE3IFJpY2hldmUgU2lvZGluYSBCZWJlZG9yXG5cdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cblx0XHRQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5cdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0XHR0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5cdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuXHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdFx0RklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5cdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdFx0T1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblx0XHRTT0ZUV0FSRS5cblx0QGVuZC1tb2R1bGUtbGljZW5zZVxuXG5cdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHR7XG5cdFx0XHRcInBhY2thZ2VcIjogXCJrZWluXCIsXG5cdFx0XHRcInBhdGhcIjogXCJrZWluL2tlaW4uanNcIixcblx0XHRcdFwiZmlsZVwiOiBcImtlaW4uanNcIixcblx0XHRcdFwibW9kdWxlXCI6IFwia2VpblwiLFxuXHRcdFx0XCJhdXRob3JcIjogXCJSaWNoZXZlIFMuIEJlYmVkb3JcIixcblx0XHRcdFwiZU1haWxcIjogXCJyaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXCIsXG5cdFx0XHRcInJlcG9zaXRvcnlcIjogXCJodHRwczovL2dpdGh1Yi5jb20vdm9sa292YXN5c3RlbXMva2Vpbi5naXRcIixcblx0XHRcdFwidGVzdFwiOiBcImtlaW4tdGVzdC5qc1wiLFxuXHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdH1cblx0QGVuZC1tb2R1bGUtY29uZmlndXJhdGlvblxuXG5cdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRDaGVjayBpZiBrZXkgZXhpc3RzIG9uIHRoZSBlbnRpdHkuXG5cdEBlbmQtbW9kdWxlLWRvY3VtZW50YXRpb25cblxuXHRAaW5jbHVkZTpcblx0XHR7XG5cdFx0XHRcImZhbHp5XCI6IFwiZmFsenlcIixcblx0XHRcdFwicHJvdHlwZVwiOiBcInByb3R5cGVcIlxuXHRcdH1cblx0QGVuZC1pbmNsdWRlXG4qL1xuXG5jb25zdCBmYWx6eSA9IHJlcXVpcmUoIFwiZmFsenlcIiApO1xuY29uc3QgcHJvdHlwZSA9IHJlcXVpcmUoIFwicHJvdHlwZVwiICk7XG5cbmNvbnN0IGtlaW4gPSBmdW5jdGlvbiBrZWluKCBlbnRpdHksIGtleSApe1xuXHQvKjtcblx0XHRAbWV0YS1jb25maWd1cmF0aW9uOlxuXHRcdFx0e1xuXHRcdFx0XHRcImVudGl0eTpyZXF1aXJlZFwiOiBbXG5cdFx0XHRcdFx0XCJvYmplY3RcIixcblx0XHRcdFx0XHRcImZ1bmN0aW9uXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJrZXk6cmVxdWlyZWRcIjogW1xuXHRcdFx0XHRcdFwic3RyaW5nXCIsXG5cdFx0XHRcdFx0XCJudW1iZXJcIixcblx0XHRcdFx0XHRcInN5bWJvbFwiXG5cdFx0XHRcdF1cblx0XHRcdH1cblx0XHRAZW5kLW1ldGEtY29uZmlndXJhdGlvblxuXHQqL1xuXG5cdGlmKCAhcHJvdHlwZSggZW50aXR5LCBPQkpFQ1QsIEZVTkNUSU9OICkgfHwgZmFsenkoIGVudGl0eSApICl7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBcImludmFsaWQgZW50aXR5XCIgKTtcblx0fVxuXG5cdGlmKCBmYWx6eSgga2V5ICkgKXtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIFwiaW52YWxpZCBrZXlcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVudGl0eVsga2V5IF0gIT09IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ga2VpbjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBrZWluLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qO1xuXHRAbW9kdWxlLWxpY2Vuc2U6XG5cdFx0VGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cdFx0QG1pdC1saWNlbnNlXG5cblx0XHRDb3B5cmlnaHQgKEBjKSAyMDE2IFJpY2hldmUgU2lvZGluYSBCZWJlZG9yXG5cdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cblx0XHRQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5cdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0XHR0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5cdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuXHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdFx0RklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5cdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdFx0T1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblx0XHRTT0ZUV0FSRS5cblx0QGVuZC1tb2R1bGUtbGljZW5zZVxuXG5cdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHR7XG5cdFx0XHRcInBhY2thZ2VcIjogXCJmYWx6eVwiLFxuXHRcdFx0XCJwYXRoXCI6IFwiZmFsenkvZmFsenkuanNcIixcblx0XHRcdFwiZmlsZVwiOiBcImZhbHp5LmpzXCIsXG5cdFx0XHRcIm1vZHVsZVwiOiBcImZhbHp5XCIsXG5cdFx0XHRcImF1dGhvclwiOiBcIlJpY2hldmUgUy4gQmViZWRvclwiLFxuXHRcdFx0XCJjb250cmlidXRvcnNcIjogW1xuXHRcdFx0XHRcIkpvaG4gTGVub24gTWFnaGFub3kgPGpvaG5sZW5vbm1hZ2hhbm95QGdtYWlsLmNvbT5cIlxuXHRcdFx0XSxcblx0XHRcdFwiZU1haWxcIjogXCJyaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXCIsXG5cdFx0XHRcInJlcG9zaXRvcnlcIjogXCJodHRwczovL2dpdGh1Yi5jb20vdm9sa292YXN5c3RlbXMvZmFsenkuZ2l0XCIsXG5cdFx0XHRcInRlc3RcIjogXCJmYWx6eS10ZXN0LmpzXCIsXG5cdFx0XHRcImdsb2JhbFwiOiB0cnVlXG5cdFx0fVxuXHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cblx0QG1vZHVsZS1kb2N1bWVudGF0aW9uOlxuXHRcdENoZWNrIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG51bGwsIGVtcHR5IHN0cmluZywgTmFOIGFuZCBJbmZpbml0eS5cblx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXG5cdEBpbmNsdWRlOlxuXHRcdHtcblx0XHRcdFwicHJvdHlwZVwiOiBcInByb3R5cGVcIlxuXHRcdH1cblx0QGVuZC1pbmNsdWRlXG4qL1xuXG52YXIgcHJvdHlwZSA9IHJlcXVpcmUoXCJwcm90eXBlXCIpO1xuXG52YXIgZmFsenkgPSBmdW5jdGlvbiBmYWx6eSh2YWx1ZSkge1xuXHQvKjtcbiBcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG4gXHRcdHtcbiBcdFx0XHRcInZhbHVlOnJlcXVpcmVkXCI6IFwiKlwiXG4gXHRcdH1cbiBcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG4gKi9cblxuXHR2YXIgdmFsdWVUeXBlID0gcHJvdHlwZSh2YWx1ZSk7XG5cdGlmICh2YWx1ZVR5cGUuTlVNQkVSKSB7XG5cdFx0cmV0dXJuIGlzTmFOKHZhbHVlKSB8fCAhaXNGaW5pdGUodmFsdWUpO1xuXHR9XG5cblx0cmV0dXJuIHZhbHVlVHlwZS5VTkRFRklORUQgfHwgdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IFwiXCI7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhbHp5O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL2ZhbHp5L2ZhbHp5LnN1cHBvcnQuanNcbi8vIG1vZHVsZSBpZCA9IDExMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKjtcblx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdEBtaXQtbGljZW5zZVxuXG5cdFx0Q29weXJpZ2h0IChAYykgMjAxNiBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXG5cdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5cdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0U09GVFdBUkUuXG5cdEBlbmQtbW9kdWxlLWxpY2Vuc2VcblxuXHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0e1xuXHRcdFx0XCJwYWNrYWdlXCI6IFwiZGlhdG9tXCIsXG5cdFx0XHRcInBhdGhcIjogXCJkaWF0b20vZGlhdG9tLmpzXCIsXG5cdFx0XHRcImZpbGVcIjogXCJkaWF0b20uanNcIixcblx0XHRcdFwibW9kdWxlXCI6IFwiZGlhdG9tXCIsXG5cdFx0XHRcImF1dGhvclwiOiBcIlJpY2hldmUgUy4gQmViZWRvclwiLFxuXHRcdFx0XCJjb250cmlidXRvcnNcIjogW1xuXHRcdFx0XHRcIkpvaG4gTGVub24gTWFnaGFub3kgPGpvaG5sZW5vbm1hZ2hhbm95QGdtYWlsLmNvbT5cIlxuXHRcdFx0XSxcblx0XHRcdFwiZU1haWxcIjogXCJyaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXCIsXG5cdFx0XHRcInJlcG9zaXRvcnlcIjogXCJodHRwczovL2dpdGh1Yi5jb20vdm9sa292YXN5c3RlbXMvZGlhdG9tLmdpdFwiLFxuXHRcdFx0XCJ0ZXN0XCI6IFwiZGlhdG9tLXRlc3QuanNcIixcblx0XHRcdFwiZ2xvYmFsXCI6IHRydWVcblx0XHR9XG5cdEBlbmQtbW9kdWxlLWNvbmZpZ3VyYXRpb25cblxuXHRAbW9kdWxlLWRvY3VtZW50YXRpb246XG5cdFx0Q2xhc3MgYmx1ZXByaW50LlxuXHRAZW5kLW1vZHVsZS1kb2N1bWVudGF0aW9uXG5cblx0QGluY2x1ZGU6XG5cdFx0e1xuXHRcdFx0XCJmYWx6eVwiOiBcImZhbHp5XCIsXG5cdFx0XHRcImtvbWVudG9cIjogXCJrb21lbnRvXCIsXG5cdFx0XHRcImxsYW1hbGl6ZVwiOiBcImxsYW1hbGl6ZVwiLFxuXHRcdFx0XCJwcm90eXBlXCI6IFwicHJvdHlwZVwiXG5cdFx0fVxuXHRAZW5kLWluY2x1ZGVcbiovXG5cbmNvbnN0IGZhbHp5ID0gcmVxdWlyZSggXCJmYWx6eVwiICk7XG5jb25zdCBrb21lbnRvID0gcmVxdWlyZSggXCJrb21lbnRvXCIgKTtcbmNvbnN0IGxsYW1hbGl6ZSA9IHJlcXVpcmUoIFwibGxhbWFsaXplXCIgKTtcbmNvbnN0IHByb3R5cGUgPSByZXF1aXJlKCBcInByb3R5cGVcIiApO1xuXG4vLzogQHN1cHBvcnQtbW9kdWxlOlxuXHQvLzogQHJlZmVyZW5jZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZnJvbVxuXHRBcnJheS5mcm9tfHwoQXJyYXkuZnJvbT1mdW5jdGlvbigpe3ZhciByPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsbj1mdW5jdGlvbihuKXtcblx0cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2Ygbnx8XCJbb2JqZWN0IEZ1bmN0aW9uXVwiPT09ci5jYWxsKG4pfSx0PWZ1bmN0aW9uKHIpe3ZhciBuPU51bWJlcihyKTtcblx0cmV0dXJuIGlzTmFOKG4pPzA6MCE9PW4mJmlzRmluaXRlKG4pPyhuPjA/MTotMSkqTWF0aC5mbG9vcihNYXRoLmFicyhuKSk6bn0sXG5cdGU9TWF0aC5wb3coMiw1MyktMSxvPWZ1bmN0aW9uKHIpe3ZhciBuPXQocik7cmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sMCksZSl9O1xuXHRyZXR1cm4gZnVuY3Rpb24ocil7dmFyIHQ9dGhpcyxlPU9iamVjdChyKTtcblx0aWYobnVsbD09cil0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJyYXkuZnJvbSByZXF1aXJlcyBhbiBhcnJheS1saWtlIG9iamVjdCAtIG5vdCBudWxsIG9yIHVuZGVmaW5lZFwiKTtcblx0dmFyIGEsdT1hcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMDtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgdSl7XG5cdGlmKCFuKHUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJBcnJheS5mcm9tOiB3aGVuIHByb3ZpZGVkLCB0aGUgc2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvblwiKTtcblx0YXJndW1lbnRzLmxlbmd0aD4yJiYoYT1hcmd1bWVudHNbMl0pfWZvcih2YXIgaSxmPW8oZS5sZW5ndGgpLGM9bih0KT9cblx0T2JqZWN0KG5ldyB0KGYpKTpuZXcgQXJyYXkoZiksaD0wO2Y+aDspaT1lW2hdLFxuXHR1P2NbaF09XCJ1bmRlZmluZWRcIj09dHlwZW9mIGE/dShpLGgpOnUuY2FsbChhLGksaCk6Y1toXT1pLGgrPTE7cmV0dXJuIGMubGVuZ3RoPWYsY319KCkpO1xuLy86IEBlbmQtc3VwcG9ydC1tb2R1bGVcblxuY29uc3QgZGlhdG9tID0gZnVuY3Rpb24gZGlhdG9tKCBuYW1lICl7XG5cdC8qO1xuXHRcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG5cdFx0XHR7XG5cdFx0XHRcdFwibmFtZTpyZXF1aXJlZFwiOiBcInN0cmluZ1wiXG5cdFx0XHR9XG5cdFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cblx0Ki9cblxuXHRpZiggIXByb3R5cGUoIG5hbWUsIFNUUklORyApIHx8IGZhbHp5KCBuYW1lICkgKXtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIFwiaW52YWxpZCBuYW1lXCIgKTtcblx0fVxuXG5cdGlmKCAhKCAvXltBLVpdW0EtWmEtejAtOV0rJC8gKS50ZXN0KCBuYW1lICkgKXtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIFwibmFtZSBpcyBub3Qgc2ltcGxlXCIgKTtcblx0fVxuXG5cdG5hbWUgPSBsbGFtYWxpemUoIG5hbWUsIHRydWUgKTtcblxuXHR0cnl7XG5cdFx0bGV0IGJsdWVwcmludCA9IGtvbWVudG8oIGZ1bmN0aW9uIHRlbXBsYXRlKCApe1xuXHRcdFx0cmV0dXJuIGBcblx0XHRcdFx0ZnVuY3Rpb24ge3tuYW1lfX0oIG9wdGlvbiwgY2FsbGJhY2sgKXtcblx0XHRcdFx0XHR2YXIgcGFyYW1ldGVyID0gQXJyYXkuZnJvbSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHR2YXIgdGVtcGxhdGUgPSBcIiggZnVuY3Rpb24gZXZhbHVhdGUoICl7IHZhciByZXN1bHQgPSB1bmRlZmluZWQ7IEBib2R5IHJldHVybiByZXN1bHQ7IH0gKS5iaW5kKCBAYmluZCApKCApXCJcblx0XHRcdFx0XHRcdC5yZXBsYWNlKCBcIkBiaW5kXCIsIFwiKCB0eXBlb2YgZ2xvYmFsICE9ICd1bmRlZmluZWQnICk/IGdsb2JhbCA6ICggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyApPyB3aW5kb3cgOiB0aGlzXCIgKVxuXHRcdFx0XHRcdFx0LnJlcGxhY2UoIFwiQGJvZHlcIiwgXCJ0cnl7IHJlc3VsdCA9ICggQGV4cHJlc3Npb24gKTsgfWNhdGNoKCBlcnJvciApeyBAZXJyb3IgfVwiIClcblx0XHRcdFx0XHRcdC5yZXBsYWNlKCBcIkBlcnJvclwiLCBcInRocm93IG5ldyBFcnJvciggJ2Vycm9yIGV4ZWN1dGluZyBleHByZXNzaW9uLCAnICsgZXJyb3IgKTtcIiApO1xuXG5cdFx0XHRcdFx0aWYoIHRoaXMgaW5zdGFuY2VvZiB7e25hbWV9fSAmJiBwYXJhbWV0ZXIubGVuZ3RoICl7XG5cdFx0XHRcdFx0XHRpZiggdHlwZW9mIHRoaXMuaW5pdGlhbGl6ZSA9PSBcImZ1bmN0aW9uXCIgKXtcblx0XHRcdFx0XHRcdFx0dGhpcy5pbml0aWFsaXplLmFwcGx5KCB0aGlzLCBwYXJhbWV0ZXIgKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0XHR9ZWxzZSBpZiggdGhpcyBpbnN0YW5jZW9mIHt7bmFtZX19ICYmICFwYXJhbWV0ZXIubGVuZ3RoICl7XG5cdFx0XHRcdFx0XHRpZiggdHlwZW9mIHRoaXMuaW5pdGlhbGl6ZSA9PSBcImZ1bmN0aW9uXCIgKXtcblx0XHRcdFx0XHRcdFx0dGhpcy5pbml0aWFsaXplKCApO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHRcdH1lbHNlIGlmKCAhKCB0aGlzIGluc3RhbmNlb2Yge3tuYW1lfX0gKSAmJiBwYXJhbWV0ZXIubGVuZ3RoICl7XG5cdFx0XHRcdFx0XHR2YXIgZXhwcmVzc2lvbiA9IFwiZnVuY3Rpb24gZGVsZWdhdGUoIEBwYXJhbWV0ZXIgKXsgcmV0dXJuIG5ldyB0aGlzKCBAcGFyYW1ldGVyICk7IH1cIlxuXHRcdFx0XHRcdFx0XHQucmVwbGFjZSggL1xcQHBhcmFtZXRlci9nLFxuXHRcdFx0XHRcdFx0XHRcdHBhcmFtZXRlci5tYXAoIGZ1bmN0aW9uIG9uRWFjaFBhcmFtZXRlciggaXRlbSwgaW5kZXggKXtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBcImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCJbIGluZGV4IF07XG5cdFx0XHRcdFx0XHRcdFx0fSApLmpvaW4oIFwiLFwiICkgKTtcblxuXHRcdFx0XHRcdFx0ZXhwcmVzc2lvbiA9IHRlbXBsYXRlLnJlcGxhY2UoIFwiQGV4cHJlc3Npb25cIiwgZXhwcmVzc2lvbiApO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gZXZhbCggZXhwcmVzc2lvbiApLmFwcGx5KCB7e25hbWV9fSwgcGFyYW1ldGVyICk7XG5cblx0XHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRcdHZhciBleHByZXNzaW9uID0gXCJmdW5jdGlvbiBkZWxlZ2F0ZSggKXsgcmV0dXJuIG5ldyB0aGlzKCApOyB9XCI7XG5cblx0XHRcdFx0XHRcdGV4cHJlc3Npb24gPSB0ZW1wbGF0ZS5yZXBsYWNlKCBcIkBleHByZXNzaW9uXCIsIGV4cHJlc3Npb24gKTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIGV2YWwoIGV4cHJlc3Npb24gKS5jYWxsKCB7e25hbWV9fSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdGA7XG5cdFx0fSxcblxuXHRcdHsgXCJuYW1lXCI6IG5hbWUgfSApO1xuXG5cdFx0cmV0dXJuIG5ldyBGdW5jdGlvbiggYHJldHVybiAkeyBibHVlcHJpbnQgfWAgKSggKTtcblxuXHR9Y2F0Y2goIGVycm9yICl7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBgZnVuY3Rpb24gbm90IGNyZWF0ZWQgcHJvcGVybHksICR7IGVycm9yIH1gICk7XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZGlhdG9tO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGRpYXRvbS5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKjtcblx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdEBtaXQtbGljZW5zZVxuXG5cdFx0Q29weXJpZ2h0IChAYykgMjAxNiBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXG5cdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5cdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0U09GVFdBUkUuXG5cdEBlbmQtbW9kdWxlLWxpY2Vuc2VcblxuXHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0e1xuXHRcdFx0XCJwYWNrYWdlXCI6IFwia29tZW50b1wiLFxuXHRcdFx0XCJwYXRoXCI6IFwia29tZW50by9rb21lbnRvLmpzXCIsXG5cdFx0XHRcImZpbGVcIjogXCJrb21lbnRvLmpzXCIsXG5cdFx0XHRcIm1vZHVsZVwiOiBcImtvbWVudG9cIixcblx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcImNvbnRyaWJ1dG9yc1wiOiBbXG5cdFx0XHRcdFwiSm9obiBMZW5vbiBNYWdoYW5veSA8am9obmxlbm9ubWFnaGFub3lAZ21haWwuY29tPlwiXG5cdFx0XHRdLFxuXHRcdFx0XCJlTWFpbFwiOiBcInJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cIixcblx0XHRcdFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b2xrb3Zhc3lzdGVtcy9rb21lbnRvLmdpdFwiLFxuXHRcdFx0XCJ0ZXN0XCI6IFwia29tZW50by10ZXN0LmpzXCIsXG5cdFx0XHRcImdsb2JhbFwiOiB0cnVlXG5cdFx0fVxuXHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cblx0QG1vZHVsZS1kb2N1bWVudGF0aW9uOlxuXHRcdFBhcnNlcyBjb21tZW50cyBpbnNpZGUgamF2YXNjcmlwdCBmdW5jdGlvbnMgYW5kIGNvbnZlcnRzIHRoZW0gdG8gc3RyaW5nLlxuXHRAZW5kLW1vZHVsZS1kb2N1bWVudGF0aW9uXG5cblx0QGluY2x1ZGU6XG5cdFx0e1xuXHRcdFx0XCJoYW5kbGViYXJcIjogXCJoYW5kbGViYXJzXCIsXG5cdFx0XHRcImhhcmRlblwiOiBcImhhcmRlblwiLFxuXHRcdFx0XCJwcm90eXBlXCI6IFwicHJvdHlwZVwiLFxuXHRcdFx0XCJyZWFsaWduXCI6IFwicmVhbGlnblwiLFxuXHRcdFx0XCJzdHVmZmVkXCI6IFwic3R1ZmZlZFwiLFxuXHRcdFx0XCJ0cnVseVwiOiBcInRydWx5XCJcblx0XHR9XG5cdEBlbmQtaW5jbHVkZVxuKi9cblxuY29uc3QgaGFuZGxlYmFyID0gcmVxdWlyZSggXCJoYW5kbGViYXJzXCIgKTtcbmNvbnN0IGhhcmRlbiA9IHJlcXVpcmUoIFwiaGFyZGVuXCIgKTtcbmNvbnN0IHByb3R5cGUgPSByZXF1aXJlKCBcInByb3R5cGVcIiApO1xuY29uc3QgcmVhbGlnbiA9IHJlcXVpcmUoIFwicmVhbGlnblwiICk7XG5jb25zdCBzdHVmZmVkID0gcmVxdWlyZSggXCJzdHVmZmVkXCIgKTtcbmNvbnN0IHRydWx5ID0gcmVxdWlyZSggXCJ0cnVseVwiICk7XG5cbmNvbnN0IGtvbWVudG8gPSBmdW5jdGlvbiBrb21lbnRvKCBjb21tZW50LCBvcHRpb24gKXtcblx0Lyo7XG5cdFx0QG1ldGEtY29uZmlndXJhdGlvbjpcblx0XHRcdHtcblx0XHRcdFx0XCJjb21tZW50OnJlcXVpcmVkXCI6IFwiZnVuY3Rpb25cIixcblx0XHRcdFx0XCJvcHRpb25cIjogXCJvYmplY3RcIlxuXHRcdFx0fVxuXHRcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG5cdCovXG5cblx0aWYoICFwcm90eXBlKCBjb21tZW50LCBGVU5DVElPTiApICl7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBcImludmFsaWQgZnVuY3Rpb25cIiApO1xuXHR9XG5cblx0bGV0IHN0cmluZyA9ICggY29tbWVudC50b1N0cmluZyggKS5tYXRjaCgga29tZW50by5NVUxUSVBMRV9MSU5FX0NPTU1FTlRfUEFUVEVSTiApIHx8IFsgXSApWyAxIF0gfHxcblx0XHQoIGNvbW1lbnQudG9TdHJpbmcoICkubWF0Y2goIGtvbWVudG8uU0lOR0xFX0xJTkVfQ09NTUVOVF9QQVRURVJOICkgfHwgWyBdIClbIDEgXTtcblxuXHQvKjtcblx0XHRAbm90ZTpcblx0XHRcdElmIHRoZXJlIGFyZSBubyBzdHJpbmcgZnJvbSB0aGUgY29tbWVudCxcblx0XHRcdFx0d2UgY2FuIHNhZmUgdG8gYXNzdW1lIHRoYXQgaXQgc2hvdWxkIHJldHVybiBhIHN0cmluZy5cblx0XHRAZW5kLW5vdGVcblx0Ki9cblx0aWYoICFzdHJpbmcgKXtcblx0XHRzdHJpbmcgPSBjb21tZW50KCApO1xuXHR9XG5cblx0c3RyaW5nID0gcmVhbGlnbiggc3RyaW5nICk7XG5cblx0aWYoIHRydWx5KCBzdHJpbmcgKSAmJiBwcm90eXBlKCBvcHRpb24sIE9CSkVDVCApICYmIHN0dWZmZWQoIG9wdGlvbiApICl7XG5cdFx0c3RyaW5nID0gaGFuZGxlYmFyLmNvbXBpbGUoIHN0cmluZyApKCBvcHRpb24gKTtcblx0fVxuXG5cdHJldHVybiBzdHJpbmc7XG59O1xuXG5oYXJkZW5cblx0LmJpbmQoIGtvbWVudG8gKSggXCJNVUxUSVBMRV9MSU5FX0NPTU1FTlRfUEFUVEVSTlwiLFxuXHRcdC9eZnVuY3Rpb25cXHMqXFx3KlxcKFteXFwoXFwpXSpcXClcXHMqXFx7XFxzKltcXHNcXFNdKlxccypcXC9cXCpcXCE/KFtcXHNcXFNdKnwuKnxbXl0qKVxcKlxcL1xcUypcXHMqXFx9JC9tIClcblx0LmhhcmRlbiggXCJTSU5HTEVfTElORV9DT01NRU5UX1BBVFRFUk5cIixcblx0XHQvXmZ1bmN0aW9uXFxzKlxcdypcXChbXlxcKFxcKV0qXFwpXFxzKlxce1xccypbXFxzXFxTXSpcXHMqXFwvXFwqXFwhPyhbXFxzXFxTXSp8Lip8W15dKilcXCpcXC9cXFMqXFxzKlxcfSQvICk7XG5cbm1vZHVsZS5leHBvcnRzID0ga29tZW50bztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBrb21lbnRvLmpzIiwiLyohXG5cbiBoYW5kbGViYXJzIHY0LjAuNVxuXG5Db3B5cmlnaHQgKEMpIDIwMTEtMjAxNSBieSBZZWh1ZGEgS2F0elxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuXG5cbkBsaWNlbnNlXG4qL1xuKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiSGFuZGxlYmFyc1wiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJIYW5kbGViYXJzXCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4vKioqKioqLyBcdFx0fTtcblxuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cblxuXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSlbJ2RlZmF1bHQnXTtcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5cdHZhciBfaGFuZGxlYmFyc1J1bnRpbWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG5cdHZhciBfaGFuZGxlYmFyc1J1bnRpbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFuZGxlYmFyc1J1bnRpbWUpO1xuXG5cdC8vIENvbXBpbGVyIGltcG9ydHNcblxuXHR2YXIgX2hhbmRsZWJhcnNDb21waWxlckFzdCA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXG5cdHZhciBfaGFuZGxlYmFyc0NvbXBpbGVyQXN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhbmRsZWJhcnNDb21waWxlckFzdCk7XG5cblx0dmFyIF9oYW5kbGViYXJzQ29tcGlsZXJCYXNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG5cblx0dmFyIF9oYW5kbGViYXJzQ29tcGlsZXJDb21waWxlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpO1xuXG5cdHZhciBfaGFuZGxlYmFyc0NvbXBpbGVySmF2YXNjcmlwdENvbXBpbGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7XG5cblx0dmFyIF9oYW5kbGViYXJzQ29tcGlsZXJKYXZhc2NyaXB0Q29tcGlsZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFuZGxlYmFyc0NvbXBpbGVySmF2YXNjcmlwdENvbXBpbGVyKTtcblxuXHR2YXIgX2hhbmRsZWJhcnNDb21waWxlclZpc2l0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1KTtcblxuXHR2YXIgX2hhbmRsZWJhcnNDb21waWxlclZpc2l0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFuZGxlYmFyc0NvbXBpbGVyVmlzaXRvcik7XG5cblx0dmFyIF9oYW5kbGViYXJzTm9Db25mbGljdCA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xuXG5cdHZhciBfaGFuZGxlYmFyc05vQ29uZmxpY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFuZGxlYmFyc05vQ29uZmxpY3QpO1xuXG5cdHZhciBfY3JlYXRlID0gX2hhbmRsZWJhcnNSdW50aW1lMlsnZGVmYXVsdCddLmNyZWF0ZTtcblx0ZnVuY3Rpb24gY3JlYXRlKCkge1xuXHQgIHZhciBoYiA9IF9jcmVhdGUoKTtcblxuXHQgIGhiLmNvbXBpbGUgPSBmdW5jdGlvbiAoaW5wdXQsIG9wdGlvbnMpIHtcblx0ICAgIHJldHVybiBfaGFuZGxlYmFyc0NvbXBpbGVyQ29tcGlsZXIuY29tcGlsZShpbnB1dCwgb3B0aW9ucywgaGIpO1xuXHQgIH07XG5cdCAgaGIucHJlY29tcGlsZSA9IGZ1bmN0aW9uIChpbnB1dCwgb3B0aW9ucykge1xuXHQgICAgcmV0dXJuIF9oYW5kbGViYXJzQ29tcGlsZXJDb21waWxlci5wcmVjb21waWxlKGlucHV0LCBvcHRpb25zLCBoYik7XG5cdCAgfTtcblxuXHQgIGhiLkFTVCA9IF9oYW5kbGViYXJzQ29tcGlsZXJBc3QyWydkZWZhdWx0J107XG5cdCAgaGIuQ29tcGlsZXIgPSBfaGFuZGxlYmFyc0NvbXBpbGVyQ29tcGlsZXIuQ29tcGlsZXI7XG5cdCAgaGIuSmF2YVNjcmlwdENvbXBpbGVyID0gX2hhbmRsZWJhcnNDb21waWxlckphdmFzY3JpcHRDb21waWxlcjJbJ2RlZmF1bHQnXTtcblx0ICBoYi5QYXJzZXIgPSBfaGFuZGxlYmFyc0NvbXBpbGVyQmFzZS5wYXJzZXI7XG5cdCAgaGIucGFyc2UgPSBfaGFuZGxlYmFyc0NvbXBpbGVyQmFzZS5wYXJzZTtcblxuXHQgIHJldHVybiBoYjtcblx0fVxuXG5cdHZhciBpbnN0ID0gY3JlYXRlKCk7XG5cdGluc3QuY3JlYXRlID0gY3JlYXRlO1xuXG5cdF9oYW5kbGViYXJzTm9Db25mbGljdDJbJ2RlZmF1bHQnXShpbnN0KTtcblxuXHRpbnN0LlZpc2l0b3IgPSBfaGFuZGxlYmFyc0NvbXBpbGVyVmlzaXRvcjJbJ2RlZmF1bHQnXTtcblxuXHRpbnN0WydkZWZhdWx0J10gPSBpbnN0O1xuXG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGluc3Q7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0ZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBmdW5jdGlvbiAob2JqKSB7XG5cdCAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcblx0ICAgIFwiZGVmYXVsdFwiOiBvYmpcblx0ICB9O1xuXHR9O1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbi8qKiovIH0sXG4vKiAyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKVsnZGVmYXVsdCddO1xuXG5cdHZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVsnZGVmYXVsdCddO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cblx0dmFyIF9oYW5kbGViYXJzQmFzZSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cblx0dmFyIGJhc2UgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfaGFuZGxlYmFyc0Jhc2UpO1xuXG5cdC8vIEVhY2ggb2YgdGhlc2UgYXVnbWVudCB0aGUgSGFuZGxlYmFycyBvYmplY3QuIE5vIG5lZWQgdG8gc2V0dXAgaGVyZS5cblx0Ly8gKFRoaXMgaXMgZG9uZSB0byBlYXNpbHkgc2hhcmUgY29kZSBiZXR3ZWVuIGNvbW1vbmpzIGFuZCBicm93c2UgZW52cylcblxuXHR2YXIgX2hhbmRsZWJhcnNTYWZlU3RyaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG5cblx0dmFyIF9oYW5kbGViYXJzU2FmZVN0cmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oYW5kbGViYXJzU2FmZVN0cmluZyk7XG5cblx0dmFyIF9oYW5kbGViYXJzRXhjZXB0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxuXHR2YXIgX2hhbmRsZWJhcnNFeGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFuZGxlYmFyc0V4Y2VwdGlvbik7XG5cblx0dmFyIF9oYW5kbGViYXJzVXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG5cdHZhciBVdGlscyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9oYW5kbGViYXJzVXRpbHMpO1xuXG5cdHZhciBfaGFuZGxlYmFyc1J1bnRpbWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcblxuXHR2YXIgcnVudGltZSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9oYW5kbGViYXJzUnVudGltZSk7XG5cblx0dmFyIF9oYW5kbGViYXJzTm9Db25mbGljdCA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xuXG5cdHZhciBfaGFuZGxlYmFyc05vQ29uZmxpY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFuZGxlYmFyc05vQ29uZmxpY3QpO1xuXG5cdC8vIEZvciBjb21wYXRpYmlsaXR5IGFuZCB1c2FnZSBvdXRzaWRlIG9mIG1vZHVsZSBzeXN0ZW1zLCBtYWtlIHRoZSBIYW5kbGViYXJzIG9iamVjdCBhIG5hbWVzcGFjZVxuXHRmdW5jdGlvbiBjcmVhdGUoKSB7XG5cdCAgdmFyIGhiID0gbmV3IGJhc2UuSGFuZGxlYmFyc0Vudmlyb25tZW50KCk7XG5cblx0ICBVdGlscy5leHRlbmQoaGIsIGJhc2UpO1xuXHQgIGhiLlNhZmVTdHJpbmcgPSBfaGFuZGxlYmFyc1NhZmVTdHJpbmcyWydkZWZhdWx0J107XG5cdCAgaGIuRXhjZXB0aW9uID0gX2hhbmRsZWJhcnNFeGNlcHRpb24yWydkZWZhdWx0J107XG5cdCAgaGIuVXRpbHMgPSBVdGlscztcblx0ICBoYi5lc2NhcGVFeHByZXNzaW9uID0gVXRpbHMuZXNjYXBlRXhwcmVzc2lvbjtcblxuXHQgIGhiLlZNID0gcnVudGltZTtcblx0ICBoYi50ZW1wbGF0ZSA9IGZ1bmN0aW9uIChzcGVjKSB7XG5cdCAgICByZXR1cm4gcnVudGltZS50ZW1wbGF0ZShzcGVjLCBoYik7XG5cdCAgfTtcblxuXHQgIHJldHVybiBoYjtcblx0fVxuXG5cdHZhciBpbnN0ID0gY3JlYXRlKCk7XG5cdGluc3QuY3JlYXRlID0gY3JlYXRlO1xuXG5cdF9oYW5kbGViYXJzTm9Db25mbGljdDJbJ2RlZmF1bHQnXShpbnN0KTtcblxuXHRpbnN0WydkZWZhdWx0J10gPSBpbnN0O1xuXG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGluc3Q7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0ZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBmdW5jdGlvbiAob2JqKSB7XG5cdCAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkge1xuXHQgICAgcmV0dXJuIG9iajtcblx0ICB9IGVsc2Uge1xuXHQgICAgdmFyIG5ld09iaiA9IHt9O1xuXG5cdCAgICBpZiAob2JqICE9IG51bGwpIHtcblx0ICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuXHQgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldO1xuXHQgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7XG5cdCAgICByZXR1cm4gbmV3T2JqO1xuXHQgIH1cblx0fTtcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG4vKioqLyB9LFxuLyogNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVsnZGVmYXVsdCddO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cdGV4cG9ydHMuSGFuZGxlYmFyc0Vudmlyb25tZW50ID0gSGFuZGxlYmFyc0Vudmlyb25tZW50O1xuXG5cdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG5cdHZhciBfZXhjZXB0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxuXHR2YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pO1xuXG5cdHZhciBfaGVscGVycyA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cblx0dmFyIF9kZWNvcmF0b3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cblx0dmFyIF9sb2dnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTtcblxuXHR2YXIgX2xvZ2dlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2dnZXIpO1xuXG5cdHZhciBWRVJTSU9OID0gJzQuMC41Jztcblx0ZXhwb3J0cy5WRVJTSU9OID0gVkVSU0lPTjtcblx0dmFyIENPTVBJTEVSX1JFVklTSU9OID0gNztcblxuXHRleHBvcnRzLkNPTVBJTEVSX1JFVklTSU9OID0gQ09NUElMRVJfUkVWSVNJT047XG5cdHZhciBSRVZJU0lPTl9DSEFOR0VTID0ge1xuXHQgIDE6ICc8PSAxLjAucmMuMicsIC8vIDEuMC5yYy4yIGlzIGFjdHVhbGx5IHJldjIgYnV0IGRvZXNuJ3QgcmVwb3J0IGl0XG5cdCAgMjogJz09IDEuMC4wLXJjLjMnLFxuXHQgIDM6ICc9PSAxLjAuMC1yYy40Jyxcblx0ICA0OiAnPT0gMS54LngnLFxuXHQgIDU6ICc9PSAyLjAuMC1hbHBoYS54Jyxcblx0ICA2OiAnPj0gMi4wLjAtYmV0YS4xJyxcblx0ICA3OiAnPj0gNC4wLjAnXG5cdH07XG5cblx0ZXhwb3J0cy5SRVZJU0lPTl9DSEFOR0VTID0gUkVWSVNJT05fQ0hBTkdFUztcblx0dmFyIG9iamVjdFR5cGUgPSAnW29iamVjdCBPYmplY3RdJztcblxuXHRmdW5jdGlvbiBIYW5kbGViYXJzRW52aXJvbm1lbnQoaGVscGVycywgcGFydGlhbHMsIGRlY29yYXRvcnMpIHtcblx0ICB0aGlzLmhlbHBlcnMgPSBoZWxwZXJzIHx8IHt9O1xuXHQgIHRoaXMucGFydGlhbHMgPSBwYXJ0aWFscyB8fCB7fTtcblx0ICB0aGlzLmRlY29yYXRvcnMgPSBkZWNvcmF0b3JzIHx8IHt9O1xuXG5cdCAgX2hlbHBlcnMucmVnaXN0ZXJEZWZhdWx0SGVscGVycyh0aGlzKTtcblx0ICBfZGVjb3JhdG9ycy5yZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzKHRoaXMpO1xuXHR9XG5cblx0SGFuZGxlYmFyc0Vudmlyb25tZW50LnByb3RvdHlwZSA9IHtcblx0ICBjb25zdHJ1Y3RvcjogSGFuZGxlYmFyc0Vudmlyb25tZW50LFxuXG5cdCAgbG9nZ2VyOiBfbG9nZ2VyMlsnZGVmYXVsdCddLFxuXHQgIGxvZzogX2xvZ2dlcjJbJ2RlZmF1bHQnXS5sb2csXG5cblx0ICByZWdpc3RlckhlbHBlcjogZnVuY3Rpb24gcmVnaXN0ZXJIZWxwZXIobmFtZSwgZm4pIHtcblx0ICAgIGlmIChfdXRpbHMudG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuXHQgICAgICBpZiAoZm4pIHtcblx0ICAgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnQXJnIG5vdCBzdXBwb3J0ZWQgd2l0aCBtdWx0aXBsZSBoZWxwZXJzJyk7XG5cdCAgICAgIH1cblx0ICAgICAgX3V0aWxzLmV4dGVuZCh0aGlzLmhlbHBlcnMsIG5hbWUpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdGhpcy5oZWxwZXJzW25hbWVdID0gZm47XG5cdCAgICB9XG5cdCAgfSxcblx0ICB1bnJlZ2lzdGVySGVscGVyOiBmdW5jdGlvbiB1bnJlZ2lzdGVySGVscGVyKG5hbWUpIHtcblx0ICAgIGRlbGV0ZSB0aGlzLmhlbHBlcnNbbmFtZV07XG5cdCAgfSxcblxuXHQgIHJlZ2lzdGVyUGFydGlhbDogZnVuY3Rpb24gcmVnaXN0ZXJQYXJ0aWFsKG5hbWUsIHBhcnRpYWwpIHtcblx0ICAgIGlmIChfdXRpbHMudG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuXHQgICAgICBfdXRpbHMuZXh0ZW5kKHRoaXMucGFydGlhbHMsIG5hbWUpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgaWYgKHR5cGVvZiBwYXJ0aWFsID09PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdBdHRlbXB0aW5nIHRvIHJlZ2lzdGVyIGEgcGFydGlhbCBjYWxsZWQgXCInICsgbmFtZSArICdcIiBhcyB1bmRlZmluZWQnKTtcblx0ICAgICAgfVxuXHQgICAgICB0aGlzLnBhcnRpYWxzW25hbWVdID0gcGFydGlhbDtcblx0ICAgIH1cblx0ICB9LFxuXHQgIHVucmVnaXN0ZXJQYXJ0aWFsOiBmdW5jdGlvbiB1bnJlZ2lzdGVyUGFydGlhbChuYW1lKSB7XG5cdCAgICBkZWxldGUgdGhpcy5wYXJ0aWFsc1tuYW1lXTtcblx0ICB9LFxuXG5cdCAgcmVnaXN0ZXJEZWNvcmF0b3I6IGZ1bmN0aW9uIHJlZ2lzdGVyRGVjb3JhdG9yKG5hbWUsIGZuKSB7XG5cdCAgICBpZiAoX3V0aWxzLnRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcblx0ICAgICAgaWYgKGZuKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ0FyZyBub3Qgc3VwcG9ydGVkIHdpdGggbXVsdGlwbGUgZGVjb3JhdG9ycycpO1xuXHQgICAgICB9XG5cdCAgICAgIF91dGlscy5leHRlbmQodGhpcy5kZWNvcmF0b3JzLCBuYW1lKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHRoaXMuZGVjb3JhdG9yc1tuYW1lXSA9IGZuO1xuXHQgICAgfVxuXHQgIH0sXG5cdCAgdW5yZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24gdW5yZWdpc3RlckRlY29yYXRvcihuYW1lKSB7XG5cdCAgICBkZWxldGUgdGhpcy5kZWNvcmF0b3JzW25hbWVdO1xuXHQgIH1cblx0fTtcblxuXHR2YXIgbG9nID0gX2xvZ2dlcjJbJ2RlZmF1bHQnXS5sb2c7XG5cblx0ZXhwb3J0cy5sb2cgPSBsb2c7XG5cdGV4cG9ydHMuY3JlYXRlRnJhbWUgPSBfdXRpbHMuY3JlYXRlRnJhbWU7XG5cdGV4cG9ydHMubG9nZ2VyID0gX2xvZ2dlcjJbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHRleHBvcnRzLmV4dGVuZCA9IGV4dGVuZDtcblx0ZXhwb3J0cy5pbmRleE9mID0gaW5kZXhPZjtcblx0ZXhwb3J0cy5lc2NhcGVFeHByZXNzaW9uID0gZXNjYXBlRXhwcmVzc2lvbjtcblx0ZXhwb3J0cy5pc0VtcHR5ID0gaXNFbXB0eTtcblx0ZXhwb3J0cy5jcmVhdGVGcmFtZSA9IGNyZWF0ZUZyYW1lO1xuXHRleHBvcnRzLmJsb2NrUGFyYW1zID0gYmxvY2tQYXJhbXM7XG5cdGV4cG9ydHMuYXBwZW5kQ29udGV4dFBhdGggPSBhcHBlbmRDb250ZXh0UGF0aDtcblx0dmFyIGVzY2FwZSA9IHtcblx0ICAnJic6ICcmYW1wOycsXG5cdCAgJzwnOiAnJmx0OycsXG5cdCAgJz4nOiAnJmd0OycsXG5cdCAgJ1wiJzogJyZxdW90OycsXG5cdCAgXCInXCI6ICcmI3gyNzsnLFxuXHQgICdgJzogJyYjeDYwOycsXG5cdCAgJz0nOiAnJiN4M0Q7J1xuXHR9O1xuXG5cdHZhciBiYWRDaGFycyA9IC9bJjw+XCInYD1dL2csXG5cdCAgICBwb3NzaWJsZSA9IC9bJjw+XCInYD1dLztcblxuXHRmdW5jdGlvbiBlc2NhcGVDaGFyKGNocikge1xuXHQgIHJldHVybiBlc2NhcGVbY2hyXTtcblx0fVxuXG5cdGZ1bmN0aW9uIGV4dGVuZChvYmogLyogLCAuLi5zb3VyY2UgKi8pIHtcblx0ICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHQgICAgZm9yICh2YXIga2V5IGluIGFyZ3VtZW50c1tpXSkge1xuXHQgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFyZ3VtZW50c1tpXSwga2V5KSkge1xuXHQgICAgICAgIG9ialtrZXldID0gYXJndW1lbnRzW2ldW2tleV07XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cblx0ICByZXR1cm4gb2JqO1xuXHR9XG5cblx0dmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuXHRleHBvcnRzLnRvU3RyaW5nID0gdG9TdHJpbmc7XG5cdC8vIFNvdXJjZWQgZnJvbSBsb2Rhc2hcblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL2xvZGFzaC9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dFxuXHQvKiBlc2xpbnQtZGlzYWJsZSBmdW5jLXN0eWxlICovXG5cdHZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuXHQgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG5cdH07XG5cdC8vIGZhbGxiYWNrIGZvciBvbGRlciB2ZXJzaW9ucyBvZiBDaHJvbWUgYW5kIFNhZmFyaVxuXHQvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHRpZiAoaXNGdW5jdGlvbigveC8pKSB7XG5cdCAgZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblx0ICB9O1xuXHR9XG5cdGV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cblx0LyogZXNsaW50LWVuYWJsZSBmdW5jLXN0eWxlICovXG5cblx0LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0dmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnID8gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEFycmF5XScgOiBmYWxzZTtcblx0fTtcblxuXHRleHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXHQvLyBPbGRlciBJRSB2ZXJzaW9ucyBkbyBub3QgZGlyZWN0bHkgc3VwcG9ydCBpbmRleE9mIHNvIHdlIG11c3QgaW1wbGVtZW50IG91ciBvd24sIHNhZGx5LlxuXG5cdGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG5cdCAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICBpZiAoYXJyYXlbaV0gPT09IHZhbHVlKSB7XG5cdCAgICAgIHJldHVybiBpO1xuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gLTE7XG5cdH1cblxuXHRmdW5jdGlvbiBlc2NhcGVFeHByZXNzaW9uKHN0cmluZykge1xuXHQgIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuXHQgICAgLy8gZG9uJ3QgZXNjYXBlIFNhZmVTdHJpbmdzLCBzaW5jZSB0aGV5J3JlIGFscmVhZHkgc2FmZVxuXHQgICAgaWYgKHN0cmluZyAmJiBzdHJpbmcudG9IVE1MKSB7XG5cdCAgICAgIHJldHVybiBzdHJpbmcudG9IVE1MKCk7XG5cdCAgICB9IGVsc2UgaWYgKHN0cmluZyA9PSBudWxsKSB7XG5cdCAgICAgIHJldHVybiAnJztcblx0ICAgIH0gZWxzZSBpZiAoIXN0cmluZykge1xuXHQgICAgICByZXR1cm4gc3RyaW5nICsgJyc7XG5cdCAgICB9XG5cblx0ICAgIC8vIEZvcmNlIGEgc3RyaW5nIGNvbnZlcnNpb24gYXMgdGhpcyB3aWxsIGJlIGRvbmUgYnkgdGhlIGFwcGVuZCByZWdhcmRsZXNzIGFuZFxuXHQgICAgLy8gdGhlIHJlZ2V4IHRlc3Qgd2lsbCBkbyB0aGlzIHRyYW5zcGFyZW50bHkgYmVoaW5kIHRoZSBzY2VuZXMsIGNhdXNpbmcgaXNzdWVzIGlmXG5cdCAgICAvLyBhbiBvYmplY3QncyB0byBzdHJpbmcgaGFzIGVzY2FwZWQgY2hhcmFjdGVycyBpbiBpdC5cblx0ICAgIHN0cmluZyA9ICcnICsgc3RyaW5nO1xuXHQgIH1cblxuXHQgIGlmICghcG9zc2libGUudGVzdChzdHJpbmcpKSB7XG5cdCAgICByZXR1cm4gc3RyaW5nO1xuXHQgIH1cblx0ICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoYmFkQ2hhcnMsIGVzY2FwZUNoYXIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuXHQgIGlmICghdmFsdWUgJiYgdmFsdWUgIT09IDApIHtcblx0ICAgIHJldHVybiB0cnVlO1xuXHQgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAwKSB7XG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9IGVsc2Uge1xuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZUZyYW1lKG9iamVjdCkge1xuXHQgIHZhciBmcmFtZSA9IGV4dGVuZCh7fSwgb2JqZWN0KTtcblx0ICBmcmFtZS5fcGFyZW50ID0gb2JqZWN0O1xuXHQgIHJldHVybiBmcmFtZTtcblx0fVxuXG5cdGZ1bmN0aW9uIGJsb2NrUGFyYW1zKHBhcmFtcywgaWRzKSB7XG5cdCAgcGFyYW1zLnBhdGggPSBpZHM7XG5cdCAgcmV0dXJuIHBhcmFtcztcblx0fVxuXG5cdGZ1bmN0aW9uIGFwcGVuZENvbnRleHRQYXRoKGNvbnRleHRQYXRoLCBpZCkge1xuXHQgIHJldHVybiAoY29udGV4dFBhdGggPyBjb250ZXh0UGF0aCArICcuJyA6ICcnKSArIGlkO1xuXHR9XG5cbi8qKiovIH0sXG4vKiA2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuXHR2YXIgZXJyb3JQcm9wcyA9IFsnZGVzY3JpcHRpb24nLCAnZmlsZU5hbWUnLCAnbGluZU51bWJlcicsICdtZXNzYWdlJywgJ25hbWUnLCAnbnVtYmVyJywgJ3N0YWNrJ107XG5cblx0ZnVuY3Rpb24gRXhjZXB0aW9uKG1lc3NhZ2UsIG5vZGUpIHtcblx0ICB2YXIgbG9jID0gbm9kZSAmJiBub2RlLmxvYyxcblx0ICAgICAgbGluZSA9IHVuZGVmaW5lZCxcblx0ICAgICAgY29sdW1uID0gdW5kZWZpbmVkO1xuXHQgIGlmIChsb2MpIHtcblx0ICAgIGxpbmUgPSBsb2Muc3RhcnQubGluZTtcblx0ICAgIGNvbHVtbiA9IGxvYy5zdGFydC5jb2x1bW47XG5cblx0ICAgIG1lc3NhZ2UgKz0gJyAtICcgKyBsaW5lICsgJzonICsgY29sdW1uO1xuXHQgIH1cblxuXHQgIHZhciB0bXAgPSBFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBtZXNzYWdlKTtcblxuXHQgIC8vIFVuZm9ydHVuYXRlbHkgZXJyb3JzIGFyZSBub3QgZW51bWVyYWJsZSBpbiBDaHJvbWUgKGF0IGxlYXN0KSwgc28gYGZvciBwcm9wIGluIHRtcGAgZG9lc24ndCB3b3JrLlxuXHQgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGVycm9yUHJvcHMubGVuZ3RoOyBpZHgrKykge1xuXHQgICAgdGhpc1tlcnJvclByb3BzW2lkeF1dID0gdG1wW2Vycm9yUHJvcHNbaWR4XV07XG5cdCAgfVxuXG5cdCAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cblx0ICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcblx0ICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEV4Y2VwdGlvbik7XG5cdCAgfVxuXG5cdCAgaWYgKGxvYykge1xuXHQgICAgdGhpcy5saW5lTnVtYmVyID0gbGluZTtcblx0ICAgIHRoaXMuY29sdW1uID0gY29sdW1uO1xuXHQgIH1cblx0fVxuXG5cdEV4Y2VwdGlvbi5wcm90b3R5cGUgPSBuZXcgRXJyb3IoKTtcblxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBFeGNlcHRpb247XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVsnZGVmYXVsdCddO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cdGV4cG9ydHMucmVnaXN0ZXJEZWZhdWx0SGVscGVycyA9IHJlZ2lzdGVyRGVmYXVsdEhlbHBlcnM7XG5cblx0dmFyIF9oZWxwZXJzQmxvY2tIZWxwZXJNaXNzaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxuXHR2YXIgX2hlbHBlcnNCbG9ja0hlbHBlck1pc3NpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGVscGVyc0Jsb2NrSGVscGVyTWlzc2luZyk7XG5cblx0dmFyIF9oZWxwZXJzRWFjaCA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cblx0dmFyIF9oZWxwZXJzRWFjaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oZWxwZXJzRWFjaCk7XG5cblx0dmFyIF9oZWxwZXJzSGVscGVyTWlzc2luZyA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG5cdHZhciBfaGVscGVyc0hlbHBlck1pc3NpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGVscGVyc0hlbHBlck1pc3NpbmcpO1xuXG5cdHZhciBfaGVscGVyc0lmID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cblx0dmFyIF9oZWxwZXJzSWYyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGVscGVyc0lmKTtcblxuXHR2YXIgX2hlbHBlcnNMb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblxuXHR2YXIgX2hlbHBlcnNMb2cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGVscGVyc0xvZyk7XG5cblx0dmFyIF9oZWxwZXJzTG9va3VwID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cblx0dmFyIF9oZWxwZXJzTG9va3VwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnNMb29rdXApO1xuXG5cdHZhciBfaGVscGVyc1dpdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcblxuXHR2YXIgX2hlbHBlcnNXaXRoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnNXaXRoKTtcblxuXHRmdW5jdGlvbiByZWdpc3RlckRlZmF1bHRIZWxwZXJzKGluc3RhbmNlKSB7XG5cdCAgX2hlbHBlcnNCbG9ja0hlbHBlck1pc3NpbmcyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xuXHQgIF9oZWxwZXJzRWFjaDJbJ2RlZmF1bHQnXShpbnN0YW5jZSk7XG5cdCAgX2hlbHBlcnNIZWxwZXJNaXNzaW5nMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcblx0ICBfaGVscGVyc0lmMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcblx0ICBfaGVscGVyc0xvZzJbJ2RlZmF1bHQnXShpbnN0YW5jZSk7XG5cdCAgX2hlbHBlcnNMb29rdXAyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xuXHQgIF9oZWxwZXJzV2l0aDJbJ2RlZmF1bHQnXShpbnN0YW5jZSk7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5cdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuXHQgIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdibG9ja0hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbiAoY29udGV4dCwgb3B0aW9ucykge1xuXHQgICAgdmFyIGludmVyc2UgPSBvcHRpb25zLmludmVyc2UsXG5cdCAgICAgICAgZm4gPSBvcHRpb25zLmZuO1xuXG5cdCAgICBpZiAoY29udGV4dCA9PT0gdHJ1ZSkge1xuXHQgICAgICByZXR1cm4gZm4odGhpcyk7XG5cdCAgICB9IGVsc2UgaWYgKGNvbnRleHQgPT09IGZhbHNlIHx8IGNvbnRleHQgPT0gbnVsbCkge1xuXHQgICAgICByZXR1cm4gaW52ZXJzZSh0aGlzKTtcblx0ICAgIH0gZWxzZSBpZiAoX3V0aWxzLmlzQXJyYXkoY29udGV4dCkpIHtcblx0ICAgICAgaWYgKGNvbnRleHQubGVuZ3RoID4gMCkge1xuXHQgICAgICAgIGlmIChvcHRpb25zLmlkcykge1xuXHQgICAgICAgICAgb3B0aW9ucy5pZHMgPSBbb3B0aW9ucy5uYW1lXTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4gaW5zdGFuY2UuaGVscGVycy5lYWNoKGNvbnRleHQsIG9wdGlvbnMpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG5cdCAgICAgICAgdmFyIGRhdGEgPSBfdXRpbHMuY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcblx0ICAgICAgICBkYXRhLmNvbnRleHRQYXRoID0gX3V0aWxzLmFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5uYW1lKTtcblx0ICAgICAgICBvcHRpb25zID0geyBkYXRhOiBkYXRhIH07XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gZm4oY29udGV4dCwgb3B0aW9ucyk7XG5cdCAgICB9XG5cdCAgfSk7XG5cdH07XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiA5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpWydkZWZhdWx0J107XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuXHR2YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxuXHR2YXIgX2V4Y2VwdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cblx0dmFyIF9leGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhjZXB0aW9uKTtcblxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcblx0ICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignZWFjaCcsIGZ1bmN0aW9uIChjb250ZXh0LCBvcHRpb25zKSB7XG5cdCAgICBpZiAoIW9wdGlvbnMpIHtcblx0ICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ011c3QgcGFzcyBpdGVyYXRvciB0byAjZWFjaCcpO1xuXHQgICAgfVxuXG5cdCAgICB2YXIgZm4gPSBvcHRpb25zLmZuLFxuXHQgICAgICAgIGludmVyc2UgPSBvcHRpb25zLmludmVyc2UsXG5cdCAgICAgICAgaSA9IDAsXG5cdCAgICAgICAgcmV0ID0gJycsXG5cdCAgICAgICAgZGF0YSA9IHVuZGVmaW5lZCxcblx0ICAgICAgICBjb250ZXh0UGF0aCA9IHVuZGVmaW5lZDtcblxuXHQgICAgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmlkcykge1xuXHQgICAgICBjb250ZXh0UGF0aCA9IF91dGlscy5hcHBlbmRDb250ZXh0UGF0aChvcHRpb25zLmRhdGEuY29udGV4dFBhdGgsIG9wdGlvbnMuaWRzWzBdKSArICcuJztcblx0ICAgIH1cblxuXHQgICAgaWYgKF91dGlscy5pc0Z1bmN0aW9uKGNvbnRleHQpKSB7XG5cdCAgICAgIGNvbnRleHQgPSBjb250ZXh0LmNhbGwodGhpcyk7XG5cdCAgICB9XG5cblx0ICAgIGlmIChvcHRpb25zLmRhdGEpIHtcblx0ICAgICAgZGF0YSA9IF91dGlscy5jcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBleGVjSXRlcmF0aW9uKGZpZWxkLCBpbmRleCwgbGFzdCkge1xuXHQgICAgICBpZiAoZGF0YSkge1xuXHQgICAgICAgIGRhdGEua2V5ID0gZmllbGQ7XG5cdCAgICAgICAgZGF0YS5pbmRleCA9IGluZGV4O1xuXHQgICAgICAgIGRhdGEuZmlyc3QgPSBpbmRleCA9PT0gMDtcblx0ICAgICAgICBkYXRhLmxhc3QgPSAhIWxhc3Q7XG5cblx0ICAgICAgICBpZiAoY29udGV4dFBhdGgpIHtcblx0ICAgICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBjb250ZXh0UGF0aCArIGZpZWxkO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXG5cdCAgICAgIHJldCA9IHJldCArIGZuKGNvbnRleHRbZmllbGRdLCB7XG5cdCAgICAgICAgZGF0YTogZGF0YSxcblx0ICAgICAgICBibG9ja1BhcmFtczogX3V0aWxzLmJsb2NrUGFyYW1zKFtjb250ZXh0W2ZpZWxkXSwgZmllbGRdLCBbY29udGV4dFBhdGggKyBmaWVsZCwgbnVsbF0pXG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoY29udGV4dCAmJiB0eXBlb2YgY29udGV4dCA9PT0gJ29iamVjdCcpIHtcblx0ICAgICAgaWYgKF91dGlscy5pc0FycmF5KGNvbnRleHQpKSB7XG5cdCAgICAgICAgZm9yICh2YXIgaiA9IGNvbnRleHQubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG5cdCAgICAgICAgICBpZiAoaSBpbiBjb250ZXh0KSB7XG5cdCAgICAgICAgICAgIGV4ZWNJdGVyYXRpb24oaSwgaSwgaSA9PT0gY29udGV4dC5sZW5ndGggLSAxKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdmFyIHByaW9yS2V5ID0gdW5kZWZpbmVkO1xuXG5cdCAgICAgICAgZm9yICh2YXIga2V5IGluIGNvbnRleHQpIHtcblx0ICAgICAgICAgIGlmIChjb250ZXh0Lmhhc093blByb3BlcnR5KGtleSkpIHtcblx0ICAgICAgICAgICAgLy8gV2UncmUgcnVubmluZyB0aGUgaXRlcmF0aW9ucyBvbmUgc3RlcCBvdXQgb2Ygc3luYyBzbyB3ZSBjYW4gZGV0ZWN0XG5cdCAgICAgICAgICAgIC8vIHRoZSBsYXN0IGl0ZXJhdGlvbiB3aXRob3V0IGhhdmUgdG8gc2NhbiB0aGUgb2JqZWN0IHR3aWNlIGFuZCBjcmVhdGVcblx0ICAgICAgICAgICAgLy8gYW4gaXRlcm1lZGlhdGUga2V5cyBhcnJheS5cblx0ICAgICAgICAgICAgaWYgKHByaW9yS2V5ICE9PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcHJpb3JLZXkgPSBrZXk7XG5cdCAgICAgICAgICAgIGkrKztcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHByaW9yS2V5ICE9PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgIGV4ZWNJdGVyYXRpb24ocHJpb3JLZXksIGkgLSAxLCB0cnVlKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgaWYgKGkgPT09IDApIHtcblx0ICAgICAgcmV0ID0gaW52ZXJzZSh0aGlzKTtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHJldDtcblx0ICB9KTtcblx0fTtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDEwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpWydkZWZhdWx0J107XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuXHR2YXIgX2V4Y2VwdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cblx0dmFyIF9leGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhjZXB0aW9uKTtcblxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcblx0ICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignaGVscGVyTWlzc2luZycsIGZ1bmN0aW9uICgpIC8qIFthcmdzLCBdb3B0aW9ucyAqL3tcblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG5cdCAgICAgIC8vIEEgbWlzc2luZyBmaWVsZCBpbiBhIHt7Zm9vfX0gY29uc3RydWN0LlxuXHQgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgLy8gU29tZW9uZSBpcyBhY3R1YWxseSB0cnlpbmcgdG8gY2FsbCBzb21ldGhpbmcsIGJsb3cgdXAuXG5cdCAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdNaXNzaW5nIGhlbHBlcjogXCInICsgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXS5uYW1lICsgJ1wiJyk7XG5cdCAgICB9XG5cdCAgfSk7XG5cdH07XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAxMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cblx0dmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cblx0ZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG5cdCAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2lmJywgZnVuY3Rpb24gKGNvbmRpdGlvbmFsLCBvcHRpb25zKSB7XG5cdCAgICBpZiAoX3V0aWxzLmlzRnVuY3Rpb24oY29uZGl0aW9uYWwpKSB7XG5cdCAgICAgIGNvbmRpdGlvbmFsID0gY29uZGl0aW9uYWwuY2FsbCh0aGlzKTtcblx0ICAgIH1cblxuXHQgICAgLy8gRGVmYXVsdCBiZWhhdmlvciBpcyB0byByZW5kZXIgdGhlIHBvc2l0aXZlIHBhdGggaWYgdGhlIHZhbHVlIGlzIHRydXRoeSBhbmQgbm90IGVtcHR5LlxuXHQgICAgLy8gVGhlIGBpbmNsdWRlWmVyb2Agb3B0aW9uIG1heSBiZSBzZXQgdG8gdHJlYXQgdGhlIGNvbmR0aW9uYWwgYXMgcHVyZWx5IG5vdCBlbXB0eSBiYXNlZCBvbiB0aGVcblx0ICAgIC8vIGJlaGF2aW9yIG9mIGlzRW1wdHkuIEVmZmVjdGl2ZWx5IHRoaXMgZGV0ZXJtaW5lcyBpZiAwIGlzIGhhbmRsZWQgYnkgdGhlIHBvc2l0aXZlIHBhdGggb3IgbmVnYXRpdmUuXG5cdCAgICBpZiAoIW9wdGlvbnMuaGFzaC5pbmNsdWRlWmVybyAmJiAhY29uZGl0aW9uYWwgfHwgX3V0aWxzLmlzRW1wdHkoY29uZGl0aW9uYWwpKSB7XG5cdCAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gb3B0aW9ucy5mbih0aGlzKTtcblx0ICAgIH1cblx0ICB9KTtcblxuXHQgIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCd1bmxlc3MnLCBmdW5jdGlvbiAoY29uZGl0aW9uYWwsIG9wdGlvbnMpIHtcblx0ICAgIHJldHVybiBpbnN0YW5jZS5oZWxwZXJzWydpZiddLmNhbGwodGhpcywgY29uZGl0aW9uYWwsIHsgZm46IG9wdGlvbnMuaW52ZXJzZSwgaW52ZXJzZTogb3B0aW9ucy5mbiwgaGFzaDogb3B0aW9ucy5oYXNoIH0pO1xuXHQgIH0pO1xuXHR9O1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMTIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuXHQgIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdsb2cnLCBmdW5jdGlvbiAoKSAvKiBtZXNzYWdlLCBvcHRpb25zICove1xuXHQgICAgdmFyIGFyZ3MgPSBbdW5kZWZpbmVkXSxcblx0ICAgICAgICBvcHRpb25zID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkrKykge1xuXHQgICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcblx0ICAgIH1cblxuXHQgICAgdmFyIGxldmVsID0gMTtcblx0ICAgIGlmIChvcHRpb25zLmhhc2gubGV2ZWwgIT0gbnVsbCkge1xuXHQgICAgICBsZXZlbCA9IG9wdGlvbnMuaGFzaC5sZXZlbDtcblx0ICAgIH0gZWxzZSBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuZGF0YS5sZXZlbCAhPSBudWxsKSB7XG5cdCAgICAgIGxldmVsID0gb3B0aW9ucy5kYXRhLmxldmVsO1xuXHQgICAgfVxuXHQgICAgYXJnc1swXSA9IGxldmVsO1xuXG5cdCAgICBpbnN0YW5jZS5sb2cuYXBwbHkoaW5zdGFuY2UsIGFyZ3MpO1xuXHQgIH0pO1xuXHR9O1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMTMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuXHQgIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdsb29rdXAnLCBmdW5jdGlvbiAob2JqLCBmaWVsZCkge1xuXHQgICAgcmV0dXJuIG9iaiAmJiBvYmpbZmllbGRdO1xuXHQgIH0pO1xuXHR9O1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMTQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5cdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuXHQgIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCd3aXRoJywgZnVuY3Rpb24gKGNvbnRleHQsIG9wdGlvbnMpIHtcblx0ICAgIGlmIChfdXRpbHMuaXNGdW5jdGlvbihjb250ZXh0KSkge1xuXHQgICAgICBjb250ZXh0ID0gY29udGV4dC5jYWxsKHRoaXMpO1xuXHQgICAgfVxuXG5cdCAgICB2YXIgZm4gPSBvcHRpb25zLmZuO1xuXG5cdCAgICBpZiAoIV91dGlscy5pc0VtcHR5KGNvbnRleHQpKSB7XG5cdCAgICAgIHZhciBkYXRhID0gb3B0aW9ucy5kYXRhO1xuXHQgICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG5cdCAgICAgICAgZGF0YSA9IF91dGlscy5jcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuXHQgICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBfdXRpbHMuYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLmlkc1swXSk7XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gZm4oY29udGV4dCwge1xuXHQgICAgICAgIGRhdGE6IGRhdGEsXG5cdCAgICAgICAgYmxvY2tQYXJhbXM6IF91dGlscy5ibG9ja1BhcmFtcyhbY29udGV4dF0sIFtkYXRhICYmIGRhdGEuY29udGV4dFBhdGhdKVxuXHQgICAgICB9KTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG5cdCAgICB9XG5cdCAgfSk7XG5cdH07XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAxNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVsnZGVmYXVsdCddO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cdGV4cG9ydHMucmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyA9IHJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnM7XG5cblx0dmFyIF9kZWNvcmF0b3JzSW5saW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cblx0dmFyIF9kZWNvcmF0b3JzSW5saW5lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlY29yYXRvcnNJbmxpbmUpO1xuXG5cdGZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnMoaW5zdGFuY2UpIHtcblx0ICBfZGVjb3JhdG9yc0lubGluZTJbJ2RlZmF1bHQnXShpbnN0YW5jZSk7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDE2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuXHR2YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcblx0ICBpbnN0YW5jZS5yZWdpc3RlckRlY29yYXRvcignaW5saW5lJywgZnVuY3Rpb24gKGZuLCBwcm9wcywgY29udGFpbmVyLCBvcHRpb25zKSB7XG5cdCAgICB2YXIgcmV0ID0gZm47XG5cdCAgICBpZiAoIXByb3BzLnBhcnRpYWxzKSB7XG5cdCAgICAgIHByb3BzLnBhcnRpYWxzID0ge307XG5cdCAgICAgIHJldCA9IGZ1bmN0aW9uIChjb250ZXh0LCBvcHRpb25zKSB7XG5cdCAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IHBhcnRpYWxzIHN0YWNrIGZyYW1lIHByaW9yIHRvIGV4ZWMuXG5cdCAgICAgICAgdmFyIG9yaWdpbmFsID0gY29udGFpbmVyLnBhcnRpYWxzO1xuXHQgICAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IF91dGlscy5leHRlbmQoe30sIG9yaWdpbmFsLCBwcm9wcy5wYXJ0aWFscyk7XG5cdCAgICAgICAgdmFyIHJldCA9IGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuXHQgICAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IG9yaWdpbmFsO1xuXHQgICAgICAgIHJldHVybiByZXQ7XG5cdCAgICAgIH07XG5cdCAgICB9XG5cblx0ICAgIHByb3BzLnBhcnRpYWxzW29wdGlvbnMuYXJnc1swXV0gPSBvcHRpb25zLmZuO1xuXG5cdCAgICByZXR1cm4gcmV0O1xuXHQgIH0pO1xuXHR9O1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMTcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5cdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG5cdHZhciBsb2dnZXIgPSB7XG5cdCAgbWV0aG9kTWFwOiBbJ2RlYnVnJywgJ2luZm8nLCAnd2FybicsICdlcnJvciddLFxuXHQgIGxldmVsOiAnaW5mbycsXG5cblx0ICAvLyBNYXBzIGEgZ2l2ZW4gbGV2ZWwgdmFsdWUgdG8gdGhlIGBtZXRob2RNYXBgIGluZGV4ZXMgYWJvdmUuXG5cdCAgbG9va3VwTGV2ZWw6IGZ1bmN0aW9uIGxvb2t1cExldmVsKGxldmVsKSB7XG5cdCAgICBpZiAodHlwZW9mIGxldmVsID09PSAnc3RyaW5nJykge1xuXHQgICAgICB2YXIgbGV2ZWxNYXAgPSBfdXRpbHMuaW5kZXhPZihsb2dnZXIubWV0aG9kTWFwLCBsZXZlbC50b0xvd2VyQ2FzZSgpKTtcblx0ICAgICAgaWYgKGxldmVsTWFwID49IDApIHtcblx0ICAgICAgICBsZXZlbCA9IGxldmVsTWFwO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGxldmVsID0gcGFyc2VJbnQobGV2ZWwsIDEwKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gbGV2ZWw7XG5cdCAgfSxcblxuXHQgIC8vIENhbiBiZSBvdmVycmlkZGVuIGluIHRoZSBob3N0IGVudmlyb25tZW50XG5cdCAgbG9nOiBmdW5jdGlvbiBsb2cobGV2ZWwpIHtcblx0ICAgIGxldmVsID0gbG9nZ2VyLmxvb2t1cExldmVsKGxldmVsKTtcblxuXHQgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBsb2dnZXIubG9va3VwTGV2ZWwobG9nZ2VyLmxldmVsKSA8PSBsZXZlbCkge1xuXHQgICAgICB2YXIgbWV0aG9kID0gbG9nZ2VyLm1ldGhvZE1hcFtsZXZlbF07XG5cdCAgICAgIGlmICghY29uc29sZVttZXRob2RdKSB7XG5cdCAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG5cdCAgICAgICAgbWV0aG9kID0gJ2xvZyc7XG5cdCAgICAgIH1cblxuXHQgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWVzc2FnZSA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcblx0ICAgICAgICBtZXNzYWdlW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGNvbnNvbGVbbWV0aG9kXS5hcHBseShjb25zb2xlLCBtZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG5cdCAgICB9XG5cdCAgfVxuXHR9O1xuXG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGxvZ2dlcjtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAxOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0Ly8gQnVpbGQgb3V0IG91ciBiYXNpYyBTYWZlU3RyaW5nIHR5cGVcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cdGZ1bmN0aW9uIFNhZmVTdHJpbmcoc3RyaW5nKSB7XG5cdCAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG5cdH1cblxuXHRTYWZlU3RyaW5nLnByb3RvdHlwZS50b1N0cmluZyA9IFNhZmVTdHJpbmcucHJvdG90eXBlLnRvSFRNTCA9IGZ1bmN0aW9uICgpIHtcblx0ICByZXR1cm4gJycgKyB0aGlzLnN0cmluZztcblx0fTtcblxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBTYWZlU3RyaW5nO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDE5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKVsnZGVmYXVsdCddO1xuXG5cdHZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVsnZGVmYXVsdCddO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cdGV4cG9ydHMuY2hlY2tSZXZpc2lvbiA9IGNoZWNrUmV2aXNpb247XG5cdGV4cG9ydHMudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcblx0ZXhwb3J0cy53cmFwUHJvZ3JhbSA9IHdyYXBQcm9ncmFtO1xuXHRleHBvcnRzLnJlc29sdmVQYXJ0aWFsID0gcmVzb2x2ZVBhcnRpYWw7XG5cdGV4cG9ydHMuaW52b2tlUGFydGlhbCA9IGludm9rZVBhcnRpYWw7XG5cdGV4cG9ydHMubm9vcCA9IG5vb3A7XG5cblx0dmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cblx0dmFyIFV0aWxzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX3V0aWxzKTtcblxuXHR2YXIgX2V4Y2VwdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cblx0dmFyIF9leGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhjZXB0aW9uKTtcblxuXHR2YXIgX2Jhc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5cdGZ1bmN0aW9uIGNoZWNrUmV2aXNpb24oY29tcGlsZXJJbmZvKSB7XG5cdCAgdmFyIGNvbXBpbGVyUmV2aXNpb24gPSBjb21waWxlckluZm8gJiYgY29tcGlsZXJJbmZvWzBdIHx8IDEsXG5cdCAgICAgIGN1cnJlbnRSZXZpc2lvbiA9IF9iYXNlLkNPTVBJTEVSX1JFVklTSU9OO1xuXG5cdCAgaWYgKGNvbXBpbGVyUmV2aXNpb24gIT09IGN1cnJlbnRSZXZpc2lvbikge1xuXHQgICAgaWYgKGNvbXBpbGVyUmV2aXNpb24gPCBjdXJyZW50UmV2aXNpb24pIHtcblx0ICAgICAgdmFyIHJ1bnRpbWVWZXJzaW9ucyA9IF9iYXNlLlJFVklTSU9OX0NIQU5HRVNbY3VycmVudFJldmlzaW9uXSxcblx0ICAgICAgICAgIGNvbXBpbGVyVmVyc2lvbnMgPSBfYmFzZS5SRVZJU0lPTl9DSEFOR0VTW2NvbXBpbGVyUmV2aXNpb25dO1xuXHQgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVGVtcGxhdGUgd2FzIHByZWNvbXBpbGVkIHdpdGggYW4gb2xkZXIgdmVyc2lvbiBvZiBIYW5kbGViYXJzIHRoYW4gdGhlIGN1cnJlbnQgcnVudGltZS4gJyArICdQbGVhc2UgdXBkYXRlIHlvdXIgcHJlY29tcGlsZXIgdG8gYSBuZXdlciB2ZXJzaW9uICgnICsgcnVudGltZVZlcnNpb25zICsgJykgb3IgZG93bmdyYWRlIHlvdXIgcnVudGltZSB0byBhbiBvbGRlciB2ZXJzaW9uICgnICsgY29tcGlsZXJWZXJzaW9ucyArICcpLicpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgLy8gVXNlIHRoZSBlbWJlZGRlZCB2ZXJzaW9uIGluZm8gc2luY2UgdGhlIHJ1bnRpbWUgZG9lc24ndCBrbm93IGFib3V0IHRoaXMgcmV2aXNpb24geWV0XG5cdCAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdUZW1wbGF0ZSB3YXMgcHJlY29tcGlsZWQgd2l0aCBhIG5ld2VyIHZlcnNpb24gb2YgSGFuZGxlYmFycyB0aGFuIHRoZSBjdXJyZW50IHJ1bnRpbWUuICcgKyAnUGxlYXNlIHVwZGF0ZSB5b3VyIHJ1bnRpbWUgdG8gYSBuZXdlciB2ZXJzaW9uICgnICsgY29tcGlsZXJJbmZvWzFdICsgJykuJyk7XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cblx0ZnVuY3Rpb24gdGVtcGxhdGUodGVtcGxhdGVTcGVjLCBlbnYpIHtcblx0ICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHQgIGlmICghZW52KSB7XG5cdCAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnTm8gZW52aXJvbm1lbnQgcGFzc2VkIHRvIHRlbXBsYXRlJyk7XG5cdCAgfVxuXHQgIGlmICghdGVtcGxhdGVTcGVjIHx8ICF0ZW1wbGF0ZVNwZWMubWFpbikge1xuXHQgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1Vua25vd24gdGVtcGxhdGUgb2JqZWN0OiAnICsgdHlwZW9mIHRlbXBsYXRlU3BlYyk7XG5cdCAgfVxuXG5cdCAgdGVtcGxhdGVTcGVjLm1haW4uZGVjb3JhdG9yID0gdGVtcGxhdGVTcGVjLm1haW5fZDtcblxuXHQgIC8vIE5vdGU6IFVzaW5nIGVudi5WTSByZWZlcmVuY2VzIHJhdGhlciB0aGFuIGxvY2FsIHZhciByZWZlcmVuY2VzIHRocm91Z2hvdXQgdGhpcyBzZWN0aW9uIHRvIGFsbG93XG5cdCAgLy8gZm9yIGV4dGVybmFsIHVzZXJzIHRvIG92ZXJyaWRlIHRoZXNlIGFzIHBzdWVkby1zdXBwb3J0ZWQgQVBJcy5cblx0ICBlbnYuVk0uY2hlY2tSZXZpc2lvbih0ZW1wbGF0ZVNwZWMuY29tcGlsZXIpO1xuXG5cdCAgZnVuY3Rpb24gaW52b2tlUGFydGlhbFdyYXBwZXIocGFydGlhbCwgY29udGV4dCwgb3B0aW9ucykge1xuXHQgICAgaWYgKG9wdGlvbnMuaGFzaCkge1xuXHQgICAgICBjb250ZXh0ID0gVXRpbHMuZXh0ZW5kKHt9LCBjb250ZXh0LCBvcHRpb25zLmhhc2gpO1xuXHQgICAgICBpZiAob3B0aW9ucy5pZHMpIHtcblx0ICAgICAgICBvcHRpb25zLmlkc1swXSA9IHRydWU7XG5cdCAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgcGFydGlhbCA9IGVudi5WTS5yZXNvbHZlUGFydGlhbC5jYWxsKHRoaXMsIHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpO1xuXHQgICAgdmFyIHJlc3VsdCA9IGVudi5WTS5pbnZva2VQYXJ0aWFsLmNhbGwodGhpcywgcGFydGlhbCwgY29udGV4dCwgb3B0aW9ucyk7XG5cblx0ICAgIGlmIChyZXN1bHQgPT0gbnVsbCAmJiBlbnYuY29tcGlsZSkge1xuXHQgICAgICBvcHRpb25zLnBhcnRpYWxzW29wdGlvbnMubmFtZV0gPSBlbnYuY29tcGlsZShwYXJ0aWFsLCB0ZW1wbGF0ZVNwZWMuY29tcGlsZXJPcHRpb25zLCBlbnYpO1xuXHQgICAgICByZXN1bHQgPSBvcHRpb25zLnBhcnRpYWxzW29wdGlvbnMubmFtZV0oY29udGV4dCwgb3B0aW9ucyk7XG5cdCAgICB9XG5cdCAgICBpZiAocmVzdWx0ICE9IG51bGwpIHtcblx0ICAgICAgaWYgKG9wdGlvbnMuaW5kZW50KSB7XG5cdCAgICAgICAgdmFyIGxpbmVzID0gcmVzdWx0LnNwbGl0KCdcXG4nKTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGxpbmVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHQgICAgICAgICAgaWYgKCFsaW5lc1tpXSAmJiBpICsgMSA9PT0gbCkge1xuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgIH1cblxuXHQgICAgICAgICAgbGluZXNbaV0gPSBvcHRpb25zLmluZGVudCArIGxpbmVzW2ldO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXN1bHQgPSBsaW5lcy5qb2luKCdcXG4nKTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gcmVzdWx0O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1RoZSBwYXJ0aWFsICcgKyBvcHRpb25zLm5hbWUgKyAnIGNvdWxkIG5vdCBiZSBjb21waWxlZCB3aGVuIHJ1bm5pbmcgaW4gcnVudGltZS1vbmx5IG1vZGUnKTtcblx0ICAgIH1cblx0ICB9XG5cblx0ICAvLyBKdXN0IGFkZCB3YXRlclxuXHQgIHZhciBjb250YWluZXIgPSB7XG5cdCAgICBzdHJpY3Q6IGZ1bmN0aW9uIHN0cmljdChvYmosIG5hbWUpIHtcblx0ICAgICAgaWYgKCEobmFtZSBpbiBvYmopKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1wiJyArIG5hbWUgKyAnXCIgbm90IGRlZmluZWQgaW4gJyArIG9iaik7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG9ialtuYW1lXTtcblx0ICAgIH0sXG5cdCAgICBsb29rdXA6IGZ1bmN0aW9uIGxvb2t1cChkZXB0aHMsIG5hbWUpIHtcblx0ICAgICAgdmFyIGxlbiA9IGRlcHRocy5sZW5ndGg7XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgICAgICBpZiAoZGVwdGhzW2ldICYmIGRlcHRoc1tpXVtuYW1lXSAhPSBudWxsKSB7XG5cdCAgICAgICAgICByZXR1cm4gZGVwdGhzW2ldW25hbWVdO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfSxcblx0ICAgIGxhbWJkYTogZnVuY3Rpb24gbGFtYmRhKGN1cnJlbnQsIGNvbnRleHQpIHtcblx0ICAgICAgcmV0dXJuIHR5cGVvZiBjdXJyZW50ID09PSAnZnVuY3Rpb24nID8gY3VycmVudC5jYWxsKGNvbnRleHQpIDogY3VycmVudDtcblx0ICAgIH0sXG5cblx0ICAgIGVzY2FwZUV4cHJlc3Npb246IFV0aWxzLmVzY2FwZUV4cHJlc3Npb24sXG5cdCAgICBpbnZva2VQYXJ0aWFsOiBpbnZva2VQYXJ0aWFsV3JhcHBlcixcblxuXHQgICAgZm46IGZ1bmN0aW9uIGZuKGkpIHtcblx0ICAgICAgdmFyIHJldCA9IHRlbXBsYXRlU3BlY1tpXTtcblx0ICAgICAgcmV0LmRlY29yYXRvciA9IHRlbXBsYXRlU3BlY1tpICsgJ19kJ107XG5cdCAgICAgIHJldHVybiByZXQ7XG5cdCAgICB9LFxuXG5cdCAgICBwcm9ncmFtczogW10sXG5cdCAgICBwcm9ncmFtOiBmdW5jdGlvbiBwcm9ncmFtKGksIGRhdGEsIGRlY2xhcmVkQmxvY2tQYXJhbXMsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcblx0ICAgICAgdmFyIHByb2dyYW1XcmFwcGVyID0gdGhpcy5wcm9ncmFtc1tpXSxcblx0ICAgICAgICAgIGZuID0gdGhpcy5mbihpKTtcblx0ICAgICAgaWYgKGRhdGEgfHwgZGVwdGhzIHx8IGJsb2NrUGFyYW1zIHx8IGRlY2xhcmVkQmxvY2tQYXJhbXMpIHtcblx0ICAgICAgICBwcm9ncmFtV3JhcHBlciA9IHdyYXBQcm9ncmFtKHRoaXMsIGksIGZuLCBkYXRhLCBkZWNsYXJlZEJsb2NrUGFyYW1zLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcblx0ICAgICAgfSBlbHNlIGlmICghcHJvZ3JhbVdyYXBwZXIpIHtcblx0ICAgICAgICBwcm9ncmFtV3JhcHBlciA9IHRoaXMucHJvZ3JhbXNbaV0gPSB3cmFwUHJvZ3JhbSh0aGlzLCBpLCBmbik7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHByb2dyYW1XcmFwcGVyO1xuXHQgICAgfSxcblxuXHQgICAgZGF0YTogZnVuY3Rpb24gZGF0YSh2YWx1ZSwgZGVwdGgpIHtcblx0ICAgICAgd2hpbGUgKHZhbHVlICYmIGRlcHRoLS0pIHtcblx0ICAgICAgICB2YWx1ZSA9IHZhbHVlLl9wYXJlbnQ7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHZhbHVlO1xuXHQgICAgfSxcblx0ICAgIG1lcmdlOiBmdW5jdGlvbiBtZXJnZShwYXJhbSwgY29tbW9uKSB7XG5cdCAgICAgIHZhciBvYmogPSBwYXJhbSB8fCBjb21tb247XG5cblx0ICAgICAgaWYgKHBhcmFtICYmIGNvbW1vbiAmJiBwYXJhbSAhPT0gY29tbW9uKSB7XG5cdCAgICAgICAgb2JqID0gVXRpbHMuZXh0ZW5kKHt9LCBjb21tb24sIHBhcmFtKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiBvYmo7XG5cdCAgICB9LFxuXG5cdCAgICBub29wOiBlbnYuVk0ubm9vcCxcblx0ICAgIGNvbXBpbGVySW5mbzogdGVtcGxhdGVTcGVjLmNvbXBpbGVyXG5cdCAgfTtcblxuXHQgIGZ1bmN0aW9uIHJldChjb250ZXh0KSB7XG5cdCAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzFdO1xuXG5cdCAgICB2YXIgZGF0YSA9IG9wdGlvbnMuZGF0YTtcblxuXHQgICAgcmV0Ll9zZXR1cChvcHRpb25zKTtcblx0ICAgIGlmICghb3B0aW9ucy5wYXJ0aWFsICYmIHRlbXBsYXRlU3BlYy51c2VEYXRhKSB7XG5cdCAgICAgIGRhdGEgPSBpbml0RGF0YShjb250ZXh0LCBkYXRhKTtcblx0ICAgIH1cblx0ICAgIHZhciBkZXB0aHMgPSB1bmRlZmluZWQsXG5cdCAgICAgICAgYmxvY2tQYXJhbXMgPSB0ZW1wbGF0ZVNwZWMudXNlQmxvY2tQYXJhbXMgPyBbXSA6IHVuZGVmaW5lZDtcblx0ICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlRGVwdGhzKSB7XG5cdCAgICAgIGlmIChvcHRpb25zLmRlcHRocykge1xuXHQgICAgICAgIGRlcHRocyA9IGNvbnRleHQgIT09IG9wdGlvbnMuZGVwdGhzWzBdID8gW2NvbnRleHRdLmNvbmNhdChvcHRpb25zLmRlcHRocykgOiBvcHRpb25zLmRlcHRocztcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBkZXB0aHMgPSBbY29udGV4dF07XG5cdCAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gbWFpbihjb250ZXh0IC8qLCBvcHRpb25zKi8pIHtcblx0ICAgICAgcmV0dXJuICcnICsgdGVtcGxhdGVTcGVjLm1haW4oY29udGFpbmVyLCBjb250ZXh0LCBjb250YWluZXIuaGVscGVycywgY29udGFpbmVyLnBhcnRpYWxzLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcblx0ICAgIH1cblx0ICAgIG1haW4gPSBleGVjdXRlRGVjb3JhdG9ycyh0ZW1wbGF0ZVNwZWMubWFpbiwgbWFpbiwgY29udGFpbmVyLCBvcHRpb25zLmRlcHRocyB8fCBbXSwgZGF0YSwgYmxvY2tQYXJhbXMpO1xuXHQgICAgcmV0dXJuIG1haW4oY29udGV4dCwgb3B0aW9ucyk7XG5cdCAgfVxuXHQgIHJldC5pc1RvcCA9IHRydWU7XG5cblx0ICByZXQuX3NldHVwID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0ICAgIGlmICghb3B0aW9ucy5wYXJ0aWFsKSB7XG5cdCAgICAgIGNvbnRhaW5lci5oZWxwZXJzID0gY29udGFpbmVyLm1lcmdlKG9wdGlvbnMuaGVscGVycywgZW52LmhlbHBlcnMpO1xuXG5cdCAgICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlUGFydGlhbCkge1xuXHQgICAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IGNvbnRhaW5lci5tZXJnZShvcHRpb25zLnBhcnRpYWxzLCBlbnYucGFydGlhbHMpO1xuXHQgICAgICB9XG5cdCAgICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlUGFydGlhbCB8fCB0ZW1wbGF0ZVNwZWMudXNlRGVjb3JhdG9ycykge1xuXHQgICAgICAgIGNvbnRhaW5lci5kZWNvcmF0b3JzID0gY29udGFpbmVyLm1lcmdlKG9wdGlvbnMuZGVjb3JhdG9ycywgZW52LmRlY29yYXRvcnMpO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBjb250YWluZXIuaGVscGVycyA9IG9wdGlvbnMuaGVscGVycztcblx0ICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gb3B0aW9ucy5wYXJ0aWFscztcblx0ICAgICAgY29udGFpbmVyLmRlY29yYXRvcnMgPSBvcHRpb25zLmRlY29yYXRvcnM7XG5cdCAgICB9XG5cdCAgfTtcblxuXHQgIHJldC5fY2hpbGQgPSBmdW5jdGlvbiAoaSwgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocykge1xuXHQgICAgaWYgKHRlbXBsYXRlU3BlYy51c2VCbG9ja1BhcmFtcyAmJiAhYmxvY2tQYXJhbXMpIHtcblx0ICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ211c3QgcGFzcyBibG9jayBwYXJhbXMnKTtcblx0ICAgIH1cblx0ICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlRGVwdGhzICYmICFkZXB0aHMpIHtcblx0ICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ211c3QgcGFzcyBwYXJlbnQgZGVwdGhzJyk7XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiB3cmFwUHJvZ3JhbShjb250YWluZXIsIGksIHRlbXBsYXRlU3BlY1tpXSwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG5cdCAgfTtcblx0ICByZXR1cm4gcmV0O1xuXHR9XG5cblx0ZnVuY3Rpb24gd3JhcFByb2dyYW0oY29udGFpbmVyLCBpLCBmbiwgZGF0YSwgZGVjbGFyZWRCbG9ja1BhcmFtcywgYmxvY2tQYXJhbXMsIGRlcHRocykge1xuXHQgIGZ1bmN0aW9uIHByb2coY29udGV4dCkge1xuXHQgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1sxXTtcblxuXHQgICAgdmFyIGN1cnJlbnREZXB0aHMgPSBkZXB0aHM7XG5cdCAgICBpZiAoZGVwdGhzICYmIGNvbnRleHQgIT09IGRlcHRoc1swXSkge1xuXHQgICAgICBjdXJyZW50RGVwdGhzID0gW2NvbnRleHRdLmNvbmNhdChkZXB0aHMpO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gZm4oY29udGFpbmVyLCBjb250ZXh0LCBjb250YWluZXIuaGVscGVycywgY29udGFpbmVyLnBhcnRpYWxzLCBvcHRpb25zLmRhdGEgfHwgZGF0YSwgYmxvY2tQYXJhbXMgJiYgW29wdGlvbnMuYmxvY2tQYXJhbXNdLmNvbmNhdChibG9ja1BhcmFtcyksIGN1cnJlbnREZXB0aHMpO1xuXHQgIH1cblxuXHQgIHByb2cgPSBleGVjdXRlRGVjb3JhdG9ycyhmbiwgcHJvZywgY29udGFpbmVyLCBkZXB0aHMsIGRhdGEsIGJsb2NrUGFyYW1zKTtcblxuXHQgIHByb2cucHJvZ3JhbSA9IGk7XG5cdCAgcHJvZy5kZXB0aCA9IGRlcHRocyA/IGRlcHRocy5sZW5ndGggOiAwO1xuXHQgIHByb2cuYmxvY2tQYXJhbXMgPSBkZWNsYXJlZEJsb2NrUGFyYW1zIHx8IDA7XG5cdCAgcmV0dXJuIHByb2c7XG5cdH1cblxuXHRmdW5jdGlvbiByZXNvbHZlUGFydGlhbChwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKSB7XG5cdCAgaWYgKCFwYXJ0aWFsKSB7XG5cdCAgICBpZiAob3B0aW9ucy5uYW1lID09PSAnQHBhcnRpYWwtYmxvY2snKSB7XG5cdCAgICAgIHBhcnRpYWwgPSBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHBhcnRpYWwgPSBvcHRpb25zLnBhcnRpYWxzW29wdGlvbnMubmFtZV07XG5cdCAgICB9XG5cdCAgfSBlbHNlIGlmICghcGFydGlhbC5jYWxsICYmICFvcHRpb25zLm5hbWUpIHtcblx0ICAgIC8vIFRoaXMgaXMgYSBkeW5hbWljIHBhcnRpYWwgdGhhdCByZXR1cm5lZCBhIHN0cmluZ1xuXHQgICAgb3B0aW9ucy5uYW1lID0gcGFydGlhbDtcblx0ICAgIHBhcnRpYWwgPSBvcHRpb25zLnBhcnRpYWxzW3BhcnRpYWxdO1xuXHQgIH1cblx0ICByZXR1cm4gcGFydGlhbDtcblx0fVxuXG5cdGZ1bmN0aW9uIGludm9rZVBhcnRpYWwocGFydGlhbCwgY29udGV4dCwgb3B0aW9ucykge1xuXHQgIG9wdGlvbnMucGFydGlhbCA9IHRydWU7XG5cdCAgaWYgKG9wdGlvbnMuaWRzKSB7XG5cdCAgICBvcHRpb25zLmRhdGEuY29udGV4dFBhdGggPSBvcHRpb25zLmlkc1swXSB8fCBvcHRpb25zLmRhdGEuY29udGV4dFBhdGg7XG5cdCAgfVxuXG5cdCAgdmFyIHBhcnRpYWxCbG9jayA9IHVuZGVmaW5lZDtcblx0ICBpZiAob3B0aW9ucy5mbiAmJiBvcHRpb25zLmZuICE9PSBub29wKSB7XG5cdCAgICBvcHRpb25zLmRhdGEgPSBfYmFzZS5jcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuXHQgICAgcGFydGlhbEJsb2NrID0gb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ10gPSBvcHRpb25zLmZuO1xuXG5cdCAgICBpZiAocGFydGlhbEJsb2NrLnBhcnRpYWxzKSB7XG5cdCAgICAgIG9wdGlvbnMucGFydGlhbHMgPSBVdGlscy5leHRlbmQoe30sIG9wdGlvbnMucGFydGlhbHMsIHBhcnRpYWxCbG9jay5wYXJ0aWFscyk7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgaWYgKHBhcnRpYWwgPT09IHVuZGVmaW5lZCAmJiBwYXJ0aWFsQmxvY2spIHtcblx0ICAgIHBhcnRpYWwgPSBwYXJ0aWFsQmxvY2s7XG5cdCAgfVxuXG5cdCAgaWYgKHBhcnRpYWwgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1RoZSBwYXJ0aWFsICcgKyBvcHRpb25zLm5hbWUgKyAnIGNvdWxkIG5vdCBiZSBmb3VuZCcpO1xuXHQgIH0gZWxzZSBpZiAocGFydGlhbCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG5cdCAgICByZXR1cm4gcGFydGlhbChjb250ZXh0LCBvcHRpb25zKTtcblx0ICB9XG5cdH1cblxuXHRmdW5jdGlvbiBub29wKCkge1xuXHQgIHJldHVybiAnJztcblx0fVxuXG5cdGZ1bmN0aW9uIGluaXREYXRhKGNvbnRleHQsIGRhdGEpIHtcblx0ICBpZiAoIWRhdGEgfHwgISgncm9vdCcgaW4gZGF0YSkpIHtcblx0ICAgIGRhdGEgPSBkYXRhID8gX2Jhc2UuY3JlYXRlRnJhbWUoZGF0YSkgOiB7fTtcblx0ICAgIGRhdGEucm9vdCA9IGNvbnRleHQ7XG5cdCAgfVxuXHQgIHJldHVybiBkYXRhO1xuXHR9XG5cblx0ZnVuY3Rpb24gZXhlY3V0ZURlY29yYXRvcnMoZm4sIHByb2csIGNvbnRhaW5lciwgZGVwdGhzLCBkYXRhLCBibG9ja1BhcmFtcykge1xuXHQgIGlmIChmbi5kZWNvcmF0b3IpIHtcblx0ICAgIHZhciBwcm9wcyA9IHt9O1xuXHQgICAgcHJvZyA9IGZuLmRlY29yYXRvcihwcm9nLCBwcm9wcywgY29udGFpbmVyLCBkZXB0aHMgJiYgZGVwdGhzWzBdLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcblx0ICAgIFV0aWxzLmV4dGVuZChwcm9nLCBwcm9wcyk7XG5cdCAgfVxuXHQgIHJldHVybiBwcm9nO1xuXHR9XG5cbi8qKiovIH0sXG4vKiAyMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkgey8qIGdsb2JhbCB3aW5kb3cgKi9cblx0J3VzZSBzdHJpY3QnO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cblx0ZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKEhhbmRsZWJhcnMpIHtcblx0ICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHQgIHZhciByb290ID0gdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB3aW5kb3csXG5cdCAgICAgICRIYW5kbGViYXJzID0gcm9vdC5IYW5kbGViYXJzO1xuXHQgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cdCAgSGFuZGxlYmFycy5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgaWYgKHJvb3QuSGFuZGxlYmFycyA9PT0gSGFuZGxlYmFycykge1xuXHQgICAgICByb290LkhhbmRsZWJhcnMgPSAkSGFuZGxlYmFycztcblx0ICAgIH1cblx0ICAgIHJldHVybiBIYW5kbGViYXJzO1xuXHQgIH07XG5cdH07XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KCkpKSlcblxuLyoqKi8gfSxcbi8qIDIxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0dmFyIEFTVCA9IHtcblx0ICAvLyBQdWJsaWMgQVBJIHVzZWQgdG8gZXZhbHVhdGUgZGVyaXZlZCBhdHRyaWJ1dGVzIHJlZ2FyZGluZyBBU1Qgbm9kZXNcblx0ICBoZWxwZXJzOiB7XG5cdCAgICAvLyBhIG11c3RhY2hlIGlzIGRlZmluaXRlbHkgYSBoZWxwZXIgaWY6XG5cdCAgICAvLyAqIGl0IGlzIGFuIGVsaWdpYmxlIGhlbHBlciwgYW5kXG5cdCAgICAvLyAqIGl0IGhhcyBhdCBsZWFzdCBvbmUgcGFyYW1ldGVyIG9yIGhhc2ggc2VnbWVudFxuXHQgICAgaGVscGVyRXhwcmVzc2lvbjogZnVuY3Rpb24gaGVscGVyRXhwcmVzc2lvbihub2RlKSB7XG5cdCAgICAgIHJldHVybiBub2RlLnR5cGUgPT09ICdTdWJFeHByZXNzaW9uJyB8fCAobm9kZS50eXBlID09PSAnTXVzdGFjaGVTdGF0ZW1lbnQnIHx8IG5vZGUudHlwZSA9PT0gJ0Jsb2NrU3RhdGVtZW50JykgJiYgISEobm9kZS5wYXJhbXMgJiYgbm9kZS5wYXJhbXMubGVuZ3RoIHx8IG5vZGUuaGFzaCk7XG5cdCAgICB9LFxuXG5cdCAgICBzY29wZWRJZDogZnVuY3Rpb24gc2NvcGVkSWQocGF0aCkge1xuXHQgICAgICByZXR1cm4gKC9eXFwufHRoaXNcXGIvLnRlc3QocGF0aC5vcmlnaW5hbClcblx0ICAgICAgKTtcblx0ICAgIH0sXG5cblx0ICAgIC8vIGFuIElEIGlzIHNpbXBsZSBpZiBpdCBvbmx5IGhhcyBvbmUgcGFydCwgYW5kIHRoYXQgcGFydCBpcyBub3Rcblx0ICAgIC8vIGAuLmAgb3IgYHRoaXNgLlxuXHQgICAgc2ltcGxlSWQ6IGZ1bmN0aW9uIHNpbXBsZUlkKHBhdGgpIHtcblx0ICAgICAgcmV0dXJuIHBhdGgucGFydHMubGVuZ3RoID09PSAxICYmICFBU1QuaGVscGVycy5zY29wZWRJZChwYXRoKSAmJiAhcGF0aC5kZXB0aDtcblx0ICAgIH1cblx0ICB9XG5cdH07XG5cblx0Ly8gTXVzdCBiZSBleHBvcnRlZCBhcyBhbiBvYmplY3QgcmF0aGVyIHRoYW4gdGhlIHJvb3Qgb2YgdGhlIG1vZHVsZSBhcyB0aGUgamlzb24gbGV4ZXJcblx0Ly8gbXVzdCBtb2RpZnkgdGhlIG9iamVjdCB0byBvcGVyYXRlIHByb3Blcmx5LlxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBBU1Q7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMjIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSlbJ2RlZmF1bHQnXTtcblxuXHR2YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpWydkZWZhdWx0J107XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0ZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuXG5cdHZhciBfcGFyc2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG5cblx0dmFyIF9wYXJzZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyc2VyKTtcblxuXHR2YXIgX3doaXRlc3BhY2VDb250cm9sID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG5cblx0dmFyIF93aGl0ZXNwYWNlQ29udHJvbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93aGl0ZXNwYWNlQ29udHJvbCk7XG5cblx0dmFyIF9oZWxwZXJzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cblx0dmFyIEhlbHBlcnMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfaGVscGVycyk7XG5cblx0dmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cblx0ZXhwb3J0cy5wYXJzZXIgPSBfcGFyc2VyMlsnZGVmYXVsdCddO1xuXG5cdHZhciB5eSA9IHt9O1xuXHRfdXRpbHMuZXh0ZW5kKHl5LCBIZWxwZXJzKTtcblxuXHRmdW5jdGlvbiBwYXJzZShpbnB1dCwgb3B0aW9ucykge1xuXHQgIC8vIEp1c3QgcmV0dXJuIGlmIGFuIGFscmVhZHktY29tcGlsZWQgQVNUIHdhcyBwYXNzZWQgaW4uXG5cdCAgaWYgKGlucHV0LnR5cGUgPT09ICdQcm9ncmFtJykge1xuXHQgICAgcmV0dXJuIGlucHV0O1xuXHQgIH1cblxuXHQgIF9wYXJzZXIyWydkZWZhdWx0J10ueXkgPSB5eTtcblxuXHQgIC8vIEFsdGVyaW5nIHRoZSBzaGFyZWQgb2JqZWN0IGhlcmUsIGJ1dCB0aGlzIGlzIG9rIGFzIHBhcnNlciBpcyBhIHN5bmMgb3BlcmF0aW9uXG5cdCAgeXkubG9jSW5mbyA9IGZ1bmN0aW9uIChsb2NJbmZvKSB7XG5cdCAgICByZXR1cm4gbmV3IHl5LlNvdXJjZUxvY2F0aW9uKG9wdGlvbnMgJiYgb3B0aW9ucy5zcmNOYW1lLCBsb2NJbmZvKTtcblx0ICB9O1xuXG5cdCAgdmFyIHN0cmlwID0gbmV3IF93aGl0ZXNwYWNlQ29udHJvbDJbJ2RlZmF1bHQnXShvcHRpb25zKTtcblx0ICByZXR1cm4gc3RyaXAuYWNjZXB0KF9wYXJzZXIyWydkZWZhdWx0J10ucGFyc2UoaW5wdXQpKTtcblx0fVxuXG4vKioqLyB9LFxuLyogMjMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cdC8qIEppc29uIGdlbmVyYXRlZCBwYXJzZXIgKi9cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIGhhbmRsZWJhcnMgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIHBhcnNlciA9IHsgdHJhY2U6IGZ1bmN0aW9uIHRyYWNlKCkge30sXG5cdCAgICAgICAgeXk6IHt9LFxuXHQgICAgICAgIHN5bWJvbHNfOiB7IFwiZXJyb3JcIjogMiwgXCJyb290XCI6IDMsIFwicHJvZ3JhbVwiOiA0LCBcIkVPRlwiOiA1LCBcInByb2dyYW1fcmVwZXRpdGlvbjBcIjogNiwgXCJzdGF0ZW1lbnRcIjogNywgXCJtdXN0YWNoZVwiOiA4LCBcImJsb2NrXCI6IDksIFwicmF3QmxvY2tcIjogMTAsIFwicGFydGlhbFwiOiAxMSwgXCJwYXJ0aWFsQmxvY2tcIjogMTIsIFwiY29udGVudFwiOiAxMywgXCJDT01NRU5UXCI6IDE0LCBcIkNPTlRFTlRcIjogMTUsIFwib3BlblJhd0Jsb2NrXCI6IDE2LCBcInJhd0Jsb2NrX3JlcGV0aXRpb25fcGx1czBcIjogMTcsIFwiRU5EX1JBV19CTE9DS1wiOiAxOCwgXCJPUEVOX1JBV19CTE9DS1wiOiAxOSwgXCJoZWxwZXJOYW1lXCI6IDIwLCBcIm9wZW5SYXdCbG9ja19yZXBldGl0aW9uMFwiOiAyMSwgXCJvcGVuUmF3QmxvY2tfb3B0aW9uMFwiOiAyMiwgXCJDTE9TRV9SQVdfQkxPQ0tcIjogMjMsIFwib3BlbkJsb2NrXCI6IDI0LCBcImJsb2NrX29wdGlvbjBcIjogMjUsIFwiY2xvc2VCbG9ja1wiOiAyNiwgXCJvcGVuSW52ZXJzZVwiOiAyNywgXCJibG9ja19vcHRpb24xXCI6IDI4LCBcIk9QRU5fQkxPQ0tcIjogMjksIFwib3BlbkJsb2NrX3JlcGV0aXRpb24wXCI6IDMwLCBcIm9wZW5CbG9ja19vcHRpb24wXCI6IDMxLCBcIm9wZW5CbG9ja19vcHRpb24xXCI6IDMyLCBcIkNMT1NFXCI6IDMzLCBcIk9QRU5fSU5WRVJTRVwiOiAzNCwgXCJvcGVuSW52ZXJzZV9yZXBldGl0aW9uMFwiOiAzNSwgXCJvcGVuSW52ZXJzZV9vcHRpb24wXCI6IDM2LCBcIm9wZW5JbnZlcnNlX29wdGlvbjFcIjogMzcsIFwib3BlbkludmVyc2VDaGFpblwiOiAzOCwgXCJPUEVOX0lOVkVSU0VfQ0hBSU5cIjogMzksIFwib3BlbkludmVyc2VDaGFpbl9yZXBldGl0aW9uMFwiOiA0MCwgXCJvcGVuSW52ZXJzZUNoYWluX29wdGlvbjBcIjogNDEsIFwib3BlbkludmVyc2VDaGFpbl9vcHRpb24xXCI6IDQyLCBcImludmVyc2VBbmRQcm9ncmFtXCI6IDQzLCBcIklOVkVSU0VcIjogNDQsIFwiaW52ZXJzZUNoYWluXCI6IDQ1LCBcImludmVyc2VDaGFpbl9vcHRpb24wXCI6IDQ2LCBcIk9QRU5fRU5EQkxPQ0tcIjogNDcsIFwiT1BFTlwiOiA0OCwgXCJtdXN0YWNoZV9yZXBldGl0aW9uMFwiOiA0OSwgXCJtdXN0YWNoZV9vcHRpb24wXCI6IDUwLCBcIk9QRU5fVU5FU0NBUEVEXCI6IDUxLCBcIm11c3RhY2hlX3JlcGV0aXRpb24xXCI6IDUyLCBcIm11c3RhY2hlX29wdGlvbjFcIjogNTMsIFwiQ0xPU0VfVU5FU0NBUEVEXCI6IDU0LCBcIk9QRU5fUEFSVElBTFwiOiA1NSwgXCJwYXJ0aWFsTmFtZVwiOiA1NiwgXCJwYXJ0aWFsX3JlcGV0aXRpb24wXCI6IDU3LCBcInBhcnRpYWxfb3B0aW9uMFwiOiA1OCwgXCJvcGVuUGFydGlhbEJsb2NrXCI6IDU5LCBcIk9QRU5fUEFSVElBTF9CTE9DS1wiOiA2MCwgXCJvcGVuUGFydGlhbEJsb2NrX3JlcGV0aXRpb24wXCI6IDYxLCBcIm9wZW5QYXJ0aWFsQmxvY2tfb3B0aW9uMFwiOiA2MiwgXCJwYXJhbVwiOiA2MywgXCJzZXhwclwiOiA2NCwgXCJPUEVOX1NFWFBSXCI6IDY1LCBcInNleHByX3JlcGV0aXRpb24wXCI6IDY2LCBcInNleHByX29wdGlvbjBcIjogNjcsIFwiQ0xPU0VfU0VYUFJcIjogNjgsIFwiaGFzaFwiOiA2OSwgXCJoYXNoX3JlcGV0aXRpb25fcGx1czBcIjogNzAsIFwiaGFzaFNlZ21lbnRcIjogNzEsIFwiSURcIjogNzIsIFwiRVFVQUxTXCI6IDczLCBcImJsb2NrUGFyYW1zXCI6IDc0LCBcIk9QRU5fQkxPQ0tfUEFSQU1TXCI6IDc1LCBcImJsb2NrUGFyYW1zX3JlcGV0aXRpb25fcGx1czBcIjogNzYsIFwiQ0xPU0VfQkxPQ0tfUEFSQU1TXCI6IDc3LCBcInBhdGhcIjogNzgsIFwiZGF0YU5hbWVcIjogNzksIFwiU1RSSU5HXCI6IDgwLCBcIk5VTUJFUlwiOiA4MSwgXCJCT09MRUFOXCI6IDgyLCBcIlVOREVGSU5FRFwiOiA4MywgXCJOVUxMXCI6IDg0LCBcIkRBVEFcIjogODUsIFwicGF0aFNlZ21lbnRzXCI6IDg2LCBcIlNFUFwiOiA4NywgXCIkYWNjZXB0XCI6IDAsIFwiJGVuZFwiOiAxIH0sXG5cdCAgICAgICAgdGVybWluYWxzXzogeyAyOiBcImVycm9yXCIsIDU6IFwiRU9GXCIsIDE0OiBcIkNPTU1FTlRcIiwgMTU6IFwiQ09OVEVOVFwiLCAxODogXCJFTkRfUkFXX0JMT0NLXCIsIDE5OiBcIk9QRU5fUkFXX0JMT0NLXCIsIDIzOiBcIkNMT1NFX1JBV19CTE9DS1wiLCAyOTogXCJPUEVOX0JMT0NLXCIsIDMzOiBcIkNMT1NFXCIsIDM0OiBcIk9QRU5fSU5WRVJTRVwiLCAzOTogXCJPUEVOX0lOVkVSU0VfQ0hBSU5cIiwgNDQ6IFwiSU5WRVJTRVwiLCA0NzogXCJPUEVOX0VOREJMT0NLXCIsIDQ4OiBcIk9QRU5cIiwgNTE6IFwiT1BFTl9VTkVTQ0FQRURcIiwgNTQ6IFwiQ0xPU0VfVU5FU0NBUEVEXCIsIDU1OiBcIk9QRU5fUEFSVElBTFwiLCA2MDogXCJPUEVOX1BBUlRJQUxfQkxPQ0tcIiwgNjU6IFwiT1BFTl9TRVhQUlwiLCA2ODogXCJDTE9TRV9TRVhQUlwiLCA3MjogXCJJRFwiLCA3MzogXCJFUVVBTFNcIiwgNzU6IFwiT1BFTl9CTE9DS19QQVJBTVNcIiwgNzc6IFwiQ0xPU0VfQkxPQ0tfUEFSQU1TXCIsIDgwOiBcIlNUUklOR1wiLCA4MTogXCJOVU1CRVJcIiwgODI6IFwiQk9PTEVBTlwiLCA4MzogXCJVTkRFRklORURcIiwgODQ6IFwiTlVMTFwiLCA4NTogXCJEQVRBXCIsIDg3OiBcIlNFUFwiIH0sXG5cdCAgICAgICAgcHJvZHVjdGlvbnNfOiBbMCwgWzMsIDJdLCBbNCwgMV0sIFs3LCAxXSwgWzcsIDFdLCBbNywgMV0sIFs3LCAxXSwgWzcsIDFdLCBbNywgMV0sIFs3LCAxXSwgWzEzLCAxXSwgWzEwLCAzXSwgWzE2LCA1XSwgWzksIDRdLCBbOSwgNF0sIFsyNCwgNl0sIFsyNywgNl0sIFszOCwgNl0sIFs0MywgMl0sIFs0NSwgM10sIFs0NSwgMV0sIFsyNiwgM10sIFs4LCA1XSwgWzgsIDVdLCBbMTEsIDVdLCBbMTIsIDNdLCBbNTksIDVdLCBbNjMsIDFdLCBbNjMsIDFdLCBbNjQsIDVdLCBbNjksIDFdLCBbNzEsIDNdLCBbNzQsIDNdLCBbMjAsIDFdLCBbMjAsIDFdLCBbMjAsIDFdLCBbMjAsIDFdLCBbMjAsIDFdLCBbMjAsIDFdLCBbMjAsIDFdLCBbNTYsIDFdLCBbNTYsIDFdLCBbNzksIDJdLCBbNzgsIDFdLCBbODYsIDNdLCBbODYsIDFdLCBbNiwgMF0sIFs2LCAyXSwgWzE3LCAxXSwgWzE3LCAyXSwgWzIxLCAwXSwgWzIxLCAyXSwgWzIyLCAwXSwgWzIyLCAxXSwgWzI1LCAwXSwgWzI1LCAxXSwgWzI4LCAwXSwgWzI4LCAxXSwgWzMwLCAwXSwgWzMwLCAyXSwgWzMxLCAwXSwgWzMxLCAxXSwgWzMyLCAwXSwgWzMyLCAxXSwgWzM1LCAwXSwgWzM1LCAyXSwgWzM2LCAwXSwgWzM2LCAxXSwgWzM3LCAwXSwgWzM3LCAxXSwgWzQwLCAwXSwgWzQwLCAyXSwgWzQxLCAwXSwgWzQxLCAxXSwgWzQyLCAwXSwgWzQyLCAxXSwgWzQ2LCAwXSwgWzQ2LCAxXSwgWzQ5LCAwXSwgWzQ5LCAyXSwgWzUwLCAwXSwgWzUwLCAxXSwgWzUyLCAwXSwgWzUyLCAyXSwgWzUzLCAwXSwgWzUzLCAxXSwgWzU3LCAwXSwgWzU3LCAyXSwgWzU4LCAwXSwgWzU4LCAxXSwgWzYxLCAwXSwgWzYxLCAyXSwgWzYyLCAwXSwgWzYyLCAxXSwgWzY2LCAwXSwgWzY2LCAyXSwgWzY3LCAwXSwgWzY3LCAxXSwgWzcwLCAxXSwgWzcwLCAyXSwgWzc2LCAxXSwgWzc2LCAyXV0sXG5cdCAgICAgICAgcGVyZm9ybUFjdGlvbjogZnVuY3Rpb24gYW5vbnltb3VzKHl5dGV4dCwgeXlsZW5nLCB5eWxpbmVubywgeXksIHl5c3RhdGUsICQkLCBfJFxuXHQgICAgICAgIC8qKi8pIHtcblxuXHQgICAgICAgICAgICB2YXIgJDAgPSAkJC5sZW5ndGggLSAxO1xuXHQgICAgICAgICAgICBzd2l0Y2ggKHl5c3RhdGUpIHtcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTpcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCRbJDAgLSAxXTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB5eS5wcmVwYXJlUHJvZ3JhbSgkJFskMF0pO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAzOlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgNDpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDU6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gJCRbJDBdO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSA2OlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgNzpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDg6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gJCRbJDBdO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSA5OlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0NvbW1lbnRTdGF0ZW1lbnQnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogeXkuc3RyaXBDb21tZW50KCQkWyQwXSksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwXSwgJCRbJDBdKSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpXG5cdCAgICAgICAgICAgICAgICAgICAgfTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAxMDpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdDb250ZW50U3RhdGVtZW50Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWw6ICQkWyQwXSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICQkWyQwXSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpXG5cdCAgICAgICAgICAgICAgICAgICAgfTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAxMTpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB5eS5wcmVwYXJlUmF3QmxvY2soJCRbJDAgLSAyXSwgJCRbJDAgLSAxXSwgJCRbJDBdLCB0aGlzLl8kKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTI6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geyBwYXRoOiAkJFskMCAtIDNdLCBwYXJhbXM6ICQkWyQwIC0gMl0sIGhhc2g6ICQkWyQwIC0gMV0gfTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTM6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geXkucHJlcGFyZUJsb2NrKCQkWyQwIC0gM10sICQkWyQwIC0gMl0sICQkWyQwIC0gMV0sICQkWyQwXSwgZmFsc2UsIHRoaXMuXyQpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAxNDpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB5eS5wcmVwYXJlQmxvY2soJCRbJDAgLSAzXSwgJCRbJDAgLSAyXSwgJCRbJDAgLSAxXSwgJCRbJDBdLCB0cnVlLCB0aGlzLl8kKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTU6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geyBvcGVuOiAkJFskMCAtIDVdLCBwYXRoOiAkJFskMCAtIDRdLCBwYXJhbXM6ICQkWyQwIC0gM10sIGhhc2g6ICQkWyQwIC0gMl0sIGJsb2NrUGFyYW1zOiAkJFskMCAtIDFdLCBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMCAtIDVdLCAkJFskMF0pIH07XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDE2OlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgcGF0aDogJCRbJDAgLSA0XSwgcGFyYW1zOiAkJFskMCAtIDNdLCBoYXNoOiAkJFskMCAtIDJdLCBibG9ja1BhcmFtczogJCRbJDAgLSAxXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAgLSA1XSwgJCRbJDBdKSB9O1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAxNzpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IHBhdGg6ICQkWyQwIC0gNF0sIHBhcmFtczogJCRbJDAgLSAzXSwgaGFzaDogJCRbJDAgLSAyXSwgYmxvY2tQYXJhbXM6ICQkWyQwIC0gMV0sIHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwIC0gNV0sICQkWyQwXSkgfTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTg6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geyBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMCAtIDFdLCAkJFskMCAtIDFdKSwgcHJvZ3JhbTogJCRbJDBdIH07XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDE5OlxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBpbnZlcnNlID0geXkucHJlcGFyZUJsb2NrKCQkWyQwIC0gMl0sICQkWyQwIC0gMV0sICQkWyQwXSwgJCRbJDBdLCBmYWxzZSwgdGhpcy5fJCksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyYW0gPSB5eS5wcmVwYXJlUHJvZ3JhbShbaW52ZXJzZV0sICQkWyQwIC0gMV0ubG9jKTtcblx0ICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmNoYWluZWQgPSB0cnVlO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geyBzdHJpcDogJCRbJDAgLSAyXS5zdHJpcCwgcHJvZ3JhbTogcHJvZ3JhbSwgY2hhaW46IHRydWUgfTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAyMDpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDIxOlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgcGF0aDogJCRbJDAgLSAxXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAgLSAyXSwgJCRbJDBdKSB9O1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAyMjpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB5eS5wcmVwYXJlTXVzdGFjaGUoJCRbJDAgLSAzXSwgJCRbJDAgLSAyXSwgJCRbJDAgLSAxXSwgJCRbJDAgLSA0XSwgeXkuc3RyaXBGbGFncygkJFskMCAtIDRdLCAkJFskMF0pLCB0aGlzLl8kKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjM6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geXkucHJlcGFyZU11c3RhY2hlKCQkWyQwIC0gM10sICQkWyQwIC0gMl0sICQkWyQwIC0gMV0sICQkWyQwIC0gNF0sIHl5LnN0cmlwRmxhZ3MoJCRbJDAgLSA0XSwgJCRbJDBdKSwgdGhpcy5fJCk7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDI0OlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1BhcnRpYWxTdGF0ZW1lbnQnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAkJFskMCAtIDNdLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6ICQkWyQwIC0gMl0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGhhc2g6ICQkWyQwIC0gMV0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudDogJycsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwIC0gNF0sICQkWyQwXSksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKVxuXHQgICAgICAgICAgICAgICAgICAgIH07XG5cblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjU6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geXkucHJlcGFyZVBhcnRpYWxCbG9jaygkJFskMCAtIDJdLCAkJFskMCAtIDFdLCAkJFskMF0sIHRoaXMuXyQpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAyNjpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IHBhdGg6ICQkWyQwIC0gM10sIHBhcmFtczogJCRbJDAgLSAyXSwgaGFzaDogJCRbJDAgLSAxXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAgLSA0XSwgJCRbJDBdKSB9O1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAyNzpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDI4OlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjk6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnU3ViRXhwcmVzc2lvbicsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6ICQkWyQwIC0gM10sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogJCRbJDAgLSAyXSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaGFzaDogJCRbJDAgLSAxXSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpXG5cdCAgICAgICAgICAgICAgICAgICAgfTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAzMDpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IHR5cGU6ICdIYXNoJywgcGFpcnM6ICQkWyQwXSwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpIH07XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDMxOlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgdHlwZTogJ0hhc2hQYWlyJywga2V5OiB5eS5pZCgkJFskMCAtIDJdKSwgdmFsdWU6ICQkWyQwXSwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpIH07XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDMyOlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHl5LmlkKCQkWyQwIC0gMV0pO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAzMzpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDM0OlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgMzU6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geyB0eXBlOiAnU3RyaW5nTGl0ZXJhbCcsIHZhbHVlOiAkJFskMF0sIG9yaWdpbmFsOiAkJFskMF0sIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKSB9O1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAzNjpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IHR5cGU6ICdOdW1iZXJMaXRlcmFsJywgdmFsdWU6IE51bWJlcigkJFskMF0pLCBvcmlnaW5hbDogTnVtYmVyKCQkWyQwXSksIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKSB9O1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAzNzpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IHR5cGU6ICdCb29sZWFuTGl0ZXJhbCcsIHZhbHVlOiAkJFskMF0gPT09ICd0cnVlJywgb3JpZ2luYWw6ICQkWyQwXSA9PT0gJ3RydWUnLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCkgfTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgMzg6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geyB0eXBlOiAnVW5kZWZpbmVkTGl0ZXJhbCcsIG9yaWdpbmFsOiB1bmRlZmluZWQsIHZhbHVlOiB1bmRlZmluZWQsIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKSB9O1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAzOTpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IHR5cGU6ICdOdWxsTGl0ZXJhbCcsIG9yaWdpbmFsOiBudWxsLCB2YWx1ZTogbnVsbCwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpIH07XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDQwOlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgNDE6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gJCRbJDBdO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSA0Mjpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB5eS5wcmVwYXJlUGF0aCh0cnVlLCAkJFskMF0sIHRoaXMuXyQpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSA0Mzpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB5eS5wcmVwYXJlUGF0aChmYWxzZSwgJCRbJDBdLCB0aGlzLl8kKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgNDQ6XG5cdCAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAyXS5wdXNoKHsgcGFydDogeXkuaWQoJCRbJDBdKSwgb3JpZ2luYWw6ICQkWyQwXSwgc2VwYXJhdG9yOiAkJFskMCAtIDFdIH0pO3RoaXMuJCA9ICQkWyQwIC0gMl07XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDQ1OlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFt7IHBhcnQ6IHl5LmlkKCQkWyQwXSksIG9yaWdpbmFsOiAkJFskMF0gfV07XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDQ2OlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFtdO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSA0Nzpcblx0ICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgNDg6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gWyQkWyQwXV07XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDQ5OlxuXHQgICAgICAgICAgICAgICAgICAgICQkWyQwIC0gMV0ucHVzaCgkJFskMF0pO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSA1MDpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSBbXTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgNTE6XG5cdCAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDU4OlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFtdO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSA1OTpcblx0ICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgNjQ6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gW107XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDY1OlxuXHQgICAgICAgICAgICAgICAgICAgICQkWyQwIC0gMV0ucHVzaCgkJFskMF0pO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSA3MDpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSBbXTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgNzE6XG5cdCAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDc4OlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFtdO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSA3OTpcblx0ICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgODI6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gW107XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDgzOlxuXHQgICAgICAgICAgICAgICAgICAgICQkWyQwIC0gMV0ucHVzaCgkJFskMF0pO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSA4Njpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSBbXTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgODc6XG5cdCAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDkwOlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFtdO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSA5MTpcblx0ICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgOTQ6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gW107XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDk1OlxuXHQgICAgICAgICAgICAgICAgICAgICQkWyQwIC0gMV0ucHVzaCgkJFskMF0pO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSA5ODpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSBbJCRbJDBdXTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgOTk6XG5cdCAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDEwMDpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSBbJCRbJDBdXTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTAxOlxuXHQgICAgICAgICAgICAgICAgICAgICQkWyQwIC0gMV0ucHVzaCgkJFskMF0pO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblx0ICAgICAgICB0YWJsZTogW3sgMzogMSwgNDogMiwgNTogWzIsIDQ2XSwgNjogMywgMTQ6IFsyLCA0Nl0sIDE1OiBbMiwgNDZdLCAxOTogWzIsIDQ2XSwgMjk6IFsyLCA0Nl0sIDM0OiBbMiwgNDZdLCA0ODogWzIsIDQ2XSwgNTE6IFsyLCA0Nl0sIDU1OiBbMiwgNDZdLCA2MDogWzIsIDQ2XSB9LCB7IDE6IFszXSB9LCB7IDU6IFsxLCA0XSB9LCB7IDU6IFsyLCAyXSwgNzogNSwgODogNiwgOTogNywgMTA6IDgsIDExOiA5LCAxMjogMTAsIDEzOiAxMSwgMTQ6IFsxLCAxMl0sIDE1OiBbMSwgMjBdLCAxNjogMTcsIDE5OiBbMSwgMjNdLCAyNDogMTUsIDI3OiAxNiwgMjk6IFsxLCAyMV0sIDM0OiBbMSwgMjJdLCAzOTogWzIsIDJdLCA0NDogWzIsIDJdLCA0NzogWzIsIDJdLCA0ODogWzEsIDEzXSwgNTE6IFsxLCAxNF0sIDU1OiBbMSwgMThdLCA1OTogMTksIDYwOiBbMSwgMjRdIH0sIHsgMTogWzIsIDFdIH0sIHsgNTogWzIsIDQ3XSwgMTQ6IFsyLCA0N10sIDE1OiBbMiwgNDddLCAxOTogWzIsIDQ3XSwgMjk6IFsyLCA0N10sIDM0OiBbMiwgNDddLCAzOTogWzIsIDQ3XSwgNDQ6IFsyLCA0N10sIDQ3OiBbMiwgNDddLCA0ODogWzIsIDQ3XSwgNTE6IFsyLCA0N10sIDU1OiBbMiwgNDddLCA2MDogWzIsIDQ3XSB9LCB7IDU6IFsyLCAzXSwgMTQ6IFsyLCAzXSwgMTU6IFsyLCAzXSwgMTk6IFsyLCAzXSwgMjk6IFsyLCAzXSwgMzQ6IFsyLCAzXSwgMzk6IFsyLCAzXSwgNDQ6IFsyLCAzXSwgNDc6IFsyLCAzXSwgNDg6IFsyLCAzXSwgNTE6IFsyLCAzXSwgNTU6IFsyLCAzXSwgNjA6IFsyLCAzXSB9LCB7IDU6IFsyLCA0XSwgMTQ6IFsyLCA0XSwgMTU6IFsyLCA0XSwgMTk6IFsyLCA0XSwgMjk6IFsyLCA0XSwgMzQ6IFsyLCA0XSwgMzk6IFsyLCA0XSwgNDQ6IFsyLCA0XSwgNDc6IFsyLCA0XSwgNDg6IFsyLCA0XSwgNTE6IFsyLCA0XSwgNTU6IFsyLCA0XSwgNjA6IFsyLCA0XSB9LCB7IDU6IFsyLCA1XSwgMTQ6IFsyLCA1XSwgMTU6IFsyLCA1XSwgMTk6IFsyLCA1XSwgMjk6IFsyLCA1XSwgMzQ6IFsyLCA1XSwgMzk6IFsyLCA1XSwgNDQ6IFsyLCA1XSwgNDc6IFsyLCA1XSwgNDg6IFsyLCA1XSwgNTE6IFsyLCA1XSwgNTU6IFsyLCA1XSwgNjA6IFsyLCA1XSB9LCB7IDU6IFsyLCA2XSwgMTQ6IFsyLCA2XSwgMTU6IFsyLCA2XSwgMTk6IFsyLCA2XSwgMjk6IFsyLCA2XSwgMzQ6IFsyLCA2XSwgMzk6IFsyLCA2XSwgNDQ6IFsyLCA2XSwgNDc6IFsyLCA2XSwgNDg6IFsyLCA2XSwgNTE6IFsyLCA2XSwgNTU6IFsyLCA2XSwgNjA6IFsyLCA2XSB9LCB7IDU6IFsyLCA3XSwgMTQ6IFsyLCA3XSwgMTU6IFsyLCA3XSwgMTk6IFsyLCA3XSwgMjk6IFsyLCA3XSwgMzQ6IFsyLCA3XSwgMzk6IFsyLCA3XSwgNDQ6IFsyLCA3XSwgNDc6IFsyLCA3XSwgNDg6IFsyLCA3XSwgNTE6IFsyLCA3XSwgNTU6IFsyLCA3XSwgNjA6IFsyLCA3XSB9LCB7IDU6IFsyLCA4XSwgMTQ6IFsyLCA4XSwgMTU6IFsyLCA4XSwgMTk6IFsyLCA4XSwgMjk6IFsyLCA4XSwgMzQ6IFsyLCA4XSwgMzk6IFsyLCA4XSwgNDQ6IFsyLCA4XSwgNDc6IFsyLCA4XSwgNDg6IFsyLCA4XSwgNTE6IFsyLCA4XSwgNTU6IFsyLCA4XSwgNjA6IFsyLCA4XSB9LCB7IDU6IFsyLCA5XSwgMTQ6IFsyLCA5XSwgMTU6IFsyLCA5XSwgMTk6IFsyLCA5XSwgMjk6IFsyLCA5XSwgMzQ6IFsyLCA5XSwgMzk6IFsyLCA5XSwgNDQ6IFsyLCA5XSwgNDc6IFsyLCA5XSwgNDg6IFsyLCA5XSwgNTE6IFsyLCA5XSwgNTU6IFsyLCA5XSwgNjA6IFsyLCA5XSB9LCB7IDIwOiAyNSwgNzI6IFsxLCAzNV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAyMDogMzYsIDcyOiBbMSwgMzVdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgNDogMzcsIDY6IDMsIDE0OiBbMiwgNDZdLCAxNTogWzIsIDQ2XSwgMTk6IFsyLCA0Nl0sIDI5OiBbMiwgNDZdLCAzNDogWzIsIDQ2XSwgMzk6IFsyLCA0Nl0sIDQ0OiBbMiwgNDZdLCA0NzogWzIsIDQ2XSwgNDg6IFsyLCA0Nl0sIDUxOiBbMiwgNDZdLCA1NTogWzIsIDQ2XSwgNjA6IFsyLCA0Nl0gfSwgeyA0OiAzOCwgNjogMywgMTQ6IFsyLCA0Nl0sIDE1OiBbMiwgNDZdLCAxOTogWzIsIDQ2XSwgMjk6IFsyLCA0Nl0sIDM0OiBbMiwgNDZdLCA0NDogWzIsIDQ2XSwgNDc6IFsyLCA0Nl0sIDQ4OiBbMiwgNDZdLCA1MTogWzIsIDQ2XSwgNTU6IFsyLCA0Nl0sIDYwOiBbMiwgNDZdIH0sIHsgMTM6IDQwLCAxNTogWzEsIDIwXSwgMTc6IDM5IH0sIHsgMjA6IDQyLCA1NjogNDEsIDY0OiA0MywgNjU6IFsxLCA0NF0sIDcyOiBbMSwgMzVdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgNDogNDUsIDY6IDMsIDE0OiBbMiwgNDZdLCAxNTogWzIsIDQ2XSwgMTk6IFsyLCA0Nl0sIDI5OiBbMiwgNDZdLCAzNDogWzIsIDQ2XSwgNDc6IFsyLCA0Nl0sIDQ4OiBbMiwgNDZdLCA1MTogWzIsIDQ2XSwgNTU6IFsyLCA0Nl0sIDYwOiBbMiwgNDZdIH0sIHsgNTogWzIsIDEwXSwgMTQ6IFsyLCAxMF0sIDE1OiBbMiwgMTBdLCAxODogWzIsIDEwXSwgMTk6IFsyLCAxMF0sIDI5OiBbMiwgMTBdLCAzNDogWzIsIDEwXSwgMzk6IFsyLCAxMF0sIDQ0OiBbMiwgMTBdLCA0NzogWzIsIDEwXSwgNDg6IFsyLCAxMF0sIDUxOiBbMiwgMTBdLCA1NTogWzIsIDEwXSwgNjA6IFsyLCAxMF0gfSwgeyAyMDogNDYsIDcyOiBbMSwgMzVdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMjA6IDQ3LCA3MjogWzEsIDM1XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDIwOiA0OCwgNzI6IFsxLCAzNV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAyMDogNDIsIDU2OiA0OSwgNjQ6IDQzLCA2NTogWzEsIDQ0XSwgNzI6IFsxLCAzNV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAzMzogWzIsIDc4XSwgNDk6IDUwLCA2NTogWzIsIDc4XSwgNzI6IFsyLCA3OF0sIDgwOiBbMiwgNzhdLCA4MTogWzIsIDc4XSwgODI6IFsyLCA3OF0sIDgzOiBbMiwgNzhdLCA4NDogWzIsIDc4XSwgODU6IFsyLCA3OF0gfSwgeyAyMzogWzIsIDMzXSwgMzM6IFsyLCAzM10sIDU0OiBbMiwgMzNdLCA2NTogWzIsIDMzXSwgNjg6IFsyLCAzM10sIDcyOiBbMiwgMzNdLCA3NTogWzIsIDMzXSwgODA6IFsyLCAzM10sIDgxOiBbMiwgMzNdLCA4MjogWzIsIDMzXSwgODM6IFsyLCAzM10sIDg0OiBbMiwgMzNdLCA4NTogWzIsIDMzXSB9LCB7IDIzOiBbMiwgMzRdLCAzMzogWzIsIDM0XSwgNTQ6IFsyLCAzNF0sIDY1OiBbMiwgMzRdLCA2ODogWzIsIDM0XSwgNzI6IFsyLCAzNF0sIDc1OiBbMiwgMzRdLCA4MDogWzIsIDM0XSwgODE6IFsyLCAzNF0sIDgyOiBbMiwgMzRdLCA4MzogWzIsIDM0XSwgODQ6IFsyLCAzNF0sIDg1OiBbMiwgMzRdIH0sIHsgMjM6IFsyLCAzNV0sIDMzOiBbMiwgMzVdLCA1NDogWzIsIDM1XSwgNjU6IFsyLCAzNV0sIDY4OiBbMiwgMzVdLCA3MjogWzIsIDM1XSwgNzU6IFsyLCAzNV0sIDgwOiBbMiwgMzVdLCA4MTogWzIsIDM1XSwgODI6IFsyLCAzNV0sIDgzOiBbMiwgMzVdLCA4NDogWzIsIDM1XSwgODU6IFsyLCAzNV0gfSwgeyAyMzogWzIsIDM2XSwgMzM6IFsyLCAzNl0sIDU0OiBbMiwgMzZdLCA2NTogWzIsIDM2XSwgNjg6IFsyLCAzNl0sIDcyOiBbMiwgMzZdLCA3NTogWzIsIDM2XSwgODA6IFsyLCAzNl0sIDgxOiBbMiwgMzZdLCA4MjogWzIsIDM2XSwgODM6IFsyLCAzNl0sIDg0OiBbMiwgMzZdLCA4NTogWzIsIDM2XSB9LCB7IDIzOiBbMiwgMzddLCAzMzogWzIsIDM3XSwgNTQ6IFsyLCAzN10sIDY1OiBbMiwgMzddLCA2ODogWzIsIDM3XSwgNzI6IFsyLCAzN10sIDc1OiBbMiwgMzddLCA4MDogWzIsIDM3XSwgODE6IFsyLCAzN10sIDgyOiBbMiwgMzddLCA4MzogWzIsIDM3XSwgODQ6IFsyLCAzN10sIDg1OiBbMiwgMzddIH0sIHsgMjM6IFsyLCAzOF0sIDMzOiBbMiwgMzhdLCA1NDogWzIsIDM4XSwgNjU6IFsyLCAzOF0sIDY4OiBbMiwgMzhdLCA3MjogWzIsIDM4XSwgNzU6IFsyLCAzOF0sIDgwOiBbMiwgMzhdLCA4MTogWzIsIDM4XSwgODI6IFsyLCAzOF0sIDgzOiBbMiwgMzhdLCA4NDogWzIsIDM4XSwgODU6IFsyLCAzOF0gfSwgeyAyMzogWzIsIDM5XSwgMzM6IFsyLCAzOV0sIDU0OiBbMiwgMzldLCA2NTogWzIsIDM5XSwgNjg6IFsyLCAzOV0sIDcyOiBbMiwgMzldLCA3NTogWzIsIDM5XSwgODA6IFsyLCAzOV0sIDgxOiBbMiwgMzldLCA4MjogWzIsIDM5XSwgODM6IFsyLCAzOV0sIDg0OiBbMiwgMzldLCA4NTogWzIsIDM5XSB9LCB7IDIzOiBbMiwgNDNdLCAzMzogWzIsIDQzXSwgNTQ6IFsyLCA0M10sIDY1OiBbMiwgNDNdLCA2ODogWzIsIDQzXSwgNzI6IFsyLCA0M10sIDc1OiBbMiwgNDNdLCA4MDogWzIsIDQzXSwgODE6IFsyLCA0M10sIDgyOiBbMiwgNDNdLCA4MzogWzIsIDQzXSwgODQ6IFsyLCA0M10sIDg1OiBbMiwgNDNdLCA4NzogWzEsIDUxXSB9LCB7IDcyOiBbMSwgMzVdLCA4NjogNTIgfSwgeyAyMzogWzIsIDQ1XSwgMzM6IFsyLCA0NV0sIDU0OiBbMiwgNDVdLCA2NTogWzIsIDQ1XSwgNjg6IFsyLCA0NV0sIDcyOiBbMiwgNDVdLCA3NTogWzIsIDQ1XSwgODA6IFsyLCA0NV0sIDgxOiBbMiwgNDVdLCA4MjogWzIsIDQ1XSwgODM6IFsyLCA0NV0sIDg0OiBbMiwgNDVdLCA4NTogWzIsIDQ1XSwgODc6IFsyLCA0NV0gfSwgeyA1MjogNTMsIDU0OiBbMiwgODJdLCA2NTogWzIsIDgyXSwgNzI6IFsyLCA4Ml0sIDgwOiBbMiwgODJdLCA4MTogWzIsIDgyXSwgODI6IFsyLCA4Ml0sIDgzOiBbMiwgODJdLCA4NDogWzIsIDgyXSwgODU6IFsyLCA4Ml0gfSwgeyAyNTogNTQsIDM4OiA1NiwgMzk6IFsxLCA1OF0sIDQzOiA1NywgNDQ6IFsxLCA1OV0sIDQ1OiA1NSwgNDc6IFsyLCA1NF0gfSwgeyAyODogNjAsIDQzOiA2MSwgNDQ6IFsxLCA1OV0sIDQ3OiBbMiwgNTZdIH0sIHsgMTM6IDYzLCAxNTogWzEsIDIwXSwgMTg6IFsxLCA2Ml0gfSwgeyAxNTogWzIsIDQ4XSwgMTg6IFsyLCA0OF0gfSwgeyAzMzogWzIsIDg2XSwgNTc6IDY0LCA2NTogWzIsIDg2XSwgNzI6IFsyLCA4Nl0sIDgwOiBbMiwgODZdLCA4MTogWzIsIDg2XSwgODI6IFsyLCA4Nl0sIDgzOiBbMiwgODZdLCA4NDogWzIsIDg2XSwgODU6IFsyLCA4Nl0gfSwgeyAzMzogWzIsIDQwXSwgNjU6IFsyLCA0MF0sIDcyOiBbMiwgNDBdLCA4MDogWzIsIDQwXSwgODE6IFsyLCA0MF0sIDgyOiBbMiwgNDBdLCA4MzogWzIsIDQwXSwgODQ6IFsyLCA0MF0sIDg1OiBbMiwgNDBdIH0sIHsgMzM6IFsyLCA0MV0sIDY1OiBbMiwgNDFdLCA3MjogWzIsIDQxXSwgODA6IFsyLCA0MV0sIDgxOiBbMiwgNDFdLCA4MjogWzIsIDQxXSwgODM6IFsyLCA0MV0sIDg0OiBbMiwgNDFdLCA4NTogWzIsIDQxXSB9LCB7IDIwOiA2NSwgNzI6IFsxLCAzNV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAyNjogNjYsIDQ3OiBbMSwgNjddIH0sIHsgMzA6IDY4LCAzMzogWzIsIDU4XSwgNjU6IFsyLCA1OF0sIDcyOiBbMiwgNThdLCA3NTogWzIsIDU4XSwgODA6IFsyLCA1OF0sIDgxOiBbMiwgNThdLCA4MjogWzIsIDU4XSwgODM6IFsyLCA1OF0sIDg0OiBbMiwgNThdLCA4NTogWzIsIDU4XSB9LCB7IDMzOiBbMiwgNjRdLCAzNTogNjksIDY1OiBbMiwgNjRdLCA3MjogWzIsIDY0XSwgNzU6IFsyLCA2NF0sIDgwOiBbMiwgNjRdLCA4MTogWzIsIDY0XSwgODI6IFsyLCA2NF0sIDgzOiBbMiwgNjRdLCA4NDogWzIsIDY0XSwgODU6IFsyLCA2NF0gfSwgeyAyMTogNzAsIDIzOiBbMiwgNTBdLCA2NTogWzIsIDUwXSwgNzI6IFsyLCA1MF0sIDgwOiBbMiwgNTBdLCA4MTogWzIsIDUwXSwgODI6IFsyLCA1MF0sIDgzOiBbMiwgNTBdLCA4NDogWzIsIDUwXSwgODU6IFsyLCA1MF0gfSwgeyAzMzogWzIsIDkwXSwgNjE6IDcxLCA2NTogWzIsIDkwXSwgNzI6IFsyLCA5MF0sIDgwOiBbMiwgOTBdLCA4MTogWzIsIDkwXSwgODI6IFsyLCA5MF0sIDgzOiBbMiwgOTBdLCA4NDogWzIsIDkwXSwgODU6IFsyLCA5MF0gfSwgeyAyMDogNzUsIDMzOiBbMiwgODBdLCA1MDogNzIsIDYzOiA3MywgNjQ6IDc2LCA2NTogWzEsIDQ0XSwgNjk6IDc0LCA3MDogNzcsIDcxOiA3OCwgNzI6IFsxLCA3OV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyA3MjogWzEsIDgwXSB9LCB7IDIzOiBbMiwgNDJdLCAzMzogWzIsIDQyXSwgNTQ6IFsyLCA0Ml0sIDY1OiBbMiwgNDJdLCA2ODogWzIsIDQyXSwgNzI6IFsyLCA0Ml0sIDc1OiBbMiwgNDJdLCA4MDogWzIsIDQyXSwgODE6IFsyLCA0Ml0sIDgyOiBbMiwgNDJdLCA4MzogWzIsIDQyXSwgODQ6IFsyLCA0Ml0sIDg1OiBbMiwgNDJdLCA4NzogWzEsIDUxXSB9LCB7IDIwOiA3NSwgNTM6IDgxLCA1NDogWzIsIDg0XSwgNjM6IDgyLCA2NDogNzYsIDY1OiBbMSwgNDRdLCA2OTogODMsIDcwOiA3NywgNzE6IDc4LCA3MjogWzEsIDc5XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDI2OiA4NCwgNDc6IFsxLCA2N10gfSwgeyA0NzogWzIsIDU1XSB9LCB7IDQ6IDg1LCA2OiAzLCAxNDogWzIsIDQ2XSwgMTU6IFsyLCA0Nl0sIDE5OiBbMiwgNDZdLCAyOTogWzIsIDQ2XSwgMzQ6IFsyLCA0Nl0sIDM5OiBbMiwgNDZdLCA0NDogWzIsIDQ2XSwgNDc6IFsyLCA0Nl0sIDQ4OiBbMiwgNDZdLCA1MTogWzIsIDQ2XSwgNTU6IFsyLCA0Nl0sIDYwOiBbMiwgNDZdIH0sIHsgNDc6IFsyLCAyMF0gfSwgeyAyMDogODYsIDcyOiBbMSwgMzVdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgNDogODcsIDY6IDMsIDE0OiBbMiwgNDZdLCAxNTogWzIsIDQ2XSwgMTk6IFsyLCA0Nl0sIDI5OiBbMiwgNDZdLCAzNDogWzIsIDQ2XSwgNDc6IFsyLCA0Nl0sIDQ4OiBbMiwgNDZdLCA1MTogWzIsIDQ2XSwgNTU6IFsyLCA0Nl0sIDYwOiBbMiwgNDZdIH0sIHsgMjY6IDg4LCA0NzogWzEsIDY3XSB9LCB7IDQ3OiBbMiwgNTddIH0sIHsgNTogWzIsIDExXSwgMTQ6IFsyLCAxMV0sIDE1OiBbMiwgMTFdLCAxOTogWzIsIDExXSwgMjk6IFsyLCAxMV0sIDM0OiBbMiwgMTFdLCAzOTogWzIsIDExXSwgNDQ6IFsyLCAxMV0sIDQ3OiBbMiwgMTFdLCA0ODogWzIsIDExXSwgNTE6IFsyLCAxMV0sIDU1OiBbMiwgMTFdLCA2MDogWzIsIDExXSB9LCB7IDE1OiBbMiwgNDldLCAxODogWzIsIDQ5XSB9LCB7IDIwOiA3NSwgMzM6IFsyLCA4OF0sIDU4OiA4OSwgNjM6IDkwLCA2NDogNzYsIDY1OiBbMSwgNDRdLCA2OTogOTEsIDcwOiA3NywgNzE6IDc4LCA3MjogWzEsIDc5XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDY1OiBbMiwgOTRdLCA2NjogOTIsIDY4OiBbMiwgOTRdLCA3MjogWzIsIDk0XSwgODA6IFsyLCA5NF0sIDgxOiBbMiwgOTRdLCA4MjogWzIsIDk0XSwgODM6IFsyLCA5NF0sIDg0OiBbMiwgOTRdLCA4NTogWzIsIDk0XSB9LCB7IDU6IFsyLCAyNV0sIDE0OiBbMiwgMjVdLCAxNTogWzIsIDI1XSwgMTk6IFsyLCAyNV0sIDI5OiBbMiwgMjVdLCAzNDogWzIsIDI1XSwgMzk6IFsyLCAyNV0sIDQ0OiBbMiwgMjVdLCA0NzogWzIsIDI1XSwgNDg6IFsyLCAyNV0sIDUxOiBbMiwgMjVdLCA1NTogWzIsIDI1XSwgNjA6IFsyLCAyNV0gfSwgeyAyMDogOTMsIDcyOiBbMSwgMzVdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMjA6IDc1LCAzMTogOTQsIDMzOiBbMiwgNjBdLCA2MzogOTUsIDY0OiA3NiwgNjU6IFsxLCA0NF0sIDY5OiA5NiwgNzA6IDc3LCA3MTogNzgsIDcyOiBbMSwgNzldLCA3NTogWzIsIDYwXSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDIwOiA3NSwgMzM6IFsyLCA2Nl0sIDM2OiA5NywgNjM6IDk4LCA2NDogNzYsIDY1OiBbMSwgNDRdLCA2OTogOTksIDcwOiA3NywgNzE6IDc4LCA3MjogWzEsIDc5XSwgNzU6IFsyLCA2Nl0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAyMDogNzUsIDIyOiAxMDAsIDIzOiBbMiwgNTJdLCA2MzogMTAxLCA2NDogNzYsIDY1OiBbMSwgNDRdLCA2OTogMTAyLCA3MDogNzcsIDcxOiA3OCwgNzI6IFsxLCA3OV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAyMDogNzUsIDMzOiBbMiwgOTJdLCA2MjogMTAzLCA2MzogMTA0LCA2NDogNzYsIDY1OiBbMSwgNDRdLCA2OTogMTA1LCA3MDogNzcsIDcxOiA3OCwgNzI6IFsxLCA3OV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAzMzogWzEsIDEwNl0gfSwgeyAzMzogWzIsIDc5XSwgNjU6IFsyLCA3OV0sIDcyOiBbMiwgNzldLCA4MDogWzIsIDc5XSwgODE6IFsyLCA3OV0sIDgyOiBbMiwgNzldLCA4MzogWzIsIDc5XSwgODQ6IFsyLCA3OV0sIDg1OiBbMiwgNzldIH0sIHsgMzM6IFsyLCA4MV0gfSwgeyAyMzogWzIsIDI3XSwgMzM6IFsyLCAyN10sIDU0OiBbMiwgMjddLCA2NTogWzIsIDI3XSwgNjg6IFsyLCAyN10sIDcyOiBbMiwgMjddLCA3NTogWzIsIDI3XSwgODA6IFsyLCAyN10sIDgxOiBbMiwgMjddLCA4MjogWzIsIDI3XSwgODM6IFsyLCAyN10sIDg0OiBbMiwgMjddLCA4NTogWzIsIDI3XSB9LCB7IDIzOiBbMiwgMjhdLCAzMzogWzIsIDI4XSwgNTQ6IFsyLCAyOF0sIDY1OiBbMiwgMjhdLCA2ODogWzIsIDI4XSwgNzI6IFsyLCAyOF0sIDc1OiBbMiwgMjhdLCA4MDogWzIsIDI4XSwgODE6IFsyLCAyOF0sIDgyOiBbMiwgMjhdLCA4MzogWzIsIDI4XSwgODQ6IFsyLCAyOF0sIDg1OiBbMiwgMjhdIH0sIHsgMjM6IFsyLCAzMF0sIDMzOiBbMiwgMzBdLCA1NDogWzIsIDMwXSwgNjg6IFsyLCAzMF0sIDcxOiAxMDcsIDcyOiBbMSwgMTA4XSwgNzU6IFsyLCAzMF0gfSwgeyAyMzogWzIsIDk4XSwgMzM6IFsyLCA5OF0sIDU0OiBbMiwgOThdLCA2ODogWzIsIDk4XSwgNzI6IFsyLCA5OF0sIDc1OiBbMiwgOThdIH0sIHsgMjM6IFsyLCA0NV0sIDMzOiBbMiwgNDVdLCA1NDogWzIsIDQ1XSwgNjU6IFsyLCA0NV0sIDY4OiBbMiwgNDVdLCA3MjogWzIsIDQ1XSwgNzM6IFsxLCAxMDldLCA3NTogWzIsIDQ1XSwgODA6IFsyLCA0NV0sIDgxOiBbMiwgNDVdLCA4MjogWzIsIDQ1XSwgODM6IFsyLCA0NV0sIDg0OiBbMiwgNDVdLCA4NTogWzIsIDQ1XSwgODc6IFsyLCA0NV0gfSwgeyAyMzogWzIsIDQ0XSwgMzM6IFsyLCA0NF0sIDU0OiBbMiwgNDRdLCA2NTogWzIsIDQ0XSwgNjg6IFsyLCA0NF0sIDcyOiBbMiwgNDRdLCA3NTogWzIsIDQ0XSwgODA6IFsyLCA0NF0sIDgxOiBbMiwgNDRdLCA4MjogWzIsIDQ0XSwgODM6IFsyLCA0NF0sIDg0OiBbMiwgNDRdLCA4NTogWzIsIDQ0XSwgODc6IFsyLCA0NF0gfSwgeyA1NDogWzEsIDExMF0gfSwgeyA1NDogWzIsIDgzXSwgNjU6IFsyLCA4M10sIDcyOiBbMiwgODNdLCA4MDogWzIsIDgzXSwgODE6IFsyLCA4M10sIDgyOiBbMiwgODNdLCA4MzogWzIsIDgzXSwgODQ6IFsyLCA4M10sIDg1OiBbMiwgODNdIH0sIHsgNTQ6IFsyLCA4NV0gfSwgeyA1OiBbMiwgMTNdLCAxNDogWzIsIDEzXSwgMTU6IFsyLCAxM10sIDE5OiBbMiwgMTNdLCAyOTogWzIsIDEzXSwgMzQ6IFsyLCAxM10sIDM5OiBbMiwgMTNdLCA0NDogWzIsIDEzXSwgNDc6IFsyLCAxM10sIDQ4OiBbMiwgMTNdLCA1MTogWzIsIDEzXSwgNTU6IFsyLCAxM10sIDYwOiBbMiwgMTNdIH0sIHsgMzg6IDU2LCAzOTogWzEsIDU4XSwgNDM6IDU3LCA0NDogWzEsIDU5XSwgNDU6IDExMiwgNDY6IDExMSwgNDc6IFsyLCA3Nl0gfSwgeyAzMzogWzIsIDcwXSwgNDA6IDExMywgNjU6IFsyLCA3MF0sIDcyOiBbMiwgNzBdLCA3NTogWzIsIDcwXSwgODA6IFsyLCA3MF0sIDgxOiBbMiwgNzBdLCA4MjogWzIsIDcwXSwgODM6IFsyLCA3MF0sIDg0OiBbMiwgNzBdLCA4NTogWzIsIDcwXSB9LCB7IDQ3OiBbMiwgMThdIH0sIHsgNTogWzIsIDE0XSwgMTQ6IFsyLCAxNF0sIDE1OiBbMiwgMTRdLCAxOTogWzIsIDE0XSwgMjk6IFsyLCAxNF0sIDM0OiBbMiwgMTRdLCAzOTogWzIsIDE0XSwgNDQ6IFsyLCAxNF0sIDQ3OiBbMiwgMTRdLCA0ODogWzIsIDE0XSwgNTE6IFsyLCAxNF0sIDU1OiBbMiwgMTRdLCA2MDogWzIsIDE0XSB9LCB7IDMzOiBbMSwgMTE0XSB9LCB7IDMzOiBbMiwgODddLCA2NTogWzIsIDg3XSwgNzI6IFsyLCA4N10sIDgwOiBbMiwgODddLCA4MTogWzIsIDg3XSwgODI6IFsyLCA4N10sIDgzOiBbMiwgODddLCA4NDogWzIsIDg3XSwgODU6IFsyLCA4N10gfSwgeyAzMzogWzIsIDg5XSB9LCB7IDIwOiA3NSwgNjM6IDExNiwgNjQ6IDc2LCA2NTogWzEsIDQ0XSwgNjc6IDExNSwgNjg6IFsyLCA5Nl0sIDY5OiAxMTcsIDcwOiA3NywgNzE6IDc4LCA3MjogWzEsIDc5XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDMzOiBbMSwgMTE4XSB9LCB7IDMyOiAxMTksIDMzOiBbMiwgNjJdLCA3NDogMTIwLCA3NTogWzEsIDEyMV0gfSwgeyAzMzogWzIsIDU5XSwgNjU6IFsyLCA1OV0sIDcyOiBbMiwgNTldLCA3NTogWzIsIDU5XSwgODA6IFsyLCA1OV0sIDgxOiBbMiwgNTldLCA4MjogWzIsIDU5XSwgODM6IFsyLCA1OV0sIDg0OiBbMiwgNTldLCA4NTogWzIsIDU5XSB9LCB7IDMzOiBbMiwgNjFdLCA3NTogWzIsIDYxXSB9LCB7IDMzOiBbMiwgNjhdLCAzNzogMTIyLCA3NDogMTIzLCA3NTogWzEsIDEyMV0gfSwgeyAzMzogWzIsIDY1XSwgNjU6IFsyLCA2NV0sIDcyOiBbMiwgNjVdLCA3NTogWzIsIDY1XSwgODA6IFsyLCA2NV0sIDgxOiBbMiwgNjVdLCA4MjogWzIsIDY1XSwgODM6IFsyLCA2NV0sIDg0OiBbMiwgNjVdLCA4NTogWzIsIDY1XSB9LCB7IDMzOiBbMiwgNjddLCA3NTogWzIsIDY3XSB9LCB7IDIzOiBbMSwgMTI0XSB9LCB7IDIzOiBbMiwgNTFdLCA2NTogWzIsIDUxXSwgNzI6IFsyLCA1MV0sIDgwOiBbMiwgNTFdLCA4MTogWzIsIDUxXSwgODI6IFsyLCA1MV0sIDgzOiBbMiwgNTFdLCA4NDogWzIsIDUxXSwgODU6IFsyLCA1MV0gfSwgeyAyMzogWzIsIDUzXSB9LCB7IDMzOiBbMSwgMTI1XSB9LCB7IDMzOiBbMiwgOTFdLCA2NTogWzIsIDkxXSwgNzI6IFsyLCA5MV0sIDgwOiBbMiwgOTFdLCA4MTogWzIsIDkxXSwgODI6IFsyLCA5MV0sIDgzOiBbMiwgOTFdLCA4NDogWzIsIDkxXSwgODU6IFsyLCA5MV0gfSwgeyAzMzogWzIsIDkzXSB9LCB7IDU6IFsyLCAyMl0sIDE0OiBbMiwgMjJdLCAxNTogWzIsIDIyXSwgMTk6IFsyLCAyMl0sIDI5OiBbMiwgMjJdLCAzNDogWzIsIDIyXSwgMzk6IFsyLCAyMl0sIDQ0OiBbMiwgMjJdLCA0NzogWzIsIDIyXSwgNDg6IFsyLCAyMl0sIDUxOiBbMiwgMjJdLCA1NTogWzIsIDIyXSwgNjA6IFsyLCAyMl0gfSwgeyAyMzogWzIsIDk5XSwgMzM6IFsyLCA5OV0sIDU0OiBbMiwgOTldLCA2ODogWzIsIDk5XSwgNzI6IFsyLCA5OV0sIDc1OiBbMiwgOTldIH0sIHsgNzM6IFsxLCAxMDldIH0sIHsgMjA6IDc1LCA2MzogMTI2LCA2NDogNzYsIDY1OiBbMSwgNDRdLCA3MjogWzEsIDM1XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDU6IFsyLCAyM10sIDE0OiBbMiwgMjNdLCAxNTogWzIsIDIzXSwgMTk6IFsyLCAyM10sIDI5OiBbMiwgMjNdLCAzNDogWzIsIDIzXSwgMzk6IFsyLCAyM10sIDQ0OiBbMiwgMjNdLCA0NzogWzIsIDIzXSwgNDg6IFsyLCAyM10sIDUxOiBbMiwgMjNdLCA1NTogWzIsIDIzXSwgNjA6IFsyLCAyM10gfSwgeyA0NzogWzIsIDE5XSB9LCB7IDQ3OiBbMiwgNzddIH0sIHsgMjA6IDc1LCAzMzogWzIsIDcyXSwgNDE6IDEyNywgNjM6IDEyOCwgNjQ6IDc2LCA2NTogWzEsIDQ0XSwgNjk6IDEyOSwgNzA6IDc3LCA3MTogNzgsIDcyOiBbMSwgNzldLCA3NTogWzIsIDcyXSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDU6IFsyLCAyNF0sIDE0OiBbMiwgMjRdLCAxNTogWzIsIDI0XSwgMTk6IFsyLCAyNF0sIDI5OiBbMiwgMjRdLCAzNDogWzIsIDI0XSwgMzk6IFsyLCAyNF0sIDQ0OiBbMiwgMjRdLCA0NzogWzIsIDI0XSwgNDg6IFsyLCAyNF0sIDUxOiBbMiwgMjRdLCA1NTogWzIsIDI0XSwgNjA6IFsyLCAyNF0gfSwgeyA2ODogWzEsIDEzMF0gfSwgeyA2NTogWzIsIDk1XSwgNjg6IFsyLCA5NV0sIDcyOiBbMiwgOTVdLCA4MDogWzIsIDk1XSwgODE6IFsyLCA5NV0sIDgyOiBbMiwgOTVdLCA4MzogWzIsIDk1XSwgODQ6IFsyLCA5NV0sIDg1OiBbMiwgOTVdIH0sIHsgNjg6IFsyLCA5N10gfSwgeyA1OiBbMiwgMjFdLCAxNDogWzIsIDIxXSwgMTU6IFsyLCAyMV0sIDE5OiBbMiwgMjFdLCAyOTogWzIsIDIxXSwgMzQ6IFsyLCAyMV0sIDM5OiBbMiwgMjFdLCA0NDogWzIsIDIxXSwgNDc6IFsyLCAyMV0sIDQ4OiBbMiwgMjFdLCA1MTogWzIsIDIxXSwgNTU6IFsyLCAyMV0sIDYwOiBbMiwgMjFdIH0sIHsgMzM6IFsxLCAxMzFdIH0sIHsgMzM6IFsyLCA2M10gfSwgeyA3MjogWzEsIDEzM10sIDc2OiAxMzIgfSwgeyAzMzogWzEsIDEzNF0gfSwgeyAzMzogWzIsIDY5XSB9LCB7IDE1OiBbMiwgMTJdIH0sIHsgMTQ6IFsyLCAyNl0sIDE1OiBbMiwgMjZdLCAxOTogWzIsIDI2XSwgMjk6IFsyLCAyNl0sIDM0OiBbMiwgMjZdLCA0NzogWzIsIDI2XSwgNDg6IFsyLCAyNl0sIDUxOiBbMiwgMjZdLCA1NTogWzIsIDI2XSwgNjA6IFsyLCAyNl0gfSwgeyAyMzogWzIsIDMxXSwgMzM6IFsyLCAzMV0sIDU0OiBbMiwgMzFdLCA2ODogWzIsIDMxXSwgNzI6IFsyLCAzMV0sIDc1OiBbMiwgMzFdIH0sIHsgMzM6IFsyLCA3NF0sIDQyOiAxMzUsIDc0OiAxMzYsIDc1OiBbMSwgMTIxXSB9LCB7IDMzOiBbMiwgNzFdLCA2NTogWzIsIDcxXSwgNzI6IFsyLCA3MV0sIDc1OiBbMiwgNzFdLCA4MDogWzIsIDcxXSwgODE6IFsyLCA3MV0sIDgyOiBbMiwgNzFdLCA4MzogWzIsIDcxXSwgODQ6IFsyLCA3MV0sIDg1OiBbMiwgNzFdIH0sIHsgMzM6IFsyLCA3M10sIDc1OiBbMiwgNzNdIH0sIHsgMjM6IFsyLCAyOV0sIDMzOiBbMiwgMjldLCA1NDogWzIsIDI5XSwgNjU6IFsyLCAyOV0sIDY4OiBbMiwgMjldLCA3MjogWzIsIDI5XSwgNzU6IFsyLCAyOV0sIDgwOiBbMiwgMjldLCA4MTogWzIsIDI5XSwgODI6IFsyLCAyOV0sIDgzOiBbMiwgMjldLCA4NDogWzIsIDI5XSwgODU6IFsyLCAyOV0gfSwgeyAxNDogWzIsIDE1XSwgMTU6IFsyLCAxNV0sIDE5OiBbMiwgMTVdLCAyOTogWzIsIDE1XSwgMzQ6IFsyLCAxNV0sIDM5OiBbMiwgMTVdLCA0NDogWzIsIDE1XSwgNDc6IFsyLCAxNV0sIDQ4OiBbMiwgMTVdLCA1MTogWzIsIDE1XSwgNTU6IFsyLCAxNV0sIDYwOiBbMiwgMTVdIH0sIHsgNzI6IFsxLCAxMzhdLCA3NzogWzEsIDEzN10gfSwgeyA3MjogWzIsIDEwMF0sIDc3OiBbMiwgMTAwXSB9LCB7IDE0OiBbMiwgMTZdLCAxNTogWzIsIDE2XSwgMTk6IFsyLCAxNl0sIDI5OiBbMiwgMTZdLCAzNDogWzIsIDE2XSwgNDQ6IFsyLCAxNl0sIDQ3OiBbMiwgMTZdLCA0ODogWzIsIDE2XSwgNTE6IFsyLCAxNl0sIDU1OiBbMiwgMTZdLCA2MDogWzIsIDE2XSB9LCB7IDMzOiBbMSwgMTM5XSB9LCB7IDMzOiBbMiwgNzVdIH0sIHsgMzM6IFsyLCAzMl0gfSwgeyA3MjogWzIsIDEwMV0sIDc3OiBbMiwgMTAxXSB9LCB7IDE0OiBbMiwgMTddLCAxNTogWzIsIDE3XSwgMTk6IFsyLCAxN10sIDI5OiBbMiwgMTddLCAzNDogWzIsIDE3XSwgMzk6IFsyLCAxN10sIDQ0OiBbMiwgMTddLCA0NzogWzIsIDE3XSwgNDg6IFsyLCAxN10sIDUxOiBbMiwgMTddLCA1NTogWzIsIDE3XSwgNjA6IFsyLCAxN10gfV0sXG5cdCAgICAgICAgZGVmYXVsdEFjdGlvbnM6IHsgNDogWzIsIDFdLCA1NTogWzIsIDU1XSwgNTc6IFsyLCAyMF0sIDYxOiBbMiwgNTddLCA3NDogWzIsIDgxXSwgODM6IFsyLCA4NV0sIDg3OiBbMiwgMThdLCA5MTogWzIsIDg5XSwgMTAyOiBbMiwgNTNdLCAxMDU6IFsyLCA5M10sIDExMTogWzIsIDE5XSwgMTEyOiBbMiwgNzddLCAxMTc6IFsyLCA5N10sIDEyMDogWzIsIDYzXSwgMTIzOiBbMiwgNjldLCAxMjQ6IFsyLCAxMl0sIDEzNjogWzIsIDc1XSwgMTM3OiBbMiwgMzJdIH0sXG5cdCAgICAgICAgcGFyc2VFcnJvcjogZnVuY3Rpb24gcGFyc2VFcnJvcihzdHIsIGhhc2gpIHtcblx0ICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHN0cik7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gcGFyc2UoaW5wdXQpIHtcblx0ICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuXHQgICAgICAgICAgICAgICAgc3RhY2sgPSBbMF0sXG5cdCAgICAgICAgICAgICAgICB2c3RhY2sgPSBbbnVsbF0sXG5cdCAgICAgICAgICAgICAgICBsc3RhY2sgPSBbXSxcblx0ICAgICAgICAgICAgICAgIHRhYmxlID0gdGhpcy50YWJsZSxcblx0ICAgICAgICAgICAgICAgIHl5dGV4dCA9IFwiXCIsXG5cdCAgICAgICAgICAgICAgICB5eWxpbmVubyA9IDAsXG5cdCAgICAgICAgICAgICAgICB5eWxlbmcgPSAwLFxuXHQgICAgICAgICAgICAgICAgcmVjb3ZlcmluZyA9IDAsXG5cdCAgICAgICAgICAgICAgICBURVJST1IgPSAyLFxuXHQgICAgICAgICAgICAgICAgRU9GID0gMTtcblx0ICAgICAgICAgICAgdGhpcy5sZXhlci5zZXRJbnB1dChpbnB1dCk7XG5cdCAgICAgICAgICAgIHRoaXMubGV4ZXIueXkgPSB0aGlzLnl5O1xuXHQgICAgICAgICAgICB0aGlzLnl5LmxleGVyID0gdGhpcy5sZXhlcjtcblx0ICAgICAgICAgICAgdGhpcy55eS5wYXJzZXIgPSB0aGlzO1xuXHQgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMubGV4ZXIueXlsbG9jID09IFwidW5kZWZpbmVkXCIpIHRoaXMubGV4ZXIueXlsbG9jID0ge307XG5cdCAgICAgICAgICAgIHZhciB5eWxvYyA9IHRoaXMubGV4ZXIueXlsbG9jO1xuXHQgICAgICAgICAgICBsc3RhY2sucHVzaCh5eWxvYyk7XG5cdCAgICAgICAgICAgIHZhciByYW5nZXMgPSB0aGlzLmxleGVyLm9wdGlvbnMgJiYgdGhpcy5sZXhlci5vcHRpb25zLnJhbmdlcztcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnl5LnBhcnNlRXJyb3IgPT09IFwiZnVuY3Rpb25cIikgdGhpcy5wYXJzZUVycm9yID0gdGhpcy55eS5wYXJzZUVycm9yO1xuXHQgICAgICAgICAgICBmdW5jdGlvbiBwb3BTdGFjayhuKSB7XG5cdCAgICAgICAgICAgICAgICBzdGFjay5sZW5ndGggPSBzdGFjay5sZW5ndGggLSAyICogbjtcblx0ICAgICAgICAgICAgICAgIHZzdGFjay5sZW5ndGggPSB2c3RhY2subGVuZ3RoIC0gbjtcblx0ICAgICAgICAgICAgICAgIGxzdGFjay5sZW5ndGggPSBsc3RhY2subGVuZ3RoIC0gbjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBmdW5jdGlvbiBsZXgoKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgdG9rZW47XG5cdCAgICAgICAgICAgICAgICB0b2tlbiA9IHNlbGYubGV4ZXIubGV4KCkgfHwgMTtcblx0ICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdG9rZW4gIT09IFwibnVtYmVyXCIpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHNlbGYuc3ltYm9sc19bdG9rZW5dIHx8IHRva2VuO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHZhciBzeW1ib2wsXG5cdCAgICAgICAgICAgICAgICBwcmVFcnJvclN5bWJvbCxcblx0ICAgICAgICAgICAgICAgIHN0YXRlLFxuXHQgICAgICAgICAgICAgICAgYWN0aW9uLFxuXHQgICAgICAgICAgICAgICAgYSxcblx0ICAgICAgICAgICAgICAgIHIsXG5cdCAgICAgICAgICAgICAgICB5eXZhbCA9IHt9LFxuXHQgICAgICAgICAgICAgICAgcCxcblx0ICAgICAgICAgICAgICAgIGxlbixcblx0ICAgICAgICAgICAgICAgIG5ld1N0YXRlLFxuXHQgICAgICAgICAgICAgICAgZXhwZWN0ZWQ7XG5cdCAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG5cdCAgICAgICAgICAgICAgICBzdGF0ZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVmYXVsdEFjdGlvbnNbc3RhdGVdKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gdGhpcy5kZWZhdWx0QWN0aW9uc1tzdGF0ZV07XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChzeW1ib2wgPT09IG51bGwgfHwgdHlwZW9mIHN5bWJvbCA9PSBcInVuZGVmaW5lZFwiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN5bWJvbCA9IGxleCgpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSB0YWJsZVtzdGF0ZV0gJiYgdGFibGVbc3RhdGVdW3N5bWJvbF07XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhYWN0aW9uLmxlbmd0aCB8fCAhYWN0aW9uWzBdKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGVyclN0ciA9IFwiXCI7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWNvdmVyaW5nKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkID0gW107XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocCBpbiB0YWJsZVtzdGF0ZV0pIGlmICh0aGlzLnRlcm1pbmFsc19bcF0gJiYgcCA+IDIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkLnB1c2goXCInXCIgKyB0aGlzLnRlcm1pbmFsc19bcF0gKyBcIidcIik7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGV4ZXIuc2hvd1Bvc2l0aW9uKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJTdHIgPSBcIlBhcnNlIGVycm9yIG9uIGxpbmUgXCIgKyAoeXlsaW5lbm8gKyAxKSArIFwiOlxcblwiICsgdGhpcy5sZXhlci5zaG93UG9zaXRpb24oKSArIFwiXFxuRXhwZWN0aW5nIFwiICsgZXhwZWN0ZWQuam9pbihcIiwgXCIpICsgXCIsIGdvdCAnXCIgKyAodGhpcy50ZXJtaW5hbHNfW3N5bWJvbF0gfHwgc3ltYm9sKSArIFwiJ1wiO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyU3RyID0gXCJQYXJzZSBlcnJvciBvbiBsaW5lIFwiICsgKHl5bGluZW5vICsgMSkgKyBcIjogVW5leHBlY3RlZCBcIiArIChzeW1ib2wgPT0gMSA/IFwiZW5kIG9mIGlucHV0XCIgOiBcIidcIiArICh0aGlzLnRlcm1pbmFsc19bc3ltYm9sXSB8fCBzeW1ib2wpICsgXCInXCIpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2VFcnJvcihlcnJTdHIsIHsgdGV4dDogdGhpcy5sZXhlci5tYXRjaCwgdG9rZW46IHRoaXMudGVybWluYWxzX1tzeW1ib2xdIHx8IHN5bWJvbCwgbGluZTogdGhpcy5sZXhlci55eWxpbmVubywgbG9jOiB5eWxvYywgZXhwZWN0ZWQ6IGV4cGVjdGVkIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGlmIChhY3Rpb25bMF0gaW5zdGFuY2VvZiBBcnJheSAmJiBhY3Rpb24ubGVuZ3RoID4gMSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhcnNlIEVycm9yOiBtdWx0aXBsZSBhY3Rpb25zIHBvc3NpYmxlIGF0IHN0YXRlOiBcIiArIHN0YXRlICsgXCIsIHRva2VuOiBcIiArIHN5bWJvbCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBzd2l0Y2ggKGFjdGlvblswXSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChzeW1ib2wpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2c3RhY2sucHVzaCh0aGlzLmxleGVyLnl5dGV4dCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxzdGFjay5wdXNoKHRoaXMubGV4ZXIueXlsbG9jKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChhY3Rpb25bMV0pO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2wgPSBudWxsO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXByZUVycm9yU3ltYm9sKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB5eWxlbmcgPSB0aGlzLmxleGVyLnl5bGVuZztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHl5dGV4dCA9IHRoaXMubGV4ZXIueXl0ZXh0O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgeXlsaW5lbm8gPSB0aGlzLmxleGVyLnl5bGluZW5vO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgeXlsb2MgPSB0aGlzLmxleGVyLnl5bGxvYztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWNvdmVyaW5nID4gMCkgcmVjb3ZlcmluZy0tO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sID0gcHJlRXJyb3JTeW1ib2w7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVFcnJvclN5bWJvbCA9IG51bGw7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICBsZW4gPSB0aGlzLnByb2R1Y3Rpb25zX1thY3Rpb25bMV1dWzFdO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB5eXZhbC4kID0gdnN0YWNrW3ZzdGFjay5sZW5ndGggLSBsZW5dO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB5eXZhbC5fJCA9IHsgZmlyc3RfbGluZTogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAobGVuIHx8IDEpXS5maXJzdF9saW5lLCBsYXN0X2xpbmU6IGxzdGFja1tsc3RhY2subGVuZ3RoIC0gMV0ubGFzdF9saW5lLCBmaXJzdF9jb2x1bW46IGxzdGFja1tsc3RhY2subGVuZ3RoIC0gKGxlbiB8fCAxKV0uZmlyc3RfY29sdW1uLCBsYXN0X2NvbHVtbjogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAxXS5sYXN0X2NvbHVtbiB9O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2VzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB5eXZhbC5fJC5yYW5nZSA9IFtsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIChsZW4gfHwgMSldLnJhbmdlWzBdLCBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIDFdLnJhbmdlWzFdXTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICByID0gdGhpcy5wZXJmb3JtQWN0aW9uLmNhbGwoeXl2YWwsIHl5dGV4dCwgeXlsZW5nLCB5eWxpbmVubywgdGhpcy55eSwgYWN0aW9uWzFdLCB2c3RhY2ssIGxzdGFjayk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgciAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHI7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxlbikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sgPSBzdGFjay5zbGljZSgwLCAtMSAqIGxlbiAqIDIpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdnN0YWNrID0gdnN0YWNrLnNsaWNlKDAsIC0xICogbGVuKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxzdGFjayA9IGxzdGFjay5zbGljZSgwLCAtMSAqIGxlbik7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCh0aGlzLnByb2R1Y3Rpb25zX1thY3Rpb25bMV1dWzBdKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdnN0YWNrLnB1c2goeXl2YWwuJCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxzdGFjay5wdXNoKHl5dmFsLl8kKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhdGUgPSB0YWJsZVtzdGFja1tzdGFjay5sZW5ndGggLSAyXV1bc3RhY2tbc3RhY2subGVuZ3RoIC0gMV1dO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKG5ld1N0YXRlKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLyogSmlzb24gZ2VuZXJhdGVkIGxleGVyICovXG5cdCAgICB2YXIgbGV4ZXIgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBsZXhlciA9IHsgRU9GOiAxLFxuXHQgICAgICAgICAgICBwYXJzZUVycm9yOiBmdW5jdGlvbiBwYXJzZUVycm9yKHN0ciwgaGFzaCkge1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMueXkucGFyc2VyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy55eS5wYXJzZXIucGFyc2VFcnJvcihzdHIsIGhhc2gpO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Ioc3RyKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgc2V0SW5wdXQ6IGZ1bmN0aW9uIHNldElucHV0KGlucHV0KSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9pbnB1dCA9IGlucHV0O1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fbW9yZSA9IHRoaXMuX2xlc3MgPSB0aGlzLmRvbmUgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgIHRoaXMueXlsaW5lbm8gPSB0aGlzLnl5bGVuZyA9IDA7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnl5dGV4dCA9IHRoaXMubWF0Y2hlZCA9IHRoaXMubWF0Y2ggPSAnJztcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29uZGl0aW9uU3RhY2sgPSBbJ0lOSVRJQUwnXTtcblx0ICAgICAgICAgICAgICAgIHRoaXMueXlsbG9jID0geyBmaXJzdF9saW5lOiAxLCBmaXJzdF9jb2x1bW46IDAsIGxhc3RfbGluZTogMSwgbGFzdF9jb2x1bW46IDAgfTtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmFuZ2VzKSB0aGlzLnl5bGxvYy5yYW5nZSA9IFswLCAwXTtcblx0ICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24gaW5wdXQoKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgY2ggPSB0aGlzLl9pbnB1dFswXTtcblx0ICAgICAgICAgICAgICAgIHRoaXMueXl0ZXh0ICs9IGNoO1xuXHQgICAgICAgICAgICAgICAgdGhpcy55eWxlbmcrKztcblx0ICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0Kys7XG5cdCAgICAgICAgICAgICAgICB0aGlzLm1hdGNoICs9IGNoO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5tYXRjaGVkICs9IGNoO1xuXHQgICAgICAgICAgICAgICAgdmFyIGxpbmVzID0gY2gubWF0Y2goLyg/Olxcclxcbj98XFxuKS4qL2cpO1xuXHQgICAgICAgICAgICAgICAgaWYgKGxpbmVzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy55eWxpbmVubysrO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMueXlsbG9jLmxhc3RfbGluZSsrO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbisrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHRoaXMueXlsbG9jLnJhbmdlWzFdKys7XG5cblx0ICAgICAgICAgICAgICAgIHRoaXMuX2lucHV0ID0gdGhpcy5faW5wdXQuc2xpY2UoMSk7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gY2g7XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHVucHV0OiBmdW5jdGlvbiB1bnB1dChjaCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGxlbiA9IGNoLmxlbmd0aDtcblx0ICAgICAgICAgICAgICAgIHZhciBsaW5lcyA9IGNoLnNwbGl0KC8oPzpcXHJcXG4/fFxcbikvZyk7XG5cblx0ICAgICAgICAgICAgICAgIHRoaXMuX2lucHV0ID0gY2ggKyB0aGlzLl9pbnB1dDtcblx0ICAgICAgICAgICAgICAgIHRoaXMueXl0ZXh0ID0gdGhpcy55eXRleHQuc3Vic3RyKDAsIHRoaXMueXl0ZXh0Lmxlbmd0aCAtIGxlbiAtIDEpO1xuXHQgICAgICAgICAgICAgICAgLy90aGlzLnl5bGVuZyAtPSBsZW47XG5cdCAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCAtPSBsZW47XG5cdCAgICAgICAgICAgICAgICB2YXIgb2xkTGluZXMgPSB0aGlzLm1hdGNoLnNwbGl0KC8oPzpcXHJcXG4/fFxcbikvZyk7XG5cdCAgICAgICAgICAgICAgICB0aGlzLm1hdGNoID0gdGhpcy5tYXRjaC5zdWJzdHIoMCwgdGhpcy5tYXRjaC5sZW5ndGggLSAxKTtcblx0ICAgICAgICAgICAgICAgIHRoaXMubWF0Y2hlZCA9IHRoaXMubWF0Y2hlZC5zdWJzdHIoMCwgdGhpcy5tYXRjaGVkLmxlbmd0aCAtIDEpO1xuXG5cdCAgICAgICAgICAgICAgICBpZiAobGluZXMubGVuZ3RoIC0gMSkgdGhpcy55eWxpbmVubyAtPSBsaW5lcy5sZW5ndGggLSAxO1xuXHQgICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLnl5bGxvYy5yYW5nZTtcblxuXHQgICAgICAgICAgICAgICAgdGhpcy55eWxsb2MgPSB7IGZpcnN0X2xpbmU6IHRoaXMueXlsbG9jLmZpcnN0X2xpbmUsXG5cdCAgICAgICAgICAgICAgICAgICAgbGFzdF9saW5lOiB0aGlzLnl5bGluZW5vICsgMSxcblx0ICAgICAgICAgICAgICAgICAgICBmaXJzdF9jb2x1bW46IHRoaXMueXlsbG9jLmZpcnN0X2NvbHVtbixcblx0ICAgICAgICAgICAgICAgICAgICBsYXN0X2NvbHVtbjogbGluZXMgPyAobGluZXMubGVuZ3RoID09PSBvbGRMaW5lcy5sZW5ndGggPyB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW4gOiAwKSArIG9sZExpbmVzW29sZExpbmVzLmxlbmd0aCAtIGxpbmVzLmxlbmd0aF0ubGVuZ3RoIC0gbGluZXNbMF0ubGVuZ3RoIDogdGhpcy55eWxsb2MuZmlyc3RfY29sdW1uIC0gbGVuXG5cdCAgICAgICAgICAgICAgICB9O1xuXG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMueXlsbG9jLnJhbmdlID0gW3JbMF0sIHJbMF0gKyB0aGlzLnl5bGVuZyAtIGxlbl07XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgbW9yZTogZnVuY3Rpb24gbW9yZSgpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX21vcmUgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIGxlc3M6IGZ1bmN0aW9uIGxlc3Mobikge1xuXHQgICAgICAgICAgICAgICAgdGhpcy51bnB1dCh0aGlzLm1hdGNoLnNsaWNlKG4pKTtcblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgcGFzdElucHV0OiBmdW5jdGlvbiBwYXN0SW5wdXQoKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgcGFzdCA9IHRoaXMubWF0Y2hlZC5zdWJzdHIoMCwgdGhpcy5tYXRjaGVkLmxlbmd0aCAtIHRoaXMubWF0Y2gubGVuZ3RoKTtcblx0ICAgICAgICAgICAgICAgIHJldHVybiAocGFzdC5sZW5ndGggPiAyMCA/ICcuLi4nIDogJycpICsgcGFzdC5zdWJzdHIoLTIwKS5yZXBsYWNlKC9cXG4vZywgXCJcIik7XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHVwY29taW5nSW5wdXQ6IGZ1bmN0aW9uIHVwY29taW5nSW5wdXQoKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgbmV4dCA9IHRoaXMubWF0Y2g7XG5cdCAgICAgICAgICAgICAgICBpZiAobmV4dC5sZW5ndGggPCAyMCkge1xuXHQgICAgICAgICAgICAgICAgICAgIG5leHQgKz0gdGhpcy5faW5wdXQuc3Vic3RyKDAsIDIwIC0gbmV4dC5sZW5ndGgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIChuZXh0LnN1YnN0cigwLCAyMCkgKyAobmV4dC5sZW5ndGggPiAyMCA/ICcuLi4nIDogJycpKS5yZXBsYWNlKC9cXG4vZywgXCJcIik7XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHNob3dQb3NpdGlvbjogZnVuY3Rpb24gc2hvd1Bvc2l0aW9uKCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIHByZSA9IHRoaXMucGFzdElucHV0KCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgYyA9IG5ldyBBcnJheShwcmUubGVuZ3RoICsgMSkuam9pbihcIi1cIik7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gcHJlICsgdGhpcy51cGNvbWluZ0lucHV0KCkgKyBcIlxcblwiICsgYyArIFwiXlwiO1xuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KCkge1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9uZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkVPRjtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGlmICghdGhpcy5faW5wdXQpIHRoaXMuZG9uZSA9IHRydWU7XG5cblx0ICAgICAgICAgICAgICAgIHZhciB0b2tlbiwgbWF0Y2gsIHRlbXBNYXRjaCwgaW5kZXgsIGNvbCwgbGluZXM7XG5cdCAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX21vcmUpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnl5dGV4dCA9ICcnO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMubWF0Y2ggPSAnJztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHZhciBydWxlcyA9IHRoaXMuX2N1cnJlbnRSdWxlcygpO1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHRlbXBNYXRjaCA9IHRoaXMuX2lucHV0Lm1hdGNoKHRoaXMucnVsZXNbcnVsZXNbaV1dKTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGVtcE1hdGNoICYmICghbWF0Y2ggfHwgdGVtcE1hdGNoWzBdLmxlbmd0aCA+IG1hdGNoWzBdLmxlbmd0aCkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSB0ZW1wTWF0Y2g7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gaTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZmxleCkgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgbGluZXMgPSBtYXRjaFswXS5tYXRjaCgvKD86XFxyXFxuP3xcXG4pLiovZyk7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVzKSB0aGlzLnl5bGluZW5vICs9IGxpbmVzLmxlbmd0aDtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnl5bGxvYyA9IHsgZmlyc3RfbGluZTogdGhpcy55eWxsb2MubGFzdF9saW5lLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBsYXN0X2xpbmU6IHRoaXMueXlsaW5lbm8gKyAxLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdF9jb2x1bW46IHRoaXMueXlsbG9jLmxhc3RfY29sdW1uLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBsYXN0X2NvbHVtbjogbGluZXMgPyBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXS5sZW5ndGggLSBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXS5tYXRjaCgvXFxyP1xcbj8vKVswXS5sZW5ndGggOiB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbiArIG1hdGNoWzBdLmxlbmd0aCB9O1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMueXl0ZXh0ICs9IG1hdGNoWzBdO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMubWF0Y2ggKz0gbWF0Y2hbMF07XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRjaGVzID0gbWF0Y2g7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy55eWxlbmcgPSB0aGlzLnl5dGV4dC5sZW5ndGg7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55eWxsb2MucmFuZ2UgPSBbdGhpcy5vZmZzZXQsIHRoaXMub2Zmc2V0ICs9IHRoaXMueXlsZW5nXTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW9yZSA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lucHV0ID0gdGhpcy5faW5wdXQuc2xpY2UobWF0Y2hbMF0ubGVuZ3RoKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGNoZWQgKz0gbWF0Y2hbMF07XG5cdCAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLnBlcmZvcm1BY3Rpb24uY2FsbCh0aGlzLCB0aGlzLnl5LCB0aGlzLCBydWxlc1tpbmRleF0sIHRoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGggLSAxXSk7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9uZSAmJiB0aGlzLl9pbnB1dCkgdGhpcy5kb25lID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuKSByZXR1cm4gdG9rZW47ZWxzZSByZXR1cm47XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5wdXQgPT09IFwiXCIpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5FT0Y7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRXJyb3IoJ0xleGljYWwgZXJyb3Igb24gbGluZSAnICsgKHRoaXMueXlsaW5lbm8gKyAxKSArICcuIFVucmVjb2duaXplZCB0ZXh0LlxcbicgKyB0aGlzLnNob3dQb3NpdGlvbigpLCB7IHRleHQ6IFwiXCIsIHRva2VuOiBudWxsLCBsaW5lOiB0aGlzLnl5bGluZW5vIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBsZXg6IGZ1bmN0aW9uIGxleCgpIHtcblx0ICAgICAgICAgICAgICAgIHZhciByID0gdGhpcy5uZXh0KCk7XG5cdCAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHIgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHI7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxleCgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBiZWdpbjogZnVuY3Rpb24gYmVnaW4oY29uZGl0aW9uKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbmRpdGlvblN0YWNrLnB1c2goY29uZGl0aW9uKTtcblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgcG9wU3RhdGU6IGZ1bmN0aW9uIHBvcFN0YXRlKCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uU3RhY2sucG9wKCk7XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIF9jdXJyZW50UnVsZXM6IGZ1bmN0aW9uIF9jdXJyZW50UnVsZXMoKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25zW3RoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGggLSAxXV0ucnVsZXM7XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHRvcFN0YXRlOiBmdW5jdGlvbiB0b3BTdGF0ZSgpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoIC0gMl07XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHB1c2hTdGF0ZTogZnVuY3Rpb24gYmVnaW4oY29uZGl0aW9uKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKGNvbmRpdGlvbik7XG5cdCAgICAgICAgICAgIH0gfTtcblx0ICAgICAgICBsZXhlci5vcHRpb25zID0ge307XG5cdCAgICAgICAgbGV4ZXIucGVyZm9ybUFjdGlvbiA9IGZ1bmN0aW9uIGFub255bW91cyh5eSwgeXlfLCAkYXZvaWRpbmdfbmFtZV9jb2xsaXNpb25zLCBZWV9TVEFSVFxuXHQgICAgICAgIC8qKi8pIHtcblxuXHQgICAgICAgICAgICBmdW5jdGlvbiBzdHJpcChzdGFydCwgZW5kKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4geXlfLnl5dGV4dCA9IHl5Xy55eXRleHQuc3Vic3RyKHN0YXJ0LCB5eV8ueXlsZW5nIC0gZW5kKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHZhciBZWVNUQVRFID0gWVlfU1RBUlQ7XG5cdCAgICAgICAgICAgIHN3aXRjaCAoJGF2b2lkaW5nX25hbWVfY29sbGlzaW9ucykge1xuXHQgICAgICAgICAgICAgICAgY2FzZSAwOlxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh5eV8ueXl0ZXh0LnNsaWNlKC0yKSA9PT0gXCJcXFxcXFxcXFwiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwKDAsIDEpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKFwibXVcIik7XG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh5eV8ueXl0ZXh0LnNsaWNlKC0xKSA9PT0gXCJcXFxcXCIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXAoMCwgMSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmVnaW4oXCJlbXVcIik7XG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWdpbihcIm11XCIpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoeXlfLnl5dGV4dCkgcmV0dXJuIDE1O1xuXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDE6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE1O1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAyOlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTU7XG5cblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgMzpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKCdyYXcnKTtyZXR1cm4gMTU7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDQ6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIFNob3VsZCBiZSB1c2luZyBgdGhpcy50b3BTdGF0ZSgpYCBiZWxvdywgYnV0IGl0IGN1cnJlbnRseVxuXHQgICAgICAgICAgICAgICAgICAgIC8vIHJldHVybnMgdGhlIHNlY29uZCB0b3AgaW5zdGVhZCBvZiB0aGUgZmlyc3QgdG9wLiBPcGVuZWQgYW5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBpc3N1ZSBhYm91dCBpdCBhdCBodHRwczovL2dpdGh1Yi5jb20vemFhY2gvamlzb24vaXNzdWVzLzI5MVxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoIC0gMV0gPT09ICdyYXcnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxNTtcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB5eV8ueXl0ZXh0ID0geXlfLnl5dGV4dC5zdWJzdHIoNSwgeXlfLnl5bGVuZyAtIDkpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0VORF9SQVdfQkxPQ0snO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSA1OlxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAxNTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgNjpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE0O1xuXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDc6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDY1O1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSA4OlxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA2ODtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgOTpcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTk7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDEwOlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKCdyYXcnKTtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gMjM7XG5cblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTE6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDU1O1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAxMjpcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gNjA7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDEzOlxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAyOTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTQ6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDQ3O1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAxNTpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7cmV0dXJuIDQ0O1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAxNjpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7cmV0dXJuIDQ0O1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAxNzpcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gMzQ7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDE4OlxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAzOTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTk6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDUxO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAyMDpcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gNDg7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDIxOlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudW5wdXQoeXlfLnl5dGV4dCk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuYmVnaW4oJ2NvbScpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDIyOlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTQ7XG5cblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjM6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDQ4O1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAyNDpcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gNzM7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDI1OlxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA3Mjtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjY6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDcyO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAyNzpcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gODc7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDI4OlxuXHQgICAgICAgICAgICAgICAgICAgIC8vIGlnbm9yZSB3aGl0ZXNwYWNlXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDI5OlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtyZXR1cm4gNTQ7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDMwOlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtyZXR1cm4gMzM7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDMxOlxuXHQgICAgICAgICAgICAgICAgICAgIHl5Xy55eXRleHQgPSBzdHJpcCgxLCAyKS5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJyk7cmV0dXJuIDgwO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAzMjpcblx0ICAgICAgICAgICAgICAgICAgICB5eV8ueXl0ZXh0ID0gc3RyaXAoMSwgMikucmVwbGFjZSgvXFxcXCcvZywgXCInXCIpO3JldHVybiA4MDtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgMzM6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDg1O1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAzNDpcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gODI7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDM1OlxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA4Mjtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgMzY6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDgzO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAzNzpcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gODQ7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDM4OlxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA4MTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgMzk6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDc1O1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSA0MDpcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gNzc7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIDQxOlxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA3Mjtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgNDI6XG5cdCAgICAgICAgICAgICAgICAgICAgeXlfLnl5dGV4dCA9IHl5Xy55eXRleHQucmVwbGFjZSgvXFxcXChbXFxcXFxcXV0pL2csICckMScpO3JldHVybiA3Mjtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgNDM6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdJTlZBTElEJztcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgNDQ6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDU7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9O1xuXHQgICAgICAgIGxleGVyLnJ1bGVzID0gWy9eKD86W15cXHgwMF0qPyg/PShcXHtcXHspKSkvLCAvXig/OlteXFx4MDBdKykvLCAvXig/OlteXFx4MDBdezIsfT8oPz0oXFx7XFx7fFxcXFxcXHtcXHt8XFxcXFxcXFxcXHtcXHt8JCkpKS8sIC9eKD86XFx7XFx7XFx7XFx7KD89W15cXC9dKSkvLCAvXig/Olxce1xce1xce1xce1xcL1teXFxzIVwiIyUtLFxcLlxcLzstPkBcXFstXFxeYFxcey1+XSsoPz1bPX1cXHNcXC8uXSlcXH1cXH1cXH1cXH0pLywgL14oPzpbXlxceDAwXSo/KD89KFxce1xce1xce1xceykpKS8sIC9eKD86W1xcc1xcU10qPy0tKH4pP1xcfVxcfSkvLCAvXig/OlxcKCkvLCAvXig/OlxcKSkvLCAvXig/Olxce1xce1xce1xceykvLCAvXig/OlxcfVxcfVxcfVxcfSkvLCAvXig/Olxce1xceyh+KT8+KS8sIC9eKD86XFx7XFx7KH4pPyM+KS8sIC9eKD86XFx7XFx7KH4pPyNcXCo/KS8sIC9eKD86XFx7XFx7KH4pP1xcLykvLCAvXig/Olxce1xceyh+KT9cXF5cXHMqKH4pP1xcfVxcfSkvLCAvXig/Olxce1xceyh+KT9cXHMqZWxzZVxccyoofik/XFx9XFx9KS8sIC9eKD86XFx7XFx7KH4pP1xcXikvLCAvXig/Olxce1xceyh+KT9cXHMqZWxzZVxcYikvLCAvXig/Olxce1xceyh+KT9cXHspLywgL14oPzpcXHtcXHsofik/JikvLCAvXig/Olxce1xceyh+KT8hLS0pLywgL14oPzpcXHtcXHsofik/IVtcXHNcXFNdKj9cXH1cXH0pLywgL14oPzpcXHtcXHsofik/XFwqPykvLCAvXig/Oj0pLywgL14oPzpcXC5cXC4pLywgL14oPzpcXC4oPz0oWz1+fVxcc1xcLy4pfF0pKSkvLCAvXig/OltcXC8uXSkvLCAvXig/OlxccyspLywgL14oPzpcXH0ofik/XFx9XFx9KS8sIC9eKD86KH4pP1xcfVxcfSkvLCAvXig/OlwiKFxcXFxbXCJdfFteXCJdKSpcIikvLCAvXig/OicoXFxcXFsnXXxbXiddKSonKS8sIC9eKD86QCkvLCAvXig/OnRydWUoPz0oW359XFxzKV0pKSkvLCAvXig/OmZhbHNlKD89KFt+fVxccyldKSkpLywgL14oPzp1bmRlZmluZWQoPz0oW359XFxzKV0pKSkvLCAvXig/Om51bGwoPz0oW359XFxzKV0pKSkvLCAvXig/Oi0/WzAtOV0rKD86XFwuWzAtOV0rKT8oPz0oW359XFxzKV0pKSkvLCAvXig/OmFzXFxzK1xcfCkvLCAvXig/OlxcfCkvLCAvXig/OihbXlxccyFcIiMlLSxcXC5cXC87LT5AXFxbLVxcXmBcXHstfl0rKD89KFs9fn1cXHNcXC8uKXxdKSkpKS8sIC9eKD86XFxbKFxcXFxcXF18W15cXF1dKSpcXF0pLywgL14oPzouKS8sIC9eKD86JCkvXTtcblx0ICAgICAgICBsZXhlci5jb25kaXRpb25zID0geyBcIm11XCI6IHsgXCJydWxlc1wiOiBbNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwgMTYsIDE3LCAxOCwgMTksIDIwLCAyMSwgMjIsIDIzLCAyNCwgMjUsIDI2LCAyNywgMjgsIDI5LCAzMCwgMzEsIDMyLCAzMywgMzQsIDM1LCAzNiwgMzcsIDM4LCAzOSwgNDAsIDQxLCA0MiwgNDMsIDQ0XSwgXCJpbmNsdXNpdmVcIjogZmFsc2UgfSwgXCJlbXVcIjogeyBcInJ1bGVzXCI6IFsyXSwgXCJpbmNsdXNpdmVcIjogZmFsc2UgfSwgXCJjb21cIjogeyBcInJ1bGVzXCI6IFs2XSwgXCJpbmNsdXNpdmVcIjogZmFsc2UgfSwgXCJyYXdcIjogeyBcInJ1bGVzXCI6IFszLCA0LCA1XSwgXCJpbmNsdXNpdmVcIjogZmFsc2UgfSwgXCJJTklUSUFMXCI6IHsgXCJydWxlc1wiOiBbMCwgMSwgNDRdLCBcImluY2x1c2l2ZVwiOiB0cnVlIH0gfTtcblx0ICAgICAgICByZXR1cm4gbGV4ZXI7XG5cdCAgICB9KSgpO1xuXHQgICAgcGFyc2VyLmxleGVyID0gbGV4ZXI7XG5cdCAgICBmdW5jdGlvbiBQYXJzZXIoKSB7XG5cdCAgICAgICAgdGhpcy55eSA9IHt9O1xuXHQgICAgfVBhcnNlci5wcm90b3R5cGUgPSBwYXJzZXI7cGFyc2VyLlBhcnNlciA9IFBhcnNlcjtcblx0ICAgIHJldHVybiBuZXcgUGFyc2VyKCk7XG5cdH0pKCk7ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gaGFuZGxlYmFycztcblxuLyoqKi8gfSxcbi8qIDI0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpWydkZWZhdWx0J107XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuXHR2YXIgX3Zpc2l0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1KTtcblxuXHR2YXIgX3Zpc2l0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmlzaXRvcik7XG5cblx0ZnVuY3Rpb24gV2hpdGVzcGFjZUNvbnRyb2woKSB7XG5cdCAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcblxuXHQgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdH1cblx0V2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlID0gbmV3IF92aXNpdG9yMlsnZGVmYXVsdCddKCk7XG5cblx0V2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLlByb2dyYW0gPSBmdW5jdGlvbiAocHJvZ3JhbSkge1xuXHQgIHZhciBkb1N0YW5kYWxvbmUgPSAhdGhpcy5vcHRpb25zLmlnbm9yZVN0YW5kYWxvbmU7XG5cblx0ICB2YXIgaXNSb290ID0gIXRoaXMuaXNSb290U2Vlbjtcblx0ICB0aGlzLmlzUm9vdFNlZW4gPSB0cnVlO1xuXG5cdCAgdmFyIGJvZHkgPSBwcm9ncmFtLmJvZHk7XG5cdCAgZm9yICh2YXIgaSA9IDAsIGwgPSBib2R5Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHQgICAgdmFyIGN1cnJlbnQgPSBib2R5W2ldLFxuXHQgICAgICAgIHN0cmlwID0gdGhpcy5hY2NlcHQoY3VycmVudCk7XG5cblx0ICAgIGlmICghc3RyaXApIHtcblx0ICAgICAgY29udGludWU7XG5cdCAgICB9XG5cblx0ICAgIHZhciBfaXNQcmV2V2hpdGVzcGFjZSA9IGlzUHJldldoaXRlc3BhY2UoYm9keSwgaSwgaXNSb290KSxcblx0ICAgICAgICBfaXNOZXh0V2hpdGVzcGFjZSA9IGlzTmV4dFdoaXRlc3BhY2UoYm9keSwgaSwgaXNSb290KSxcblx0ICAgICAgICBvcGVuU3RhbmRhbG9uZSA9IHN0cmlwLm9wZW5TdGFuZGFsb25lICYmIF9pc1ByZXZXaGl0ZXNwYWNlLFxuXHQgICAgICAgIGNsb3NlU3RhbmRhbG9uZSA9IHN0cmlwLmNsb3NlU3RhbmRhbG9uZSAmJiBfaXNOZXh0V2hpdGVzcGFjZSxcblx0ICAgICAgICBpbmxpbmVTdGFuZGFsb25lID0gc3RyaXAuaW5saW5lU3RhbmRhbG9uZSAmJiBfaXNQcmV2V2hpdGVzcGFjZSAmJiBfaXNOZXh0V2hpdGVzcGFjZTtcblxuXHQgICAgaWYgKHN0cmlwLmNsb3NlKSB7XG5cdCAgICAgIG9taXRSaWdodChib2R5LCBpLCB0cnVlKTtcblx0ICAgIH1cblx0ICAgIGlmIChzdHJpcC5vcGVuKSB7XG5cdCAgICAgIG9taXRMZWZ0KGJvZHksIGksIHRydWUpO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoZG9TdGFuZGFsb25lICYmIGlubGluZVN0YW5kYWxvbmUpIHtcblx0ICAgICAgb21pdFJpZ2h0KGJvZHksIGkpO1xuXG5cdCAgICAgIGlmIChvbWl0TGVmdChib2R5LCBpKSkge1xuXHQgICAgICAgIC8vIElmIHdlIGFyZSBvbiBhIHN0YW5kYWxvbmUgbm9kZSwgc2F2ZSB0aGUgaW5kZW50IGluZm8gZm9yIHBhcnRpYWxzXG5cdCAgICAgICAgaWYgKGN1cnJlbnQudHlwZSA9PT0gJ1BhcnRpYWxTdGF0ZW1lbnQnKSB7XG5cdCAgICAgICAgICAvLyBQdWxsIG91dCB0aGUgd2hpdGVzcGFjZSBmcm9tIHRoZSBmaW5hbCBsaW5lXG5cdCAgICAgICAgICBjdXJyZW50LmluZGVudCA9IC8oWyBcXHRdKyQpLy5leGVjKGJvZHlbaSAtIDFdLm9yaWdpbmFsKVsxXTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGlmIChkb1N0YW5kYWxvbmUgJiYgb3BlblN0YW5kYWxvbmUpIHtcblx0ICAgICAgb21pdFJpZ2h0KChjdXJyZW50LnByb2dyYW0gfHwgY3VycmVudC5pbnZlcnNlKS5ib2R5KTtcblxuXHQgICAgICAvLyBTdHJpcCBvdXQgdGhlIHByZXZpb3VzIGNvbnRlbnQgbm9kZSBpZiBpdCdzIHdoaXRlc3BhY2Ugb25seVxuXHQgICAgICBvbWl0TGVmdChib2R5LCBpKTtcblx0ICAgIH1cblx0ICAgIGlmIChkb1N0YW5kYWxvbmUgJiYgY2xvc2VTdGFuZGFsb25lKSB7XG5cdCAgICAgIC8vIEFsd2F5cyBzdHJpcCB0aGUgbmV4dCBub2RlXG5cdCAgICAgIG9taXRSaWdodChib2R5LCBpKTtcblxuXHQgICAgICBvbWl0TGVmdCgoY3VycmVudC5pbnZlcnNlIHx8IGN1cnJlbnQucHJvZ3JhbSkuYm9keSk7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgcmV0dXJuIHByb2dyYW07XG5cdH07XG5cblx0V2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLkJsb2NrU3RhdGVtZW50ID0gV2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLkRlY29yYXRvckJsb2NrID0gV2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLlBhcnRpYWxCbG9ja1N0YXRlbWVudCA9IGZ1bmN0aW9uIChibG9jaykge1xuXHQgIHRoaXMuYWNjZXB0KGJsb2NrLnByb2dyYW0pO1xuXHQgIHRoaXMuYWNjZXB0KGJsb2NrLmludmVyc2UpO1xuXG5cdCAgLy8gRmluZCB0aGUgaW52ZXJzZSBwcm9ncmFtIHRoYXQgaXMgaW52b2xlZCB3aXRoIHdoaXRlc3BhY2Ugc3RyaXBwaW5nLlxuXHQgIHZhciBwcm9ncmFtID0gYmxvY2sucHJvZ3JhbSB8fCBibG9jay5pbnZlcnNlLFxuXHQgICAgICBpbnZlcnNlID0gYmxvY2sucHJvZ3JhbSAmJiBibG9jay5pbnZlcnNlLFxuXHQgICAgICBmaXJzdEludmVyc2UgPSBpbnZlcnNlLFxuXHQgICAgICBsYXN0SW52ZXJzZSA9IGludmVyc2U7XG5cblx0ICBpZiAoaW52ZXJzZSAmJiBpbnZlcnNlLmNoYWluZWQpIHtcblx0ICAgIGZpcnN0SW52ZXJzZSA9IGludmVyc2UuYm9keVswXS5wcm9ncmFtO1xuXG5cdCAgICAvLyBXYWxrIHRoZSBpbnZlcnNlIGNoYWluIHRvIGZpbmQgdGhlIGxhc3QgaW52ZXJzZSB0aGF0IGlzIGFjdHVhbGx5IGluIHRoZSBjaGFpbi5cblx0ICAgIHdoaWxlIChsYXN0SW52ZXJzZS5jaGFpbmVkKSB7XG5cdCAgICAgIGxhc3RJbnZlcnNlID0gbGFzdEludmVyc2UuYm9keVtsYXN0SW52ZXJzZS5ib2R5Lmxlbmd0aCAtIDFdLnByb2dyYW07XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgdmFyIHN0cmlwID0ge1xuXHQgICAgb3BlbjogYmxvY2sub3BlblN0cmlwLm9wZW4sXG5cdCAgICBjbG9zZTogYmxvY2suY2xvc2VTdHJpcC5jbG9zZSxcblxuXHQgICAgLy8gRGV0ZXJtaW5lIHRoZSBzdGFuZGFsb25lIGNhbmRpYWN5LiBCYXNpY2FsbHkgZmxhZyBvdXIgY29udGVudCBhcyBiZWluZyBwb3NzaWJseSBzdGFuZGFsb25lXG5cdCAgICAvLyBzbyBvdXIgcGFyZW50IGNhbiBkZXRlcm1pbmUgaWYgd2UgYWN0dWFsbHkgYXJlIHN0YW5kYWxvbmVcblx0ICAgIG9wZW5TdGFuZGFsb25lOiBpc05leHRXaGl0ZXNwYWNlKHByb2dyYW0uYm9keSksXG5cdCAgICBjbG9zZVN0YW5kYWxvbmU6IGlzUHJldldoaXRlc3BhY2UoKGZpcnN0SW52ZXJzZSB8fCBwcm9ncmFtKS5ib2R5KVxuXHQgIH07XG5cblx0ICBpZiAoYmxvY2sub3BlblN0cmlwLmNsb3NlKSB7XG5cdCAgICBvbWl0UmlnaHQocHJvZ3JhbS5ib2R5LCBudWxsLCB0cnVlKTtcblx0ICB9XG5cblx0ICBpZiAoaW52ZXJzZSkge1xuXHQgICAgdmFyIGludmVyc2VTdHJpcCA9IGJsb2NrLmludmVyc2VTdHJpcDtcblxuXHQgICAgaWYgKGludmVyc2VTdHJpcC5vcGVuKSB7XG5cdCAgICAgIG9taXRMZWZ0KHByb2dyYW0uYm9keSwgbnVsbCwgdHJ1ZSk7XG5cdCAgICB9XG5cblx0ICAgIGlmIChpbnZlcnNlU3RyaXAuY2xvc2UpIHtcblx0ICAgICAgb21pdFJpZ2h0KGZpcnN0SW52ZXJzZS5ib2R5LCBudWxsLCB0cnVlKTtcblx0ICAgIH1cblx0ICAgIGlmIChibG9jay5jbG9zZVN0cmlwLm9wZW4pIHtcblx0ICAgICAgb21pdExlZnQobGFzdEludmVyc2UuYm9keSwgbnVsbCwgdHJ1ZSk7XG5cdCAgICB9XG5cblx0ICAgIC8vIEZpbmQgc3RhbmRhbG9uZSBlbHNlIHN0YXRtZW50c1xuXHQgICAgaWYgKCF0aGlzLm9wdGlvbnMuaWdub3JlU3RhbmRhbG9uZSAmJiBpc1ByZXZXaGl0ZXNwYWNlKHByb2dyYW0uYm9keSkgJiYgaXNOZXh0V2hpdGVzcGFjZShmaXJzdEludmVyc2UuYm9keSkpIHtcblx0ICAgICAgb21pdExlZnQocHJvZ3JhbS5ib2R5KTtcblx0ICAgICAgb21pdFJpZ2h0KGZpcnN0SW52ZXJzZS5ib2R5KTtcblx0ICAgIH1cblx0ICB9IGVsc2UgaWYgKGJsb2NrLmNsb3NlU3RyaXAub3Blbikge1xuXHQgICAgb21pdExlZnQocHJvZ3JhbS5ib2R5LCBudWxsLCB0cnVlKTtcblx0ICB9XG5cblx0ICByZXR1cm4gc3RyaXA7XG5cdH07XG5cblx0V2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLkRlY29yYXRvciA9IFdoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5NdXN0YWNoZVN0YXRlbWVudCA9IGZ1bmN0aW9uIChtdXN0YWNoZSkge1xuXHQgIHJldHVybiBtdXN0YWNoZS5zdHJpcDtcblx0fTtcblxuXHRXaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuUGFydGlhbFN0YXRlbWVudCA9IFdoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5Db21tZW50U3RhdGVtZW50ID0gZnVuY3Rpb24gKG5vZGUpIHtcblx0ICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHQgIHZhciBzdHJpcCA9IG5vZGUuc3RyaXAgfHwge307XG5cdCAgcmV0dXJuIHtcblx0ICAgIGlubGluZVN0YW5kYWxvbmU6IHRydWUsXG5cdCAgICBvcGVuOiBzdHJpcC5vcGVuLFxuXHQgICAgY2xvc2U6IHN0cmlwLmNsb3NlXG5cdCAgfTtcblx0fTtcblxuXHRmdW5jdGlvbiBpc1ByZXZXaGl0ZXNwYWNlKGJvZHksIGksIGlzUm9vdCkge1xuXHQgIGlmIChpID09PSB1bmRlZmluZWQpIHtcblx0ICAgIGkgPSBib2R5Lmxlbmd0aDtcblx0ICB9XG5cblx0ICAvLyBOb2RlcyB0aGF0IGVuZCB3aXRoIG5ld2xpbmVzIGFyZSBjb25zaWRlcmVkIHdoaXRlc3BhY2UgKGJ1dCBhcmUgc3BlY2lhbFxuXHQgIC8vIGNhc2VkIGZvciBzdHJpcCBvcGVyYXRpb25zKVxuXHQgIHZhciBwcmV2ID0gYm9keVtpIC0gMV0sXG5cdCAgICAgIHNpYmxpbmcgPSBib2R5W2kgLSAyXTtcblx0ICBpZiAoIXByZXYpIHtcblx0ICAgIHJldHVybiBpc1Jvb3Q7XG5cdCAgfVxuXG5cdCAgaWYgKHByZXYudHlwZSA9PT0gJ0NvbnRlbnRTdGF0ZW1lbnQnKSB7XG5cdCAgICByZXR1cm4gKHNpYmxpbmcgfHwgIWlzUm9vdCA/IC9cXHI/XFxuXFxzKj8kLyA6IC8oXnxcXHI/XFxuKVxccyo/JC8pLnRlc3QocHJldi5vcmlnaW5hbCk7XG5cdCAgfVxuXHR9XG5cdGZ1bmN0aW9uIGlzTmV4dFdoaXRlc3BhY2UoYm9keSwgaSwgaXNSb290KSB7XG5cdCAgaWYgKGkgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgaSA9IC0xO1xuXHQgIH1cblxuXHQgIHZhciBuZXh0ID0gYm9keVtpICsgMV0sXG5cdCAgICAgIHNpYmxpbmcgPSBib2R5W2kgKyAyXTtcblx0ICBpZiAoIW5leHQpIHtcblx0ICAgIHJldHVybiBpc1Jvb3Q7XG5cdCAgfVxuXG5cdCAgaWYgKG5leHQudHlwZSA9PT0gJ0NvbnRlbnRTdGF0ZW1lbnQnKSB7XG5cdCAgICByZXR1cm4gKHNpYmxpbmcgfHwgIWlzUm9vdCA/IC9eXFxzKj9cXHI/XFxuLyA6IC9eXFxzKj8oXFxyP1xcbnwkKS8pLnRlc3QobmV4dC5vcmlnaW5hbCk7XG5cdCAgfVxuXHR9XG5cblx0Ly8gTWFya3MgdGhlIG5vZGUgdG8gdGhlIHJpZ2h0IG9mIHRoZSBwb3NpdGlvbiBhcyBvbWl0dGVkLlxuXHQvLyBJLmUuIHt7Zm9vfX0nICcgd2lsbCBtYXJrIHRoZSAnICcgbm9kZSBhcyBvbWl0dGVkLlxuXHQvL1xuXHQvLyBJZiBpIGlzIHVuZGVmaW5lZCwgdGhlbiB0aGUgZmlyc3QgY2hpbGQgd2lsbCBiZSBtYXJrZWQgYXMgc3VjaC5cblx0Ly9cblx0Ly8gSWYgbXVsaXRwbGUgaXMgdHJ1dGh5IHRoZW4gYWxsIHdoaXRlc3BhY2Ugd2lsbCBiZSBzdHJpcHBlZCBvdXQgdW50aWwgbm9uLXdoaXRlc3BhY2Vcblx0Ly8gY29udGVudCBpcyBtZXQuXG5cdGZ1bmN0aW9uIG9taXRSaWdodChib2R5LCBpLCBtdWx0aXBsZSkge1xuXHQgIHZhciBjdXJyZW50ID0gYm9keVtpID09IG51bGwgPyAwIDogaSArIDFdO1xuXHQgIGlmICghY3VycmVudCB8fCBjdXJyZW50LnR5cGUgIT09ICdDb250ZW50U3RhdGVtZW50JyB8fCAhbXVsdGlwbGUgJiYgY3VycmVudC5yaWdodFN0cmlwcGVkKSB7XG5cdCAgICByZXR1cm47XG5cdCAgfVxuXG5cdCAgdmFyIG9yaWdpbmFsID0gY3VycmVudC52YWx1ZTtcblx0ICBjdXJyZW50LnZhbHVlID0gY3VycmVudC52YWx1ZS5yZXBsYWNlKG11bHRpcGxlID8gL15cXHMrLyA6IC9eWyBcXHRdKlxccj9cXG4/LywgJycpO1xuXHQgIGN1cnJlbnQucmlnaHRTdHJpcHBlZCA9IGN1cnJlbnQudmFsdWUgIT09IG9yaWdpbmFsO1xuXHR9XG5cblx0Ly8gTWFya3MgdGhlIG5vZGUgdG8gdGhlIGxlZnQgb2YgdGhlIHBvc2l0aW9uIGFzIG9taXR0ZWQuXG5cdC8vIEkuZS4gJyAne3tmb299fSB3aWxsIG1hcmsgdGhlICcgJyBub2RlIGFzIG9taXR0ZWQuXG5cdC8vXG5cdC8vIElmIGkgaXMgdW5kZWZpbmVkIHRoZW4gdGhlIGxhc3QgY2hpbGQgd2lsbCBiZSBtYXJrZWQgYXMgc3VjaC5cblx0Ly9cblx0Ly8gSWYgbXVsaXRwbGUgaXMgdHJ1dGh5IHRoZW4gYWxsIHdoaXRlc3BhY2Ugd2lsbCBiZSBzdHJpcHBlZCBvdXQgdW50aWwgbm9uLXdoaXRlc3BhY2Vcblx0Ly8gY29udGVudCBpcyBtZXQuXG5cdGZ1bmN0aW9uIG9taXRMZWZ0KGJvZHksIGksIG11bHRpcGxlKSB7XG5cdCAgdmFyIGN1cnJlbnQgPSBib2R5W2kgPT0gbnVsbCA/IGJvZHkubGVuZ3RoIC0gMSA6IGkgLSAxXTtcblx0ICBpZiAoIWN1cnJlbnQgfHwgY3VycmVudC50eXBlICE9PSAnQ29udGVudFN0YXRlbWVudCcgfHwgIW11bHRpcGxlICYmIGN1cnJlbnQubGVmdFN0cmlwcGVkKSB7XG5cdCAgICByZXR1cm47XG5cdCAgfVxuXG5cdCAgLy8gV2Ugb21pdCB0aGUgbGFzdCBub2RlIGlmIGl0J3Mgd2hpdGVzcGFjZSBvbmx5IGFuZCBub3QgcHJlY2VlZGVkIGJ5IGEgbm9uLWNvbnRlbnQgbm9kZS5cblx0ICB2YXIgb3JpZ2luYWwgPSBjdXJyZW50LnZhbHVlO1xuXHQgIGN1cnJlbnQudmFsdWUgPSBjdXJyZW50LnZhbHVlLnJlcGxhY2UobXVsdGlwbGUgPyAvXFxzKyQvIDogL1sgXFx0XSskLywgJycpO1xuXHQgIGN1cnJlbnQubGVmdFN0cmlwcGVkID0gY3VycmVudC52YWx1ZSAhPT0gb3JpZ2luYWw7XG5cdCAgcmV0dXJuIGN1cnJlbnQubGVmdFN0cmlwcGVkO1xuXHR9XG5cblx0ZXhwb3J0c1snZGVmYXVsdCddID0gV2hpdGVzcGFjZUNvbnRyb2w7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMjUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSlbJ2RlZmF1bHQnXTtcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5cdHZhciBfZXhjZXB0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxuXHR2YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pO1xuXG5cdGZ1bmN0aW9uIFZpc2l0b3IoKSB7XG5cdCAgdGhpcy5wYXJlbnRzID0gW107XG5cdH1cblxuXHRWaXNpdG9yLnByb3RvdHlwZSA9IHtcblx0ICBjb25zdHJ1Y3RvcjogVmlzaXRvcixcblx0ICBtdXRhdGluZzogZmFsc2UsXG5cblx0ICAvLyBWaXNpdHMgYSBnaXZlbiB2YWx1ZS4gSWYgbXV0YXRpbmcsIHdpbGwgcmVwbGFjZSB0aGUgdmFsdWUgaWYgbmVjZXNzYXJ5LlxuXHQgIGFjY2VwdEtleTogZnVuY3Rpb24gYWNjZXB0S2V5KG5vZGUsIG5hbWUpIHtcblx0ICAgIHZhciB2YWx1ZSA9IHRoaXMuYWNjZXB0KG5vZGVbbmFtZV0pO1xuXHQgICAgaWYgKHRoaXMubXV0YXRpbmcpIHtcblx0ICAgICAgLy8gSGFja3kgc2FuaXR5IGNoZWNrOiBUaGlzIG1heSBoYXZlIGEgZmV3IGZhbHNlIHBvc2l0aXZlcyBmb3IgdHlwZSBmb3IgdGhlIGhlbHBlclxuXHQgICAgICAvLyBtZXRob2RzIGJ1dCB3aWxsIGdlbmVyYWxseSBkbyB0aGUgcmlnaHQgdGhpbmcgd2l0aG91dCBhIGxvdCBvZiBvdmVyaGVhZC5cblx0ICAgICAgaWYgKHZhbHVlICYmICFWaXNpdG9yLnByb3RvdHlwZVt2YWx1ZS50eXBlXSkge1xuXHQgICAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdVbmV4cGVjdGVkIG5vZGUgdHlwZSBcIicgKyB2YWx1ZS50eXBlICsgJ1wiIGZvdW5kIHdoZW4gYWNjZXB0aW5nICcgKyBuYW1lICsgJyBvbiAnICsgbm9kZS50eXBlKTtcblx0ICAgICAgfVxuXHQgICAgICBub2RlW25hbWVdID0gdmFsdWU7XG5cdCAgICB9XG5cdCAgfSxcblxuXHQgIC8vIFBlcmZvcm1zIGFuIGFjY2VwdCBvcGVyYXRpb24gd2l0aCBhZGRlZCBzYW5pdHkgY2hlY2sgdG8gZW5zdXJlXG5cdCAgLy8gcmVxdWlyZWQga2V5cyBhcmUgbm90IHJlbW92ZWQuXG5cdCAgYWNjZXB0UmVxdWlyZWQ6IGZ1bmN0aW9uIGFjY2VwdFJlcXVpcmVkKG5vZGUsIG5hbWUpIHtcblx0ICAgIHRoaXMuYWNjZXB0S2V5KG5vZGUsIG5hbWUpO1xuXG5cdCAgICBpZiAoIW5vZGVbbmFtZV0pIHtcblx0ICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10obm9kZS50eXBlICsgJyByZXF1aXJlcyAnICsgbmFtZSk7XG5cdCAgICB9XG5cdCAgfSxcblxuXHQgIC8vIFRyYXZlcnNlcyBhIGdpdmVuIGFycmF5LiBJZiBtdXRhdGluZywgZW1wdHkgcmVzcG5zZXMgd2lsbCBiZSByZW1vdmVkXG5cdCAgLy8gZm9yIGNoaWxkIGVsZW1lbnRzLlxuXHQgIGFjY2VwdEFycmF5OiBmdW5jdGlvbiBhY2NlcHRBcnJheShhcnJheSkge1xuXHQgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0ICAgICAgdGhpcy5hY2NlcHRLZXkoYXJyYXksIGkpO1xuXG5cdCAgICAgIGlmICghYXJyYXlbaV0pIHtcblx0ICAgICAgICBhcnJheS5zcGxpY2UoaSwgMSk7XG5cdCAgICAgICAgaS0tO1xuXHQgICAgICAgIGwtLTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sXG5cblx0ICBhY2NlcHQ6IGZ1bmN0aW9uIGFjY2VwdChvYmplY3QpIHtcblx0ICAgIGlmICghb2JqZWN0KSB7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblxuXHQgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IFNhbml0eSBjb2RlICovXG5cdCAgICBpZiAoIXRoaXNbb2JqZWN0LnR5cGVdKSB7XG5cdCAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdVbmtub3duIHR5cGU6ICcgKyBvYmplY3QudHlwZSwgb2JqZWN0KTtcblx0ICAgIH1cblxuXHQgICAgaWYgKHRoaXMuY3VycmVudCkge1xuXHQgICAgICB0aGlzLnBhcmVudHMudW5zaGlmdCh0aGlzLmN1cnJlbnQpO1xuXHQgICAgfVxuXHQgICAgdGhpcy5jdXJyZW50ID0gb2JqZWN0O1xuXG5cdCAgICB2YXIgcmV0ID0gdGhpc1tvYmplY3QudHlwZV0ob2JqZWN0KTtcblxuXHQgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5wYXJlbnRzLnNoaWZ0KCk7XG5cblx0ICAgIGlmICghdGhpcy5tdXRhdGluZyB8fCByZXQpIHtcblx0ICAgICAgcmV0dXJuIHJldDtcblx0ICAgIH0gZWxzZSBpZiAocmV0ICE9PSBmYWxzZSkge1xuXHQgICAgICByZXR1cm4gb2JqZWN0O1xuXHQgICAgfVxuXHQgIH0sXG5cblx0ICBQcm9ncmFtOiBmdW5jdGlvbiBQcm9ncmFtKHByb2dyYW0pIHtcblx0ICAgIHRoaXMuYWNjZXB0QXJyYXkocHJvZ3JhbS5ib2R5KTtcblx0ICB9LFxuXG5cdCAgTXVzdGFjaGVTdGF0ZW1lbnQ6IHZpc2l0U3ViRXhwcmVzc2lvbixcblx0ICBEZWNvcmF0b3I6IHZpc2l0U3ViRXhwcmVzc2lvbixcblxuXHQgIEJsb2NrU3RhdGVtZW50OiB2aXNpdEJsb2NrLFxuXHQgIERlY29yYXRvckJsb2NrOiB2aXNpdEJsb2NrLFxuXG5cdCAgUGFydGlhbFN0YXRlbWVudDogdmlzaXRQYXJ0aWFsLFxuXHQgIFBhcnRpYWxCbG9ja1N0YXRlbWVudDogZnVuY3Rpb24gUGFydGlhbEJsb2NrU3RhdGVtZW50KHBhcnRpYWwpIHtcblx0ICAgIHZpc2l0UGFydGlhbC5jYWxsKHRoaXMsIHBhcnRpYWwpO1xuXG5cdCAgICB0aGlzLmFjY2VwdEtleShwYXJ0aWFsLCAncHJvZ3JhbScpO1xuXHQgIH0sXG5cblx0ICBDb250ZW50U3RhdGVtZW50OiBmdW5jdGlvbiBDb250ZW50U3RhdGVtZW50KCkgLyogY29udGVudCAqL3t9LFxuXHQgIENvbW1lbnRTdGF0ZW1lbnQ6IGZ1bmN0aW9uIENvbW1lbnRTdGF0ZW1lbnQoKSAvKiBjb21tZW50ICove30sXG5cblx0ICBTdWJFeHByZXNzaW9uOiB2aXNpdFN1YkV4cHJlc3Npb24sXG5cblx0ICBQYXRoRXhwcmVzc2lvbjogZnVuY3Rpb24gUGF0aEV4cHJlc3Npb24oKSAvKiBwYXRoICove30sXG5cblx0ICBTdHJpbmdMaXRlcmFsOiBmdW5jdGlvbiBTdHJpbmdMaXRlcmFsKCkgLyogc3RyaW5nICove30sXG5cdCAgTnVtYmVyTGl0ZXJhbDogZnVuY3Rpb24gTnVtYmVyTGl0ZXJhbCgpIC8qIG51bWJlciAqL3t9LFxuXHQgIEJvb2xlYW5MaXRlcmFsOiBmdW5jdGlvbiBCb29sZWFuTGl0ZXJhbCgpIC8qIGJvb2wgKi97fSxcblx0ICBVbmRlZmluZWRMaXRlcmFsOiBmdW5jdGlvbiBVbmRlZmluZWRMaXRlcmFsKCkgLyogbGl0ZXJhbCAqL3t9LFxuXHQgIE51bGxMaXRlcmFsOiBmdW5jdGlvbiBOdWxsTGl0ZXJhbCgpIC8qIGxpdGVyYWwgKi97fSxcblxuXHQgIEhhc2g6IGZ1bmN0aW9uIEhhc2goaGFzaCkge1xuXHQgICAgdGhpcy5hY2NlcHRBcnJheShoYXNoLnBhaXJzKTtcblx0ICB9LFxuXHQgIEhhc2hQYWlyOiBmdW5jdGlvbiBIYXNoUGFpcihwYWlyKSB7XG5cdCAgICB0aGlzLmFjY2VwdFJlcXVpcmVkKHBhaXIsICd2YWx1ZScpO1xuXHQgIH1cblx0fTtcblxuXHRmdW5jdGlvbiB2aXNpdFN1YkV4cHJlc3Npb24obXVzdGFjaGUpIHtcblx0ICB0aGlzLmFjY2VwdFJlcXVpcmVkKG11c3RhY2hlLCAncGF0aCcpO1xuXHQgIHRoaXMuYWNjZXB0QXJyYXkobXVzdGFjaGUucGFyYW1zKTtcblx0ICB0aGlzLmFjY2VwdEtleShtdXN0YWNoZSwgJ2hhc2gnKTtcblx0fVxuXHRmdW5jdGlvbiB2aXNpdEJsb2NrKGJsb2NrKSB7XG5cdCAgdmlzaXRTdWJFeHByZXNzaW9uLmNhbGwodGhpcywgYmxvY2spO1xuXG5cdCAgdGhpcy5hY2NlcHRLZXkoYmxvY2ssICdwcm9ncmFtJyk7XG5cdCAgdGhpcy5hY2NlcHRLZXkoYmxvY2ssICdpbnZlcnNlJyk7XG5cdH1cblx0ZnVuY3Rpb24gdmlzaXRQYXJ0aWFsKHBhcnRpYWwpIHtcblx0ICB0aGlzLmFjY2VwdFJlcXVpcmVkKHBhcnRpYWwsICduYW1lJyk7XG5cdCAgdGhpcy5hY2NlcHRBcnJheShwYXJ0aWFsLnBhcmFtcyk7XG5cdCAgdGhpcy5hY2NlcHRLZXkocGFydGlhbCwgJ2hhc2gnKTtcblx0fVxuXG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IFZpc2l0b3I7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMjYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSlbJ2RlZmF1bHQnXTtcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHRleHBvcnRzLlNvdXJjZUxvY2F0aW9uID0gU291cmNlTG9jYXRpb247XG5cdGV4cG9ydHMuaWQgPSBpZDtcblx0ZXhwb3J0cy5zdHJpcEZsYWdzID0gc3RyaXBGbGFncztcblx0ZXhwb3J0cy5zdHJpcENvbW1lbnQgPSBzdHJpcENvbW1lbnQ7XG5cdGV4cG9ydHMucHJlcGFyZVBhdGggPSBwcmVwYXJlUGF0aDtcblx0ZXhwb3J0cy5wcmVwYXJlTXVzdGFjaGUgPSBwcmVwYXJlTXVzdGFjaGU7XG5cdGV4cG9ydHMucHJlcGFyZVJhd0Jsb2NrID0gcHJlcGFyZVJhd0Jsb2NrO1xuXHRleHBvcnRzLnByZXBhcmVCbG9jayA9IHByZXBhcmVCbG9jaztcblx0ZXhwb3J0cy5wcmVwYXJlUHJvZ3JhbSA9IHByZXBhcmVQcm9ncmFtO1xuXHRleHBvcnRzLnByZXBhcmVQYXJ0aWFsQmxvY2sgPSBwcmVwYXJlUGFydGlhbEJsb2NrO1xuXG5cdHZhciBfZXhjZXB0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxuXHR2YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pO1xuXG5cdGZ1bmN0aW9uIHZhbGlkYXRlQ2xvc2Uob3BlbiwgY2xvc2UpIHtcblx0ICBjbG9zZSA9IGNsb3NlLnBhdGggPyBjbG9zZS5wYXRoLm9yaWdpbmFsIDogY2xvc2U7XG5cblx0ICBpZiAob3Blbi5wYXRoLm9yaWdpbmFsICE9PSBjbG9zZSkge1xuXHQgICAgdmFyIGVycm9yTm9kZSA9IHsgbG9jOiBvcGVuLnBhdGgubG9jIH07XG5cblx0ICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKG9wZW4ucGF0aC5vcmlnaW5hbCArIFwiIGRvZXNuJ3QgbWF0Y2ggXCIgKyBjbG9zZSwgZXJyb3JOb2RlKTtcblx0ICB9XG5cdH1cblxuXHRmdW5jdGlvbiBTb3VyY2VMb2NhdGlvbihzb3VyY2UsIGxvY0luZm8pIHtcblx0ICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcblx0ICB0aGlzLnN0YXJ0ID0ge1xuXHQgICAgbGluZTogbG9jSW5mby5maXJzdF9saW5lLFxuXHQgICAgY29sdW1uOiBsb2NJbmZvLmZpcnN0X2NvbHVtblxuXHQgIH07XG5cdCAgdGhpcy5lbmQgPSB7XG5cdCAgICBsaW5lOiBsb2NJbmZvLmxhc3RfbGluZSxcblx0ICAgIGNvbHVtbjogbG9jSW5mby5sYXN0X2NvbHVtblxuXHQgIH07XG5cdH1cblxuXHRmdW5jdGlvbiBpZCh0b2tlbikge1xuXHQgIGlmICgvXlxcWy4qXFxdJC8udGVzdCh0b2tlbikpIHtcblx0ICAgIHJldHVybiB0b2tlbi5zdWJzdHIoMSwgdG9rZW4ubGVuZ3RoIC0gMik7XG5cdCAgfSBlbHNlIHtcblx0ICAgIHJldHVybiB0b2tlbjtcblx0ICB9XG5cdH1cblxuXHRmdW5jdGlvbiBzdHJpcEZsYWdzKG9wZW4sIGNsb3NlKSB7XG5cdCAgcmV0dXJuIHtcblx0ICAgIG9wZW46IG9wZW4uY2hhckF0KDIpID09PSAnficsXG5cdCAgICBjbG9zZTogY2xvc2UuY2hhckF0KGNsb3NlLmxlbmd0aCAtIDMpID09PSAnfidcblx0ICB9O1xuXHR9XG5cblx0ZnVuY3Rpb24gc3RyaXBDb21tZW50KGNvbW1lbnQpIHtcblx0ICByZXR1cm4gY29tbWVudC5yZXBsYWNlKC9eXFx7XFx7fj9cXCEtPy0/LywgJycpLnJlcGxhY2UoLy0/LT9+P1xcfVxcfSQvLCAnJyk7XG5cdH1cblxuXHRmdW5jdGlvbiBwcmVwYXJlUGF0aChkYXRhLCBwYXJ0cywgbG9jKSB7XG5cdCAgbG9jID0gdGhpcy5sb2NJbmZvKGxvYyk7XG5cblx0ICB2YXIgb3JpZ2luYWwgPSBkYXRhID8gJ0AnIDogJycsXG5cdCAgICAgIGRpZyA9IFtdLFxuXHQgICAgICBkZXB0aCA9IDAsXG5cdCAgICAgIGRlcHRoU3RyaW5nID0gJyc7XG5cblx0ICBmb3IgKHZhciBpID0gMCwgbCA9IHBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHQgICAgdmFyIHBhcnQgPSBwYXJ0c1tpXS5wYXJ0LFxuXG5cdCAgICAvLyBJZiB3ZSBoYXZlIFtdIHN5bnRheCB0aGVuIHdlIGRvIG5vdCB0cmVhdCBwYXRoIHJlZmVyZW5jZXMgYXMgb3BlcmF0b3JzLFxuXHQgICAgLy8gaS5lLiBmb28uW3RoaXNdIHJlc29sdmVzIHRvIGFwcHJveGltYXRlbHkgY29udGV4dC5mb29bJ3RoaXMnXVxuXHQgICAgaXNMaXRlcmFsID0gcGFydHNbaV0ub3JpZ2luYWwgIT09IHBhcnQ7XG5cdCAgICBvcmlnaW5hbCArPSAocGFydHNbaV0uc2VwYXJhdG9yIHx8ICcnKSArIHBhcnQ7XG5cblx0ICAgIGlmICghaXNMaXRlcmFsICYmIChwYXJ0ID09PSAnLi4nIHx8IHBhcnQgPT09ICcuJyB8fCBwYXJ0ID09PSAndGhpcycpKSB7XG5cdCAgICAgIGlmIChkaWcubGVuZ3RoID4gMCkge1xuXHQgICAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdJbnZhbGlkIHBhdGg6ICcgKyBvcmlnaW5hbCwgeyBsb2M6IGxvYyB9KTtcblx0ICAgICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG5cdCAgICAgICAgZGVwdGgrKztcblx0ICAgICAgICBkZXB0aFN0cmluZyArPSAnLi4vJztcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgZGlnLnB1c2gocGFydCk7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgcmV0dXJuIHtcblx0ICAgIHR5cGU6ICdQYXRoRXhwcmVzc2lvbicsXG5cdCAgICBkYXRhOiBkYXRhLFxuXHQgICAgZGVwdGg6IGRlcHRoLFxuXHQgICAgcGFydHM6IGRpZyxcblx0ICAgIG9yaWdpbmFsOiBvcmlnaW5hbCxcblx0ICAgIGxvYzogbG9jXG5cdCAgfTtcblx0fVxuXG5cdGZ1bmN0aW9uIHByZXBhcmVNdXN0YWNoZShwYXRoLCBwYXJhbXMsIGhhc2gsIG9wZW4sIHN0cmlwLCBsb2NJbmZvKSB7XG5cdCAgLy8gTXVzdCB1c2UgY2hhckF0IHRvIHN1cHBvcnQgSUUgcHJlLTEwXG5cdCAgdmFyIGVzY2FwZUZsYWcgPSBvcGVuLmNoYXJBdCgzKSB8fCBvcGVuLmNoYXJBdCgyKSxcblx0ICAgICAgZXNjYXBlZCA9IGVzY2FwZUZsYWcgIT09ICd7JyAmJiBlc2NhcGVGbGFnICE9PSAnJic7XG5cblx0ICB2YXIgZGVjb3JhdG9yID0gL1xcKi8udGVzdChvcGVuKTtcblx0ICByZXR1cm4ge1xuXHQgICAgdHlwZTogZGVjb3JhdG9yID8gJ0RlY29yYXRvcicgOiAnTXVzdGFjaGVTdGF0ZW1lbnQnLFxuXHQgICAgcGF0aDogcGF0aCxcblx0ICAgIHBhcmFtczogcGFyYW1zLFxuXHQgICAgaGFzaDogaGFzaCxcblx0ICAgIGVzY2FwZWQ6IGVzY2FwZWQsXG5cdCAgICBzdHJpcDogc3RyaXAsXG5cdCAgICBsb2M6IHRoaXMubG9jSW5mbyhsb2NJbmZvKVxuXHQgIH07XG5cdH1cblxuXHRmdW5jdGlvbiBwcmVwYXJlUmF3QmxvY2sob3BlblJhd0Jsb2NrLCBjb250ZW50cywgY2xvc2UsIGxvY0luZm8pIHtcblx0ICB2YWxpZGF0ZUNsb3NlKG9wZW5SYXdCbG9jaywgY2xvc2UpO1xuXG5cdCAgbG9jSW5mbyA9IHRoaXMubG9jSW5mbyhsb2NJbmZvKTtcblx0ICB2YXIgcHJvZ3JhbSA9IHtcblx0ICAgIHR5cGU6ICdQcm9ncmFtJyxcblx0ICAgIGJvZHk6IGNvbnRlbnRzLFxuXHQgICAgc3RyaXA6IHt9LFxuXHQgICAgbG9jOiBsb2NJbmZvXG5cdCAgfTtcblxuXHQgIHJldHVybiB7XG5cdCAgICB0eXBlOiAnQmxvY2tTdGF0ZW1lbnQnLFxuXHQgICAgcGF0aDogb3BlblJhd0Jsb2NrLnBhdGgsXG5cdCAgICBwYXJhbXM6IG9wZW5SYXdCbG9jay5wYXJhbXMsXG5cdCAgICBoYXNoOiBvcGVuUmF3QmxvY2suaGFzaCxcblx0ICAgIHByb2dyYW06IHByb2dyYW0sXG5cdCAgICBvcGVuU3RyaXA6IHt9LFxuXHQgICAgaW52ZXJzZVN0cmlwOiB7fSxcblx0ICAgIGNsb3NlU3RyaXA6IHt9LFxuXHQgICAgbG9jOiBsb2NJbmZvXG5cdCAgfTtcblx0fVxuXG5cdGZ1bmN0aW9uIHByZXBhcmVCbG9jayhvcGVuQmxvY2ssIHByb2dyYW0sIGludmVyc2VBbmRQcm9ncmFtLCBjbG9zZSwgaW52ZXJ0ZWQsIGxvY0luZm8pIHtcblx0ICBpZiAoY2xvc2UgJiYgY2xvc2UucGF0aCkge1xuXHQgICAgdmFsaWRhdGVDbG9zZShvcGVuQmxvY2ssIGNsb3NlKTtcblx0ICB9XG5cblx0ICB2YXIgZGVjb3JhdG9yID0gL1xcKi8udGVzdChvcGVuQmxvY2sub3Blbik7XG5cblx0ICBwcm9ncmFtLmJsb2NrUGFyYW1zID0gb3BlbkJsb2NrLmJsb2NrUGFyYW1zO1xuXG5cdCAgdmFyIGludmVyc2UgPSB1bmRlZmluZWQsXG5cdCAgICAgIGludmVyc2VTdHJpcCA9IHVuZGVmaW5lZDtcblxuXHQgIGlmIChpbnZlcnNlQW5kUHJvZ3JhbSkge1xuXHQgICAgaWYgKGRlY29yYXRvcikge1xuXHQgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVW5leHBlY3RlZCBpbnZlcnNlIGJsb2NrIG9uIGRlY29yYXRvcicsIGludmVyc2VBbmRQcm9ncmFtKTtcblx0ICAgIH1cblxuXHQgICAgaWYgKGludmVyc2VBbmRQcm9ncmFtLmNoYWluKSB7XG5cdCAgICAgIGludmVyc2VBbmRQcm9ncmFtLnByb2dyYW0uYm9keVswXS5jbG9zZVN0cmlwID0gY2xvc2Uuc3RyaXA7XG5cdCAgICB9XG5cblx0ICAgIGludmVyc2VTdHJpcCA9IGludmVyc2VBbmRQcm9ncmFtLnN0cmlwO1xuXHQgICAgaW52ZXJzZSA9IGludmVyc2VBbmRQcm9ncmFtLnByb2dyYW07XG5cdCAgfVxuXG5cdCAgaWYgKGludmVydGVkKSB7XG5cdCAgICBpbnZlcnRlZCA9IGludmVyc2U7XG5cdCAgICBpbnZlcnNlID0gcHJvZ3JhbTtcblx0ICAgIHByb2dyYW0gPSBpbnZlcnRlZDtcblx0ICB9XG5cblx0ICByZXR1cm4ge1xuXHQgICAgdHlwZTogZGVjb3JhdG9yID8gJ0RlY29yYXRvckJsb2NrJyA6ICdCbG9ja1N0YXRlbWVudCcsXG5cdCAgICBwYXRoOiBvcGVuQmxvY2sucGF0aCxcblx0ICAgIHBhcmFtczogb3BlbkJsb2NrLnBhcmFtcyxcblx0ICAgIGhhc2g6IG9wZW5CbG9jay5oYXNoLFxuXHQgICAgcHJvZ3JhbTogcHJvZ3JhbSxcblx0ICAgIGludmVyc2U6IGludmVyc2UsXG5cdCAgICBvcGVuU3RyaXA6IG9wZW5CbG9jay5zdHJpcCxcblx0ICAgIGludmVyc2VTdHJpcDogaW52ZXJzZVN0cmlwLFxuXHQgICAgY2xvc2VTdHJpcDogY2xvc2UgJiYgY2xvc2Uuc3RyaXAsXG5cdCAgICBsb2M6IHRoaXMubG9jSW5mbyhsb2NJbmZvKVxuXHQgIH07XG5cdH1cblxuXHRmdW5jdGlvbiBwcmVwYXJlUHJvZ3JhbShzdGF0ZW1lbnRzLCBsb2MpIHtcblx0ICBpZiAoIWxvYyAmJiBzdGF0ZW1lbnRzLmxlbmd0aCkge1xuXHQgICAgdmFyIGZpcnN0TG9jID0gc3RhdGVtZW50c1swXS5sb2MsXG5cdCAgICAgICAgbGFzdExvYyA9IHN0YXRlbWVudHNbc3RhdGVtZW50cy5sZW5ndGggLSAxXS5sb2M7XG5cblx0ICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG5cdCAgICBpZiAoZmlyc3RMb2MgJiYgbGFzdExvYykge1xuXHQgICAgICBsb2MgPSB7XG5cdCAgICAgICAgc291cmNlOiBmaXJzdExvYy5zb3VyY2UsXG5cdCAgICAgICAgc3RhcnQ6IHtcblx0ICAgICAgICAgIGxpbmU6IGZpcnN0TG9jLnN0YXJ0LmxpbmUsXG5cdCAgICAgICAgICBjb2x1bW46IGZpcnN0TG9jLnN0YXJ0LmNvbHVtblxuXHQgICAgICAgIH0sXG5cdCAgICAgICAgZW5kOiB7XG5cdCAgICAgICAgICBsaW5lOiBsYXN0TG9jLmVuZC5saW5lLFxuXHQgICAgICAgICAgY29sdW1uOiBsYXN0TG9jLmVuZC5jb2x1bW5cblx0ICAgICAgICB9XG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgcmV0dXJuIHtcblx0ICAgIHR5cGU6ICdQcm9ncmFtJyxcblx0ICAgIGJvZHk6IHN0YXRlbWVudHMsXG5cdCAgICBzdHJpcDoge30sXG5cdCAgICBsb2M6IGxvY1xuXHQgIH07XG5cdH1cblxuXHRmdW5jdGlvbiBwcmVwYXJlUGFydGlhbEJsb2NrKG9wZW4sIHByb2dyYW0sIGNsb3NlLCBsb2NJbmZvKSB7XG5cdCAgdmFsaWRhdGVDbG9zZShvcGVuLCBjbG9zZSk7XG5cblx0ICByZXR1cm4ge1xuXHQgICAgdHlwZTogJ1BhcnRpYWxCbG9ja1N0YXRlbWVudCcsXG5cdCAgICBuYW1lOiBvcGVuLnBhdGgsXG5cdCAgICBwYXJhbXM6IG9wZW4ucGFyYW1zLFxuXHQgICAgaGFzaDogb3Blbi5oYXNoLFxuXHQgICAgcHJvZ3JhbTogcHJvZ3JhbSxcblx0ICAgIG9wZW5TdHJpcDogb3Blbi5zdHJpcCxcblx0ICAgIGNsb3NlU3RyaXA6IGNsb3NlICYmIGNsb3NlLnN0cmlwLFxuXHQgICAgbG9jOiB0aGlzLmxvY0luZm8obG9jSW5mbylcblx0ICB9O1xuXHR9XG5cbi8qKiovIH0sXG4vKiAyNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogZXNsaW50LWRpc2FibGUgbmV3LWNhcCAqL1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSlbJ2RlZmF1bHQnXTtcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHRleHBvcnRzLkNvbXBpbGVyID0gQ29tcGlsZXI7XG5cdGV4cG9ydHMucHJlY29tcGlsZSA9IHByZWNvbXBpbGU7XG5cdGV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGU7XG5cblx0dmFyIF9leGNlcHRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXG5cdHZhciBfZXhjZXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4Y2VwdGlvbik7XG5cblx0dmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cblx0dmFyIF9hc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblxuXHR2YXIgX2FzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3QpO1xuXG5cdHZhciBzbGljZSA9IFtdLnNsaWNlO1xuXG5cdGZ1bmN0aW9uIENvbXBpbGVyKCkge31cblxuXHQvLyB0aGUgZm91bmRIZWxwZXIgcmVnaXN0ZXIgd2lsbCBkaXNhbWJpZ3VhdGUgaGVscGVyIGxvb2t1cCBmcm9tIGZpbmRpbmcgYVxuXHQvLyBmdW5jdGlvbiBpbiBhIGNvbnRleHQuIFRoaXMgaXMgbmVjZXNzYXJ5IGZvciBtdXN0YWNoZSBjb21wYXRpYmlsaXR5LCB3aGljaFxuXHQvLyByZXF1aXJlcyB0aGF0IGNvbnRleHQgZnVuY3Rpb25zIGluIGJsb2NrcyBhcmUgZXZhbHVhdGVkIGJ5IGJsb2NrSGVscGVyTWlzc2luZyxcblx0Ly8gYW5kIHRoZW4gcHJvY2VlZCBhcyBpZiB0aGUgcmVzdWx0aW5nIHZhbHVlIHdhcyBwcm92aWRlZCB0byBibG9ja0hlbHBlck1pc3NpbmcuXG5cblx0Q29tcGlsZXIucHJvdG90eXBlID0ge1xuXHQgIGNvbXBpbGVyOiBDb21waWxlcixcblxuXHQgIGVxdWFsczogZnVuY3Rpb24gZXF1YWxzKG90aGVyKSB7XG5cdCAgICB2YXIgbGVuID0gdGhpcy5vcGNvZGVzLmxlbmd0aDtcblx0ICAgIGlmIChvdGhlci5vcGNvZGVzLmxlbmd0aCAhPT0gbGVuKSB7XG5cdCAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblxuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHQgICAgICB2YXIgb3Bjb2RlID0gdGhpcy5vcGNvZGVzW2ldLFxuXHQgICAgICAgICAgb3RoZXJPcGNvZGUgPSBvdGhlci5vcGNvZGVzW2ldO1xuXHQgICAgICBpZiAob3Bjb2RlLm9wY29kZSAhPT0gb3RoZXJPcGNvZGUub3Bjb2RlIHx8ICFhcmdFcXVhbHMob3Bjb2RlLmFyZ3MsIG90aGVyT3Bjb2RlLmFyZ3MpKSB7XG5cdCAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIC8vIFdlIGtub3cgdGhhdCBsZW5ndGggaXMgdGhlIHNhbWUgYmV0d2VlbiB0aGUgdHdvIGFycmF5cyBiZWNhdXNlIHRoZXkgYXJlIGRpcmVjdGx5IHRpZWRcblx0ICAgIC8vIHRvIHRoZSBvcGNvZGUgYmVoYXZpb3IgYWJvdmUuXG5cdCAgICBsZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDtcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgICAgaWYgKCF0aGlzLmNoaWxkcmVuW2ldLmVxdWFscyhvdGhlci5jaGlsZHJlbltpXSkpIHtcblx0ICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHRydWU7XG5cdCAgfSxcblxuXHQgIGd1aWQ6IDAsXG5cblx0ICBjb21waWxlOiBmdW5jdGlvbiBjb21waWxlKHByb2dyYW0sIG9wdGlvbnMpIHtcblx0ICAgIHRoaXMuc291cmNlTm9kZSA9IFtdO1xuXHQgICAgdGhpcy5vcGNvZGVzID0gW107XG5cdCAgICB0aGlzLmNoaWxkcmVuID0gW107XG5cdCAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHQgICAgdGhpcy5zdHJpbmdQYXJhbXMgPSBvcHRpb25zLnN0cmluZ1BhcmFtcztcblx0ICAgIHRoaXMudHJhY2tJZHMgPSBvcHRpb25zLnRyYWNrSWRzO1xuXG5cdCAgICBvcHRpb25zLmJsb2NrUGFyYW1zID0gb3B0aW9ucy5ibG9ja1BhcmFtcyB8fCBbXTtcblxuXHQgICAgLy8gVGhlc2UgY2hhbmdlcyB3aWxsIHByb3BhZ2F0ZSB0byB0aGUgb3RoZXIgY29tcGlsZXIgY29tcG9uZW50c1xuXHQgICAgdmFyIGtub3duSGVscGVycyA9IG9wdGlvbnMua25vd25IZWxwZXJzO1xuXHQgICAgb3B0aW9ucy5rbm93bkhlbHBlcnMgPSB7XG5cdCAgICAgICdoZWxwZXJNaXNzaW5nJzogdHJ1ZSxcblx0ICAgICAgJ2Jsb2NrSGVscGVyTWlzc2luZyc6IHRydWUsXG5cdCAgICAgICdlYWNoJzogdHJ1ZSxcblx0ICAgICAgJ2lmJzogdHJ1ZSxcblx0ICAgICAgJ3VubGVzcyc6IHRydWUsXG5cdCAgICAgICd3aXRoJzogdHJ1ZSxcblx0ICAgICAgJ2xvZyc6IHRydWUsXG5cdCAgICAgICdsb29rdXAnOiB0cnVlXG5cdCAgICB9O1xuXHQgICAgaWYgKGtub3duSGVscGVycykge1xuXHQgICAgICBmb3IgKHZhciBfbmFtZSBpbiBrbm93bkhlbHBlcnMpIHtcblx0ICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuXHQgICAgICAgIGlmIChfbmFtZSBpbiBrbm93bkhlbHBlcnMpIHtcblx0ICAgICAgICAgIG9wdGlvbnMua25vd25IZWxwZXJzW19uYW1lXSA9IGtub3duSGVscGVyc1tfbmFtZV07XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiB0aGlzLmFjY2VwdChwcm9ncmFtKTtcblx0ICB9LFxuXG5cdCAgY29tcGlsZVByb2dyYW06IGZ1bmN0aW9uIGNvbXBpbGVQcm9ncmFtKHByb2dyYW0pIHtcblx0ICAgIHZhciBjaGlsZENvbXBpbGVyID0gbmV3IHRoaXMuY29tcGlsZXIoKSxcblx0ICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcblx0ICAgIHJlc3VsdCA9IGNoaWxkQ29tcGlsZXIuY29tcGlsZShwcm9ncmFtLCB0aGlzLm9wdGlvbnMpLFxuXHQgICAgICAgIGd1aWQgPSB0aGlzLmd1aWQrKztcblxuXHQgICAgdGhpcy51c2VQYXJ0aWFsID0gdGhpcy51c2VQYXJ0aWFsIHx8IHJlc3VsdC51c2VQYXJ0aWFsO1xuXG5cdCAgICB0aGlzLmNoaWxkcmVuW2d1aWRdID0gcmVzdWx0O1xuXHQgICAgdGhpcy51c2VEZXB0aHMgPSB0aGlzLnVzZURlcHRocyB8fCByZXN1bHQudXNlRGVwdGhzO1xuXG5cdCAgICByZXR1cm4gZ3VpZDtcblx0ICB9LFxuXG5cdCAgYWNjZXB0OiBmdW5jdGlvbiBhY2NlcHQobm9kZSkge1xuXHQgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IFNhbml0eSBjb2RlICovXG5cdCAgICBpZiAoIXRoaXNbbm9kZS50eXBlXSkge1xuXHQgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVW5rbm93biB0eXBlOiAnICsgbm9kZS50eXBlLCBub2RlKTtcblx0ICAgIH1cblxuXHQgICAgdGhpcy5zb3VyY2VOb2RlLnVuc2hpZnQobm9kZSk7XG5cdCAgICB2YXIgcmV0ID0gdGhpc1tub2RlLnR5cGVdKG5vZGUpO1xuXHQgICAgdGhpcy5zb3VyY2VOb2RlLnNoaWZ0KCk7XG5cdCAgICByZXR1cm4gcmV0O1xuXHQgIH0sXG5cblx0ICBQcm9ncmFtOiBmdW5jdGlvbiBQcm9ncmFtKHByb2dyYW0pIHtcblx0ICAgIHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtcy51bnNoaWZ0KHByb2dyYW0uYmxvY2tQYXJhbXMpO1xuXG5cdCAgICB2YXIgYm9keSA9IHByb2dyYW0uYm9keSxcblx0ICAgICAgICBib2R5TGVuZ3RoID0gYm9keS5sZW5ndGg7XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZHlMZW5ndGg7IGkrKykge1xuXHQgICAgICB0aGlzLmFjY2VwdChib2R5W2ldKTtcblx0ICAgIH1cblxuXHQgICAgdGhpcy5vcHRpb25zLmJsb2NrUGFyYW1zLnNoaWZ0KCk7XG5cblx0ICAgIHRoaXMuaXNTaW1wbGUgPSBib2R5TGVuZ3RoID09PSAxO1xuXHQgICAgdGhpcy5ibG9ja1BhcmFtcyA9IHByb2dyYW0uYmxvY2tQYXJhbXMgPyBwcm9ncmFtLmJsb2NrUGFyYW1zLmxlbmd0aCA6IDA7XG5cblx0ICAgIHJldHVybiB0aGlzO1xuXHQgIH0sXG5cblx0ICBCbG9ja1N0YXRlbWVudDogZnVuY3Rpb24gQmxvY2tTdGF0ZW1lbnQoYmxvY2spIHtcblx0ICAgIHRyYW5zZm9ybUxpdGVyYWxUb1BhdGgoYmxvY2spO1xuXG5cdCAgICB2YXIgcHJvZ3JhbSA9IGJsb2NrLnByb2dyYW0sXG5cdCAgICAgICAgaW52ZXJzZSA9IGJsb2NrLmludmVyc2U7XG5cblx0ICAgIHByb2dyYW0gPSBwcm9ncmFtICYmIHRoaXMuY29tcGlsZVByb2dyYW0ocHJvZ3JhbSk7XG5cdCAgICBpbnZlcnNlID0gaW52ZXJzZSAmJiB0aGlzLmNvbXBpbGVQcm9ncmFtKGludmVyc2UpO1xuXG5cdCAgICB2YXIgdHlwZSA9IHRoaXMuY2xhc3NpZnlTZXhwcihibG9jayk7XG5cblx0ICAgIGlmICh0eXBlID09PSAnaGVscGVyJykge1xuXHQgICAgICB0aGlzLmhlbHBlclNleHByKGJsb2NrLCBwcm9ncmFtLCBpbnZlcnNlKTtcblx0ICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3NpbXBsZScpIHtcblx0ICAgICAgdGhpcy5zaW1wbGVTZXhwcihibG9jayk7XG5cblx0ICAgICAgLy8gbm93IHRoYXQgdGhlIHNpbXBsZSBtdXN0YWNoZSBpcyByZXNvbHZlZCwgd2UgbmVlZCB0b1xuXHQgICAgICAvLyBldmFsdWF0ZSBpdCBieSBleGVjdXRpbmcgYGJsb2NrSGVscGVyTWlzc2luZ2Bcblx0ICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgcHJvZ3JhbSk7XG5cdCAgICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIGludmVyc2UpO1xuXHQgICAgICB0aGlzLm9wY29kZSgnZW1wdHlIYXNoJyk7XG5cdCAgICAgIHRoaXMub3Bjb2RlKCdibG9ja1ZhbHVlJywgYmxvY2sucGF0aC5vcmlnaW5hbCk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB0aGlzLmFtYmlndW91c1NleHByKGJsb2NrLCBwcm9ncmFtLCBpbnZlcnNlKTtcblxuXHQgICAgICAvLyBub3cgdGhhdCB0aGUgc2ltcGxlIG11c3RhY2hlIGlzIHJlc29sdmVkLCB3ZSBuZWVkIHRvXG5cdCAgICAgIC8vIGV2YWx1YXRlIGl0IGJ5IGV4ZWN1dGluZyBgYmxvY2tIZWxwZXJNaXNzaW5nYFxuXHQgICAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBwcm9ncmFtKTtcblx0ICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgaW52ZXJzZSk7XG5cdCAgICAgIHRoaXMub3Bjb2RlKCdlbXB0eUhhc2gnKTtcblx0ICAgICAgdGhpcy5vcGNvZGUoJ2FtYmlndW91c0Jsb2NrVmFsdWUnKTtcblx0ICAgIH1cblxuXHQgICAgdGhpcy5vcGNvZGUoJ2FwcGVuZCcpO1xuXHQgIH0sXG5cblx0ICBEZWNvcmF0b3JCbG9jazogZnVuY3Rpb24gRGVjb3JhdG9yQmxvY2soZGVjb3JhdG9yKSB7XG5cdCAgICB2YXIgcHJvZ3JhbSA9IGRlY29yYXRvci5wcm9ncmFtICYmIHRoaXMuY29tcGlsZVByb2dyYW0oZGVjb3JhdG9yLnByb2dyYW0pO1xuXHQgICAgdmFyIHBhcmFtcyA9IHRoaXMuc2V0dXBGdWxsTXVzdGFjaGVQYXJhbXMoZGVjb3JhdG9yLCBwcm9ncmFtLCB1bmRlZmluZWQpLFxuXHQgICAgICAgIHBhdGggPSBkZWNvcmF0b3IucGF0aDtcblxuXHQgICAgdGhpcy51c2VEZWNvcmF0b3JzID0gdHJ1ZTtcblx0ICAgIHRoaXMub3Bjb2RlKCdyZWdpc3RlckRlY29yYXRvcicsIHBhcmFtcy5sZW5ndGgsIHBhdGgub3JpZ2luYWwpO1xuXHQgIH0sXG5cblx0ICBQYXJ0aWFsU3RhdGVtZW50OiBmdW5jdGlvbiBQYXJ0aWFsU3RhdGVtZW50KHBhcnRpYWwpIHtcblx0ICAgIHRoaXMudXNlUGFydGlhbCA9IHRydWU7XG5cblx0ICAgIHZhciBwcm9ncmFtID0gcGFydGlhbC5wcm9ncmFtO1xuXHQgICAgaWYgKHByb2dyYW0pIHtcblx0ICAgICAgcHJvZ3JhbSA9IHRoaXMuY29tcGlsZVByb2dyYW0ocGFydGlhbC5wcm9ncmFtKTtcblx0ICAgIH1cblxuXHQgICAgdmFyIHBhcmFtcyA9IHBhcnRpYWwucGFyYW1zO1xuXHQgICAgaWYgKHBhcmFtcy5sZW5ndGggPiAxKSB7XG5cdCAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdVbnN1cHBvcnRlZCBudW1iZXIgb2YgcGFydGlhbCBhcmd1bWVudHM6ICcgKyBwYXJhbXMubGVuZ3RoLCBwYXJ0aWFsKTtcblx0ICAgIH0gZWxzZSBpZiAoIXBhcmFtcy5sZW5ndGgpIHtcblx0ICAgICAgaWYgKHRoaXMub3B0aW9ucy5leHBsaWNpdFBhcnRpYWxDb250ZXh0KSB7XG5cdCAgICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hMaXRlcmFsJywgJ3VuZGVmaW5lZCcpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHBhcmFtcy5wdXNoKHsgdHlwZTogJ1BhdGhFeHByZXNzaW9uJywgcGFydHM6IFtdLCBkZXB0aDogMCB9KTtcblx0ICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICB2YXIgcGFydGlhbE5hbWUgPSBwYXJ0aWFsLm5hbWUub3JpZ2luYWwsXG5cdCAgICAgICAgaXNEeW5hbWljID0gcGFydGlhbC5uYW1lLnR5cGUgPT09ICdTdWJFeHByZXNzaW9uJztcblx0ICAgIGlmIChpc0R5bmFtaWMpIHtcblx0ICAgICAgdGhpcy5hY2NlcHQocGFydGlhbC5uYW1lKTtcblx0ICAgIH1cblxuXHQgICAgdGhpcy5zZXR1cEZ1bGxNdXN0YWNoZVBhcmFtcyhwYXJ0aWFsLCBwcm9ncmFtLCB1bmRlZmluZWQsIHRydWUpO1xuXG5cdCAgICB2YXIgaW5kZW50ID0gcGFydGlhbC5pbmRlbnQgfHwgJyc7XG5cdCAgICBpZiAodGhpcy5vcHRpb25zLnByZXZlbnRJbmRlbnQgJiYgaW5kZW50KSB7XG5cdCAgICAgIHRoaXMub3Bjb2RlKCdhcHBlbmRDb250ZW50JywgaW5kZW50KTtcblx0ICAgICAgaW5kZW50ID0gJyc7XG5cdCAgICB9XG5cblx0ICAgIHRoaXMub3Bjb2RlKCdpbnZva2VQYXJ0aWFsJywgaXNEeW5hbWljLCBwYXJ0aWFsTmFtZSwgaW5kZW50KTtcblx0ICAgIHRoaXMub3Bjb2RlKCdhcHBlbmQnKTtcblx0ICB9LFxuXHQgIFBhcnRpYWxCbG9ja1N0YXRlbWVudDogZnVuY3Rpb24gUGFydGlhbEJsb2NrU3RhdGVtZW50KHBhcnRpYWxCbG9jaykge1xuXHQgICAgdGhpcy5QYXJ0aWFsU3RhdGVtZW50KHBhcnRpYWxCbG9jayk7XG5cdCAgfSxcblxuXHQgIE11c3RhY2hlU3RhdGVtZW50OiBmdW5jdGlvbiBNdXN0YWNoZVN0YXRlbWVudChtdXN0YWNoZSkge1xuXHQgICAgdGhpcy5TdWJFeHByZXNzaW9uKG11c3RhY2hlKTtcblxuXHQgICAgaWYgKG11c3RhY2hlLmVzY2FwZWQgJiYgIXRoaXMub3B0aW9ucy5ub0VzY2FwZSkge1xuXHQgICAgICB0aGlzLm9wY29kZSgnYXBwZW5kRXNjYXBlZCcpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdGhpcy5vcGNvZGUoJ2FwcGVuZCcpO1xuXHQgICAgfVxuXHQgIH0sXG5cdCAgRGVjb3JhdG9yOiBmdW5jdGlvbiBEZWNvcmF0b3IoZGVjb3JhdG9yKSB7XG5cdCAgICB0aGlzLkRlY29yYXRvckJsb2NrKGRlY29yYXRvcik7XG5cdCAgfSxcblxuXHQgIENvbnRlbnRTdGF0ZW1lbnQ6IGZ1bmN0aW9uIENvbnRlbnRTdGF0ZW1lbnQoY29udGVudCkge1xuXHQgICAgaWYgKGNvbnRlbnQudmFsdWUpIHtcblx0ICAgICAgdGhpcy5vcGNvZGUoJ2FwcGVuZENvbnRlbnQnLCBjb250ZW50LnZhbHVlKTtcblx0ICAgIH1cblx0ICB9LFxuXG5cdCAgQ29tbWVudFN0YXRlbWVudDogZnVuY3Rpb24gQ29tbWVudFN0YXRlbWVudCgpIHt9LFxuXG5cdCAgU3ViRXhwcmVzc2lvbjogZnVuY3Rpb24gU3ViRXhwcmVzc2lvbihzZXhwcikge1xuXHQgICAgdHJhbnNmb3JtTGl0ZXJhbFRvUGF0aChzZXhwcik7XG5cdCAgICB2YXIgdHlwZSA9IHRoaXMuY2xhc3NpZnlTZXhwcihzZXhwcik7XG5cblx0ICAgIGlmICh0eXBlID09PSAnc2ltcGxlJykge1xuXHQgICAgICB0aGlzLnNpbXBsZVNleHByKHNleHByKTtcblx0ICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2hlbHBlcicpIHtcblx0ICAgICAgdGhpcy5oZWxwZXJTZXhwcihzZXhwcik7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB0aGlzLmFtYmlndW91c1NleHByKHNleHByKTtcblx0ICAgIH1cblx0ICB9LFxuXHQgIGFtYmlndW91c1NleHByOiBmdW5jdGlvbiBhbWJpZ3VvdXNTZXhwcihzZXhwciwgcHJvZ3JhbSwgaW52ZXJzZSkge1xuXHQgICAgdmFyIHBhdGggPSBzZXhwci5wYXRoLFxuXHQgICAgICAgIG5hbWUgPSBwYXRoLnBhcnRzWzBdLFxuXHQgICAgICAgIGlzQmxvY2sgPSBwcm9ncmFtICE9IG51bGwgfHwgaW52ZXJzZSAhPSBudWxsO1xuXG5cdCAgICB0aGlzLm9wY29kZSgnZ2V0Q29udGV4dCcsIHBhdGguZGVwdGgpO1xuXG5cdCAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBwcm9ncmFtKTtcblx0ICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIGludmVyc2UpO1xuXG5cdCAgICBwYXRoLnN0cmljdCA9IHRydWU7XG5cdCAgICB0aGlzLmFjY2VwdChwYXRoKTtcblxuXHQgICAgdGhpcy5vcGNvZGUoJ2ludm9rZUFtYmlndW91cycsIG5hbWUsIGlzQmxvY2spO1xuXHQgIH0sXG5cblx0ICBzaW1wbGVTZXhwcjogZnVuY3Rpb24gc2ltcGxlU2V4cHIoc2V4cHIpIHtcblx0ICAgIHZhciBwYXRoID0gc2V4cHIucGF0aDtcblx0ICAgIHBhdGguc3RyaWN0ID0gdHJ1ZTtcblx0ICAgIHRoaXMuYWNjZXB0KHBhdGgpO1xuXHQgICAgdGhpcy5vcGNvZGUoJ3Jlc29sdmVQb3NzaWJsZUxhbWJkYScpO1xuXHQgIH0sXG5cblx0ICBoZWxwZXJTZXhwcjogZnVuY3Rpb24gaGVscGVyU2V4cHIoc2V4cHIsIHByb2dyYW0sIGludmVyc2UpIHtcblx0ICAgIHZhciBwYXJhbXMgPSB0aGlzLnNldHVwRnVsbE11c3RhY2hlUGFyYW1zKHNleHByLCBwcm9ncmFtLCBpbnZlcnNlKSxcblx0ICAgICAgICBwYXRoID0gc2V4cHIucGF0aCxcblx0ICAgICAgICBuYW1lID0gcGF0aC5wYXJ0c1swXTtcblxuXHQgICAgaWYgKHRoaXMub3B0aW9ucy5rbm93bkhlbHBlcnNbbmFtZV0pIHtcblx0ICAgICAgdGhpcy5vcGNvZGUoJ2ludm9rZUtub3duSGVscGVyJywgcGFyYW1zLmxlbmd0aCwgbmFtZSk7XG5cdCAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5rbm93bkhlbHBlcnNPbmx5KSB7XG5cdCAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdZb3Ugc3BlY2lmaWVkIGtub3duSGVscGVyc09ubHksIGJ1dCB1c2VkIHRoZSB1bmtub3duIGhlbHBlciAnICsgbmFtZSwgc2V4cHIpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcGF0aC5zdHJpY3QgPSB0cnVlO1xuXHQgICAgICBwYXRoLmZhbHN5ID0gdHJ1ZTtcblxuXHQgICAgICB0aGlzLmFjY2VwdChwYXRoKTtcblx0ICAgICAgdGhpcy5vcGNvZGUoJ2ludm9rZUhlbHBlcicsIHBhcmFtcy5sZW5ndGgsIHBhdGgub3JpZ2luYWwsIF9hc3QyWydkZWZhdWx0J10uaGVscGVycy5zaW1wbGVJZChwYXRoKSk7XG5cdCAgICB9XG5cdCAgfSxcblxuXHQgIFBhdGhFeHByZXNzaW9uOiBmdW5jdGlvbiBQYXRoRXhwcmVzc2lvbihwYXRoKSB7XG5cdCAgICB0aGlzLmFkZERlcHRoKHBhdGguZGVwdGgpO1xuXHQgICAgdGhpcy5vcGNvZGUoJ2dldENvbnRleHQnLCBwYXRoLmRlcHRoKTtcblxuXHQgICAgdmFyIG5hbWUgPSBwYXRoLnBhcnRzWzBdLFxuXHQgICAgICAgIHNjb3BlZCA9IF9hc3QyWydkZWZhdWx0J10uaGVscGVycy5zY29wZWRJZChwYXRoKSxcblx0ICAgICAgICBibG9ja1BhcmFtSWQgPSAhcGF0aC5kZXB0aCAmJiAhc2NvcGVkICYmIHRoaXMuYmxvY2tQYXJhbUluZGV4KG5hbWUpO1xuXG5cdCAgICBpZiAoYmxvY2tQYXJhbUlkKSB7XG5cdCAgICAgIHRoaXMub3Bjb2RlKCdsb29rdXBCbG9ja1BhcmFtJywgYmxvY2tQYXJhbUlkLCBwYXRoLnBhcnRzKTtcblx0ICAgIH0gZWxzZSBpZiAoIW5hbWUpIHtcblx0ICAgICAgLy8gQ29udGV4dCByZWZlcmVuY2UsIGkuZS4gYHt7Zm9vIC59fWAgb3IgYHt7Zm9vIC4ufX1gXG5cdCAgICAgIHRoaXMub3Bjb2RlKCdwdXNoQ29udGV4dCcpO1xuXHQgICAgfSBlbHNlIGlmIChwYXRoLmRhdGEpIHtcblx0ICAgICAgdGhpcy5vcHRpb25zLmRhdGEgPSB0cnVlO1xuXHQgICAgICB0aGlzLm9wY29kZSgnbG9va3VwRGF0YScsIHBhdGguZGVwdGgsIHBhdGgucGFydHMsIHBhdGguc3RyaWN0KTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHRoaXMub3Bjb2RlKCdsb29rdXBPbkNvbnRleHQnLCBwYXRoLnBhcnRzLCBwYXRoLmZhbHN5LCBwYXRoLnN0cmljdCwgc2NvcGVkKTtcblx0ICAgIH1cblx0ICB9LFxuXG5cdCAgU3RyaW5nTGl0ZXJhbDogZnVuY3Rpb24gU3RyaW5nTGl0ZXJhbChzdHJpbmcpIHtcblx0ICAgIHRoaXMub3Bjb2RlKCdwdXNoU3RyaW5nJywgc3RyaW5nLnZhbHVlKTtcblx0ICB9LFxuXG5cdCAgTnVtYmVyTGl0ZXJhbDogZnVuY3Rpb24gTnVtYmVyTGl0ZXJhbChudW1iZXIpIHtcblx0ICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsIG51bWJlci52YWx1ZSk7XG5cdCAgfSxcblxuXHQgIEJvb2xlYW5MaXRlcmFsOiBmdW5jdGlvbiBCb29sZWFuTGl0ZXJhbChib29sKSB7XG5cdCAgICB0aGlzLm9wY29kZSgncHVzaExpdGVyYWwnLCBib29sLnZhbHVlKTtcblx0ICB9LFxuXG5cdCAgVW5kZWZpbmVkTGl0ZXJhbDogZnVuY3Rpb24gVW5kZWZpbmVkTGl0ZXJhbCgpIHtcblx0ICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsICd1bmRlZmluZWQnKTtcblx0ICB9LFxuXG5cdCAgTnVsbExpdGVyYWw6IGZ1bmN0aW9uIE51bGxMaXRlcmFsKCkge1xuXHQgICAgdGhpcy5vcGNvZGUoJ3B1c2hMaXRlcmFsJywgJ251bGwnKTtcblx0ICB9LFxuXG5cdCAgSGFzaDogZnVuY3Rpb24gSGFzaChoYXNoKSB7XG5cdCAgICB2YXIgcGFpcnMgPSBoYXNoLnBhaXJzLFxuXHQgICAgICAgIGkgPSAwLFxuXHQgICAgICAgIGwgPSBwYWlycy5sZW5ndGg7XG5cblx0ICAgIHRoaXMub3Bjb2RlKCdwdXNoSGFzaCcpO1xuXG5cdCAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuXHQgICAgICB0aGlzLnB1c2hQYXJhbShwYWlyc1tpXS52YWx1ZSk7XG5cdCAgICB9XG5cdCAgICB3aGlsZSAoaS0tKSB7XG5cdCAgICAgIHRoaXMub3Bjb2RlKCdhc3NpZ25Ub0hhc2gnLCBwYWlyc1tpXS5rZXkpO1xuXHQgICAgfVxuXHQgICAgdGhpcy5vcGNvZGUoJ3BvcEhhc2gnKTtcblx0ICB9LFxuXG5cdCAgLy8gSEVMUEVSU1xuXHQgIG9wY29kZTogZnVuY3Rpb24gb3Bjb2RlKG5hbWUpIHtcblx0ICAgIHRoaXMub3Bjb2Rlcy5wdXNoKHsgb3Bjb2RlOiBuYW1lLCBhcmdzOiBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGxvYzogdGhpcy5zb3VyY2VOb2RlWzBdLmxvYyB9KTtcblx0ICB9LFxuXG5cdCAgYWRkRGVwdGg6IGZ1bmN0aW9uIGFkZERlcHRoKGRlcHRoKSB7XG5cdCAgICBpZiAoIWRlcHRoKSB7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblxuXHQgICAgdGhpcy51c2VEZXB0aHMgPSB0cnVlO1xuXHQgIH0sXG5cblx0ICBjbGFzc2lmeVNleHByOiBmdW5jdGlvbiBjbGFzc2lmeVNleHByKHNleHByKSB7XG5cdCAgICB2YXIgaXNTaW1wbGUgPSBfYXN0MlsnZGVmYXVsdCddLmhlbHBlcnMuc2ltcGxlSWQoc2V4cHIucGF0aCk7XG5cblx0ICAgIHZhciBpc0Jsb2NrUGFyYW0gPSBpc1NpbXBsZSAmJiAhIXRoaXMuYmxvY2tQYXJhbUluZGV4KHNleHByLnBhdGgucGFydHNbMF0pO1xuXG5cdCAgICAvLyBhIG11c3RhY2hlIGlzIGFuIGVsaWdpYmxlIGhlbHBlciBpZjpcblx0ICAgIC8vICogaXRzIGlkIGlzIHNpbXBsZSAoYSBzaW5nbGUgcGFydCwgbm90IGB0aGlzYCBvciBgLi5gKVxuXHQgICAgdmFyIGlzSGVscGVyID0gIWlzQmxvY2tQYXJhbSAmJiBfYXN0MlsnZGVmYXVsdCddLmhlbHBlcnMuaGVscGVyRXhwcmVzc2lvbihzZXhwcik7XG5cblx0ICAgIC8vIGlmIGEgbXVzdGFjaGUgaXMgYW4gZWxpZ2libGUgaGVscGVyIGJ1dCBub3QgYSBkZWZpbml0ZVxuXHQgICAgLy8gaGVscGVyLCBpdCBpcyBhbWJpZ3VvdXMsIGFuZCB3aWxsIGJlIHJlc29sdmVkIGluIGEgbGF0ZXJcblx0ICAgIC8vIHBhc3Mgb3IgYXQgcnVudGltZS5cblx0ICAgIHZhciBpc0VsaWdpYmxlID0gIWlzQmxvY2tQYXJhbSAmJiAoaXNIZWxwZXIgfHwgaXNTaW1wbGUpO1xuXG5cdCAgICAvLyBpZiBhbWJpZ3VvdXMsIHdlIGNhbiBwb3NzaWJseSByZXNvbHZlIHRoZSBhbWJpZ3VpdHkgbm93XG5cdCAgICAvLyBBbiBlbGlnaWJsZSBoZWxwZXIgaXMgb25lIHRoYXQgZG9lcyBub3QgaGF2ZSBhIGNvbXBsZXggcGF0aCwgaS5lLiBgdGhpcy5mb29gLCBgLi4vZm9vYCBldGMuXG5cdCAgICBpZiAoaXNFbGlnaWJsZSAmJiAhaXNIZWxwZXIpIHtcblx0ICAgICAgdmFyIF9uYW1lMiA9IHNleHByLnBhdGgucGFydHNbMF0sXG5cdCAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG5cdCAgICAgIGlmIChvcHRpb25zLmtub3duSGVscGVyc1tfbmFtZTJdKSB7XG5cdCAgICAgICAgaXNIZWxwZXIgPSB0cnVlO1xuXHQgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMua25vd25IZWxwZXJzT25seSkge1xuXHQgICAgICAgIGlzRWxpZ2libGUgPSBmYWxzZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICBpZiAoaXNIZWxwZXIpIHtcblx0ICAgICAgcmV0dXJuICdoZWxwZXInO1xuXHQgICAgfSBlbHNlIGlmIChpc0VsaWdpYmxlKSB7XG5cdCAgICAgIHJldHVybiAnYW1iaWd1b3VzJztcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiAnc2ltcGxlJztcblx0ICAgIH1cblx0ICB9LFxuXG5cdCAgcHVzaFBhcmFtczogZnVuY3Rpb24gcHVzaFBhcmFtcyhwYXJhbXMpIHtcblx0ICAgIGZvciAodmFyIGkgPSAwLCBsID0gcGFyYW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHQgICAgICB0aGlzLnB1c2hQYXJhbShwYXJhbXNbaV0pO1xuXHQgICAgfVxuXHQgIH0sXG5cblx0ICBwdXNoUGFyYW06IGZ1bmN0aW9uIHB1c2hQYXJhbSh2YWwpIHtcblx0ICAgIHZhciB2YWx1ZSA9IHZhbC52YWx1ZSAhPSBudWxsID8gdmFsLnZhbHVlIDogdmFsLm9yaWdpbmFsIHx8ICcnO1xuXG5cdCAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcblx0ICAgICAgaWYgKHZhbHVlLnJlcGxhY2UpIHtcblx0ICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL14oXFwuP1xcLlxcLykqL2csICcnKS5yZXBsYWNlKC9cXC8vZywgJy4nKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGlmICh2YWwuZGVwdGgpIHtcblx0ICAgICAgICB0aGlzLmFkZERlcHRoKHZhbC5kZXB0aCk7XG5cdCAgICAgIH1cblx0ICAgICAgdGhpcy5vcGNvZGUoJ2dldENvbnRleHQnLCB2YWwuZGVwdGggfHwgMCk7XG5cdCAgICAgIHRoaXMub3Bjb2RlKCdwdXNoU3RyaW5nUGFyYW0nLCB2YWx1ZSwgdmFsLnR5cGUpO1xuXG5cdCAgICAgIGlmICh2YWwudHlwZSA9PT0gJ1N1YkV4cHJlc3Npb24nKSB7XG5cdCAgICAgICAgLy8gU3ViRXhwcmVzc2lvbnMgZ2V0IGV2YWx1YXRlZCBhbmQgcGFzc2VkIGluXG5cdCAgICAgICAgLy8gaW4gc3RyaW5nIHBhcmFtcyBtb2RlLlxuXHQgICAgICAgIHRoaXMuYWNjZXB0KHZhbCk7XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGlmICh0aGlzLnRyYWNrSWRzKSB7XG5cdCAgICAgICAgdmFyIGJsb2NrUGFyYW1JbmRleCA9IHVuZGVmaW5lZDtcblx0ICAgICAgICBpZiAodmFsLnBhcnRzICYmICFfYXN0MlsnZGVmYXVsdCddLmhlbHBlcnMuc2NvcGVkSWQodmFsKSAmJiAhdmFsLmRlcHRoKSB7XG5cdCAgICAgICAgICBibG9ja1BhcmFtSW5kZXggPSB0aGlzLmJsb2NrUGFyYW1JbmRleCh2YWwucGFydHNbMF0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoYmxvY2tQYXJhbUluZGV4KSB7XG5cdCAgICAgICAgICB2YXIgYmxvY2tQYXJhbUNoaWxkID0gdmFsLnBhcnRzLnNsaWNlKDEpLmpvaW4oJy4nKTtcblx0ICAgICAgICAgIHRoaXMub3Bjb2RlKCdwdXNoSWQnLCAnQmxvY2tQYXJhbScsIGJsb2NrUGFyYW1JbmRleCwgYmxvY2tQYXJhbUNoaWxkKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgdmFsdWUgPSB2YWwub3JpZ2luYWwgfHwgdmFsdWU7XG5cdCAgICAgICAgICBpZiAodmFsdWUucmVwbGFjZSkge1xuXHQgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL150aGlzKD86XFwufCQpLywgJycpLnJlcGxhY2UoL15cXC5cXC8vLCAnJykucmVwbGFjZSgvXlxcLiQvLCAnJyk7XG5cdCAgICAgICAgICB9XG5cblx0ICAgICAgICAgIHRoaXMub3Bjb2RlKCdwdXNoSWQnLCB2YWwudHlwZSwgdmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICB0aGlzLmFjY2VwdCh2YWwpO1xuXHQgICAgfVxuXHQgIH0sXG5cblx0ICBzZXR1cEZ1bGxNdXN0YWNoZVBhcmFtczogZnVuY3Rpb24gc2V0dXBGdWxsTXVzdGFjaGVQYXJhbXMoc2V4cHIsIHByb2dyYW0sIGludmVyc2UsIG9taXRFbXB0eSkge1xuXHQgICAgdmFyIHBhcmFtcyA9IHNleHByLnBhcmFtcztcblx0ICAgIHRoaXMucHVzaFBhcmFtcyhwYXJhbXMpO1xuXG5cdCAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBwcm9ncmFtKTtcblx0ICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIGludmVyc2UpO1xuXG5cdCAgICBpZiAoc2V4cHIuaGFzaCkge1xuXHQgICAgICB0aGlzLmFjY2VwdChzZXhwci5oYXNoKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHRoaXMub3Bjb2RlKCdlbXB0eUhhc2gnLCBvbWl0RW1wdHkpO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gcGFyYW1zO1xuXHQgIH0sXG5cblx0ICBibG9ja1BhcmFtSW5kZXg6IGZ1bmN0aW9uIGJsb2NrUGFyYW1JbmRleChuYW1lKSB7XG5cdCAgICBmb3IgKHZhciBkZXB0aCA9IDAsIGxlbiA9IHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtcy5sZW5ndGg7IGRlcHRoIDwgbGVuOyBkZXB0aCsrKSB7XG5cdCAgICAgIHZhciBibG9ja1BhcmFtcyA9IHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtc1tkZXB0aF0sXG5cdCAgICAgICAgICBwYXJhbSA9IGJsb2NrUGFyYW1zICYmIF91dGlscy5pbmRleE9mKGJsb2NrUGFyYW1zLCBuYW1lKTtcblx0ICAgICAgaWYgKGJsb2NrUGFyYW1zICYmIHBhcmFtID49IDApIHtcblx0ICAgICAgICByZXR1cm4gW2RlcHRoLCBwYXJhbV07XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdH07XG5cblx0ZnVuY3Rpb24gcHJlY29tcGlsZShpbnB1dCwgb3B0aW9ucywgZW52KSB7XG5cdCAgaWYgKGlucHV0ID09IG51bGwgfHwgdHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJyAmJiBpbnB1dC50eXBlICE9PSAnUHJvZ3JhbScpIHtcblx0ICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdZb3UgbXVzdCBwYXNzIGEgc3RyaW5nIG9yIEhhbmRsZWJhcnMgQVNUIHRvIEhhbmRsZWJhcnMucHJlY29tcGlsZS4gWW91IHBhc3NlZCAnICsgaW5wdXQpO1xuXHQgIH1cblxuXHQgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHQgIGlmICghKCdkYXRhJyBpbiBvcHRpb25zKSkge1xuXHQgICAgb3B0aW9ucy5kYXRhID0gdHJ1ZTtcblx0ICB9XG5cdCAgaWYgKG9wdGlvbnMuY29tcGF0KSB7XG5cdCAgICBvcHRpb25zLnVzZURlcHRocyA9IHRydWU7XG5cdCAgfVxuXG5cdCAgdmFyIGFzdCA9IGVudi5wYXJzZShpbnB1dCwgb3B0aW9ucyksXG5cdCAgICAgIGVudmlyb25tZW50ID0gbmV3IGVudi5Db21waWxlcigpLmNvbXBpbGUoYXN0LCBvcHRpb25zKTtcblx0ICByZXR1cm4gbmV3IGVudi5KYXZhU2NyaXB0Q29tcGlsZXIoKS5jb21waWxlKGVudmlyb25tZW50LCBvcHRpb25zKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNvbXBpbGUoaW5wdXQsIG9wdGlvbnMsIGVudikge1xuXHQgIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQpIG9wdGlvbnMgPSB7fTtcblxuXHQgIGlmIChpbnB1dCA9PSBudWxsIHx8IHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycgJiYgaW5wdXQudHlwZSAhPT0gJ1Byb2dyYW0nKSB7XG5cdCAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnWW91IG11c3QgcGFzcyBhIHN0cmluZyBvciBIYW5kbGViYXJzIEFTVCB0byBIYW5kbGViYXJzLmNvbXBpbGUuIFlvdSBwYXNzZWQgJyArIGlucHV0KTtcblx0ICB9XG5cblx0ICBpZiAoISgnZGF0YScgaW4gb3B0aW9ucykpIHtcblx0ICAgIG9wdGlvbnMuZGF0YSA9IHRydWU7XG5cdCAgfVxuXHQgIGlmIChvcHRpb25zLmNvbXBhdCkge1xuXHQgICAgb3B0aW9ucy51c2VEZXB0aHMgPSB0cnVlO1xuXHQgIH1cblxuXHQgIHZhciBjb21waWxlZCA9IHVuZGVmaW5lZDtcblxuXHQgIGZ1bmN0aW9uIGNvbXBpbGVJbnB1dCgpIHtcblx0ICAgIHZhciBhc3QgPSBlbnYucGFyc2UoaW5wdXQsIG9wdGlvbnMpLFxuXHQgICAgICAgIGVudmlyb25tZW50ID0gbmV3IGVudi5Db21waWxlcigpLmNvbXBpbGUoYXN0LCBvcHRpb25zKSxcblx0ICAgICAgICB0ZW1wbGF0ZVNwZWMgPSBuZXcgZW52LkphdmFTY3JpcHRDb21waWxlcigpLmNvbXBpbGUoZW52aXJvbm1lbnQsIG9wdGlvbnMsIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cdCAgICByZXR1cm4gZW52LnRlbXBsYXRlKHRlbXBsYXRlU3BlYyk7XG5cdCAgfVxuXG5cdCAgLy8gVGVtcGxhdGUgaXMgb25seSBjb21waWxlZCBvbiBmaXJzdCB1c2UgYW5kIGNhY2hlZCBhZnRlciB0aGF0IHBvaW50LlxuXHQgIGZ1bmN0aW9uIHJldChjb250ZXh0LCBleGVjT3B0aW9ucykge1xuXHQgICAgaWYgKCFjb21waWxlZCkge1xuXHQgICAgICBjb21waWxlZCA9IGNvbXBpbGVJbnB1dCgpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGNvbXBpbGVkLmNhbGwodGhpcywgY29udGV4dCwgZXhlY09wdGlvbnMpO1xuXHQgIH1cblx0ICByZXQuX3NldHVwID0gZnVuY3Rpb24gKHNldHVwT3B0aW9ucykge1xuXHQgICAgaWYgKCFjb21waWxlZCkge1xuXHQgICAgICBjb21waWxlZCA9IGNvbXBpbGVJbnB1dCgpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGNvbXBpbGVkLl9zZXR1cChzZXR1cE9wdGlvbnMpO1xuXHQgIH07XG5cdCAgcmV0Ll9jaGlsZCA9IGZ1bmN0aW9uIChpLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG5cdCAgICBpZiAoIWNvbXBpbGVkKSB7XG5cdCAgICAgIGNvbXBpbGVkID0gY29tcGlsZUlucHV0KCk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gY29tcGlsZWQuX2NoaWxkKGksIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuXHQgIH07XG5cdCAgcmV0dXJuIHJldDtcblx0fVxuXG5cdGZ1bmN0aW9uIGFyZ0VxdWFscyhhLCBiKSB7XG5cdCAgaWYgKGEgPT09IGIpIHtcblx0ICAgIHJldHVybiB0cnVlO1xuXHQgIH1cblxuXHQgIGlmIChfdXRpbHMuaXNBcnJheShhKSAmJiBfdXRpbHMuaXNBcnJheShiKSAmJiBhLmxlbmd0aCA9PT0gYi5sZW5ndGgpIHtcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuXHQgICAgICBpZiAoIWFyZ0VxdWFscyhhW2ldLCBiW2ldKSkge1xuXHQgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIHRydWU7XG5cdCAgfVxuXHR9XG5cblx0ZnVuY3Rpb24gdHJhbnNmb3JtTGl0ZXJhbFRvUGF0aChzZXhwcikge1xuXHQgIGlmICghc2V4cHIucGF0aC5wYXJ0cykge1xuXHQgICAgdmFyIGxpdGVyYWwgPSBzZXhwci5wYXRoO1xuXHQgICAgLy8gQ2FzdGluZyB0byBzdHJpbmcgaGVyZSB0byBtYWtlIGZhbHNlIGFuZCAwIGxpdGVyYWwgdmFsdWVzIHBsYXkgbmljZWx5IHdpdGggdGhlIHJlc3Rcblx0ICAgIC8vIG9mIHRoZSBzeXN0ZW0uXG5cdCAgICBzZXhwci5wYXRoID0ge1xuXHQgICAgICB0eXBlOiAnUGF0aEV4cHJlc3Npb24nLFxuXHQgICAgICBkYXRhOiBmYWxzZSxcblx0ICAgICAgZGVwdGg6IDAsXG5cdCAgICAgIHBhcnRzOiBbbGl0ZXJhbC5vcmlnaW5hbCArICcnXSxcblx0ICAgICAgb3JpZ2luYWw6IGxpdGVyYWwub3JpZ2luYWwgKyAnJyxcblx0ICAgICAgbG9jOiBsaXRlcmFsLmxvY1xuXHQgICAgfTtcblx0ICB9XG5cdH1cblxuLyoqKi8gfSxcbi8qIDI4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpWydkZWZhdWx0J107XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuXHR2YXIgX2Jhc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5cdHZhciBfZXhjZXB0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxuXHR2YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pO1xuXG5cdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG5cdHZhciBfY29kZUdlbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpO1xuXG5cdHZhciBfY29kZUdlbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb2RlR2VuKTtcblxuXHRmdW5jdGlvbiBMaXRlcmFsKHZhbHVlKSB7XG5cdCAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuXHR9XG5cblx0ZnVuY3Rpb24gSmF2YVNjcmlwdENvbXBpbGVyKCkge31cblxuXHRKYXZhU2NyaXB0Q29tcGlsZXIucHJvdG90eXBlID0ge1xuXHQgIC8vIFBVQkxJQyBBUEk6IFlvdSBjYW4gb3ZlcnJpZGUgdGhlc2UgbWV0aG9kcyBpbiBhIHN1YmNsYXNzIHRvIHByb3ZpZGVcblx0ICAvLyBhbHRlcm5hdGl2ZSBjb21waWxlZCBmb3JtcyBmb3IgbmFtZSBsb29rdXAgYW5kIGJ1ZmZlcmluZyBzZW1hbnRpY3Ncblx0ICBuYW1lTG9va3VwOiBmdW5jdGlvbiBuYW1lTG9va3VwKHBhcmVudCwgbmFtZSAvKiAsIHR5cGUqLykge1xuXHQgICAgaWYgKEphdmFTY3JpcHRDb21waWxlci5pc1ZhbGlkSmF2YVNjcmlwdFZhcmlhYmxlTmFtZShuYW1lKSkge1xuXHQgICAgICByZXR1cm4gW3BhcmVudCwgJy4nLCBuYW1lXTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiBbcGFyZW50LCAnWycsIEpTT04uc3RyaW5naWZ5KG5hbWUpLCAnXSddO1xuXHQgICAgfVxuXHQgIH0sXG5cdCAgZGVwdGhlZExvb2t1cDogZnVuY3Rpb24gZGVwdGhlZExvb2t1cChuYW1lKSB7XG5cdCAgICByZXR1cm4gW3RoaXMuYWxpYXNhYmxlKCdjb250YWluZXIubG9va3VwJyksICcoZGVwdGhzLCBcIicsIG5hbWUsICdcIiknXTtcblx0ICB9LFxuXG5cdCAgY29tcGlsZXJJbmZvOiBmdW5jdGlvbiBjb21waWxlckluZm8oKSB7XG5cdCAgICB2YXIgcmV2aXNpb24gPSBfYmFzZS5DT01QSUxFUl9SRVZJU0lPTixcblx0ICAgICAgICB2ZXJzaW9ucyA9IF9iYXNlLlJFVklTSU9OX0NIQU5HRVNbcmV2aXNpb25dO1xuXHQgICAgcmV0dXJuIFtyZXZpc2lvbiwgdmVyc2lvbnNdO1xuXHQgIH0sXG5cblx0ICBhcHBlbmRUb0J1ZmZlcjogZnVuY3Rpb24gYXBwZW5kVG9CdWZmZXIoc291cmNlLCBsb2NhdGlvbiwgZXhwbGljaXQpIHtcblx0ICAgIC8vIEZvcmNlIGEgc291cmNlIGFzIHRoaXMgc2ltcGxpZmllcyB0aGUgbWVyZ2UgbG9naWMuXG5cdCAgICBpZiAoIV91dGlscy5pc0FycmF5KHNvdXJjZSkpIHtcblx0ICAgICAgc291cmNlID0gW3NvdXJjZV07XG5cdCAgICB9XG5cdCAgICBzb3VyY2UgPSB0aGlzLnNvdXJjZS53cmFwKHNvdXJjZSwgbG9jYXRpb24pO1xuXG5cdCAgICBpZiAodGhpcy5lbnZpcm9ubWVudC5pc1NpbXBsZSkge1xuXHQgICAgICByZXR1cm4gWydyZXR1cm4gJywgc291cmNlLCAnOyddO1xuXHQgICAgfSBlbHNlIGlmIChleHBsaWNpdCkge1xuXHQgICAgICAvLyBUaGlzIGlzIGEgY2FzZSB3aGVyZSB0aGUgYnVmZmVyIG9wZXJhdGlvbiBvY2N1cnMgYXMgYSBjaGlsZCBvZiBhbm90aGVyXG5cdCAgICAgIC8vIGNvbnN0cnVjdCwgZ2VuZXJhbGx5IGJyYWNlcy4gV2UgaGF2ZSB0byBleHBsaWNpdGx5IG91dHB1dCB0aGVzZSBidWZmZXJcblx0ICAgICAgLy8gb3BlcmF0aW9ucyB0byBlbnN1cmUgdGhhdCB0aGUgZW1pdHRlZCBjb2RlIGdvZXMgaW4gdGhlIGNvcnJlY3QgbG9jYXRpb24uXG5cdCAgICAgIHJldHVybiBbJ2J1ZmZlciArPSAnLCBzb3VyY2UsICc7J107XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBzb3VyY2UuYXBwZW5kVG9CdWZmZXIgPSB0cnVlO1xuXHQgICAgICByZXR1cm4gc291cmNlO1xuXHQgICAgfVxuXHQgIH0sXG5cblx0ICBpbml0aWFsaXplQnVmZmVyOiBmdW5jdGlvbiBpbml0aWFsaXplQnVmZmVyKCkge1xuXHQgICAgcmV0dXJuIHRoaXMucXVvdGVkU3RyaW5nKCcnKTtcblx0ICB9LFxuXHQgIC8vIEVORCBQVUJMSUMgQVBJXG5cblx0ICBjb21waWxlOiBmdW5jdGlvbiBjb21waWxlKGVudmlyb25tZW50LCBvcHRpb25zLCBjb250ZXh0LCBhc09iamVjdCkge1xuXHQgICAgdGhpcy5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50O1xuXHQgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0ICAgIHRoaXMuc3RyaW5nUGFyYW1zID0gdGhpcy5vcHRpb25zLnN0cmluZ1BhcmFtcztcblx0ICAgIHRoaXMudHJhY2tJZHMgPSB0aGlzLm9wdGlvbnMudHJhY2tJZHM7XG5cdCAgICB0aGlzLnByZWNvbXBpbGUgPSAhYXNPYmplY3Q7XG5cblx0ICAgIHRoaXMubmFtZSA9IHRoaXMuZW52aXJvbm1lbnQubmFtZTtcblx0ICAgIHRoaXMuaXNDaGlsZCA9ICEhY29udGV4dDtcblx0ICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQgfHwge1xuXHQgICAgICBkZWNvcmF0b3JzOiBbXSxcblx0ICAgICAgcHJvZ3JhbXM6IFtdLFxuXHQgICAgICBlbnZpcm9ubWVudHM6IFtdXG5cdCAgICB9O1xuXG5cdCAgICB0aGlzLnByZWFtYmxlKCk7XG5cblx0ICAgIHRoaXMuc3RhY2tTbG90ID0gMDtcblx0ICAgIHRoaXMuc3RhY2tWYXJzID0gW107XG5cdCAgICB0aGlzLmFsaWFzZXMgPSB7fTtcblx0ICAgIHRoaXMucmVnaXN0ZXJzID0geyBsaXN0OiBbXSB9O1xuXHQgICAgdGhpcy5oYXNoZXMgPSBbXTtcblx0ICAgIHRoaXMuY29tcGlsZVN0YWNrID0gW107XG5cdCAgICB0aGlzLmlubGluZVN0YWNrID0gW107XG5cdCAgICB0aGlzLmJsb2NrUGFyYW1zID0gW107XG5cblx0ICAgIHRoaXMuY29tcGlsZUNoaWxkcmVuKGVudmlyb25tZW50LCBvcHRpb25zKTtcblxuXHQgICAgdGhpcy51c2VEZXB0aHMgPSB0aGlzLnVzZURlcHRocyB8fCBlbnZpcm9ubWVudC51c2VEZXB0aHMgfHwgZW52aXJvbm1lbnQudXNlRGVjb3JhdG9ycyB8fCB0aGlzLm9wdGlvbnMuY29tcGF0O1xuXHQgICAgdGhpcy51c2VCbG9ja1BhcmFtcyA9IHRoaXMudXNlQmxvY2tQYXJhbXMgfHwgZW52aXJvbm1lbnQudXNlQmxvY2tQYXJhbXM7XG5cblx0ICAgIHZhciBvcGNvZGVzID0gZW52aXJvbm1lbnQub3Bjb2Rlcyxcblx0ICAgICAgICBvcGNvZGUgPSB1bmRlZmluZWQsXG5cdCAgICAgICAgZmlyc3RMb2MgPSB1bmRlZmluZWQsXG5cdCAgICAgICAgaSA9IHVuZGVmaW5lZCxcblx0ICAgICAgICBsID0gdW5kZWZpbmVkO1xuXG5cdCAgICBmb3IgKGkgPSAwLCBsID0gb3Bjb2Rlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0ICAgICAgb3Bjb2RlID0gb3Bjb2Rlc1tpXTtcblxuXHQgICAgICB0aGlzLnNvdXJjZS5jdXJyZW50TG9jYXRpb24gPSBvcGNvZGUubG9jO1xuXHQgICAgICBmaXJzdExvYyA9IGZpcnN0TG9jIHx8IG9wY29kZS5sb2M7XG5cdCAgICAgIHRoaXNbb3Bjb2RlLm9wY29kZV0uYXBwbHkodGhpcywgb3Bjb2RlLmFyZ3MpO1xuXHQgICAgfVxuXG5cdCAgICAvLyBGbHVzaCBhbnkgdHJhaWxpbmcgY29udGVudCB0aGF0IG1pZ2h0IGJlIHBlbmRpbmcuXG5cdCAgICB0aGlzLnNvdXJjZS5jdXJyZW50TG9jYXRpb24gPSBmaXJzdExvYztcblx0ICAgIHRoaXMucHVzaFNvdXJjZSgnJyk7XG5cblx0ICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cdCAgICBpZiAodGhpcy5zdGFja1Nsb3QgfHwgdGhpcy5pbmxpbmVTdGFjay5sZW5ndGggfHwgdGhpcy5jb21waWxlU3RhY2subGVuZ3RoKSB7XG5cdCAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdDb21waWxlIGNvbXBsZXRlZCB3aXRoIGNvbnRlbnQgbGVmdCBvbiBzdGFjaycpO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoIXRoaXMuZGVjb3JhdG9ycy5pc0VtcHR5KCkpIHtcblx0ICAgICAgdGhpcy51c2VEZWNvcmF0b3JzID0gdHJ1ZTtcblxuXHQgICAgICB0aGlzLmRlY29yYXRvcnMucHJlcGVuZCgndmFyIGRlY29yYXRvcnMgPSBjb250YWluZXIuZGVjb3JhdG9ycztcXG4nKTtcblx0ICAgICAgdGhpcy5kZWNvcmF0b3JzLnB1c2goJ3JldHVybiBmbjsnKTtcblxuXHQgICAgICBpZiAoYXNPYmplY3QpIHtcblx0ICAgICAgICB0aGlzLmRlY29yYXRvcnMgPSBGdW5jdGlvbi5hcHBseSh0aGlzLCBbJ2ZuJywgJ3Byb3BzJywgJ2NvbnRhaW5lcicsICdkZXB0aDAnLCAnZGF0YScsICdibG9ja1BhcmFtcycsICdkZXB0aHMnLCB0aGlzLmRlY29yYXRvcnMubWVyZ2UoKV0pO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHRoaXMuZGVjb3JhdG9ycy5wcmVwZW5kKCdmdW5jdGlvbihmbiwgcHJvcHMsIGNvbnRhaW5lciwgZGVwdGgwLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XFxuJyk7XG5cdCAgICAgICAgdGhpcy5kZWNvcmF0b3JzLnB1c2goJ31cXG4nKTtcblx0ICAgICAgICB0aGlzLmRlY29yYXRvcnMgPSB0aGlzLmRlY29yYXRvcnMubWVyZ2UoKTtcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdGhpcy5kZWNvcmF0b3JzID0gdW5kZWZpbmVkO1xuXHQgICAgfVxuXG5cdCAgICB2YXIgZm4gPSB0aGlzLmNyZWF0ZUZ1bmN0aW9uQ29udGV4dChhc09iamVjdCk7XG5cdCAgICBpZiAoIXRoaXMuaXNDaGlsZCkge1xuXHQgICAgICB2YXIgcmV0ID0ge1xuXHQgICAgICAgIGNvbXBpbGVyOiB0aGlzLmNvbXBpbGVySW5mbygpLFxuXHQgICAgICAgIG1haW46IGZuXG5cdCAgICAgIH07XG5cblx0ICAgICAgaWYgKHRoaXMuZGVjb3JhdG9ycykge1xuXHQgICAgICAgIHJldC5tYWluX2QgPSB0aGlzLmRlY29yYXRvcnM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG5cdCAgICAgICAgcmV0LnVzZURlY29yYXRvcnMgPSB0cnVlO1xuXHQgICAgICB9XG5cblx0ICAgICAgdmFyIF9jb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuXHQgICAgICB2YXIgcHJvZ3JhbXMgPSBfY29udGV4dC5wcm9ncmFtcztcblx0ICAgICAgdmFyIGRlY29yYXRvcnMgPSBfY29udGV4dC5kZWNvcmF0b3JzO1xuXG5cdCAgICAgIGZvciAoaSA9IDAsIGwgPSBwcm9ncmFtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0ICAgICAgICBpZiAocHJvZ3JhbXNbaV0pIHtcblx0ICAgICAgICAgIHJldFtpXSA9IHByb2dyYW1zW2ldO1xuXHQgICAgICAgICAgaWYgKGRlY29yYXRvcnNbaV0pIHtcblx0ICAgICAgICAgICAgcmV0W2kgKyAnX2QnXSA9IGRlY29yYXRvcnNbaV07XG5cdCAgICAgICAgICAgIHJldC51c2VEZWNvcmF0b3JzID0gdHJ1ZTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAodGhpcy5lbnZpcm9ubWVudC51c2VQYXJ0aWFsKSB7XG5cdCAgICAgICAgcmV0LnVzZVBhcnRpYWwgPSB0cnVlO1xuXHQgICAgICB9XG5cdCAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGF0YSkge1xuXHQgICAgICAgIHJldC51c2VEYXRhID0gdHJ1ZTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAodGhpcy51c2VEZXB0aHMpIHtcblx0ICAgICAgICByZXQudXNlRGVwdGhzID0gdHJ1ZTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAodGhpcy51c2VCbG9ja1BhcmFtcykge1xuXHQgICAgICAgIHJldC51c2VCbG9ja1BhcmFtcyA9IHRydWU7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHRoaXMub3B0aW9ucy5jb21wYXQpIHtcblx0ICAgICAgICByZXQuY29tcGF0ID0gdHJ1ZTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGlmICghYXNPYmplY3QpIHtcblx0ICAgICAgICByZXQuY29tcGlsZXIgPSBKU09OLnN0cmluZ2lmeShyZXQuY29tcGlsZXIpO1xuXG5cdCAgICAgICAgdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uID0geyBzdGFydDogeyBsaW5lOiAxLCBjb2x1bW46IDAgfSB9O1xuXHQgICAgICAgIHJldCA9IHRoaXMub2JqZWN0TGl0ZXJhbChyZXQpO1xuXG5cdCAgICAgICAgaWYgKG9wdGlvbnMuc3JjTmFtZSkge1xuXHQgICAgICAgICAgcmV0ID0gcmV0LnRvU3RyaW5nV2l0aFNvdXJjZU1hcCh7IGZpbGU6IG9wdGlvbnMuZGVzdE5hbWUgfSk7XG5cdCAgICAgICAgICByZXQubWFwID0gcmV0Lm1hcCAmJiByZXQubWFwLnRvU3RyaW5nKCk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHJldCA9IHJldC50b1N0cmluZygpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZXQuY29tcGlsZXJPcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIHJldDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiBmbjtcblx0ICAgIH1cblx0ICB9LFxuXG5cdCAgcHJlYW1ibGU6IGZ1bmN0aW9uIHByZWFtYmxlKCkge1xuXHQgICAgLy8gdHJhY2sgdGhlIGxhc3QgY29udGV4dCBwdXNoZWQgaW50byBwbGFjZSB0byBhbGxvdyBza2lwcGluZyB0aGVcblx0ICAgIC8vIGdldENvbnRleHQgb3Bjb2RlIHdoZW4gaXQgd291bGQgYmUgYSBub29wXG5cdCAgICB0aGlzLmxhc3RDb250ZXh0ID0gMDtcblx0ICAgIHRoaXMuc291cmNlID0gbmV3IF9jb2RlR2VuMlsnZGVmYXVsdCddKHRoaXMub3B0aW9ucy5zcmNOYW1lKTtcblx0ICAgIHRoaXMuZGVjb3JhdG9ycyA9IG5ldyBfY29kZUdlbjJbJ2RlZmF1bHQnXSh0aGlzLm9wdGlvbnMuc3JjTmFtZSk7XG5cdCAgfSxcblxuXHQgIGNyZWF0ZUZ1bmN0aW9uQ29udGV4dDogZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb25Db250ZXh0KGFzT2JqZWN0KSB7XG5cdCAgICB2YXIgdmFyRGVjbGFyYXRpb25zID0gJyc7XG5cblx0ICAgIHZhciBsb2NhbHMgPSB0aGlzLnN0YWNrVmFycy5jb25jYXQodGhpcy5yZWdpc3RlcnMubGlzdCk7XG5cdCAgICBpZiAobG9jYWxzLmxlbmd0aCA+IDApIHtcblx0ICAgICAgdmFyRGVjbGFyYXRpb25zICs9ICcsICcgKyBsb2NhbHMuam9pbignLCAnKTtcblx0ICAgIH1cblxuXHQgICAgLy8gR2VuZXJhdGUgbWluaW1pemVyIGFsaWFzIG1hcHBpbmdzXG5cdCAgICAvL1xuXHQgICAgLy8gV2hlbiB1c2luZyB0cnVlIFNvdXJjZU5vZGVzLCB0aGlzIHdpbGwgdXBkYXRlIGFsbCByZWZlcmVuY2VzIHRvIHRoZSBnaXZlbiBhbGlhc1xuXHQgICAgLy8gYXMgdGhlIHNvdXJjZSBub2RlcyBhcmUgcmV1c2VkIGluIHNpdHUuIEZvciB0aGUgbm9uLXNvdXJjZSBub2RlIGNvbXBpbGF0aW9uIG1vZGUsXG5cdCAgICAvLyBhbGlhc2VzIHdpbGwgbm90IGJlIHVzZWQsIGJ1dCB0aGlzIGNhc2UgaXMgYWxyZWFkeSBiZWluZyBydW4gb24gdGhlIGNsaWVudCBhbmRcblx0ICAgIC8vIHdlIGFyZW4ndCBjb25jZXJuIGFib3V0IG1pbmltaXppbmcgdGhlIHRlbXBsYXRlIHNpemUuXG5cdCAgICB2YXIgYWxpYXNDb3VudCA9IDA7XG5cdCAgICBmb3IgKHZhciBhbGlhcyBpbiB0aGlzLmFsaWFzZXMpIHtcblx0ICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBndWFyZC1mb3ItaW5cblx0ICAgICAgdmFyIG5vZGUgPSB0aGlzLmFsaWFzZXNbYWxpYXNdO1xuXG5cdCAgICAgIGlmICh0aGlzLmFsaWFzZXMuaGFzT3duUHJvcGVydHkoYWxpYXMpICYmIG5vZGUuY2hpbGRyZW4gJiYgbm9kZS5yZWZlcmVuY2VDb3VudCA+IDEpIHtcblx0ICAgICAgICB2YXJEZWNsYXJhdGlvbnMgKz0gJywgYWxpYXMnICsgKythbGlhc0NvdW50ICsgJz0nICsgYWxpYXM7XG5cdCAgICAgICAgbm9kZS5jaGlsZHJlblswXSA9ICdhbGlhcycgKyBhbGlhc0NvdW50O1xuXHQgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIHZhciBwYXJhbXMgPSBbJ2NvbnRhaW5lcicsICdkZXB0aDAnLCAnaGVscGVycycsICdwYXJ0aWFscycsICdkYXRhJ107XG5cblx0ICAgIGlmICh0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IHRoaXMudXNlRGVwdGhzKSB7XG5cdCAgICAgIHBhcmFtcy5wdXNoKCdibG9ja1BhcmFtcycpO1xuXHQgICAgfVxuXHQgICAgaWYgKHRoaXMudXNlRGVwdGhzKSB7XG5cdCAgICAgIHBhcmFtcy5wdXNoKCdkZXB0aHMnKTtcblx0ICAgIH1cblxuXHQgICAgLy8gUGVyZm9ybSBhIHNlY29uZCBwYXNzIG92ZXIgdGhlIG91dHB1dCB0byBtZXJnZSBjb250ZW50IHdoZW4gcG9zc2libGVcblx0ICAgIHZhciBzb3VyY2UgPSB0aGlzLm1lcmdlU291cmNlKHZhckRlY2xhcmF0aW9ucyk7XG5cblx0ICAgIGlmIChhc09iamVjdCkge1xuXHQgICAgICBwYXJhbXMucHVzaChzb3VyY2UpO1xuXG5cdCAgICAgIHJldHVybiBGdW5jdGlvbi5hcHBseSh0aGlzLCBwYXJhbXMpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuc291cmNlLndyYXAoWydmdW5jdGlvbignLCBwYXJhbXMuam9pbignLCcpLCAnKSB7XFxuICAnLCBzb3VyY2UsICd9J10pO1xuXHQgICAgfVxuXHQgIH0sXG5cdCAgbWVyZ2VTb3VyY2U6IGZ1bmN0aW9uIG1lcmdlU291cmNlKHZhckRlY2xhcmF0aW9ucykge1xuXHQgICAgdmFyIGlzU2ltcGxlID0gdGhpcy5lbnZpcm9ubWVudC5pc1NpbXBsZSxcblx0ICAgICAgICBhcHBlbmRPbmx5ID0gIXRoaXMuZm9yY2VCdWZmZXIsXG5cdCAgICAgICAgYXBwZW5kRmlyc3QgPSB1bmRlZmluZWQsXG5cdCAgICAgICAgc291cmNlU2VlbiA9IHVuZGVmaW5lZCxcblx0ICAgICAgICBidWZmZXJTdGFydCA9IHVuZGVmaW5lZCxcblx0ICAgICAgICBidWZmZXJFbmQgPSB1bmRlZmluZWQ7XG5cdCAgICB0aGlzLnNvdXJjZS5lYWNoKGZ1bmN0aW9uIChsaW5lKSB7XG5cdCAgICAgIGlmIChsaW5lLmFwcGVuZFRvQnVmZmVyKSB7XG5cdCAgICAgICAgaWYgKGJ1ZmZlclN0YXJ0KSB7XG5cdCAgICAgICAgICBsaW5lLnByZXBlbmQoJyAgKyAnKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgYnVmZmVyU3RhcnQgPSBsaW5lO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBidWZmZXJFbmQgPSBsaW5lO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGlmIChidWZmZXJTdGFydCkge1xuXHQgICAgICAgICAgaWYgKCFzb3VyY2VTZWVuKSB7XG5cdCAgICAgICAgICAgIGFwcGVuZEZpcnN0ID0gdHJ1ZTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGJ1ZmZlclN0YXJ0LnByZXBlbmQoJ2J1ZmZlciArPSAnKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGJ1ZmZlckVuZC5hZGQoJzsnKTtcblx0ICAgICAgICAgIGJ1ZmZlclN0YXJ0ID0gYnVmZmVyRW5kID0gdW5kZWZpbmVkO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHNvdXJjZVNlZW4gPSB0cnVlO1xuXHQgICAgICAgIGlmICghaXNTaW1wbGUpIHtcblx0ICAgICAgICAgIGFwcGVuZE9ubHkgPSBmYWxzZTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICBpZiAoYXBwZW5kT25seSkge1xuXHQgICAgICBpZiAoYnVmZmVyU3RhcnQpIHtcblx0ICAgICAgICBidWZmZXJTdGFydC5wcmVwZW5kKCdyZXR1cm4gJyk7XG5cdCAgICAgICAgYnVmZmVyRW5kLmFkZCgnOycpO1xuXHQgICAgICB9IGVsc2UgaWYgKCFzb3VyY2VTZWVuKSB7XG5cdCAgICAgICAgdGhpcy5zb3VyY2UucHVzaCgncmV0dXJuIFwiXCI7Jyk7XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHZhckRlY2xhcmF0aW9ucyArPSAnLCBidWZmZXIgPSAnICsgKGFwcGVuZEZpcnN0ID8gJycgOiB0aGlzLmluaXRpYWxpemVCdWZmZXIoKSk7XG5cblx0ICAgICAgaWYgKGJ1ZmZlclN0YXJ0KSB7XG5cdCAgICAgICAgYnVmZmVyU3RhcnQucHJlcGVuZCgncmV0dXJuIGJ1ZmZlciArICcpO1xuXHQgICAgICAgIGJ1ZmZlckVuZC5hZGQoJzsnKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB0aGlzLnNvdXJjZS5wdXNoKCdyZXR1cm4gYnVmZmVyOycpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIGlmICh2YXJEZWNsYXJhdGlvbnMpIHtcblx0ICAgICAgdGhpcy5zb3VyY2UucHJlcGVuZCgndmFyICcgKyB2YXJEZWNsYXJhdGlvbnMuc3Vic3RyaW5nKDIpICsgKGFwcGVuZEZpcnN0ID8gJycgOiAnO1xcbicpKTtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHRoaXMuc291cmNlLm1lcmdlKCk7XG5cdCAgfSxcblxuXHQgIC8vIFtibG9ja1ZhbHVlXVxuXHQgIC8vXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgdmFsdWVcblx0ICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHJldHVybiB2YWx1ZSBvZiBibG9ja0hlbHBlck1pc3Npbmdcblx0ICAvL1xuXHQgIC8vIFRoZSBwdXJwb3NlIG9mIHRoaXMgb3Bjb2RlIGlzIHRvIHRha2UgYSBibG9jayBvZiB0aGUgZm9ybVxuXHQgIC8vIGB7eyN0aGlzLmZvb319Li4ue3svdGhpcy5mb299fWAsIHJlc29sdmUgdGhlIHZhbHVlIG9mIGBmb29gLCBhbmRcblx0ICAvLyByZXBsYWNlIGl0IG9uIHRoZSBzdGFjayB3aXRoIHRoZSByZXN1bHQgb2YgcHJvcGVybHlcblx0ICAvLyBpbnZva2luZyBibG9ja0hlbHBlck1pc3NpbmcuXG5cdCAgYmxvY2tWYWx1ZTogZnVuY3Rpb24gYmxvY2tWYWx1ZShuYW1lKSB7XG5cdCAgICB2YXIgYmxvY2tIZWxwZXJNaXNzaW5nID0gdGhpcy5hbGlhc2FibGUoJ2hlbHBlcnMuYmxvY2tIZWxwZXJNaXNzaW5nJyksXG5cdCAgICAgICAgcGFyYW1zID0gW3RoaXMuY29udGV4dE5hbWUoMCldO1xuXHQgICAgdGhpcy5zZXR1cEhlbHBlckFyZ3MobmFtZSwgMCwgcGFyYW1zKTtcblxuXHQgICAgdmFyIGJsb2NrTmFtZSA9IHRoaXMucG9wU3RhY2soKTtcblx0ICAgIHBhcmFtcy5zcGxpY2UoMSwgMCwgYmxvY2tOYW1lKTtcblxuXHQgICAgdGhpcy5wdXNoKHRoaXMuc291cmNlLmZ1bmN0aW9uQ2FsbChibG9ja0hlbHBlck1pc3NpbmcsICdjYWxsJywgcGFyYW1zKSk7XG5cdCAgfSxcblxuXHQgIC8vIFthbWJpZ3VvdXNCbG9ja1ZhbHVlXVxuXHQgIC8vXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgdmFsdWVcblx0ICAvLyBDb21waWxlciB2YWx1ZSwgYmVmb3JlOiBsYXN0SGVscGVyPXZhbHVlIG9mIGxhc3QgZm91bmQgaGVscGVyLCBpZiBhbnlcblx0ICAvLyBPbiBzdGFjaywgYWZ0ZXIsIGlmIG5vIGxhc3RIZWxwZXI6IHNhbWUgYXMgW2Jsb2NrVmFsdWVdXG5cdCAgLy8gT24gc3RhY2ssIGFmdGVyLCBpZiBsYXN0SGVscGVyOiB2YWx1ZVxuXHQgIGFtYmlndW91c0Jsb2NrVmFsdWU6IGZ1bmN0aW9uIGFtYmlndW91c0Jsb2NrVmFsdWUoKSB7XG5cdCAgICAvLyBXZSdyZSBiZWluZyBhIGJpdCBjaGVla3kgYW5kIHJldXNpbmcgdGhlIG9wdGlvbnMgdmFsdWUgZnJvbSB0aGUgcHJpb3IgZXhlY1xuXHQgICAgdmFyIGJsb2NrSGVscGVyTWlzc2luZyA9IHRoaXMuYWxpYXNhYmxlKCdoZWxwZXJzLmJsb2NrSGVscGVyTWlzc2luZycpLFxuXHQgICAgICAgIHBhcmFtcyA9IFt0aGlzLmNvbnRleHROYW1lKDApXTtcblx0ICAgIHRoaXMuc2V0dXBIZWxwZXJBcmdzKCcnLCAwLCBwYXJhbXMsIHRydWUpO1xuXG5cdCAgICB0aGlzLmZsdXNoSW5saW5lKCk7XG5cblx0ICAgIHZhciBjdXJyZW50ID0gdGhpcy50b3BTdGFjaygpO1xuXHQgICAgcGFyYW1zLnNwbGljZSgxLCAwLCBjdXJyZW50KTtcblxuXHQgICAgdGhpcy5wdXNoU291cmNlKFsnaWYgKCEnLCB0aGlzLmxhc3RIZWxwZXIsICcpIHsgJywgY3VycmVudCwgJyA9ICcsIHRoaXMuc291cmNlLmZ1bmN0aW9uQ2FsbChibG9ja0hlbHBlck1pc3NpbmcsICdjYWxsJywgcGFyYW1zKSwgJ30nXSk7XG5cdCAgfSxcblxuXHQgIC8vIFthcHBlbmRDb250ZW50XVxuXHQgIC8vXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG5cdCAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cblx0ICAvL1xuXHQgIC8vIEFwcGVuZHMgdGhlIHN0cmluZyB2YWx1ZSBvZiBgY29udGVudGAgdG8gdGhlIGN1cnJlbnQgYnVmZmVyXG5cdCAgYXBwZW5kQ29udGVudDogZnVuY3Rpb24gYXBwZW5kQ29udGVudChjb250ZW50KSB7XG5cdCAgICBpZiAodGhpcy5wZW5kaW5nQ29udGVudCkge1xuXHQgICAgICBjb250ZW50ID0gdGhpcy5wZW5kaW5nQ29udGVudCArIGNvbnRlbnQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB0aGlzLnBlbmRpbmdMb2NhdGlvbiA9IHRoaXMuc291cmNlLmN1cnJlbnRMb2NhdGlvbjtcblx0ICAgIH1cblxuXHQgICAgdGhpcy5wZW5kaW5nQ29udGVudCA9IGNvbnRlbnQ7XG5cdCAgfSxcblxuXHQgIC8vIFthcHBlbmRdXG5cdCAgLy9cblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiB2YWx1ZSwgLi4uXG5cdCAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cblx0ICAvL1xuXHQgIC8vIENvZXJjZXMgYHZhbHVlYCB0byBhIFN0cmluZyBhbmQgYXBwZW5kcyBpdCB0byB0aGUgY3VycmVudCBidWZmZXIuXG5cdCAgLy9cblx0ICAvLyBJZiBgdmFsdWVgIGlzIHRydXRoeSwgb3IgMCwgaXQgaXMgY29lcmNlZCBpbnRvIGEgc3RyaW5nIGFuZCBhcHBlbmRlZFxuXHQgIC8vIE90aGVyd2lzZSwgdGhlIGVtcHR5IHN0cmluZyBpcyBhcHBlbmRlZFxuXHQgIGFwcGVuZDogZnVuY3Rpb24gYXBwZW5kKCkge1xuXHQgICAgaWYgKHRoaXMuaXNJbmxpbmUoKSkge1xuXHQgICAgICB0aGlzLnJlcGxhY2VTdGFjayhmdW5jdGlvbiAoY3VycmVudCkge1xuXHQgICAgICAgIHJldHVybiBbJyAhPSBudWxsID8gJywgY3VycmVudCwgJyA6IFwiXCInXTtcblx0ICAgICAgfSk7XG5cblx0ICAgICAgdGhpcy5wdXNoU291cmNlKHRoaXMuYXBwZW5kVG9CdWZmZXIodGhpcy5wb3BTdGFjaygpKSk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB2YXIgbG9jYWwgPSB0aGlzLnBvcFN0YWNrKCk7XG5cdCAgICAgIHRoaXMucHVzaFNvdXJjZShbJ2lmICgnLCBsb2NhbCwgJyAhPSBudWxsKSB7ICcsIHRoaXMuYXBwZW5kVG9CdWZmZXIobG9jYWwsIHVuZGVmaW5lZCwgdHJ1ZSksICcgfSddKTtcblx0ICAgICAgaWYgKHRoaXMuZW52aXJvbm1lbnQuaXNTaW1wbGUpIHtcblx0ICAgICAgICB0aGlzLnB1c2hTb3VyY2UoWydlbHNlIHsgJywgdGhpcy5hcHBlbmRUb0J1ZmZlcihcIicnXCIsIHVuZGVmaW5lZCwgdHJ1ZSksICcgfSddKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sXG5cblx0ICAvLyBbYXBwZW5kRXNjYXBlZF1cblx0ICAvL1xuXHQgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IHZhbHVlLCAuLi5cblx0ICAvLyBPbiBzdGFjaywgYWZ0ZXI6IC4uLlxuXHQgIC8vXG5cdCAgLy8gRXNjYXBlIGB2YWx1ZWAgYW5kIGFwcGVuZCBpdCB0byB0aGUgYnVmZmVyXG5cdCAgYXBwZW5kRXNjYXBlZDogZnVuY3Rpb24gYXBwZW5kRXNjYXBlZCgpIHtcblx0ICAgIHRoaXMucHVzaFNvdXJjZSh0aGlzLmFwcGVuZFRvQnVmZmVyKFt0aGlzLmFsaWFzYWJsZSgnY29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24nKSwgJygnLCB0aGlzLnBvcFN0YWNrKCksICcpJ10pKTtcblx0ICB9LFxuXG5cdCAgLy8gW2dldENvbnRleHRdXG5cdCAgLy9cblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cblx0ICAvLyBPbiBzdGFjaywgYWZ0ZXI6IC4uLlxuXHQgIC8vIENvbXBpbGVyIHZhbHVlLCBhZnRlcjogbGFzdENvbnRleHQ9ZGVwdGhcblx0ICAvL1xuXHQgIC8vIFNldCB0aGUgdmFsdWUgb2YgdGhlIGBsYXN0Q29udGV4dGAgY29tcGlsZXIgdmFsdWUgdG8gdGhlIGRlcHRoXG5cdCAgZ2V0Q29udGV4dDogZnVuY3Rpb24gZ2V0Q29udGV4dChkZXB0aCkge1xuXHQgICAgdGhpcy5sYXN0Q29udGV4dCA9IGRlcHRoO1xuXHQgIH0sXG5cblx0ICAvLyBbcHVzaENvbnRleHRdXG5cdCAgLy9cblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cblx0ICAvLyBPbiBzdGFjaywgYWZ0ZXI6IGN1cnJlbnRDb250ZXh0LCAuLi5cblx0ICAvL1xuXHQgIC8vIFB1c2hlcyB0aGUgdmFsdWUgb2YgdGhlIGN1cnJlbnQgY29udGV4dCBvbnRvIHRoZSBzdGFjay5cblx0ICBwdXNoQ29udGV4dDogZnVuY3Rpb24gcHVzaENvbnRleHQoKSB7XG5cdCAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwodGhpcy5jb250ZXh0TmFtZSh0aGlzLmxhc3RDb250ZXh0KSk7XG5cdCAgfSxcblxuXHQgIC8vIFtsb29rdXBPbkNvbnRleHRdXG5cdCAgLy9cblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cblx0ICAvLyBPbiBzdGFjaywgYWZ0ZXI6IGN1cnJlbnRDb250ZXh0W25hbWVdLCAuLi5cblx0ICAvL1xuXHQgIC8vIExvb2tzIHVwIHRoZSB2YWx1ZSBvZiBgbmFtZWAgb24gdGhlIGN1cnJlbnQgY29udGV4dCBhbmQgcHVzaGVzXG5cdCAgLy8gaXQgb250byB0aGUgc3RhY2suXG5cdCAgbG9va3VwT25Db250ZXh0OiBmdW5jdGlvbiBsb29rdXBPbkNvbnRleHQocGFydHMsIGZhbHN5LCBzdHJpY3QsIHNjb3BlZCkge1xuXHQgICAgdmFyIGkgPSAwO1xuXG5cdCAgICBpZiAoIXNjb3BlZCAmJiB0aGlzLm9wdGlvbnMuY29tcGF0ICYmICF0aGlzLmxhc3RDb250ZXh0KSB7XG5cdCAgICAgIC8vIFRoZSBkZXB0aGVkIHF1ZXJ5IGlzIGV4cGVjdGVkIHRvIGhhbmRsZSB0aGUgdW5kZWZpbmVkIGxvZ2ljIGZvciB0aGUgcm9vdCBsZXZlbCB0aGF0XG5cdCAgICAgIC8vIGlzIGltcGxlbWVudGVkIGJlbG93LCBzbyB3ZSBldmFsdWF0ZSB0aGF0IGRpcmVjdGx5IGluIGNvbXBhdCBtb2RlXG5cdCAgICAgIHRoaXMucHVzaCh0aGlzLmRlcHRoZWRMb29rdXAocGFydHNbaSsrXSkpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdGhpcy5wdXNoQ29udGV4dCgpO1xuXHQgICAgfVxuXG5cdCAgICB0aGlzLnJlc29sdmVQYXRoKCdjb250ZXh0JywgcGFydHMsIGksIGZhbHN5LCBzdHJpY3QpO1xuXHQgIH0sXG5cblx0ICAvLyBbbG9va3VwQmxvY2tQYXJhbV1cblx0ICAvL1xuXHQgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogYmxvY2tQYXJhbVtuYW1lXSwgLi4uXG5cdCAgLy9cblx0ICAvLyBMb29rcyB1cCB0aGUgdmFsdWUgb2YgYHBhcnRzYCBvbiB0aGUgZ2l2ZW4gYmxvY2sgcGFyYW0gYW5kIHB1c2hlc1xuXHQgIC8vIGl0IG9udG8gdGhlIHN0YWNrLlxuXHQgIGxvb2t1cEJsb2NrUGFyYW06IGZ1bmN0aW9uIGxvb2t1cEJsb2NrUGFyYW0oYmxvY2tQYXJhbUlkLCBwYXJ0cykge1xuXHQgICAgdGhpcy51c2VCbG9ja1BhcmFtcyA9IHRydWU7XG5cblx0ICAgIHRoaXMucHVzaChbJ2Jsb2NrUGFyYW1zWycsIGJsb2NrUGFyYW1JZFswXSwgJ11bJywgYmxvY2tQYXJhbUlkWzFdLCAnXSddKTtcblx0ICAgIHRoaXMucmVzb2x2ZVBhdGgoJ2NvbnRleHQnLCBwYXJ0cywgMSk7XG5cdCAgfSxcblxuXHQgIC8vIFtsb29rdXBEYXRhXVxuXHQgIC8vXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG5cdCAgLy8gT24gc3RhY2ssIGFmdGVyOiBkYXRhLCAuLi5cblx0ICAvL1xuXHQgIC8vIFB1c2ggdGhlIGRhdGEgbG9va3VwIG9wZXJhdG9yXG5cdCAgbG9va3VwRGF0YTogZnVuY3Rpb24gbG9va3VwRGF0YShkZXB0aCwgcGFydHMsIHN0cmljdCkge1xuXHQgICAgaWYgKCFkZXB0aCkge1xuXHQgICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoJ2RhdGEnKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCgnY29udGFpbmVyLmRhdGEoZGF0YSwgJyArIGRlcHRoICsgJyknKTtcblx0ICAgIH1cblxuXHQgICAgdGhpcy5yZXNvbHZlUGF0aCgnZGF0YScsIHBhcnRzLCAwLCB0cnVlLCBzdHJpY3QpO1xuXHQgIH0sXG5cblx0ICByZXNvbHZlUGF0aDogZnVuY3Rpb24gcmVzb2x2ZVBhdGgodHlwZSwgcGFydHMsIGksIGZhbHN5LCBzdHJpY3QpIHtcblx0ICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cblx0ICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cblx0ICAgIGlmICh0aGlzLm9wdGlvbnMuc3RyaWN0IHx8IHRoaXMub3B0aW9ucy5hc3N1bWVPYmplY3RzKSB7XG5cdCAgICAgIHRoaXMucHVzaChzdHJpY3RMb29rdXAodGhpcy5vcHRpb25zLnN0cmljdCAmJiBzdHJpY3QsIHRoaXMsIHBhcnRzLCB0eXBlKSk7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblxuXHQgICAgdmFyIGxlbiA9IHBhcnRzLmxlbmd0aDtcblx0ICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cdCAgICAgIHRoaXMucmVwbGFjZVN0YWNrKGZ1bmN0aW9uIChjdXJyZW50KSB7XG5cdCAgICAgICAgdmFyIGxvb2t1cCA9IF90aGlzLm5hbWVMb29rdXAoY3VycmVudCwgcGFydHNbaV0sIHR5cGUpO1xuXHQgICAgICAgIC8vIFdlIHdhbnQgdG8gZW5zdXJlIHRoYXQgemVybyBhbmQgZmFsc2UgYXJlIGhhbmRsZWQgcHJvcGVybHkgaWYgdGhlIGNvbnRleHQgKGZhbHN5IGZsYWcpXG5cdCAgICAgICAgLy8gbmVlZHMgdG8gaGF2ZSB0aGUgc3BlY2lhbCBoYW5kbGluZyBmb3IgdGhlc2UgdmFsdWVzLlxuXHQgICAgICAgIGlmICghZmFsc3kpIHtcblx0ICAgICAgICAgIHJldHVybiBbJyAhPSBudWxsID8gJywgbG9va3VwLCAnIDogJywgY3VycmVudF07XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIC8vIE90aGVyd2lzZSB3ZSBjYW4gdXNlIGdlbmVyaWMgZmFsc3kgaGFuZGxpbmdcblx0ICAgICAgICAgIHJldHVybiBbJyAmJiAnLCBsb29rdXBdO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cdCAgICB9XG5cdCAgfSxcblxuXHQgIC8vIFtyZXNvbHZlUG9zc2libGVMYW1iZGFdXG5cdCAgLy9cblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiB2YWx1ZSwgLi4uXG5cdCAgLy8gT24gc3RhY2ssIGFmdGVyOiByZXNvbHZlZCB2YWx1ZSwgLi4uXG5cdCAgLy9cblx0ICAvLyBJZiB0aGUgYHZhbHVlYCBpcyBhIGxhbWJkYSwgcmVwbGFjZSBpdCBvbiB0aGUgc3RhY2sgYnlcblx0ICAvLyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBsYW1iZGFcblx0ICByZXNvbHZlUG9zc2libGVMYW1iZGE6IGZ1bmN0aW9uIHJlc29sdmVQb3NzaWJsZUxhbWJkYSgpIHtcblx0ICAgIHRoaXMucHVzaChbdGhpcy5hbGlhc2FibGUoJ2NvbnRhaW5lci5sYW1iZGEnKSwgJygnLCB0aGlzLnBvcFN0YWNrKCksICcsICcsIHRoaXMuY29udGV4dE5hbWUoMCksICcpJ10pO1xuXHQgIH0sXG5cblx0ICAvLyBbcHVzaFN0cmluZ1BhcmFtXVxuXHQgIC8vXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG5cdCAgLy8gT24gc3RhY2ssIGFmdGVyOiBzdHJpbmcsIGN1cnJlbnRDb250ZXh0LCAuLi5cblx0ICAvL1xuXHQgIC8vIFRoaXMgb3Bjb2RlIGlzIGRlc2lnbmVkIGZvciB1c2UgaW4gc3RyaW5nIG1vZGUsIHdoaWNoXG5cdCAgLy8gcHJvdmlkZXMgdGhlIHN0cmluZyB2YWx1ZSBvZiBhIHBhcmFtZXRlciBhbG9uZyB3aXRoIGl0c1xuXHQgIC8vIGRlcHRoIHJhdGhlciB0aGFuIHJlc29sdmluZyBpdCBpbW1lZGlhdGVseS5cblx0ICBwdXNoU3RyaW5nUGFyYW06IGZ1bmN0aW9uIHB1c2hTdHJpbmdQYXJhbShzdHJpbmcsIHR5cGUpIHtcblx0ICAgIHRoaXMucHVzaENvbnRleHQoKTtcblx0ICAgIHRoaXMucHVzaFN0cmluZyh0eXBlKTtcblxuXHQgICAgLy8gSWYgaXQncyBhIHN1YmV4cHJlc3Npb24sIHRoZSBzdHJpbmcgcmVzdWx0XG5cdCAgICAvLyB3aWxsIGJlIHB1c2hlZCBhZnRlciB0aGlzIG9wY29kZS5cblx0ICAgIGlmICh0eXBlICE9PSAnU3ViRXhwcmVzc2lvbicpIHtcblx0ICAgICAgaWYgKHR5cGVvZiBzdHJpbmcgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgdGhpcy5wdXNoU3RyaW5nKHN0cmluZyk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKHN0cmluZyk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LFxuXG5cdCAgZW1wdHlIYXNoOiBmdW5jdGlvbiBlbXB0eUhhc2gob21pdEVtcHR5KSB7XG5cdCAgICBpZiAodGhpcy50cmFja0lkcykge1xuXHQgICAgICB0aGlzLnB1c2goJ3t9Jyk7IC8vIGhhc2hJZHNcblx0ICAgIH1cblx0ICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuXHQgICAgICB0aGlzLnB1c2goJ3t9Jyk7IC8vIGhhc2hDb250ZXh0c1xuXHQgICAgICB0aGlzLnB1c2goJ3t9Jyk7IC8vIGhhc2hUeXBlc1xuXHQgICAgfVxuXHQgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKG9taXRFbXB0eSA/ICd1bmRlZmluZWQnIDogJ3t9Jyk7XG5cdCAgfSxcblx0ICBwdXNoSGFzaDogZnVuY3Rpb24gcHVzaEhhc2goKSB7XG5cdCAgICBpZiAodGhpcy5oYXNoKSB7XG5cdCAgICAgIHRoaXMuaGFzaGVzLnB1c2godGhpcy5oYXNoKTtcblx0ICAgIH1cblx0ICAgIHRoaXMuaGFzaCA9IHsgdmFsdWVzOiBbXSwgdHlwZXM6IFtdLCBjb250ZXh0czogW10sIGlkczogW10gfTtcblx0ICB9LFxuXHQgIHBvcEhhc2g6IGZ1bmN0aW9uIHBvcEhhc2goKSB7XG5cdCAgICB2YXIgaGFzaCA9IHRoaXMuaGFzaDtcblx0ICAgIHRoaXMuaGFzaCA9IHRoaXMuaGFzaGVzLnBvcCgpO1xuXG5cdCAgICBpZiAodGhpcy50cmFja0lkcykge1xuXHQgICAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2guaWRzKSk7XG5cdCAgICB9XG5cdCAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcblx0ICAgICAgdGhpcy5wdXNoKHRoaXMub2JqZWN0TGl0ZXJhbChoYXNoLmNvbnRleHRzKSk7XG5cdCAgICAgIHRoaXMucHVzaCh0aGlzLm9iamVjdExpdGVyYWwoaGFzaC50eXBlcykpO1xuXHQgICAgfVxuXG5cdCAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2gudmFsdWVzKSk7XG5cdCAgfSxcblxuXHQgIC8vIFtwdXNoU3RyaW5nXVxuXHQgIC8vXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG5cdCAgLy8gT24gc3RhY2ssIGFmdGVyOiBxdW90ZWRTdHJpbmcoc3RyaW5nKSwgLi4uXG5cdCAgLy9cblx0ICAvLyBQdXNoIGEgcXVvdGVkIHZlcnNpb24gb2YgYHN0cmluZ2Agb250byB0aGUgc3RhY2tcblx0ICBwdXNoU3RyaW5nOiBmdW5jdGlvbiBwdXNoU3RyaW5nKHN0cmluZykge1xuXHQgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKHRoaXMucXVvdGVkU3RyaW5nKHN0cmluZykpO1xuXHQgIH0sXG5cblx0ICAvLyBbcHVzaExpdGVyYWxdXG5cdCAgLy9cblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cblx0ICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHZhbHVlLCAuLi5cblx0ICAvL1xuXHQgIC8vIFB1c2hlcyBhIHZhbHVlIG9udG8gdGhlIHN0YWNrLiBUaGlzIG9wZXJhdGlvbiBwcmV2ZW50c1xuXHQgIC8vIHRoZSBjb21waWxlciBmcm9tIGNyZWF0aW5nIGEgdGVtcG9yYXJ5IHZhcmlhYmxlIHRvIGhvbGRcblx0ICAvLyBpdC5cblx0ICBwdXNoTGl0ZXJhbDogZnVuY3Rpb24gcHVzaExpdGVyYWwodmFsdWUpIHtcblx0ICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCh2YWx1ZSk7XG5cdCAgfSxcblxuXHQgIC8vIFtwdXNoUHJvZ3JhbV1cblx0ICAvL1xuXHQgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogcHJvZ3JhbShndWlkKSwgLi4uXG5cdCAgLy9cblx0ICAvLyBQdXNoIGEgcHJvZ3JhbSBleHByZXNzaW9uIG9udG8gdGhlIHN0YWNrLiBUaGlzIHRha2VzXG5cdCAgLy8gYSBjb21waWxlLXRpbWUgZ3VpZCBhbmQgY29udmVydHMgaXQgaW50byBhIHJ1bnRpbWUtYWNjZXNzaWJsZVxuXHQgIC8vIGV4cHJlc3Npb24uXG5cdCAgcHVzaFByb2dyYW06IGZ1bmN0aW9uIHB1c2hQcm9ncmFtKGd1aWQpIHtcblx0ICAgIGlmIChndWlkICE9IG51bGwpIHtcblx0ICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKHRoaXMucHJvZ3JhbUV4cHJlc3Npb24oZ3VpZCkpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKG51bGwpO1xuXHQgICAgfVxuXHQgIH0sXG5cblx0ICAvLyBbcmVnaXN0ZXJEZWNvcmF0b3JdXG5cdCAgLy9cblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiBoYXNoLCBwcm9ncmFtLCBwYXJhbXMuLi4sIC4uLlxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uXG5cdCAgLy9cblx0ICAvLyBQb3BzIG9mZiB0aGUgZGVjb3JhdG9yJ3MgcGFyYW1ldGVycywgaW52b2tlcyB0aGUgZGVjb3JhdG9yLFxuXHQgIC8vIGFuZCBpbnNlcnRzIHRoZSBkZWNvcmF0b3IgaW50byB0aGUgZGVjb3JhdG9ycyBsaXN0LlxuXHQgIHJlZ2lzdGVyRGVjb3JhdG9yOiBmdW5jdGlvbiByZWdpc3RlckRlY29yYXRvcihwYXJhbVNpemUsIG5hbWUpIHtcblx0ICAgIHZhciBmb3VuZERlY29yYXRvciA9IHRoaXMubmFtZUxvb2t1cCgnZGVjb3JhdG9ycycsIG5hbWUsICdkZWNvcmF0b3InKSxcblx0ICAgICAgICBvcHRpb25zID0gdGhpcy5zZXR1cEhlbHBlckFyZ3MobmFtZSwgcGFyYW1TaXplKTtcblxuXHQgICAgdGhpcy5kZWNvcmF0b3JzLnB1c2goWydmbiA9ICcsIHRoaXMuZGVjb3JhdG9ycy5mdW5jdGlvbkNhbGwoZm91bmREZWNvcmF0b3IsICcnLCBbJ2ZuJywgJ3Byb3BzJywgJ2NvbnRhaW5lcicsIG9wdGlvbnNdKSwgJyB8fCBmbjsnXSk7XG5cdCAgfSxcblxuXHQgIC8vIFtpbnZva2VIZWxwZXJdXG5cdCAgLy9cblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiBoYXNoLCBpbnZlcnNlLCBwcm9ncmFtLCBwYXJhbXMuLi4sIC4uLlxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogcmVzdWx0IG9mIGhlbHBlciBpbnZvY2F0aW9uXG5cdCAgLy9cblx0ICAvLyBQb3BzIG9mZiB0aGUgaGVscGVyJ3MgcGFyYW1ldGVycywgaW52b2tlcyB0aGUgaGVscGVyLFxuXHQgIC8vIGFuZCBwdXNoZXMgdGhlIGhlbHBlcidzIHJldHVybiB2YWx1ZSBvbnRvIHRoZSBzdGFjay5cblx0ICAvL1xuXHQgIC8vIElmIHRoZSBoZWxwZXIgaXMgbm90IGZvdW5kLCBgaGVscGVyTWlzc2luZ2AgaXMgY2FsbGVkLlxuXHQgIGludm9rZUhlbHBlcjogZnVuY3Rpb24gaW52b2tlSGVscGVyKHBhcmFtU2l6ZSwgbmFtZSwgaXNTaW1wbGUpIHtcblx0ICAgIHZhciBub25IZWxwZXIgPSB0aGlzLnBvcFN0YWNrKCksXG5cdCAgICAgICAgaGVscGVyID0gdGhpcy5zZXR1cEhlbHBlcihwYXJhbVNpemUsIG5hbWUpLFxuXHQgICAgICAgIHNpbXBsZSA9IGlzU2ltcGxlID8gW2hlbHBlci5uYW1lLCAnIHx8ICddIDogJyc7XG5cblx0ICAgIHZhciBsb29rdXAgPSBbJygnXS5jb25jYXQoc2ltcGxlLCBub25IZWxwZXIpO1xuXHQgICAgaWYgKCF0aGlzLm9wdGlvbnMuc3RyaWN0KSB7XG5cdCAgICAgIGxvb2t1cC5wdXNoKCcgfHwgJywgdGhpcy5hbGlhc2FibGUoJ2hlbHBlcnMuaGVscGVyTWlzc2luZycpKTtcblx0ICAgIH1cblx0ICAgIGxvb2t1cC5wdXNoKCcpJyk7XG5cblx0ICAgIHRoaXMucHVzaCh0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwobG9va3VwLCAnY2FsbCcsIGhlbHBlci5jYWxsUGFyYW1zKSk7XG5cdCAgfSxcblxuXHQgIC8vIFtpbnZva2VLbm93bkhlbHBlcl1cblx0ICAvL1xuXHQgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IGhhc2gsIGludmVyc2UsIHByb2dyYW0sIHBhcmFtcy4uLiwgLi4uXG5cdCAgLy8gT24gc3RhY2ssIGFmdGVyOiByZXN1bHQgb2YgaGVscGVyIGludm9jYXRpb25cblx0ICAvL1xuXHQgIC8vIFRoaXMgb3BlcmF0aW9uIGlzIHVzZWQgd2hlbiB0aGUgaGVscGVyIGlzIGtub3duIHRvIGV4aXN0LFxuXHQgIC8vIHNvIGEgYGhlbHBlck1pc3NpbmdgIGZhbGxiYWNrIGlzIG5vdCByZXF1aXJlZC5cblx0ICBpbnZva2VLbm93bkhlbHBlcjogZnVuY3Rpb24gaW52b2tlS25vd25IZWxwZXIocGFyYW1TaXplLCBuYW1lKSB7XG5cdCAgICB2YXIgaGVscGVyID0gdGhpcy5zZXR1cEhlbHBlcihwYXJhbVNpemUsIG5hbWUpO1xuXHQgICAgdGhpcy5wdXNoKHRoaXMuc291cmNlLmZ1bmN0aW9uQ2FsbChoZWxwZXIubmFtZSwgJ2NhbGwnLCBoZWxwZXIuY2FsbFBhcmFtcykpO1xuXHQgIH0sXG5cblx0ICAvLyBbaW52b2tlQW1iaWd1b3VzXVxuXHQgIC8vXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgcGFyYW1zLi4uLCAuLi5cblx0ICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHJlc3VsdCBvZiBkaXNhbWJpZ3VhdGlvblxuXHQgIC8vXG5cdCAgLy8gVGhpcyBvcGVyYXRpb24gaXMgdXNlZCB3aGVuIGFuIGV4cHJlc3Npb24gbGlrZSBge3tmb299fWBcblx0ICAvLyBpcyBwcm92aWRlZCwgYnV0IHdlIGRvbid0IGtub3cgYXQgY29tcGlsZS10aW1lIHdoZXRoZXIgaXRcblx0ICAvLyBpcyBhIGhlbHBlciBvciBhIHBhdGguXG5cdCAgLy9cblx0ICAvLyBUaGlzIG9wZXJhdGlvbiBlbWl0cyBtb3JlIGNvZGUgdGhhbiB0aGUgb3RoZXIgb3B0aW9ucyxcblx0ICAvLyBhbmQgY2FuIGJlIGF2b2lkZWQgYnkgcGFzc2luZyB0aGUgYGtub3duSGVscGVyc2AgYW5kXG5cdCAgLy8gYGtub3duSGVscGVyc09ubHlgIGZsYWdzIGF0IGNvbXBpbGUtdGltZS5cblx0ICBpbnZva2VBbWJpZ3VvdXM6IGZ1bmN0aW9uIGludm9rZUFtYmlndW91cyhuYW1lLCBoZWxwZXJDYWxsKSB7XG5cdCAgICB0aGlzLnVzZVJlZ2lzdGVyKCdoZWxwZXInKTtcblxuXHQgICAgdmFyIG5vbkhlbHBlciA9IHRoaXMucG9wU3RhY2soKTtcblxuXHQgICAgdGhpcy5lbXB0eUhhc2goKTtcblx0ICAgIHZhciBoZWxwZXIgPSB0aGlzLnNldHVwSGVscGVyKDAsIG5hbWUsIGhlbHBlckNhbGwpO1xuXG5cdCAgICB2YXIgaGVscGVyTmFtZSA9IHRoaXMubGFzdEhlbHBlciA9IHRoaXMubmFtZUxvb2t1cCgnaGVscGVycycsIG5hbWUsICdoZWxwZXInKTtcblxuXHQgICAgdmFyIGxvb2t1cCA9IFsnKCcsICcoaGVscGVyID0gJywgaGVscGVyTmFtZSwgJyB8fCAnLCBub25IZWxwZXIsICcpJ107XG5cdCAgICBpZiAoIXRoaXMub3B0aW9ucy5zdHJpY3QpIHtcblx0ICAgICAgbG9va3VwWzBdID0gJyhoZWxwZXIgPSAnO1xuXHQgICAgICBsb29rdXAucHVzaCgnICE9IG51bGwgPyBoZWxwZXIgOiAnLCB0aGlzLmFsaWFzYWJsZSgnaGVscGVycy5oZWxwZXJNaXNzaW5nJykpO1xuXHQgICAgfVxuXG5cdCAgICB0aGlzLnB1c2goWycoJywgbG9va3VwLCBoZWxwZXIucGFyYW1zSW5pdCA/IFsnKSwoJywgaGVscGVyLnBhcmFtc0luaXRdIDogW10sICcpLCcsICcodHlwZW9mIGhlbHBlciA9PT0gJywgdGhpcy5hbGlhc2FibGUoJ1wiZnVuY3Rpb25cIicpLCAnID8gJywgdGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKCdoZWxwZXInLCAnY2FsbCcsIGhlbHBlci5jYWxsUGFyYW1zKSwgJyA6IGhlbHBlcikpJ10pO1xuXHQgIH0sXG5cblx0ICAvLyBbaW52b2tlUGFydGlhbF1cblx0ICAvL1xuXHQgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IGNvbnRleHQsIC4uLlxuXHQgIC8vIE9uIHN0YWNrIGFmdGVyOiByZXN1bHQgb2YgcGFydGlhbCBpbnZvY2F0aW9uXG5cdCAgLy9cblx0ICAvLyBUaGlzIG9wZXJhdGlvbiBwb3BzIG9mZiBhIGNvbnRleHQsIGludm9rZXMgYSBwYXJ0aWFsIHdpdGggdGhhdCBjb250ZXh0LFxuXHQgIC8vIGFuZCBwdXNoZXMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2NhdGlvbiBiYWNrLlxuXHQgIGludm9rZVBhcnRpYWw6IGZ1bmN0aW9uIGludm9rZVBhcnRpYWwoaXNEeW5hbWljLCBuYW1lLCBpbmRlbnQpIHtcblx0ICAgIHZhciBwYXJhbXMgPSBbXSxcblx0ICAgICAgICBvcHRpb25zID0gdGhpcy5zZXR1cFBhcmFtcyhuYW1lLCAxLCBwYXJhbXMpO1xuXG5cdCAgICBpZiAoaXNEeW5hbWljKSB7XG5cdCAgICAgIG5hbWUgPSB0aGlzLnBvcFN0YWNrKCk7XG5cdCAgICAgIGRlbGV0ZSBvcHRpb25zLm5hbWU7XG5cdCAgICB9XG5cblx0ICAgIGlmIChpbmRlbnQpIHtcblx0ICAgICAgb3B0aW9ucy5pbmRlbnQgPSBKU09OLnN0cmluZ2lmeShpbmRlbnQpO1xuXHQgICAgfVxuXHQgICAgb3B0aW9ucy5oZWxwZXJzID0gJ2hlbHBlcnMnO1xuXHQgICAgb3B0aW9ucy5wYXJ0aWFscyA9ICdwYXJ0aWFscyc7XG5cdCAgICBvcHRpb25zLmRlY29yYXRvcnMgPSAnY29udGFpbmVyLmRlY29yYXRvcnMnO1xuXG5cdCAgICBpZiAoIWlzRHluYW1pYykge1xuXHQgICAgICBwYXJhbXMudW5zaGlmdCh0aGlzLm5hbWVMb29rdXAoJ3BhcnRpYWxzJywgbmFtZSwgJ3BhcnRpYWwnKSk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBwYXJhbXMudW5zaGlmdChuYW1lKTtcblx0ICAgIH1cblxuXHQgICAgaWYgKHRoaXMub3B0aW9ucy5jb21wYXQpIHtcblx0ICAgICAgb3B0aW9ucy5kZXB0aHMgPSAnZGVwdGhzJztcblx0ICAgIH1cblx0ICAgIG9wdGlvbnMgPSB0aGlzLm9iamVjdExpdGVyYWwob3B0aW9ucyk7XG5cdCAgICBwYXJhbXMucHVzaChvcHRpb25zKTtcblxuXHQgICAgdGhpcy5wdXNoKHRoaXMuc291cmNlLmZ1bmN0aW9uQ2FsbCgnY29udGFpbmVyLmludm9rZVBhcnRpYWwnLCAnJywgcGFyYW1zKSk7XG5cdCAgfSxcblxuXHQgIC8vIFthc3NpZ25Ub0hhc2hdXG5cdCAgLy9cblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiB2YWx1ZSwgLi4uLCBoYXNoLCAuLi5cblx0ICAvLyBPbiBzdGFjaywgYWZ0ZXI6IC4uLiwgaGFzaCwgLi4uXG5cdCAgLy9cblx0ICAvLyBQb3BzIGEgdmFsdWUgb2ZmIHRoZSBzdGFjayBhbmQgYXNzaWducyBpdCB0byB0aGUgY3VycmVudCBoYXNoXG5cdCAgYXNzaWduVG9IYXNoOiBmdW5jdGlvbiBhc3NpZ25Ub0hhc2goa2V5KSB7XG5cdCAgICB2YXIgdmFsdWUgPSB0aGlzLnBvcFN0YWNrKCksXG5cdCAgICAgICAgY29udGV4dCA9IHVuZGVmaW5lZCxcblx0ICAgICAgICB0eXBlID0gdW5kZWZpbmVkLFxuXHQgICAgICAgIGlkID0gdW5kZWZpbmVkO1xuXG5cdCAgICBpZiAodGhpcy50cmFja0lkcykge1xuXHQgICAgICBpZCA9IHRoaXMucG9wU3RhY2soKTtcblx0ICAgIH1cblx0ICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuXHQgICAgICB0eXBlID0gdGhpcy5wb3BTdGFjaygpO1xuXHQgICAgICBjb250ZXh0ID0gdGhpcy5wb3BTdGFjaygpO1xuXHQgICAgfVxuXG5cdCAgICB2YXIgaGFzaCA9IHRoaXMuaGFzaDtcblx0ICAgIGlmIChjb250ZXh0KSB7XG5cdCAgICAgIGhhc2guY29udGV4dHNba2V5XSA9IGNvbnRleHQ7XG5cdCAgICB9XG5cdCAgICBpZiAodHlwZSkge1xuXHQgICAgICBoYXNoLnR5cGVzW2tleV0gPSB0eXBlO1xuXHQgICAgfVxuXHQgICAgaWYgKGlkKSB7XG5cdCAgICAgIGhhc2guaWRzW2tleV0gPSBpZDtcblx0ICAgIH1cblx0ICAgIGhhc2gudmFsdWVzW2tleV0gPSB2YWx1ZTtcblx0ICB9LFxuXG5cdCAgcHVzaElkOiBmdW5jdGlvbiBwdXNoSWQodHlwZSwgbmFtZSwgY2hpbGQpIHtcblx0ICAgIGlmICh0eXBlID09PSAnQmxvY2tQYXJhbScpIHtcblx0ICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKCdibG9ja1BhcmFtc1snICsgbmFtZVswXSArICddLnBhdGhbJyArIG5hbWVbMV0gKyAnXScgKyAoY2hpbGQgPyAnICsgJyArIEpTT04uc3RyaW5naWZ5KCcuJyArIGNoaWxkKSA6ICcnKSk7XG5cdCAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdQYXRoRXhwcmVzc2lvbicpIHtcblx0ICAgICAgdGhpcy5wdXNoU3RyaW5nKG5hbWUpO1xuXHQgICAgfSBlbHNlIGlmICh0eXBlID09PSAnU3ViRXhwcmVzc2lvbicpIHtcblx0ICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKCd0cnVlJyk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoJ251bGwnKTtcblx0ICAgIH1cblx0ICB9LFxuXG5cdCAgLy8gSEVMUEVSU1xuXG5cdCAgY29tcGlsZXI6IEphdmFTY3JpcHRDb21waWxlcixcblxuXHQgIGNvbXBpbGVDaGlsZHJlbjogZnVuY3Rpb24gY29tcGlsZUNoaWxkcmVuKGVudmlyb25tZW50LCBvcHRpb25zKSB7XG5cdCAgICB2YXIgY2hpbGRyZW4gPSBlbnZpcm9ubWVudC5jaGlsZHJlbixcblx0ICAgICAgICBjaGlsZCA9IHVuZGVmaW5lZCxcblx0ICAgICAgICBjb21waWxlciA9IHVuZGVmaW5lZDtcblxuXHQgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0ICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcblx0ICAgICAgY29tcGlsZXIgPSBuZXcgdGhpcy5jb21waWxlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcblxuXHQgICAgICB2YXIgaW5kZXggPSB0aGlzLm1hdGNoRXhpc3RpbmdQcm9ncmFtKGNoaWxkKTtcblxuXHQgICAgICBpZiAoaW5kZXggPT0gbnVsbCkge1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5wcm9ncmFtcy5wdXNoKCcnKTsgLy8gUGxhY2Vob2xkZXIgdG8gcHJldmVudCBuYW1lIGNvbmZsaWN0cyBmb3IgbmVzdGVkIGNoaWxkcmVuXG5cdCAgICAgICAgaW5kZXggPSB0aGlzLmNvbnRleHQucHJvZ3JhbXMubGVuZ3RoO1xuXHQgICAgICAgIGNoaWxkLmluZGV4ID0gaW5kZXg7XG5cdCAgICAgICAgY2hpbGQubmFtZSA9ICdwcm9ncmFtJyArIGluZGV4O1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5wcm9ncmFtc1tpbmRleF0gPSBjb21waWxlci5jb21waWxlKGNoaWxkLCBvcHRpb25zLCB0aGlzLmNvbnRleHQsICF0aGlzLnByZWNvbXBpbGUpO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5kZWNvcmF0b3JzW2luZGV4XSA9IGNvbXBpbGVyLmRlY29yYXRvcnM7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmVudmlyb25tZW50c1tpbmRleF0gPSBjaGlsZDtcblxuXHQgICAgICAgIHRoaXMudXNlRGVwdGhzID0gdGhpcy51c2VEZXB0aHMgfHwgY29tcGlsZXIudXNlRGVwdGhzO1xuXHQgICAgICAgIHRoaXMudXNlQmxvY2tQYXJhbXMgPSB0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IGNvbXBpbGVyLnVzZUJsb2NrUGFyYW1zO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGNoaWxkLmluZGV4ID0gaW5kZXg7XG5cdCAgICAgICAgY2hpbGQubmFtZSA9ICdwcm9ncmFtJyArIGluZGV4O1xuXG5cdCAgICAgICAgdGhpcy51c2VEZXB0aHMgPSB0aGlzLnVzZURlcHRocyB8fCBjaGlsZC51c2VEZXB0aHM7XG5cdCAgICAgICAgdGhpcy51c2VCbG9ja1BhcmFtcyA9IHRoaXMudXNlQmxvY2tQYXJhbXMgfHwgY2hpbGQudXNlQmxvY2tQYXJhbXM7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LFxuXHQgIG1hdGNoRXhpc3RpbmdQcm9ncmFtOiBmdW5jdGlvbiBtYXRjaEV4aXN0aW5nUHJvZ3JhbShjaGlsZCkge1xuXHQgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuY29udGV4dC5lbnZpcm9ubWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgICAgdmFyIGVudmlyb25tZW50ID0gdGhpcy5jb250ZXh0LmVudmlyb25tZW50c1tpXTtcblx0ICAgICAgaWYgKGVudmlyb25tZW50ICYmIGVudmlyb25tZW50LmVxdWFscyhjaGlsZCkpIHtcblx0ICAgICAgICByZXR1cm4gaTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sXG5cblx0ICBwcm9ncmFtRXhwcmVzc2lvbjogZnVuY3Rpb24gcHJvZ3JhbUV4cHJlc3Npb24oZ3VpZCkge1xuXHQgICAgdmFyIGNoaWxkID0gdGhpcy5lbnZpcm9ubWVudC5jaGlsZHJlbltndWlkXSxcblx0ICAgICAgICBwcm9ncmFtUGFyYW1zID0gW2NoaWxkLmluZGV4LCAnZGF0YScsIGNoaWxkLmJsb2NrUGFyYW1zXTtcblxuXHQgICAgaWYgKHRoaXMudXNlQmxvY2tQYXJhbXMgfHwgdGhpcy51c2VEZXB0aHMpIHtcblx0ICAgICAgcHJvZ3JhbVBhcmFtcy5wdXNoKCdibG9ja1BhcmFtcycpO1xuXHQgICAgfVxuXHQgICAgaWYgKHRoaXMudXNlRGVwdGhzKSB7XG5cdCAgICAgIHByb2dyYW1QYXJhbXMucHVzaCgnZGVwdGhzJyk7XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiAnY29udGFpbmVyLnByb2dyYW0oJyArIHByb2dyYW1QYXJhbXMuam9pbignLCAnKSArICcpJztcblx0ICB9LFxuXG5cdCAgdXNlUmVnaXN0ZXI6IGZ1bmN0aW9uIHVzZVJlZ2lzdGVyKG5hbWUpIHtcblx0ICAgIGlmICghdGhpcy5yZWdpc3RlcnNbbmFtZV0pIHtcblx0ICAgICAgdGhpcy5yZWdpc3RlcnNbbmFtZV0gPSB0cnVlO1xuXHQgICAgICB0aGlzLnJlZ2lzdGVycy5saXN0LnB1c2gobmFtZSk7XG5cdCAgICB9XG5cdCAgfSxcblxuXHQgIHB1c2g6IGZ1bmN0aW9uIHB1c2goZXhwcikge1xuXHQgICAgaWYgKCEoZXhwciBpbnN0YW5jZW9mIExpdGVyYWwpKSB7XG5cdCAgICAgIGV4cHIgPSB0aGlzLnNvdXJjZS53cmFwKGV4cHIpO1xuXHQgICAgfVxuXG5cdCAgICB0aGlzLmlubGluZVN0YWNrLnB1c2goZXhwcik7XG5cdCAgICByZXR1cm4gZXhwcjtcblx0ICB9LFxuXG5cdCAgcHVzaFN0YWNrTGl0ZXJhbDogZnVuY3Rpb24gcHVzaFN0YWNrTGl0ZXJhbChpdGVtKSB7XG5cdCAgICB0aGlzLnB1c2gobmV3IExpdGVyYWwoaXRlbSkpO1xuXHQgIH0sXG5cblx0ICBwdXNoU291cmNlOiBmdW5jdGlvbiBwdXNoU291cmNlKHNvdXJjZSkge1xuXHQgICAgaWYgKHRoaXMucGVuZGluZ0NvbnRlbnQpIHtcblx0ICAgICAgdGhpcy5zb3VyY2UucHVzaCh0aGlzLmFwcGVuZFRvQnVmZmVyKHRoaXMuc291cmNlLnF1b3RlZFN0cmluZyh0aGlzLnBlbmRpbmdDb250ZW50KSwgdGhpcy5wZW5kaW5nTG9jYXRpb24pKTtcblx0ICAgICAgdGhpcy5wZW5kaW5nQ29udGVudCA9IHVuZGVmaW5lZDtcblx0ICAgIH1cblxuXHQgICAgaWYgKHNvdXJjZSkge1xuXHQgICAgICB0aGlzLnNvdXJjZS5wdXNoKHNvdXJjZSk7XG5cdCAgICB9XG5cdCAgfSxcblxuXHQgIHJlcGxhY2VTdGFjazogZnVuY3Rpb24gcmVwbGFjZVN0YWNrKGNhbGxiYWNrKSB7XG5cdCAgICB2YXIgcHJlZml4ID0gWycoJ10sXG5cdCAgICAgICAgc3RhY2sgPSB1bmRlZmluZWQsXG5cdCAgICAgICAgY3JlYXRlZFN0YWNrID0gdW5kZWZpbmVkLFxuXHQgICAgICAgIHVzZWRMaXRlcmFsID0gdW5kZWZpbmVkO1xuXG5cdCAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHQgICAgaWYgKCF0aGlzLmlzSW5saW5lKCkpIHtcblx0ICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ3JlcGxhY2VTdGFjayBvbiBub24taW5saW5lJyk7XG5cdCAgICB9XG5cblx0ICAgIC8vIFdlIHdhbnQgdG8gbWVyZ2UgdGhlIGlubGluZSBzdGF0ZW1lbnQgaW50byB0aGUgcmVwbGFjZW1lbnQgc3RhdGVtZW50IHZpYSAnLCdcblx0ICAgIHZhciB0b3AgPSB0aGlzLnBvcFN0YWNrKHRydWUpO1xuXG5cdCAgICBpZiAodG9wIGluc3RhbmNlb2YgTGl0ZXJhbCkge1xuXHQgICAgICAvLyBMaXRlcmFscyBkbyBub3QgbmVlZCB0byBiZSBpbmxpbmVkXG5cdCAgICAgIHN0YWNrID0gW3RvcC52YWx1ZV07XG5cdCAgICAgIHByZWZpeCA9IFsnKCcsIHN0YWNrXTtcblx0ICAgICAgdXNlZExpdGVyYWwgPSB0cnVlO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgLy8gR2V0IG9yIGNyZWF0ZSB0aGUgY3VycmVudCBzdGFjayBuYW1lIGZvciB1c2UgYnkgdGhlIGlubGluZVxuXHQgICAgICBjcmVhdGVkU3RhY2sgPSB0cnVlO1xuXHQgICAgICB2YXIgX25hbWUgPSB0aGlzLmluY3JTdGFjaygpO1xuXG5cdCAgICAgIHByZWZpeCA9IFsnKCgnLCB0aGlzLnB1c2goX25hbWUpLCAnID0gJywgdG9wLCAnKSddO1xuXHQgICAgICBzdGFjayA9IHRoaXMudG9wU3RhY2soKTtcblx0ICAgIH1cblxuXHQgICAgdmFyIGl0ZW0gPSBjYWxsYmFjay5jYWxsKHRoaXMsIHN0YWNrKTtcblxuXHQgICAgaWYgKCF1c2VkTGl0ZXJhbCkge1xuXHQgICAgICB0aGlzLnBvcFN0YWNrKCk7XG5cdCAgICB9XG5cdCAgICBpZiAoY3JlYXRlZFN0YWNrKSB7XG5cdCAgICAgIHRoaXMuc3RhY2tTbG90LS07XG5cdCAgICB9XG5cdCAgICB0aGlzLnB1c2gocHJlZml4LmNvbmNhdChpdGVtLCAnKScpKTtcblx0ICB9LFxuXG5cdCAgaW5jclN0YWNrOiBmdW5jdGlvbiBpbmNyU3RhY2soKSB7XG5cdCAgICB0aGlzLnN0YWNrU2xvdCsrO1xuXHQgICAgaWYgKHRoaXMuc3RhY2tTbG90ID4gdGhpcy5zdGFja1ZhcnMubGVuZ3RoKSB7XG5cdCAgICAgIHRoaXMuc3RhY2tWYXJzLnB1c2goJ3N0YWNrJyArIHRoaXMuc3RhY2tTbG90KTtcblx0ICAgIH1cblx0ICAgIHJldHVybiB0aGlzLnRvcFN0YWNrTmFtZSgpO1xuXHQgIH0sXG5cdCAgdG9wU3RhY2tOYW1lOiBmdW5jdGlvbiB0b3BTdGFja05hbWUoKSB7XG5cdCAgICByZXR1cm4gJ3N0YWNrJyArIHRoaXMuc3RhY2tTbG90O1xuXHQgIH0sXG5cdCAgZmx1c2hJbmxpbmU6IGZ1bmN0aW9uIGZsdXNoSW5saW5lKCkge1xuXHQgICAgdmFyIGlubGluZVN0YWNrID0gdGhpcy5pbmxpbmVTdGFjaztcblx0ICAgIHRoaXMuaW5saW5lU3RhY2sgPSBbXTtcblx0ICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBpbmxpbmVTdGFjay5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHQgICAgICB2YXIgZW50cnkgPSBpbmxpbmVTdGFja1tpXTtcblx0ICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cdCAgICAgIGlmIChlbnRyeSBpbnN0YW5jZW9mIExpdGVyYWwpIHtcblx0ICAgICAgICB0aGlzLmNvbXBpbGVTdGFjay5wdXNoKGVudHJ5KTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB2YXIgc3RhY2sgPSB0aGlzLmluY3JTdGFjaygpO1xuXHQgICAgICAgIHRoaXMucHVzaFNvdXJjZShbc3RhY2ssICcgPSAnLCBlbnRyeSwgJzsnXSk7XG5cdCAgICAgICAgdGhpcy5jb21waWxlU3RhY2sucHVzaChzdGFjayk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LFxuXHQgIGlzSW5saW5lOiBmdW5jdGlvbiBpc0lubGluZSgpIHtcblx0ICAgIHJldHVybiB0aGlzLmlubGluZVN0YWNrLmxlbmd0aDtcblx0ICB9LFxuXG5cdCAgcG9wU3RhY2s6IGZ1bmN0aW9uIHBvcFN0YWNrKHdyYXBwZWQpIHtcblx0ICAgIHZhciBpbmxpbmUgPSB0aGlzLmlzSW5saW5lKCksXG5cdCAgICAgICAgaXRlbSA9IChpbmxpbmUgPyB0aGlzLmlubGluZVN0YWNrIDogdGhpcy5jb21waWxlU3RhY2spLnBvcCgpO1xuXG5cdCAgICBpZiAoIXdyYXBwZWQgJiYgaXRlbSBpbnN0YW5jZW9mIExpdGVyYWwpIHtcblx0ICAgICAgcmV0dXJuIGl0ZW0udmFsdWU7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBpZiAoIWlubGluZSkge1xuXHQgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cdCAgICAgICAgaWYgKCF0aGlzLnN0YWNrU2xvdCkge1xuXHQgICAgICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ0ludmFsaWQgc3RhY2sgcG9wJyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuc3RhY2tTbG90LS07XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGl0ZW07XG5cdCAgICB9XG5cdCAgfSxcblxuXHQgIHRvcFN0YWNrOiBmdW5jdGlvbiB0b3BTdGFjaygpIHtcblx0ICAgIHZhciBzdGFjayA9IHRoaXMuaXNJbmxpbmUoKSA/IHRoaXMuaW5saW5lU3RhY2sgOiB0aGlzLmNvbXBpbGVTdGFjayxcblx0ICAgICAgICBpdGVtID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG5cblx0ICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXHQgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBMaXRlcmFsKSB7XG5cdCAgICAgIHJldHVybiBpdGVtLnZhbHVlO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuIGl0ZW07XG5cdCAgICB9XG5cdCAgfSxcblxuXHQgIGNvbnRleHROYW1lOiBmdW5jdGlvbiBjb250ZXh0TmFtZShjb250ZXh0KSB7XG5cdCAgICBpZiAodGhpcy51c2VEZXB0aHMgJiYgY29udGV4dCkge1xuXHQgICAgICByZXR1cm4gJ2RlcHRoc1snICsgY29udGV4dCArICddJztcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiAnZGVwdGgnICsgY29udGV4dDtcblx0ICAgIH1cblx0ICB9LFxuXG5cdCAgcXVvdGVkU3RyaW5nOiBmdW5jdGlvbiBxdW90ZWRTdHJpbmcoc3RyKSB7XG5cdCAgICByZXR1cm4gdGhpcy5zb3VyY2UucXVvdGVkU3RyaW5nKHN0cik7XG5cdCAgfSxcblxuXHQgIG9iamVjdExpdGVyYWw6IGZ1bmN0aW9uIG9iamVjdExpdGVyYWwob2JqKSB7XG5cdCAgICByZXR1cm4gdGhpcy5zb3VyY2Uub2JqZWN0TGl0ZXJhbChvYmopO1xuXHQgIH0sXG5cblx0ICBhbGlhc2FibGU6IGZ1bmN0aW9uIGFsaWFzYWJsZShuYW1lKSB7XG5cdCAgICB2YXIgcmV0ID0gdGhpcy5hbGlhc2VzW25hbWVdO1xuXHQgICAgaWYgKHJldCkge1xuXHQgICAgICByZXQucmVmZXJlbmNlQ291bnQrKztcblx0ICAgICAgcmV0dXJuIHJldDtcblx0ICAgIH1cblxuXHQgICAgcmV0ID0gdGhpcy5hbGlhc2VzW25hbWVdID0gdGhpcy5zb3VyY2Uud3JhcChuYW1lKTtcblx0ICAgIHJldC5hbGlhc2FibGUgPSB0cnVlO1xuXHQgICAgcmV0LnJlZmVyZW5jZUNvdW50ID0gMTtcblxuXHQgICAgcmV0dXJuIHJldDtcblx0ICB9LFxuXG5cdCAgc2V0dXBIZWxwZXI6IGZ1bmN0aW9uIHNldHVwSGVscGVyKHBhcmFtU2l6ZSwgbmFtZSwgYmxvY2tIZWxwZXIpIHtcblx0ICAgIHZhciBwYXJhbXMgPSBbXSxcblx0ICAgICAgICBwYXJhbXNJbml0ID0gdGhpcy5zZXR1cEhlbHBlckFyZ3MobmFtZSwgcGFyYW1TaXplLCBwYXJhbXMsIGJsb2NrSGVscGVyKTtcblx0ICAgIHZhciBmb3VuZEhlbHBlciA9IHRoaXMubmFtZUxvb2t1cCgnaGVscGVycycsIG5hbWUsICdoZWxwZXInKSxcblx0ICAgICAgICBjYWxsQ29udGV4dCA9IHRoaXMuYWxpYXNhYmxlKHRoaXMuY29udGV4dE5hbWUoMCkgKyAnICE9IG51bGwgPyAnICsgdGhpcy5jb250ZXh0TmFtZSgwKSArICcgOiB7fScpO1xuXG5cdCAgICByZXR1cm4ge1xuXHQgICAgICBwYXJhbXM6IHBhcmFtcyxcblx0ICAgICAgcGFyYW1zSW5pdDogcGFyYW1zSW5pdCxcblx0ICAgICAgbmFtZTogZm91bmRIZWxwZXIsXG5cdCAgICAgIGNhbGxQYXJhbXM6IFtjYWxsQ29udGV4dF0uY29uY2F0KHBhcmFtcylcblx0ICAgIH07XG5cdCAgfSxcblxuXHQgIHNldHVwUGFyYW1zOiBmdW5jdGlvbiBzZXR1cFBhcmFtcyhoZWxwZXIsIHBhcmFtU2l6ZSwgcGFyYW1zKSB7XG5cdCAgICB2YXIgb3B0aW9ucyA9IHt9LFxuXHQgICAgICAgIGNvbnRleHRzID0gW10sXG5cdCAgICAgICAgdHlwZXMgPSBbXSxcblx0ICAgICAgICBpZHMgPSBbXSxcblx0ICAgICAgICBvYmplY3RBcmdzID0gIXBhcmFtcyxcblx0ICAgICAgICBwYXJhbSA9IHVuZGVmaW5lZDtcblxuXHQgICAgaWYgKG9iamVjdEFyZ3MpIHtcblx0ICAgICAgcGFyYW1zID0gW107XG5cdCAgICB9XG5cblx0ICAgIG9wdGlvbnMubmFtZSA9IHRoaXMucXVvdGVkU3RyaW5nKGhlbHBlcik7XG5cdCAgICBvcHRpb25zLmhhc2ggPSB0aGlzLnBvcFN0YWNrKCk7XG5cblx0ICAgIGlmICh0aGlzLnRyYWNrSWRzKSB7XG5cdCAgICAgIG9wdGlvbnMuaGFzaElkcyA9IHRoaXMucG9wU3RhY2soKTtcblx0ICAgIH1cblx0ICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuXHQgICAgICBvcHRpb25zLmhhc2hUeXBlcyA9IHRoaXMucG9wU3RhY2soKTtcblx0ICAgICAgb3B0aW9ucy5oYXNoQ29udGV4dHMgPSB0aGlzLnBvcFN0YWNrKCk7XG5cdCAgICB9XG5cblx0ICAgIHZhciBpbnZlcnNlID0gdGhpcy5wb3BTdGFjaygpLFxuXHQgICAgICAgIHByb2dyYW0gPSB0aGlzLnBvcFN0YWNrKCk7XG5cblx0ICAgIC8vIEF2b2lkIHNldHRpbmcgZm4gYW5kIGludmVyc2UgaWYgbmVpdGhlciBhcmUgc2V0LiBUaGlzIGFsbG93c1xuXHQgICAgLy8gaGVscGVycyB0byBkbyBhIGNoZWNrIGZvciBgaWYgKG9wdGlvbnMuZm4pYFxuXHQgICAgaWYgKHByb2dyYW0gfHwgaW52ZXJzZSkge1xuXHQgICAgICBvcHRpb25zLmZuID0gcHJvZ3JhbSB8fCAnY29udGFpbmVyLm5vb3AnO1xuXHQgICAgICBvcHRpb25zLmludmVyc2UgPSBpbnZlcnNlIHx8ICdjb250YWluZXIubm9vcCc7XG5cdCAgICB9XG5cblx0ICAgIC8vIFRoZSBwYXJhbWV0ZXJzIGdvIG9uIHRvIHRoZSBzdGFjayBpbiBvcmRlciAobWFraW5nIHN1cmUgdGhhdCB0aGV5IGFyZSBldmFsdWF0ZWQgaW4gb3JkZXIpXG5cdCAgICAvLyBzbyB3ZSBuZWVkIHRvIHBvcCB0aGVtIG9mZiB0aGUgc3RhY2sgaW4gcmV2ZXJzZSBvcmRlclxuXHQgICAgdmFyIGkgPSBwYXJhbVNpemU7XG5cdCAgICB3aGlsZSAoaS0tKSB7XG5cdCAgICAgIHBhcmFtID0gdGhpcy5wb3BTdGFjaygpO1xuXHQgICAgICBwYXJhbXNbaV0gPSBwYXJhbTtcblxuXHQgICAgICBpZiAodGhpcy50cmFja0lkcykge1xuXHQgICAgICAgIGlkc1tpXSA9IHRoaXMucG9wU3RhY2soKTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcblx0ICAgICAgICB0eXBlc1tpXSA9IHRoaXMucG9wU3RhY2soKTtcblx0ICAgICAgICBjb250ZXh0c1tpXSA9IHRoaXMucG9wU3RhY2soKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICBpZiAob2JqZWN0QXJncykge1xuXHQgICAgICBvcHRpb25zLmFyZ3MgPSB0aGlzLnNvdXJjZS5nZW5lcmF0ZUFycmF5KHBhcmFtcyk7XG5cdCAgICB9XG5cblx0ICAgIGlmICh0aGlzLnRyYWNrSWRzKSB7XG5cdCAgICAgIG9wdGlvbnMuaWRzID0gdGhpcy5zb3VyY2UuZ2VuZXJhdGVBcnJheShpZHMpO1xuXHQgICAgfVxuXHQgICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XG5cdCAgICAgIG9wdGlvbnMudHlwZXMgPSB0aGlzLnNvdXJjZS5nZW5lcmF0ZUFycmF5KHR5cGVzKTtcblx0ICAgICAgb3B0aW9ucy5jb250ZXh0cyA9IHRoaXMuc291cmNlLmdlbmVyYXRlQXJyYXkoY29udGV4dHMpO1xuXHQgICAgfVxuXG5cdCAgICBpZiAodGhpcy5vcHRpb25zLmRhdGEpIHtcblx0ICAgICAgb3B0aW9ucy5kYXRhID0gJ2RhdGEnO1xuXHQgICAgfVxuXHQgICAgaWYgKHRoaXMudXNlQmxvY2tQYXJhbXMpIHtcblx0ICAgICAgb3B0aW9ucy5ibG9ja1BhcmFtcyA9ICdibG9ja1BhcmFtcyc7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gb3B0aW9ucztcblx0ICB9LFxuXG5cdCAgc2V0dXBIZWxwZXJBcmdzOiBmdW5jdGlvbiBzZXR1cEhlbHBlckFyZ3MoaGVscGVyLCBwYXJhbVNpemUsIHBhcmFtcywgdXNlUmVnaXN0ZXIpIHtcblx0ICAgIHZhciBvcHRpb25zID0gdGhpcy5zZXR1cFBhcmFtcyhoZWxwZXIsIHBhcmFtU2l6ZSwgcGFyYW1zKTtcblx0ICAgIG9wdGlvbnMgPSB0aGlzLm9iamVjdExpdGVyYWwob3B0aW9ucyk7XG5cdCAgICBpZiAodXNlUmVnaXN0ZXIpIHtcblx0ICAgICAgdGhpcy51c2VSZWdpc3Rlcignb3B0aW9ucycpO1xuXHQgICAgICBwYXJhbXMucHVzaCgnb3B0aW9ucycpO1xuXHQgICAgICByZXR1cm4gWydvcHRpb25zPScsIG9wdGlvbnNdO1xuXHQgICAgfSBlbHNlIGlmIChwYXJhbXMpIHtcblx0ICAgICAgcGFyYW1zLnB1c2gob3B0aW9ucyk7XG5cdCAgICAgIHJldHVybiAnJztcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiBvcHRpb25zO1xuXHQgICAgfVxuXHQgIH1cblx0fTtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgIHZhciByZXNlcnZlZFdvcmRzID0gKCdicmVhayBlbHNlIG5ldyB2YXInICsgJyBjYXNlIGZpbmFsbHkgcmV0dXJuIHZvaWQnICsgJyBjYXRjaCBmb3Igc3dpdGNoIHdoaWxlJyArICcgY29udGludWUgZnVuY3Rpb24gdGhpcyB3aXRoJyArICcgZGVmYXVsdCBpZiB0aHJvdycgKyAnIGRlbGV0ZSBpbiB0cnknICsgJyBkbyBpbnN0YW5jZW9mIHR5cGVvZicgKyAnIGFic3RyYWN0IGVudW0gaW50IHNob3J0JyArICcgYm9vbGVhbiBleHBvcnQgaW50ZXJmYWNlIHN0YXRpYycgKyAnIGJ5dGUgZXh0ZW5kcyBsb25nIHN1cGVyJyArICcgY2hhciBmaW5hbCBuYXRpdmUgc3luY2hyb25pemVkJyArICcgY2xhc3MgZmxvYXQgcGFja2FnZSB0aHJvd3MnICsgJyBjb25zdCBnb3RvIHByaXZhdGUgdHJhbnNpZW50JyArICcgZGVidWdnZXIgaW1wbGVtZW50cyBwcm90ZWN0ZWQgdm9sYXRpbGUnICsgJyBkb3VibGUgaW1wb3J0IHB1YmxpYyBsZXQgeWllbGQgYXdhaXQnICsgJyBudWxsIHRydWUgZmFsc2UnKS5zcGxpdCgnICcpO1xuXG5cdCAgdmFyIGNvbXBpbGVyV29yZHMgPSBKYXZhU2NyaXB0Q29tcGlsZXIuUkVTRVJWRURfV09SRFMgPSB7fTtcblxuXHQgIGZvciAodmFyIGkgPSAwLCBsID0gcmVzZXJ2ZWRXb3Jkcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0ICAgIGNvbXBpbGVyV29yZHNbcmVzZXJ2ZWRXb3Jkc1tpXV0gPSB0cnVlO1xuXHQgIH1cblx0fSkoKTtcblxuXHRKYXZhU2NyaXB0Q29tcGlsZXIuaXNWYWxpZEphdmFTY3JpcHRWYXJpYWJsZU5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuXHQgIHJldHVybiAhSmF2YVNjcmlwdENvbXBpbGVyLlJFU0VSVkVEX1dPUkRTW25hbWVdICYmIC9eW2EtekEtWl8kXVswLTlhLXpBLVpfJF0qJC8udGVzdChuYW1lKTtcblx0fTtcblxuXHRmdW5jdGlvbiBzdHJpY3RMb29rdXAocmVxdWlyZVRlcm1pbmFsLCBjb21waWxlciwgcGFydHMsIHR5cGUpIHtcblx0ICB2YXIgc3RhY2sgPSBjb21waWxlci5wb3BTdGFjaygpLFxuXHQgICAgICBpID0gMCxcblx0ICAgICAgbGVuID0gcGFydHMubGVuZ3RoO1xuXHQgIGlmIChyZXF1aXJlVGVybWluYWwpIHtcblx0ICAgIGxlbi0tO1xuXHQgIH1cblxuXHQgIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgIHN0YWNrID0gY29tcGlsZXIubmFtZUxvb2t1cChzdGFjaywgcGFydHNbaV0sIHR5cGUpO1xuXHQgIH1cblxuXHQgIGlmIChyZXF1aXJlVGVybWluYWwpIHtcblx0ICAgIHJldHVybiBbY29tcGlsZXIuYWxpYXNhYmxlKCdjb250YWluZXIuc3RyaWN0JyksICcoJywgc3RhY2ssICcsICcsIGNvbXBpbGVyLnF1b3RlZFN0cmluZyhwYXJ0c1tpXSksICcpJ107XG5cdCAgfSBlbHNlIHtcblx0ICAgIHJldHVybiBzdGFjaztcblx0ICB9XG5cdH1cblxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBKYXZhU2NyaXB0Q29tcGlsZXI7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMjkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIGdsb2JhbCBkZWZpbmUgKi9cblx0J3VzZSBzdHJpY3QnO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cblx0dmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cblx0dmFyIFNvdXJjZU5vZGUgPSB1bmRlZmluZWQ7XG5cblx0dHJ5IHtcblx0ICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHQgIGlmIChmYWxzZSkge1xuXHQgICAgLy8gV2UgZG9uJ3Qgc3VwcG9ydCB0aGlzIGluIEFNRCBlbnZpcm9ubWVudHMuIEZvciB0aGVzZSBlbnZpcm9ubWVudHMsIHdlIGFzdXNtZSB0aGF0XG5cdCAgICAvLyB0aGV5IGFyZSBydW5uaW5nIG9uIHRoZSBicm93c2VyIGFuZCB0aHVzIGhhdmUgbm8gbmVlZCBmb3IgdGhlIHNvdXJjZS1tYXAgbGlicmFyeS5cblx0ICAgIHZhciBTb3VyY2VNYXAgPSByZXF1aXJlKCdzb3VyY2UtbWFwJyk7XG5cdCAgICBTb3VyY2VOb2RlID0gU291cmNlTWFwLlNvdXJjZU5vZGU7XG5cdCAgfVxuXHR9IGNhdGNoIChlcnIpIHt9XG5cdC8qIE5PUCAqL1xuXG5cdC8qIGlzdGFuYnVsIGlnbm9yZSBpZjogdGVzdGVkIGJ1dCBub3QgY292ZXJlZCBpbiBpc3RhbmJ1bCBkdWUgdG8gZGlzdCBidWlsZCAgKi9cblx0aWYgKCFTb3VyY2VOb2RlKSB7XG5cdCAgU291cmNlTm9kZSA9IGZ1bmN0aW9uIChsaW5lLCBjb2x1bW4sIHNyY0ZpbGUsIGNodW5rcykge1xuXHQgICAgdGhpcy5zcmMgPSAnJztcblx0ICAgIGlmIChjaHVua3MpIHtcblx0ICAgICAgdGhpcy5hZGQoY2h1bmtzKTtcblx0ICAgIH1cblx0ICB9O1xuXHQgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cdCAgU291cmNlTm9kZS5wcm90b3R5cGUgPSB7XG5cdCAgICBhZGQ6IGZ1bmN0aW9uIGFkZChjaHVua3MpIHtcblx0ICAgICAgaWYgKF91dGlscy5pc0FycmF5KGNodW5rcykpIHtcblx0ICAgICAgICBjaHVua3MgPSBjaHVua3Muam9pbignJyk7XG5cdCAgICAgIH1cblx0ICAgICAgdGhpcy5zcmMgKz0gY2h1bmtzO1xuXHQgICAgfSxcblx0ICAgIHByZXBlbmQ6IGZ1bmN0aW9uIHByZXBlbmQoY2h1bmtzKSB7XG5cdCAgICAgIGlmIChfdXRpbHMuaXNBcnJheShjaHVua3MpKSB7XG5cdCAgICAgICAgY2h1bmtzID0gY2h1bmtzLmpvaW4oJycpO1xuXHQgICAgICB9XG5cdCAgICAgIHRoaXMuc3JjID0gY2h1bmtzICsgdGhpcy5zcmM7XG5cdCAgICB9LFxuXHQgICAgdG9TdHJpbmdXaXRoU291cmNlTWFwOiBmdW5jdGlvbiB0b1N0cmluZ1dpdGhTb3VyY2VNYXAoKSB7XG5cdCAgICAgIHJldHVybiB7IGNvZGU6IHRoaXMudG9TdHJpbmcoKSB9O1xuXHQgICAgfSxcblx0ICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuc3JjO1xuXHQgICAgfVxuXHQgIH07XG5cdH1cblxuXHRmdW5jdGlvbiBjYXN0Q2h1bmsoY2h1bmssIGNvZGVHZW4sIGxvYykge1xuXHQgIGlmIChfdXRpbHMuaXNBcnJheShjaHVuaykpIHtcblx0ICAgIHZhciByZXQgPSBbXTtcblxuXHQgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNodW5rLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICAgIHJldC5wdXNoKGNvZGVHZW4ud3JhcChjaHVua1tpXSwgbG9jKSk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcmV0O1xuXHQgIH0gZWxzZSBpZiAodHlwZW9mIGNodW5rID09PSAnYm9vbGVhbicgfHwgdHlwZW9mIGNodW5rID09PSAnbnVtYmVyJykge1xuXHQgICAgLy8gSGFuZGxlIHByaW1pdGl2ZXMgdGhhdCB0aGUgU291cmNlTm9kZSB3aWxsIHRocm93IHVwIG9uXG5cdCAgICByZXR1cm4gY2h1bmsgKyAnJztcblx0ICB9XG5cdCAgcmV0dXJuIGNodW5rO1xuXHR9XG5cblx0ZnVuY3Rpb24gQ29kZUdlbihzcmNGaWxlKSB7XG5cdCAgdGhpcy5zcmNGaWxlID0gc3JjRmlsZTtcblx0ICB0aGlzLnNvdXJjZSA9IFtdO1xuXHR9XG5cblx0Q29kZUdlbi5wcm90b3R5cGUgPSB7XG5cdCAgaXNFbXB0eTogZnVuY3Rpb24gaXNFbXB0eSgpIHtcblx0ICAgIHJldHVybiAhdGhpcy5zb3VyY2UubGVuZ3RoO1xuXHQgIH0sXG5cdCAgcHJlcGVuZDogZnVuY3Rpb24gcHJlcGVuZChzb3VyY2UsIGxvYykge1xuXHQgICAgdGhpcy5zb3VyY2UudW5zaGlmdCh0aGlzLndyYXAoc291cmNlLCBsb2MpKTtcblx0ICB9LFxuXHQgIHB1c2g6IGZ1bmN0aW9uIHB1c2goc291cmNlLCBsb2MpIHtcblx0ICAgIHRoaXMuc291cmNlLnB1c2godGhpcy53cmFwKHNvdXJjZSwgbG9jKSk7XG5cdCAgfSxcblxuXHQgIG1lcmdlOiBmdW5jdGlvbiBtZXJnZSgpIHtcblx0ICAgIHZhciBzb3VyY2UgPSB0aGlzLmVtcHR5KCk7XG5cdCAgICB0aGlzLmVhY2goZnVuY3Rpb24gKGxpbmUpIHtcblx0ICAgICAgc291cmNlLmFkZChbJyAgJywgbGluZSwgJ1xcbiddKTtcblx0ICAgIH0pO1xuXHQgICAgcmV0dXJuIHNvdXJjZTtcblx0ICB9LFxuXG5cdCAgZWFjaDogZnVuY3Rpb24gZWFjaChpdGVyKSB7XG5cdCAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5zb3VyY2UubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgICAgaXRlcih0aGlzLnNvdXJjZVtpXSk7XG5cdCAgICB9XG5cdCAgfSxcblxuXHQgIGVtcHR5OiBmdW5jdGlvbiBlbXB0eSgpIHtcblx0ICAgIHZhciBsb2MgPSB0aGlzLmN1cnJlbnRMb2NhdGlvbiB8fCB7IHN0YXJ0OiB7fSB9O1xuXHQgICAgcmV0dXJuIG5ldyBTb3VyY2VOb2RlKGxvYy5zdGFydC5saW5lLCBsb2Muc3RhcnQuY29sdW1uLCB0aGlzLnNyY0ZpbGUpO1xuXHQgIH0sXG5cdCAgd3JhcDogZnVuY3Rpb24gd3JhcChjaHVuaykge1xuXHQgICAgdmFyIGxvYyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IHRoaXMuY3VycmVudExvY2F0aW9uIHx8IHsgc3RhcnQ6IHt9IH0gOiBhcmd1bWVudHNbMV07XG5cblx0ICAgIGlmIChjaHVuayBpbnN0YW5jZW9mIFNvdXJjZU5vZGUpIHtcblx0ICAgICAgcmV0dXJuIGNodW5rO1xuXHQgICAgfVxuXG5cdCAgICBjaHVuayA9IGNhc3RDaHVuayhjaHVuaywgdGhpcywgbG9jKTtcblxuXHQgICAgcmV0dXJuIG5ldyBTb3VyY2VOb2RlKGxvYy5zdGFydC5saW5lLCBsb2Muc3RhcnQuY29sdW1uLCB0aGlzLnNyY0ZpbGUsIGNodW5rKTtcblx0ICB9LFxuXG5cdCAgZnVuY3Rpb25DYWxsOiBmdW5jdGlvbiBmdW5jdGlvbkNhbGwoZm4sIHR5cGUsIHBhcmFtcykge1xuXHQgICAgcGFyYW1zID0gdGhpcy5nZW5lcmF0ZUxpc3QocGFyYW1zKTtcblx0ICAgIHJldHVybiB0aGlzLndyYXAoW2ZuLCB0eXBlID8gJy4nICsgdHlwZSArICcoJyA6ICcoJywgcGFyYW1zLCAnKSddKTtcblx0ICB9LFxuXG5cdCAgcXVvdGVkU3RyaW5nOiBmdW5jdGlvbiBxdW90ZWRTdHJpbmcoc3RyKSB7XG5cdCAgICByZXR1cm4gJ1wiJyArIChzdHIgKyAnJykucmVwbGFjZSgvXFxcXC9nLCAnXFxcXFxcXFwnKS5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csICdcXFxcbicpLnJlcGxhY2UoL1xcci9nLCAnXFxcXHInKS5yZXBsYWNlKC9cXHUyMDI4L2csICdcXFxcdTIwMjgnKSAvLyBQZXIgRWNtYS0yNjIgNy4zICsgNy44LjRcblx0ICAgIC5yZXBsYWNlKC9cXHUyMDI5L2csICdcXFxcdTIwMjknKSArICdcIic7XG5cdCAgfSxcblxuXHQgIG9iamVjdExpdGVyYWw6IGZ1bmN0aW9uIG9iamVjdExpdGVyYWwob2JqKSB7XG5cdCAgICB2YXIgcGFpcnMgPSBbXTtcblxuXHQgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuXHQgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0ICAgICAgICB2YXIgdmFsdWUgPSBjYXN0Q2h1bmsob2JqW2tleV0sIHRoaXMpO1xuXHQgICAgICAgIGlmICh2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICAgIHBhaXJzLnB1c2goW3RoaXMucXVvdGVkU3RyaW5nKGtleSksICc6JywgdmFsdWVdKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgdmFyIHJldCA9IHRoaXMuZ2VuZXJhdGVMaXN0KHBhaXJzKTtcblx0ICAgIHJldC5wcmVwZW5kKCd7Jyk7XG5cdCAgICByZXQuYWRkKCd9Jyk7XG5cdCAgICByZXR1cm4gcmV0O1xuXHQgIH0sXG5cblx0ICBnZW5lcmF0ZUxpc3Q6IGZ1bmN0aW9uIGdlbmVyYXRlTGlzdChlbnRyaWVzKSB7XG5cdCAgICB2YXIgcmV0ID0gdGhpcy5lbXB0eSgpO1xuXG5cdCAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZW50cmllcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHQgICAgICBpZiAoaSkge1xuXHQgICAgICAgIHJldC5hZGQoJywnKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldC5hZGQoY2FzdENodW5rKGVudHJpZXNbaV0sIHRoaXMpKTtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHJldDtcblx0ICB9LFxuXG5cdCAgZ2VuZXJhdGVBcnJheTogZnVuY3Rpb24gZ2VuZXJhdGVBcnJheShlbnRyaWVzKSB7XG5cdCAgICB2YXIgcmV0ID0gdGhpcy5nZW5lcmF0ZUxpc3QoZW50cmllcyk7XG5cdCAgICByZXQucHJlcGVuZCgnWycpO1xuXHQgICAgcmV0LmFkZCgnXScpO1xuXG5cdCAgICByZXR1cm4gcmV0O1xuXHQgIH1cblx0fTtcblxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBDb2RlR2VuO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfVxuLyoqKioqKi8gXSlcbn0pO1xuO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9oYW5kbGViYXJzL2hhbmRsZWJhcnMuanNcbi8vIG1vZHVsZSBpZCA9IDExM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcblxuLyo7XG5cdEBtb2R1bGUtbGljZW5zZTpcblx0XHRUaGUgTUlUIExpY2Vuc2UgKE1JVClcblx0XHRAbWl0LWxpY2Vuc2VcblxuXHRcdENvcHlyaWdodCAoQGMpIDIwMTYgUmljaGV2ZSBTaW9kaW5hIEJlYmVkb3Jcblx0XHRAZW1haWw6IHJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cblxuXHRcdFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcblx0XHRvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5cdFx0aW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuXHRcdHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcblx0XHRjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcblx0XHRmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5cdFx0VGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5cdFx0Y29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuXHRcdFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcblx0XHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0XHRGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcblx0XHRBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5cdFx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0XHRPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuXHRcdFNPRlRXQVJFLlxuXHRAZW5kLW1vZHVsZS1saWNlbnNlXG5cblx0QG1vZHVsZS1jb25maWd1cmF0aW9uOlxuXHRcdHtcblx0XHRcdFwicGFja2FnZVwiOiBcInJlYWxpZ25cIixcblx0XHRcdFwicGF0aFwiOiBcInJlYWxpZ24vcmVhbGlnbi5qc1wiLFxuXHRcdFx0XCJmaWxlXCI6IFwicmVhbGlnbi5qc1wiLFxuXHRcdFx0XCJtb2R1bGVcIjogXCJyZWFsaWduXCIsXG5cdFx0XHRcImF1dGhvclwiOiBcIlJpY2hldmUgUy4gQmViZWRvclwiLFxuXHRcdFx0XCJjb250cmlidXRvcnNcIjogW1xuXHRcdFx0XHRcIkpvaG4gTGVub24gTWFnaGFub3kgPGpvaG5sZW5vbm1hZ2hhbm95QGdtYWlsLmNvbT5cIlxuXHRcdFx0XSxcblx0XHRcdFwiZU1haWxcIjogXCJyaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXCIsXG5cdFx0XHRcInJlcG9zaXRvcnlcIjogXCJodHRwczovL2dpdGh1Yi5jb20vdm9sa292YXN5c3RlbXMvcmVhbGlnbi5naXRcIixcblx0XHRcdFwidGVzdFwiOiBcInJlYWxpZ24tdGVzdC5qc1wiLFxuXHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdH1cblx0QGVuZC1tb2R1bGUtY29uZmlndXJhdGlvblxuXG5cdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRSZS1hbGlnbiB3aGl0ZXNwYWNlcyBhbmQgdGFicyBpbiBhIG11bHRpLWxpbmUgc3RyaW5nLlxuXG5cdFx0VGhpcyB3aWxsIHJlbW92ZSBsaW5lcyB3aXRob3V0IHNpZ25pZmljYW50IGNoYXJhY3RlcnMuXG5cdEBlbmQtbW9kdWxlLWRvY3VtZW50YXRpb25cblxuXHRAaW5jbHVkZTpcblx0XHR7XG5cdFx0XHRcImZhbHp5XCI6IFwiZmFsenlcIixcblx0XHRcdFwiaGFyZGVuXCI6IFwiaGFyZGVuXCIsXG5cdFx0XHRcInByb3R5cGVcIjogXCJwcm90eXBlXCIsXG5cdFx0XHRcInRydWx5XCI6IFwidHJ1bHlcIlxuXHRcdH1cblx0QGVuZC1pbmNsdWRlXG4qL1xuXG52YXIgZmFsenkgPSByZXF1aXJlKFwiZmFsenlcIik7XG52YXIgaGFyZGVuID0gcmVxdWlyZShcImhhcmRlblwiKTtcbnZhciBwcm90eXBlID0gcmVxdWlyZShcInByb3R5cGVcIik7XG52YXIgdHJ1bHkgPSByZXF1aXJlKFwidHJ1bHlcIik7XG5cbnZhciByZWFsaWduID0gZnVuY3Rpb24gcmVhbGlnbihzdHJpbmcpIHtcblx0Lyo7XG4gXHRAbWV0YS1jb25maWd1cmF0aW9uOlxuIFx0XHR7XG4gXHRcdFx0XCJzdHJpbmc6cmVxdWlyZWRcIjogXCJzdHJpbmdcIlxuIFx0XHR9XG4gXHRAZW5kLW1ldGEtY29uZmlndXJhdGlvblxuICovXG5cblx0aWYgKCFwcm90eXBlKHN0cmluZywgU1RSSU5HKSkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcImludmFsaWQgc3RyaW5nXCIpO1xuXHR9XG5cblx0aWYgKGZhbHp5KHN0cmluZykpIHtcblx0XHRyZXR1cm4gc3RyaW5nO1xuXHR9XG5cblx0c3RyaW5nID0gc3RyaW5nLnNwbGl0KHJlYWxpZ24uTkVXTElORV9QQVRURVJOKS5tYXAoZnVuY3Rpb24gKGxpbmUpIHtcblx0XHRyZXR1cm4gbGluZS5yZXBsYWNlKHJlYWxpZ24uU1BBQ0VfTElORV9QQVRURVJOLCBcIlwiKTtcblx0fSkuZmlsdGVyKHRydWx5KS5qb2luKFwiXFxuXCIpLnJlcGxhY2UocmVhbGlnbi5UUkFJTElOR19TUEFDRV9QQVRURVJOLCBcIlwiKS5zcGxpdChyZWFsaWduLk5FV0xJTkVfUEFUVEVSTik7XG5cblx0dmFyIHNwYWNlID0gKHN0cmluZ1swXS5tYXRjaChyZWFsaWduLlNQQUNFX1BBVFRFUk4pIHx8IFtdKVswXSB8fCBcIlwiO1xuXHR2YXIgc3BhY2VQYXR0ZXJuID0gbmV3IFJlZ0V4cChcIl5cIiArIHNwYWNlKTtcblxuXHRyZXR1cm4gc3RyaW5nLm1hcChmdW5jdGlvbiAobGluZSkge1xuXHRcdHJldHVybiBsaW5lLnJlcGxhY2Uoc3BhY2VQYXR0ZXJuLCBcIlwiKTtcblx0fSkuam9pbihcIlxcblwiKTtcbn07XG5cbmhhcmRlbi5iaW5kKHJlYWxpZ24pKFwiTkVXTElORV9QQVRURVJOXCIsIC9cXG4vKS5oYXJkZW4oXCJTUEFDRV9QQVRURVJOXCIsIC9cXHN7Mix9L2cpLmhhcmRlbihcIlNQQUNFX0xJTkVfUEFUVEVSTlwiLCAvXlxccyskLykuaGFyZGVuKFwiVFJBSUxJTkdfU1BBQ0VfUEFUVEVSTlwiLCAvXltcXG5cXHJdK3xbXFxuXFxyXFxzXSskL2dtKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZWFsaWduO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL3JlYWxpZ24vcmVhbGlnbi5zdXBwb3J0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qO1xuXHRAbW9kdWxlLWxpY2Vuc2U6XG5cdFx0VGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cdFx0QG1pdC1saWNlbnNlXG5cblx0XHRDb3B5cmlnaHQgKEBjKSAyMDE2IFJpY2hldmUgU2lvZGluYSBCZWJlZG9yXG5cdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cblx0XHRQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5cdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0XHR0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5cdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuXHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdFx0RklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5cdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdFx0T1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblx0XHRTT0ZUV0FSRS5cblx0QGVuZC1tb2R1bGUtbGljZW5zZVxuXG5cdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHR7XG5cdFx0XHRcInBhY2thZ2VcIjogXCJsbGFtYWxpemVcIixcblx0XHRcdFwiZmlsZVwiOiBcImxsYW1hbGl6ZS5qc1wiLFxuXHRcdFx0XCJwYXRoXCI6IFwibGxhbWFsaXplL2xsYW1hbGl6ZS5qc1wiLFxuXHRcdFx0XCJtb2R1bGVcIjogXCJsbGFtYWxpemVcIixcblx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcImNvbnRyaWJ1dG9yc1wiOiBbXG5cdFx0XHRcdFwiSm9obiBMZW5vbiBNYWdoYW5veSA8am9obmxlbm9ubWFnaGFub3lAZ21haWwuY29tPlwiXG5cdFx0XHRdLFxuXHRcdFx0XCJlTWFpbFwiOiBcInJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cIixcblx0XHRcdFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b2xrb3Zhc3lzdGVtcy9sbGFtYWxpemUuZ2l0XCIsXG5cdFx0XHRcInRlc3RcIjogXCJsbGFtYWxpemUtdGVzdC5qc1wiLFxuXHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdH1cblx0QGVuZC1tb2R1bGUtY29uZmlndXJhdGlvblxuXHRcdFRyYW5zZm9ybSBhbnkgaHVtYW4gcmVhZGFibGUgYWxwaGFudW1lcmljIHN0cmluZyBkaXZpZGVkIGJ5IGNlcnRhaW5cblx0XHRjaGFyYWN0ZXJzIGludG8gY2FtZWwgZm9ybS4gSSBuYW1lZCBpdCBsbGFtYWxpemUgYmVjYXVzZSBjYW1lbGl6ZSBpc1xuXHRcdHRvbyBtYWluc3RyZWFtLiBBbmQgbGxhbWFzIGFyZSB3YXkgYmV0dGVyXG5cdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblxuXHRAZW5kLW1vZHVsZS1kb2N1bWVudGF0aW9uXG5cblx0QGluY2x1ZGU6XG5cdFx0e1xuXHRcdFx0XCJmYWx6eVwiOiBcImZhbHp5XCIsXG5cdFx0XHRcImhhcmRlblwiOiBcImhhcmRlblwiLFxuXHRcdFx0XCJwcm90eXBlXCI6IFwicHJvdHlwZVwiLFxuXHRcdFx0XCJ0aXRsZWxpemVcIjogXCJ0aXRsZWxpemVcIlxuXHRcdH1cblx0QGVuZC1pbmNsdWRlXG4qL1xuXG52YXIgZmFsenkgPSByZXF1aXJlKFwiZmFsenlcIik7XG52YXIgaGFyZGVuID0gcmVxdWlyZShcImhhcmRlblwiKTtcbnZhciBwcm90eXBlID0gcmVxdWlyZShcInByb3R5cGVcIik7XG52YXIgdGl0bGVsaXplID0gcmVxdWlyZShcInRpdGxlbGl6ZVwiKTtcblxudmFyIGxsYW1hbGl6ZSA9IGZ1bmN0aW9uIGxsYW1hbGl6ZSh0ZXh0LCBmb3JtYWwpIHtcblx0Lyo7XG4gXHRAbWV0YS1jb25maWd1cmF0aW9uOlxuIFx0XHR7XG4gXHRcdFx0XCJ0ZXh0OnJlcXVpcmVkXCI6IFwic3RyaW5nXCIsXG4gXHRcdFx0XCJmb3JtYWw6b3B0aW9uYWxcIjogYm9vbGVhblxuIFx0XHR9XG4gXHRAZW5kLW1ldGEtY29uZmlndXJhdGlvblxuICovXG5cblx0aWYgKGZhbHp5KHRleHQpIHx8ICFwcm90eXBlKHRleHQsIFNUUklORykpIHtcblx0XHRyZXR1cm4gdGV4dDtcblx0fVxuXG5cdHRleHQgPSB0aXRsZWxpemUodGV4dCkucmVwbGFjZShsbGFtYWxpemUuRFJPUF9QQVRURVJOLCBcIlwiKS5yZXBsYWNlKGxsYW1hbGl6ZS5TUEFDRV9QQVRURVJOLCBcIlwiKTtcblxuXHRpZiAoZm9ybWFsKSB7XG5cdFx0cmV0dXJuIHRleHQ7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIHRleHQucmVwbGFjZShsbGFtYWxpemUuSU5GT1JNQUxfUEFUVEVSTiwgZnVuY3Rpb24gb25SZXBsYWNlKG1hdGNoKSB7XG5cdFx0XHRyZXR1cm4gbWF0Y2gudG9Mb3dlckNhc2UoKTtcblx0XHR9KTtcblx0fVxufTtcblxuaGFyZGVuLmJpbmQobGxhbWFsaXplKShcIkRST1BfUEFUVEVSTlwiLCAvXlswLTldKy8pO1xuXG5oYXJkZW4uYmluZChsbGFtYWxpemUpKFwiU1BBQ0VfUEFUVEVSTlwiLCAvXFxzKy9nKTtcblxuaGFyZGVuLmJpbmQobGxhbWFsaXplKShcIklORk9STUFMX1BBVFRFUk5cIiwgL15bQS1aXS8pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxsYW1hbGl6ZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9sbGFtYWxpemUvbGxhbWFsaXplLnN1cHBvcnQuanNcbi8vIG1vZHVsZSBpZCA9IDExNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcblxuLyo7XG5cdEBtb2R1bGUtbGljZW5zZTpcblx0XHRUaGUgTUlUIExpY2Vuc2UgKE1JVClcblx0XHRAbWl0LWxpY2Vuc2VcblxuXHRcdENvcHlyaWdodCAoQGMpIDIwMTYgUmljaGV2ZSBTaW9kaW5hIEJlYmVkb3Jcblx0XHRAZW1haWw6IHJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cblxuXHRcdFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcblx0XHRvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5cdFx0aW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuXHRcdHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcblx0XHRjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcblx0XHRmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5cdFx0VGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5cdFx0Y29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuXHRcdFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcblx0XHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0XHRGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcblx0XHRBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5cdFx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0XHRPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuXHRcdFNPRlRXQVJFLlxuXHRAZW5kLW1vZHVsZS1saWNlbnNlXG5cblx0QG1vZHVsZS1jb25maWd1cmF0aW9uOlxuXHRcdHtcblx0XHRcdFwicGFja2FnZVwiOiBcInRpdGxlbGl6ZVwiLFxuXHRcdFx0XCJwYXRoXCI6IFwidGl0bGVsaXplL3RpdGxlbGl6ZS5qc1wiLFxuXHRcdFx0XCJmaWxlXCI6IFwidGl0bGVsaXplLmpzXCIsXG5cdFx0XHRcIm1vZHVsZVwiOiBcInRpdGxlbGl6ZVwiLFxuXHRcdFx0XCJhdXRob3JcIjogXCJSaWNoZXZlIFMuIEJlYmVkb3JcIixcblx0XHRcdFwiY29udHJpYnV0b3JzXCI6IFtcblx0XHRcdFx0XCJKb2huIExlbm9uIE1hZ2hhbm95IDxqb2hubGVub25tYWdoYW5veUBnbWFpbC5jb20+XCJcblx0XHRcdF0sXG5cdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZvbGtvdmFzeXN0ZW1zL3RpdGxlbGl6ZS5naXRcIixcblx0XHRcdFwidGVzdFwiOiBcInRpdGxlbGl6ZS10ZXN0LmpzXCIsXG5cdFx0XHRcImdsb2JhbFwiOiB0cnVlXG5cdFx0fVxuXHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cblx0QG1vZHVsZS1kb2N1bWVudGF0aW9uOlxuXHRcdFRyYW5zZm9ybSBhbnkgaHVtYW4gcmVhZGFibGUgYWxwaGFudW1lcmljIHN0cmluZyBkaXZpZGVkIGJ5IGNlcnRhaW5cblx0XHRjaGFyYWN0ZXJzIGludG8gc3BhY2Ugc2VwYXJhdGVkIGZpcnN0IGxldHRlciB1cHBlcmNhc2UgZm9ybS5cblx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXG5cdEBpbmNsdWRlOlxuXHRcdHtcblx0XHRcdFwiZGlzZG9cIjogXCJkaXNkb1wiLFxuXHRcdFx0XCJoYXJkZW5cIjogXCJoYXJkZW5cIixcblx0XHRcdFwiZmFsenlcIjogXCJmYWx6eVwiLFxuXHRcdFx0XCJwcm90eXBlXCI6IFwicHJvdHlwZVwiXG5cdFx0fVxuXHRAZW5kLWluY2x1ZGVcbiovXG5cbnZhciBkaXNkbyA9IHJlcXVpcmUoXCJkaXNkb1wiKTtcbnZhciBmYWx6eSA9IHJlcXVpcmUoXCJmYWx6eVwiKTtcbnZhciBoYXJkZW4gPSByZXF1aXJlKFwiaGFyZGVuXCIpO1xudmFyIHByb3R5cGUgPSByZXF1aXJlKFwicHJvdHlwZVwiKTtcblxudmFyIHRpdGxlbGl6ZSA9IGZ1bmN0aW9uIHRpdGxlbGl6ZSh0ZXh0KSB7XG5cdC8qO1xuIFx0QG1ldGEtY29uZmlndXJhdGlvbjpcbiBcdFx0e1xuIFx0XHRcdFwidGV4dDpyZXF1aXJlZFwiOiBcInN0cmluZ1wiXG4gXHRcdH1cbiBcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG4gKi9cblxuXHRpZiAoZmFsenkodGV4dCkgfHwgIXByb3R5cGUodGV4dCwgU1RSSU5HKSkge1xuXHRcdHJldHVybiB0ZXh0O1xuXHR9XG5cblx0cmV0dXJuIGRpc2RvKHRleHQpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSh0aXRsZWxpemUuVEVSTV9QQVRURVJOLCBmdW5jdGlvbiBvblJlcGxhY2UobWF0Y2gpIHtcblx0XHRyZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTtcblx0fSk7XG59O1xuXG5oYXJkZW4uYmluZCh0aXRsZWxpemUpKFwiVEVSTV9QQVRURVJOXCIsIC9eW2Etel18XFxzW2Etel0vZyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdGl0bGVsaXplO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL3RpdGxlbGl6ZS90aXRsZWxpemUuc3VwcG9ydC5qc1xuLy8gbW9kdWxlIGlkID0gMTE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG4vKjtcblx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdEBtaXQtbGljZW5zZVxuXG5cdFx0Q29weXJpZ2h0IChAYykgMjAxNiBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXG5cdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5cdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0U09GVFdBUkUuXG5cdEBlbmQtbW9kdWxlLWxpY2Vuc2VcblxuXHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0e1xuXHRcdFx0XCJwYWNrYWdlXCI6IFwiZGlzZG9cIixcblx0XHRcdFwicGF0aFwiOiBcImRpc2RvL2Rpc2RvLmpzXCIsXG5cdFx0XHRcImZpbGVcIjogXCJkaXNkby5qc1wiLFxuXHRcdFx0XCJtb2R1bGVcIjogXCJkaXNkb1wiLFxuXHRcdFx0XCJhdXRob3JcIjogXCJSaWNoZXZlIFMuIEJlYmVkb3JcIixcblx0XHRcdFwiY29udHJpYnV0b3JzXCI6IFtcblx0XHRcdFx0XCJKb2huIExlbm9uIE1hZ2hhbm95IDxqb2hubGVub25tYWdoYW5veUBnbWFpbC5jb20+XCJcblx0XHRcdF0sXG5cdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZvbGtvdmFzeXN0ZW1zL2Rpc2RvLmdpdFwiLFxuXHRcdFx0XCJ0ZXN0XCI6IFwiZGlzZG8tdGVzdC5qc1wiLFxuXHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdH1cblx0QGVuZC1tb2R1bGUtY29uZmlndXJhdGlvblxuXG5cdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRBbGwgc3BlY2lhbCBjaGFyYWN0ZXJzIG9uIHRoZSBiZWdpbm5pbmcgb2YgdGhlIG5vbi1hbHBoYW51bWVyaWMgd29yZCB3aWxsIGJlIGRpc2NhcmRlZC5cblx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXG5cdEBpbmNsdWRlOlxuXHRcdHtcblx0XHRcdFwiZmFsenlcIjogXCJmYWx6eVwiLFxuXHRcdFx0XCJoYXJkZW5cIjogXCJoYXJkZW5cIixcblx0XHRcdFwicHJvdHlwZVwiOiBcInByb3R5cGVcIlxuXHRcdH1cblx0QGVuZC1pbmNsdWRlXG4qL1xuXG52YXIgZmFsenkgPSByZXF1aXJlKFwiZmFsenlcIik7XG52YXIgaGFyZGVuID0gcmVxdWlyZShcImhhcmRlblwiKTtcbnZhciBwcm90eXBlID0gcmVxdWlyZShcInByb3R5cGVcIik7XG5cbnZhciBkaXNkbyA9IGZ1bmN0aW9uIGRpc2RvKHRleHQpIHtcblx0Lyo7XG4gXHRAbWV0YS1jb25maWd1cmF0aW9uOlxuIFx0XHR7XG4gXHRcdFx0XCJ0ZXh0OnJlcXVpcmVkXCI6IFwic3RyaW5nXCJcbiBcdFx0fVxuIFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cbiAqL1xuXG5cdGlmIChmYWx6eSh0ZXh0KSB8fCAhcHJvdHlwZSh0ZXh0LCBTVFJJTkcpKSB7XG5cdFx0cmV0dXJuIHRleHQ7XG5cdH1cblxuXHRyZXR1cm4gdGV4dC5yZXBsYWNlKGRpc2RvLkNMRUFOX1BBVFRFUk4sIFwiIFwiKS5yZXBsYWNlKGRpc2RvLlVQUEVSQ0FTRV9QQVRURVJOLCBmdW5jdGlvbiBvblJlcGxhY2UobWF0Y2gpIHtcblx0XHRyZXR1cm4gbWF0Y2gucmVwbGFjZShtYXRjaCwgXCIgXCIgKyBtYXRjaCk7XG5cdH0pLnJlcGxhY2UoZGlzZG8uU1BBQ0VfUEFUVEVSTiwgXCIgXCIpLnJlcGxhY2UoZGlzZG8uRFJPUF9QQVRURVJOLCBcIlwiKTtcbn07XG5cbmhhcmRlbi5iaW5kKGRpc2RvKShcIkNMRUFOX1BBVFRFUk5cIiwgL1teYS16QS1aMC05XSsvZykuaGFyZGVuKFwiVVBQRVJDQVNFX1BBVFRFUk5cIiwgL1tBLVpdKy9nKS5oYXJkZW4oXCJTUEFDRV9QQVRURVJOXCIsIC9cXHMrL2cpLmhhcmRlbihcIkRST1BfUEFUVEVSTlwiLCAvXlteYS16QS1aMC05XSt8W15hLXpBLVowLTldKyQvZyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGlzZG87XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvZGlzZG8vZGlzZG8uc3VwcG9ydC5qc1xuLy8gbW9kdWxlIGlkID0gMTE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG4vKjtcblx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdEBtaXQtbGljZW5zZVxuXG5cdFx0Q29weXJpZ2h0IChAYykgMjAxNiBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXG5cdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5cdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0U09GVFdBUkUuXG5cdEBlbmQtbW9kdWxlLWxpY2Vuc2VcblxuXHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0e1xuXHRcdFx0XCJwYWNrYWdlXCI6IFwib3B0Zm9yXCIsXG5cdFx0XHRcInBhdGhcIjogXCJvcHRmb3Ivb3B0Zm9yLmpzXCIsXG5cdFx0XHRcImZpbGVcIjogXCJvcHRmb3IuanNcIixcblx0XHRcdFwibW9kdWxlXCI6IFwib3B0Zm9yXCIsXG5cdFx0XHRcImF1dGhvclwiOiBcIlJpY2hldmUgUy4gQmViZWRvclwiLFxuXHRcdFx0XCJjb250cmlidXRvcnNcIjogW1xuXHRcdFx0XHRcIkpvaG4gTGVub24gTWFnaGFub3kgPGpvaG5sZW5vbm1hZ2hhbm95QGdtYWlsLmNvbT5cIlxuXHRcdFx0XSxcblx0XHRcdFwiZU1haWxcIjogXCJyaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXCIsXG5cdFx0XHRcInJlcG9zaXRvcnlcIjogXCJodHRwczovL2dpdGh1Yi5jb20vdm9sa292YXN5c3RlbXMvb3B0Zm9yLmdpdFwiLFxuXHRcdFx0XCJ0ZXN0XCI6IFwib3B0Zm9yLXRlc3QuanNcIixcblx0XHRcdFwiZ2xvYmFsXCI6IHRydWVcblx0XHR9XG5cdEBlbmQtbW9kdWxlLWNvbmZpZ3VyYXRpb25cblxuXHRAbW9kdWxlLWRvY3VtZW50YXRpb246XG5cdFx0UGljayB0aGUgZWxlbWVudCB0aGF0IHNhdGlzZnkgdGhlIGNvbmRpdGlvbiB3aXRoIG1vZGlmaWVyLlxuXG5cdFx0TW9kaWZpZXIgY2FuIGJlIGEgYm9vbGVhbiBmbGFnIG9yIGEgZnVuY3Rpb24uXG5cdEBlbmQtbW9kdWxlLWRvY3VtZW50YXRpb25cblxuXHRAaW5jbHVkZTpcblx0XHR7XG5cdFx0XHRcImRvdWJ0XCI6IFwiZG91YnRcIixcblx0XHRcdFwiZmFsemVcIjogXCJmYWx6ZVwiLFxuXHRcdFx0XCJoYXJkZW5cIjogXCJoYXJkZW5cIixcblx0XHRcdFwib3B0YWxsXCI6IFwib3B0YWxsXCIsXG5cdFx0XHRcInByb3R5cGVcIjogXCJwcm90eXBlXCIsXG5cdFx0XHRcInplbGZcIjogXCJ6ZWxmXCJcblx0XHR9XG5cdEBlbmQtaW5jbHVkZVxuKi9cblxudmFyIGRvdWJ0ID0gcmVxdWlyZShcImRvdWJ0XCIpO1xudmFyIGZhbHplID0gcmVxdWlyZShcImZhbHplXCIpO1xudmFyIGhhcmRlbiA9IHJlcXVpcmUoXCJoYXJkZW5cIik7XG52YXIgb3B0YWxsID0gcmVxdWlyZShcIm9wdGFsbFwiKTtcbnZhciBwcm90eXBlID0gcmVxdWlyZShcInByb3R5cGVcIik7XG52YXIgemVsZiA9IHJlcXVpcmUoXCJ6ZWxmXCIpO1xuXG5oYXJkZW4oXCJCT09MRUFOXCIsIFwiYm9vbGVhblwiKTtcbmhhcmRlbihcIkZVTkNUSU9OXCIsIFwiZnVuY3Rpb25cIik7XG5oYXJkZW4oXCJOVU1CRVJcIiwgXCJudW1iZXJcIik7XG5oYXJkZW4oXCJPQkpFQ1RcIiwgXCJvYmplY3RcIik7XG5oYXJkZW4oXCJTVFJJTkdcIiwgXCJzdHJpbmdcIik7XG5oYXJkZW4oXCJVTkRFRklORURcIiwgXCJ1bmRlZmluZWRcIik7XG5oYXJkZW4oXCJTWU1CT0xcIiwgXCJzeW1ib2xcIik7XG5cbnZhciBvcHRmb3IgPSBmdW5jdGlvbiBvcHRmb3IobGlzdCwgY29uZGl0aW9uLCBtb2RpZmllcikge1xuXHQvKjtcbiBcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG4gXHRcdHtcbiBcdFx0XHRcImxpc3Q6cmVxdWlyZWRcIjogW1xuIFx0XHRcdFx0XCJBcmd1bWVudHNcIixcbiBcdFx0XHRcdFwiWypdXCJcbiBcdFx0XHRdLFxuIFx0XHRcdFwiY29uZGl0aW9uOnJlcXVpcmVkXCI6IFtcbiBcdFx0XHRcdFwic3RyaW5nXCIsXG4gXHRcdFx0XHRcImZ1bmN0aW9uXCIsXG4gXHRcdFx0XHRCT09MRUFOLFxuIFx0XHRcdFx0RlVOQ1RJT04sXG4gXHRcdFx0XHROVU1CRVIsXG4gXHRcdFx0XHRPQkpFQ1QsXG4gXHRcdFx0XHRTVFJJTkcsXG4gXHRcdFx0XHRVTkRFRklORUQsXG4gXHRcdFx0XHRTWU1CT0wsXG4gXHRcdFx0XHRcIltzdHJpbmcsIGZ1bmN0aW9uXVwiXG4gXHRcdFx0XSxcbiBcdFx0XHRcIm1vZGlmaWVyXCI6IFtcbiBcdFx0XHRcdFwiZnVuY3Rpb25cIixcbiBcdFx0XHRcdFwiYm9vbGVhblwiXG4gXHRcdFx0XVxuIFx0XHR9XG4gXHRAZW5kLW1ldGEtY29uZmlndXJhdGlvblxuICovXG5cblx0aWYgKCFkb3VidChsaXN0LCBBU19BUlJBWSkpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGxpc3RcIik7XG5cdH1cblxuXHRpZiAoZmFsemUoY29uZGl0aW9uKSkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY29uZGl0aW9uXCIpO1xuXHR9XG5cblx0dmFyIHNlbGYgPSB6ZWxmKHRoaXMpO1xuXG5cdHZhciBlbGVtZW50ID0gb3B0YWxsLmJpbmQoc2VsZikobGlzdCwgY29uZGl0aW9uLCBtb2RpZmllcilbMF07XG5cblx0dmFyIG1vZGlmaWVyVHlwZSA9IHByb3R5cGUobW9kaWZpZXIpO1xuXHRpZiAobW9kaWZpZXJUeXBlLkZVTkNUSU9OKSB7XG5cdFx0cmV0dXJuIG1vZGlmaWVyLmJpbmQoc2VsZikoZWxlbWVudCk7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIGVsZW1lbnQ7XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gb3B0Zm9yO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL29wdGZvci9vcHRmb3Iuc3VwcG9ydC5qc1xuLy8gbW9kdWxlIGlkID0gMTE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG4vKjtcblx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdEBtaXQtbGljZW5zZVxuXG5cdFx0Q29weXJpZ2h0IChAYykgMjAxNiBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXG5cdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5cdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0U09GVFdBUkUuXG5cdEBlbmQtbW9kdWxlLWxpY2Vuc2VcblxuXHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0e1xuXHRcdFx0XCJwYWNrYWdlXCI6IFwiZmFsemVcIixcblx0XHRcdFwicGF0aFwiOiBcImZhbHplL2ZhbHplLmpzXCIsXG5cdFx0XHRcImZpbGVcIjogXCJmYWx6ZS5qc1wiLFxuXHRcdFx0XCJtb2R1bGVcIjogXCJmYWx6ZVwiLFxuXHRcdFx0XCJhdXRob3JcIjogXCJSaWNoZXZlIFMuIEJlYmVkb3JcIixcblx0XHRcdFwiY29udHJpYnV0b3JzXCI6IFtcblx0XHRcdFx0XCJKb2huIExlbm9uIE1hZ2hhbm95IDxqb2hubGVub25tYWdoYW5veUBnbWFpbC5jb20+XCJcblx0XHRcdF0sXG5cdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZvbGtvdmFzeXN0ZW1zL2ZhbHplLmdpdFwiLFxuXHRcdFx0XCJ0ZXN0XCI6IFwiZmFsemUtdGVzdC5qc1wiLFxuXHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdH1cblx0QGVuZC1tb2R1bGUtY29uZmlndXJhdGlvblxuXG5cdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRDaGVjayBpZiBlbnRpdHkgaXMgZmFsc3kgb3IgZW1wdHkuXG5cdEBlbmQtbW9kdWxlLWRvY3VtZW50YXRpb25cblxuXHRAaW5jbHVkZTpcblx0XHR7XG5cdFx0XHRcImFyaWRcIjogXCJhcmlkXCIsXG5cdFx0XHRcImRvdWJ0XCI6IFwiZG91YnRcIixcblx0XHRcdFwiZW1wdFwiOiBcImVtcHRcIixcblx0XHRcdFwiZmFsenlcIjogXCJmYWx6eVwiLFxuXHRcdFx0XCJwcm90eXBlXCI6IFwicHJvdHlwZVwiXG5cdFx0fVxuXHRAZW5kLWluY2x1ZGVcbiovXG5cbnZhciBhcmlkID0gcmVxdWlyZShcImFyaWRcIik7XG52YXIgZG91YnQgPSByZXF1aXJlKFwiZG91YnRcIik7XG52YXIgZW1wdCA9IHJlcXVpcmUoXCJlbXB0XCIpO1xudmFyIGZhbHp5ID0gcmVxdWlyZShcImZhbHp5XCIpO1xudmFyIHByb3R5cGUgPSByZXF1aXJlKFwicHJvdHlwZVwiKTtcblxudmFyIGZhbHplID0gZnVuY3Rpb24gZmFsemUoZW50aXR5KSB7XG5cdC8qO1xuIFx0QG1ldGEtY29uZmlndXJhdGlvbjpcbiBcdFx0e1xuIFx0XHRcdFwiZW50aXR5OnJlcXVpcmVkXCI6IFwiKlwiXG4gXHRcdH1cbiBcdEBlbmQtbWV0YS1jb25maWd1cmF0aW9uXG4gKi9cblxuXHRpZiAoZG91YnQoZW50aXR5KS5BU19BUlJBWSkge1xuXHRcdHJldHVybiBhcmlkKGVudGl0eSk7XG5cdH1cblxuXHRpZiAocHJvdHlwZShlbnRpdHksIE9CSkVDVCkpIHtcblx0XHRyZXR1cm4gZW1wdChlbnRpdHkpO1xuXHR9XG5cblx0cmV0dXJuIGZhbHp5KGVudGl0eSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhbHplO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL2ZhbHplL2ZhbHplLnN1cHBvcnQuanNcbi8vIG1vZHVsZSBpZCA9IDExOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcblxuLyo7XG5cdEBtb2R1bGUtbGljZW5zZTpcblx0XHRUaGUgTUlUIExpY2Vuc2UgKE1JVClcblx0XHRAbWl0LWxpY2Vuc2VcblxuXHRcdENvcHlyaWdodCAoQGMpIDIwMTYgUmljaGV2ZSBTaW9kaW5hIEJlYmVkb3Jcblx0XHRAZW1haWw6IHJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cblxuXHRcdFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcblx0XHRvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5cdFx0aW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuXHRcdHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcblx0XHRjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcblx0XHRmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5cdFx0VGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5cdFx0Y29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuXHRcdFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcblx0XHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0XHRGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcblx0XHRBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5cdFx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0XHRPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuXHRcdFNPRlRXQVJFLlxuXHRAZW5kLW1vZHVsZS1saWNlbnNlXG5cblx0QG1vZHVsZS1jb25maWd1cmF0aW9uOlxuXHRcdHtcblx0XHRcdFwicGFja2FnZVwiOiBcImVtcHRcIixcblx0XHRcdFwicGF0aFwiOiBcImVtcHQvZW1wdC5qc1wiLFxuXHRcdFx0XCJmaWxlXCI6IFwiZW1wdC5qc1wiLFxuXHRcdFx0XCJtb2R1bGVcIjogXCJlbXB0XCIsXG5cdFx0XHRcImF1dGhvclwiOiBcIlJpY2hldmUgUy4gQmViZWRvclwiLFxuXHRcdFx0XCJlTWFpbFwiOiBcInJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cIixcblx0XHRcdFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b2xrb3Zhc3lzdGVtcy9lbXB0LmdpdFwiLFxuXHRcdFx0XCJ0ZXN0XCI6IFwiZW1wdC10ZXN0LmpzXCIsXG5cdFx0XHRcImdsb2JhbFwiOiB0cnVlXG5cdFx0fVxuXHRAZW5kLW1vZHVsZS1jb25maWd1cmF0aW9uXG5cblx0QG1vZHVsZS1kb2N1bWVudGF0aW9uOlxuXHRcdENoZWNrIGlmIG9iamVjdCBoYXMgbm8gZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuXHRAZW5kLW1vZHVsZS1kb2N1bWVudGF0aW9uXG5cblx0QGluY2x1ZGU6XG5cdFx0e1xuXHRcdFx0XCJkb3VidFwiOiBcImRvdWJ0XCIsXG5cdFx0XHRcImtvdW50XCI6IFwia291bnRcIixcblx0XHRcdFwicHJvdHlwZVwiOiBcInByb3R5cGVcIlxuXHRcdH1cblx0QGVuZC1pbmNsdWRlXG4qL1xuXG52YXIgZG91YnQgPSByZXF1aXJlKFwiZG91YnRcIik7XG52YXIga291bnQgPSByZXF1aXJlKFwia291bnRcIik7XG52YXIgcHJvdHlwZSA9IHJlcXVpcmUoXCJwcm90eXBlXCIpO1xuXG52YXIgZW1wdCA9IGZ1bmN0aW9uIGVtcHQob2JqZWN0KSB7XG5cdC8qO1xuIFx0QG1ldGEtY29uZmlndXJhdGlvbjpcbiBcdFx0e1xuIFx0XHRcdFwib2JqZWN0OnJlcXVpcmVkXCI6IFwib2JqZWN0XCJcbiBcdFx0fVxuIFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cbiAqL1xuXG5cdGlmIChkb3VidChvYmplY3QpLkFTX0FSUkFZIHx8ICFwcm90eXBlKG9iamVjdCwgT0JKRUNUKSkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcImludmFsaWQgb2JqZWN0XCIpO1xuXHR9XG5cblx0cmV0dXJuIG9iamVjdCA9PT0gbnVsbCB8fCBrb3VudChvYmplY3QpID09IDA7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvZW1wdC9lbXB0LnN1cHBvcnQuanNcbi8vIG1vZHVsZSBpZCA9IDEyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcblxuLyo7XG5cdEBtb2R1bGUtbGljZW5zZTpcblx0XHRUaGUgTUlUIExpY2Vuc2UgKE1JVClcblx0XHRAbWl0LWxpY2Vuc2VcblxuXHRcdENvcHlyaWdodCAoQGMpIDIwMTYgUmljaGV2ZSBTaW9kaW5hIEJlYmVkb3Jcblx0XHRAZW1haWw6IHJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cblxuXHRcdFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcblx0XHRvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5cdFx0aW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuXHRcdHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcblx0XHRjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcblx0XHRmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5cdFx0VGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG5cdFx0Y29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuXHRcdFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcblx0XHRJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcblx0XHRGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcblx0XHRBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5cdFx0TElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcblx0XHRPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuXHRcdFNPRlRXQVJFLlxuXHRAZW5kLW1vZHVsZS1saWNlbnNlXG5cblx0QG1vZHVsZS1jb25maWd1cmF0aW9uOlxuXHRcdHtcblx0XHRcdFwicGFja2FnZVwiOiBcIm9wdGFsbFwiLFxuXHRcdFx0XCJwYXRoXCI6IFwib3B0YWxsL29wdGFsbC5qc1wiLFxuXHRcdFx0XCJmaWxlXCI6IFwib3B0YWxsLmpzXCIsXG5cdFx0XHRcIm1vZHVsZVwiOiBcIm9wdGFsbFwiLFxuXHRcdFx0XCJhdXRob3JcIjogXCJSaWNoZXZlIFMuIEJlYmVkb3JcIixcblx0XHRcdFwiZU1haWxcIjogXCJyaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXCIsXG5cdFx0XHRcInJlcG9zaXRvcnlcIjogXCJodHRwczovL2dpdGh1Yi5jb20vdm9sa292YXN5c3RlbXMvb3B0YWxsLmdpdFwiLFxuXHRcdFx0XCJ0ZXN0XCI6IFwib3B0YWxsLXRlc3QuanNcIixcblx0XHRcdFwiZ2xvYmFsXCI6IHRydWVcblx0XHR9XG5cdEBlbmQtbW9kdWxlLWNvbmZpZ3VyYXRpb25cblxuXHRAbW9kdWxlLWRvY3VtZW50YXRpb246XG5cdFx0RXh0cmFjdCBhbGwgZGVzaWduYXRlZCBlbGVtZW50cyB3aXRoIG1vZGlmaWVyLlxuXG5cdFx0TW9kaWZpZXIgY2FuIGJlIGEgYm9vbGVhbiBmbGFnIG9yIGEgZnVuY3Rpb24uXG5cdEBlbmQtbW9kdWxlLWRvY3VtZW50YXRpb25cblxuXHRAaW5jbHVkZTpcblx0XHR7XG5cdFx0XHRcImRvdWJ0XCI6IFwiZG91YnRcIixcblx0XHRcdFwiZmFsemVcIjogXCJmYWx6ZVwiLFxuXHRcdFx0XCJoYXJkZW5cIjogXCJoYXJkZW5cIixcblx0XHRcdFwicHJvdHlwZVwiOiBcInByb3R5cGVcIixcblx0XHRcdFwicHlja1wiOiBcInB5Y2tcIixcblx0XHRcdFwiemVsZlwiOiBcInplbGZcIlxuXHRcdH1cblx0QGVuZC1pbmNsdWRlXG4qL1xuXG52YXIgZG91YnQgPSByZXF1aXJlKFwiZG91YnRcIik7XG52YXIgZmFsemUgPSByZXF1aXJlKFwiZmFsemVcIik7XG52YXIgaGFyZGVuID0gcmVxdWlyZShcImhhcmRlblwiKTtcbnZhciBwcm90eXBlID0gcmVxdWlyZShcInByb3R5cGVcIik7XG52YXIgcHljayA9IHJlcXVpcmUoXCJweWNrXCIpO1xudmFyIHplbGYgPSByZXF1aXJlKFwiemVsZlwiKTtcblxuaGFyZGVuKFwiQk9PTEVBTlwiLCBcImJvb2xlYW5cIik7XG5oYXJkZW4oXCJGVU5DVElPTlwiLCBcImZ1bmN0aW9uXCIpO1xuaGFyZGVuKFwiTlVNQkVSXCIsIFwibnVtYmVyXCIpO1xuaGFyZGVuKFwiT0JKRUNUXCIsIFwib2JqZWN0XCIpO1xuaGFyZGVuKFwiU1RSSU5HXCIsIFwic3RyaW5nXCIpO1xuaGFyZGVuKFwiVU5ERUZJTkVEXCIsIFwidW5kZWZpbmVkXCIpO1xuaGFyZGVuKFwiU1lNQk9MXCIsIFwic3ltYm9sXCIpO1xuXG52YXIgb3B0YWxsID0gZnVuY3Rpb24gb3B0YWxsKGxpc3QsIGNvbmRpdGlvbiwgbW9kaWZpZXIpIHtcblx0Lyo7XG4gXHRAbWV0YS1jb25maWd1cmF0aW9uOlxuIFx0XHR7XG4gXHRcdFx0XCJsaXN0OnJlcXVpcmVkXCI6IFtcbiBcdFx0XHRcdFwiQXJndW1lbnRzXCIsXG4gXHRcdFx0XHRcIlsqXVwiXG4gXHRcdFx0XSxcbiBcdFx0XHRcImNvbmRpdGlvbjpyZXF1aXJlZFwiOiBbXG4gXHRcdFx0XHRcInN0cmluZ1wiLFxuIFx0XHRcdFx0XCJmdW5jdGlvblwiLFxuIFx0XHRcdFx0Qk9PTEVBTixcbiBcdFx0XHRcdEZVTkNUSU9OLFxuIFx0XHRcdFx0TlVNQkVSLFxuIFx0XHRcdFx0T0JKRUNULFxuIFx0XHRcdFx0U1RSSU5HLFxuIFx0XHRcdFx0VU5ERUZJTkVELFxuIFx0XHRcdFx0U1lNQk9MLFxuIFx0XHRcdFx0XCJbc3RyaW5nLCBmdW5jdGlvbl1cIlxuIFx0XHRcdF0sXG4gXHRcdFx0XCJtb2RpZmllclwiOiBbXG4gXHRcdFx0XHRcImZ1bmN0aW9uXCIsXG4gXHRcdFx0XHRcImJvb2xlYW5cIlxuIFx0XHRcdF1cbiBcdFx0fVxuIFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cbiAqL1xuXG5cdGlmICghZG91YnQobGlzdCwgQVNfQVJSQVkpKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBsaXN0XCIpO1xuXHR9XG5cblx0aWYgKGZhbHplKGNvbmRpdGlvbikpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNvbmRpdGlvblwiKTtcblx0fVxuXG5cdHZhciBzZWxmID0gemVsZih0aGlzKTtcblxuXHR2YXIgbW9kaWZpZXJUeXBlID0gcHJvdHlwZShtb2RpZmllcik7XG5cblx0dmFyIHJlc3VsdCA9IFtdO1xuXG5cdGlmIChtb2RpZmllclR5cGUuQk9PTEVBTikge1xuXHRcdHJlc3VsdCA9IHB5Y2suYmluZChzZWxmKShsaXN0LCBjb25kaXRpb24sIG1vZGlmaWVyKTtcblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSBweWNrLmJpbmQoc2VsZikobGlzdCwgY29uZGl0aW9uKTtcblx0fVxuXG5cdGlmIChtb2RpZmllclR5cGUuRlVOQ1RJT04pIHtcblx0XHRyZXR1cm4gcmVzdWx0Lm1hcChtb2RpZmllcik7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBvcHRhbGw7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Jvd2VyX2NvbXBvbmVudHMvb3B0YWxsL29wdGFsbC5zdXBwb3J0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qO1xuXHRAbW9kdWxlLWxpY2Vuc2U6XG5cdFx0VGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cdFx0QG1pdC1saWNlbnNlXG5cblx0XHRDb3B5cmlnaHQgKEBjKSAyMDE2IFJpY2hldmUgU2lvZGluYSBCZWJlZG9yXG5cdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cblx0XHRQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5cdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0XHR0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5cdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuXHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdFx0RklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5cdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdFx0T1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblx0XHRTT0ZUV0FSRS5cblx0QGVuZC1tb2R1bGUtbGljZW5zZVxuXG5cdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHR7XG5cdFx0XHRcInBhY2thZ2VcIjogXCJweWNrXCIsXG5cdFx0XHRcInBhdGhcIjogXCJweWNrL3B5Y2suanNcIixcblx0XHRcdFwiZmlsZVwiOiBcInB5Y2suanNcIixcblx0XHRcdFwibW9kdWxlXCI6IFwicHlja1wiLFxuXHRcdFx0XCJhdXRob3JcIjogXCJSaWNoZXZlIFMuIEJlYmVkb3JcIixcblx0XHRcdFwiY29udHJpYnV0b3JzXCI6IFtcblx0XHRcdFx0XCJKb2huIExlbm9uIE1hZ2hhbm95IDxqb2hubGVub25tYWdoYW5veUBnbWFpbC5jb20+XCJcblx0XHRcdF0sXG5cdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZvbGtvdmFzeXN0ZW1zL3B5Y2suZ2l0XCIsXG5cdFx0XHRcInRlc3RcIjogXCJweWNrLXRlc3QuanNcIixcblx0XHRcdFwiZ2xvYmFsXCI6IHRydWVcblx0XHR9XG5cdEBlbmQtbW9kdWxlLWNvbmZpZ3VyYXRpb25cblxuXHRAbW9kdWxlLWRvY3VtZW50YXRpb246XG5cdFx0UGljayBlbGVtZW50cyBiYXNlZCBvbiBjb25kaXRpb24uXG5cblx0XHRDb25kaXRpb25zIG1heSBiZSB0eXBlLCBmdW5jdGlvbiwgY2xhc3Mgb3IgYWN0dWFsIHZhbHVlIHRvIGJlIGNvbXBhcmVkLlxuXG5cdFx0U2V0dGluZyBzdGF0ZSB3aWxsIGZ1cnRoZXIgY2hlY2sgaWYgdGhlIGVsZW1lbnQgaXMgbm9uLW51bGwsIG5vbi11bmRlZmluZWQsXG5cdFx0XHRub24tZW1wdHkgc3RyaW5nLCBvYmplY3Qgb3IgYXJyYXksIG5vdCBJbmZpbml0eSBhbmQgTmFOIGlmIHN0YXRlIGlzIHRydWUgb3RoZXJ3aXNlXG5cdFx0XHRpdCB3aWxsIGNoZWNrIGZvciBmYWxzeSB2YWx1ZXMuXG5cblx0XHRJZiBjb25kaXRpb24gaXMgYSBmdW5jdGlvbiBpdCBzaG91bGQgcmV0dXJuIGEgYm9vbGVhbiByZXN1bHQgZWxzZSxcblx0XHRcdHRoaXMgd2lsbCB0aHJvdyBhbiBlcnJvci5cblx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXG5cdEBpbmNsdWRlOlxuXHRcdHtcblx0XHRcdFwiZG91YnRcIjogXCJkb3VidFwiLFxuXHRcdFx0XCJmYWx6ZVwiOiBcImZhbHplXCIsXG5cdFx0XHRcImZhbHp5XCI6IFwiZmFsenlcIixcblx0XHRcdFwiaGFyZGVuXCI6IFwiaGFyZGVuXCIsXG5cdFx0XHRcInByb3R5cGVcIjogXCJwcm90eXBlXCIsXG5cdFx0XHRcInJhemVcIjogXCJyYXplXCIsXG5cdFx0XHRcInRydXVcIjogXCJ0cnV1XCIsXG5cdFx0XHRcInplbGZcIjogXCJ6ZWxmXCJcblx0XHR9XG5cdEBlbmQtaW5jbHVkZVxuKi9cblxudmFyIGRvdWJ0ID0gcmVxdWlyZShcImRvdWJ0XCIpO1xudmFyIGZhbHplID0gcmVxdWlyZShcImZhbHplXCIpO1xudmFyIGZhbHp5ID0gcmVxdWlyZShcImZhbHp5XCIpO1xudmFyIGhhcmRlbiA9IHJlcXVpcmUoXCJoYXJkZW5cIik7XG52YXIgcHJvdHlwZSA9IHJlcXVpcmUoXCJwcm90eXBlXCIpO1xudmFyIHJhemUgPSByZXF1aXJlKFwicmF6ZVwiKTtcbnZhciB0cnV1ID0gcmVxdWlyZShcInRydXVcIik7XG52YXIgemVsZiA9IHJlcXVpcmUoXCJ6ZWxmXCIpO1xuXG5oYXJkZW4oXCJCT09MRUFOXCIsIFwiYm9vbGVhblwiKTtcbmhhcmRlbihcIkZVTkNUSU9OXCIsIFwiZnVuY3Rpb25cIik7XG5oYXJkZW4oXCJOVU1CRVJcIiwgXCJudW1iZXJcIik7XG5oYXJkZW4oXCJPQkpFQ1RcIiwgXCJvYmplY3RcIik7XG5oYXJkZW4oXCJTVFJJTkdcIiwgXCJzdHJpbmdcIik7XG5oYXJkZW4oXCJVTkRFRklORURcIiwgXCJ1bmRlZmluZWRcIik7XG5oYXJkZW4oXCJTWU1CT0xcIiwgXCJzeW1ib2xcIik7XG5cbnZhciBweWNrID0gZnVuY3Rpb24gcHljayhsaXN0LCBjb25kaXRpb24sIHN0YXRlKSB7XG5cdC8qO1xuIFx0QG1ldGEtY29uZmlndXJhdGlvbjpcbiBcdFx0e1xuIFx0XHRcdFwibGlzdDpyZXF1aXJlZFwiOiBbXG4gXHRcdFx0XHRcIkFyZ3VtZW50c1wiLFxuIFx0XHRcdFx0XCJbKl1cIlxuIFx0XHRcdF0sXG4gXHRcdFx0XCJjb25kaXRpb246cmVxdWlyZWRcIjogW1xuIFx0XHRcdFx0XCJzdHJpbmdcIixcbiBcdFx0XHRcdFwiZnVuY3Rpb25cIixcbiBcdFx0XHRcdEJPT0xFQU4sXG4gXHRcdFx0XHRGVU5DVElPTixcbiBcdFx0XHRcdE5VTUJFUixcbiBcdFx0XHRcdE9CSkVDVCxcbiBcdFx0XHRcdFNUUklORyxcbiBcdFx0XHRcdFVOREVGSU5FRCxcbiBcdFx0XHRcdFNZTUJPTCxcbiBcdFx0XHRcdFwiW3N0cmluZywgZnVuY3Rpb25dXCJcbiBcdFx0XHRdLFxuIFx0XHRcdFwic3RhdGVcIjogXCJib29sZWFuXCJcbiBcdFx0fVxuIFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cbiAqL1xuXG5cdGlmIChkb3VidChjb25kaXRpb24pLkFSUkFZKSB7XG5cdFx0cmV0dXJuIGNvbmRpdGlvbi5yZWR1Y2UoZnVuY3Rpb24gb25FYWNoQ29uZGl0aW9uKGFjY3VtdWxhbnQsIGNvbmRpdGlvbikge1xuXHRcdFx0cmV0dXJuIGFjY3VtdWxhbnQuY29uY2F0KHB5Y2sobGlzdCwgY29uZGl0aW9uKSk7XG5cdFx0fSwgW10pO1xuXHR9IGVsc2UgaWYgKGZhbHp5KGNvbmRpdGlvbikpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNvbmRpdGlvblwiKTtcblx0fVxuXG5cdHZhciBzZWxmID0gemVsZih0aGlzKTtcblxuXHR2YXIgY29uZGl0aW9uVHlwZSA9IHByb3R5cGUoY29uZGl0aW9uKTtcblxuXHRyZXR1cm4gcmF6ZShsaXN0KS5maWx0ZXIoZnVuY3Rpb24gb25FYWNoRWxlbWVudChlbGVtZW50LCBpbmRleCkge1xuXHRcdHRyeSB7XG5cdFx0XHRpZiAoZWxlbWVudCA9PT0gY29uZGl0aW9uKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSBlbHNlIGlmIChjb25kaXRpb25UeXBlLlNUUklORyAmJiAoY29uZGl0aW9uID09IEJPT0xFQU4gfHwgY29uZGl0aW9uID09IEZVTkNUSU9OIHx8IGNvbmRpdGlvbiA9PSBOVU1CRVIgfHwgY29uZGl0aW9uID09IE9CSkVDVCB8fCBjb25kaXRpb24gPT0gU1RSSU5HIHx8IGNvbmRpdGlvbiA9PSBVTkRFRklORUQgfHwgY29uZGl0aW9uID09IFNZTUJPTCkpIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IHByb3R5cGUoZWxlbWVudCwgY29uZGl0aW9uKTtcblxuXHRcdFx0XHRpZiAoc3RhdGUgPT09IHRydWUgJiYgdHJ1dShlbGVtZW50KSAmJiByZXN1bHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSBlbHNlIGlmIChzdGF0ZSA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fSBlbHNlIGlmIChzdGF0ZSA9PT0gZmFsc2UgJiYgZmFsemUoZWxlbWVudCkpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSBlbHNlIGlmIChzdGF0ZSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChjb25kaXRpb25UeXBlLkZVTkNUSU9OICYmIC9eW0EtWl0vLnRlc3QoY29uZGl0aW9uLm5hbWUpKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtZW50IGluc3RhbmNlb2YgY29uZGl0aW9uO1xuXHRcdFx0fSBlbHNlIGlmIChjb25kaXRpb25UeXBlLkZVTkNUSU9OKSB7XG5cdFx0XHRcdHZhciBfcmVzdWx0ID0gY29uZGl0aW9uLmJpbmQoc2VsZikoZWxlbWVudCwgaW5kZXgpO1xuXG5cdFx0XHRcdGlmICghcHJvdHlwZShfcmVzdWx0LCBCT09MRUFOKSkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY29uZGl0aW9uIHJlc3VsdCwgXCIgKyBfcmVzdWx0KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXR1cm4gX3Jlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJlcnJvciB0ZXN0aW5nIGNvbmRpdGlvbiwgXCIgKyBlbGVtZW50ICsgXCIsIFwiICsgaW5kZXggKyBcIiwgXCIgKyBlcnJvcik7XG5cdFx0fVxuXHR9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcHljaztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm93ZXJfY29tcG9uZW50cy9weWNrL3B5Y2suc3VwcG9ydC5qc1xuLy8gbW9kdWxlIGlkID0gMTIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG4vKjtcblx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdEBtaXQtbGljZW5zZVxuXG5cdFx0Q29weXJpZ2h0IChAYykgMjAxNiBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXG5cdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5cdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0U09GVFdBUkUuXG5cdEBlbmQtbW9kdWxlLWxpY2Vuc2VcblxuXHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0e1xuXHRcdFx0XCJwYWNrYWdlXCI6IFwiemVsZlwiLFxuXHRcdFx0XCJwYXRoXCI6IFwiemVsZi96ZWxmLmpzXCIsXG5cdFx0XHRcImZpbGVcIjogXCJ6ZWxmLmpzXCIsXG5cdFx0XHRcIm1vZHVsZVwiOiBcInplbGZcIixcblx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZvbGtvdmFzeXN0ZW1zL3plbGYuZ2l0XCIsXG5cdFx0XHRcInRlc3RcIjogXCJ6ZWxmLXRlc3QuanNcIixcblx0XHRcdFwiZ2xvYmFsXCI6IHRydWVcblx0XHR9XG5cdEBlbmQtbW9kdWxlLWNvbmZpZ3VyYXRpb25cblxuXHRAbW9kdWxlLWRvY3VtZW50YXRpb246XG5cdFx0UmV0dXJucyB3aW5kb3cgZm9yIGNsaWVudCwgZ2xvYmFsIGZvciBzZXJ2ZXIgYW5kIGlmIG5vdGhpbmcgbWF0Y2gsIHJldHVybiBpdHNlbGYuXG5cdEBlbmQtbW9kdWxlLWRvY3VtZW50YXRpb25cblxuXHRAaW5jbHVkZTpcblx0XHR7XG5cdFx0XHRcImFzZWFcIjogXCJhc2VhXCJcblx0XHR9XG5cdEBlbmQtaW5jbHVkZVxuKi9cblxudmFyIGFzZWEgPSByZXF1aXJlKFwiYXNlYVwiKTtcblxudmFyIHplbGYgPSBmdW5jdGlvbiB6ZWxmKHNlbGYpIHtcblx0Lyo7XG4gXHRAbWV0YS1jb25maWd1cmF0aW9uOlxuIFx0XHR7XG4gXHRcdFx0XCJzZWxmOnJlcXVpcmVkXCI6IFwib2JqZWN0XCJcbiBcdFx0fVxuIFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cbiAqL1xuXG5cdHNlbGYgPSBzZWxmIHx8IHRoaXM7XG5cblx0aWYgKGFzZWEuc2VydmVyICYmIChzZWxmID09PSBnbG9iYWwgfHwgdHlwZW9mIHNlbGYgPT0gXCJ1bmRlZmluZWRcIiB8fCBzZWxmID09PSBudWxsKSkge1xuXHRcdHJldHVybiBnbG9iYWw7XG5cdH1cblxuXHRpZiAoYXNlYS5jbGllbnQgJiYgKHNlbGYgPT09IHdpbmRvdyB8fCB0eXBlb2Ygc2VsZiA9PSBcInVuZGVmaW5lZFwiIHx8IHNlbGYgPT09IG51bGwpKSB7XG5cdFx0cmV0dXJuIHdpbmRvdztcblx0fVxuXG5cdGlmIChhc2VhLnNlcnZlciAmJiB0eXBlb2Ygc2VsZiA9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0cmV0dXJuIGdsb2JhbDtcblx0fVxuXG5cdGlmIChhc2VhLmNsaWVudCAmJiB0eXBlb2Ygc2VsZiA9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0cmV0dXJuIHdpbmRvdztcblx0fVxuXG5cdHJldHVybiBzZWxmO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB6ZWxmO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL3plbGYvemVsZi5zdXBwb3J0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qO1xuXHRAbW9kdWxlLWxpY2Vuc2U6XG5cdFx0VGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cdFx0QG1pdC1saWNlbnNlXG5cblx0XHRDb3B5cmlnaHQgKEBjKSAyMDE2IFJpY2hldmUgU2lvZGluYSBCZWJlZG9yXG5cdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cblx0XHRQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5cdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0XHR0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5cdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuXHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdFx0RklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5cdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdFx0T1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblx0XHRTT0ZUV0FSRS5cblx0QGVuZC1tb2R1bGUtbGljZW5zZVxuXG5cdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHR7XG5cdFx0XHRcInBhY2thZ2VcIjogXCJhc2VhXCIsXG5cdFx0XHRcInBhdGhcIjogXCJhc2VhL2FzZWEuanNcIixcblx0XHRcdFwiZmlsZVwiOiBcImFzZWEuanNcIixcblx0XHRcdFwibW9kdWxlXCI6IFwiYXNlYVwiLFxuXHRcdFx0XCJhdXRob3JcIjogXCJSaWNoZXZlIFMuIEJlYmVkb3JcIixcblx0XHRcdFwiZU1haWxcIjogXCJyaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXCIsXG5cdFx0XHRcInJlcG9zaXRvcnlcIjogXCJodHRwczovL2dpdGh1Yi5jb206dm9sa292YXN5c3RlbXMvYXNlYS5naXRcIixcblx0XHRcdFwidGVzdFwiOiBcImFzZWEtdGVzdC5qc1wiLFxuXHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdH1cblx0QGVuZC1tb2R1bGUtY29uZmlndXJhdGlvblxuXG5cdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHREZXRlcm1pbmVzIGlmIHlvdSdyZSBvbiBhIHNlcnZlciBlbnZpcm9ubWVudCBvciBhIGNsaWVudCBlbnZpcm9ubWVudC5cblxuXHRcdFJldHVybnMgdW5rbm93biBpZiB0aGUgZW52aXJvbm1lbnQgY2Fubm90IGJlIGRldGVybWluZWQuXG5cdEBlbmQtbW9kdWxlLWRvY3VtZW50YXRpb25cblxuXHRAaW5jbHVkZTpcblx0XHR7XG5cdFx0XHRcImhhcmRlblwiOiBcImhhcmRlblwiXG5cdFx0fVxuXHRAZW5kLWluY2x1ZGVcbiovXG5cbnZhciBoYXJkZW4gPSByZXF1aXJlKFwiaGFyZGVuXCIpO1xuXG5oYXJkZW4oXCJDTElFTlRcIiwgXCJjbGllbnRcIik7XG5oYXJkZW4oXCJTRVJWRVJcIiwgXCJzZXJ2ZXJcIik7XG5oYXJkZW4oXCJVTktOT1dOXCIsIFwidW5rbm93blwiKTtcblxudmFyIGFzZWEgPSBmdW5jdGlvbiBhc2VhKCkge1xuXHRpZiAoYXNlYS5jbGllbnQpIHtcblx0XHRyZXR1cm4gQ0xJRU5UO1xuXHR9IGVsc2UgaWYgKGFzZWEuc2VydmVyKSB7XG5cdFx0cmV0dXJuIFNFUlZFUjtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gVU5LTk9XTjtcblx0fVxufTtcblxuaGFyZGVuKFwiY2xpZW50XCIsIHR5cGVvZiB3aW5kb3cgIT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgZG9jdW1lbnQgIT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmNvbnN0cnVjdG9yID09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgZG9jdW1lbnQuY29uc3RydWN0b3IgPT0gXCJmdW5jdGlvblwiICYmIHdpbmRvdy5jb25zdHJ1Y3Rvci5uYW1lID09IFwiV2luZG93XCIgJiYgZG9jdW1lbnQuY29uc3RydWN0b3IubmFtZSA9PSBcIkhUTUxEb2N1bWVudFwiLCBhc2VhKTtcblxuaGFyZGVuKFwic2VydmVyXCIsIHR5cGVvZiBtb2R1bGUgIT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgZ2xvYmFsICE9IFwidW5kZWZpbmVkXCIgJiYgISFtb2R1bGUuZXhwb3J0cyAmJiAhIWdsb2JhbC5wcm9jZXNzICYmICEhZ2xvYmFsLnByb2Nlc3MuZW52LCBhc2VhKTtcblxuaGFyZGVuKFwidW5rbm93blwiLCBhc2VhLmNsaWVudCA9PT0gZmFsc2UgJiYgYXNlYS5zZXJ2ZXIgPT09IGZhbHNlLCBhc2VhKTtcblxubW9kdWxlLmV4cG9ydHMgPSBhc2VhO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL2FzZWEvYXNlYS5zdXBwb3J0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qO1xuXHRAbW9kdWxlLWxpY2Vuc2U6XG5cdFx0VGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cdFx0QG1pdC1saWNlbnNlXG5cblx0XHRDb3B5cmlnaHQgKEBjKSAyMDE2IFJpY2hldmUgU2lvZGluYSBCZWJlZG9yXG5cdFx0QGVtYWlsOiByaWNoZXZlLmJlYmVkb3JAZ21haWwuY29tXG5cblx0XHRQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5cdFx0b2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuXHRcdGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcblx0XHR0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5cdFx0Y29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5cdFx0ZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuXHRcdFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuXHRcdGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblx0XHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5cdFx0SU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5cdFx0RklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5cdFx0QVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuXHRcdExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5cdFx0T1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblx0XHRTT0ZUV0FSRS5cblx0QGVuZC1tb2R1bGUtbGljZW5zZVxuXG5cdEBtb2R1bGUtY29uZmlndXJhdGlvbjpcblx0XHR7XG5cdFx0XHRcInBhY2thZ2VcIjogXCJwbG91Z2hcIixcblx0XHRcdFwicGF0aFwiOiBcInBsb3VnaC9wbG91Z2guanNcIixcblx0XHRcdFwiZmlsZVwiOiBcInBsb3VnaC5qc1wiLFxuXHRcdFx0XCJtb2R1bGVcIjogXCJwbG91Z2hcIixcblx0XHRcdFwiYXV0aG9yXCI6IFwiUmljaGV2ZSBTLiBCZWJlZG9yXCIsXG5cdFx0XHRcImNvbnRyaWJ1dG9yc1wiOiBbXG5cdFx0XHRcdFwiSm9obiBMZW5vbiBNYWdoYW5veSA8am9obmxlbm9ubWFnaGFub3lAZ21haWwuY29tPlwiXG5cdFx0XHRdLFxuXHRcdFx0XCJlTWFpbFwiOiBcInJpY2hldmUuYmViZWRvckBnbWFpbC5jb21cIixcblx0XHRcdFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b2xrb3Zhc3lzdGVtcy9wbG91Z2guZ2l0XCIsXG5cdFx0XHRcInRlc3RcIjogXCJwbG91Z2gtdGVzdC5qc1wiLFxuXHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdH1cblx0QGVuZC1tb2R1bGUtY29uZmlndXJhdGlvblxuXG5cdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRGbGF0dGVuIGFycmF5c1xuXHRAZW5kLW1vZHVsZS1kb2N1bWVudGF0aW9uXG5cblx0QGluY2x1ZGU6XG5cdFx0e1xuXHRcdFx0XCJhcmlkXCI6IFwiYXJpZFwiLFxuXHRcdFx0XCJkZWNyZWFzZVwiOiBcImRlY3JlYXNlXCIsXG5cdFx0XHRcImRvdWJ0XCI6IFwiZG91YnRcIixcblx0XHRcdFwiaGFyZGVuXCI6IFwiaGFyZGVuXCIsXG5cdFx0XHRcInJhemVcIjogXCJyYXplXCJcblx0XHR9XG5cdEBlbmQtaW5jbHVkZVxuKi9cblxudmFyIGFyaWQgPSByZXF1aXJlKFwiYXJpZFwiKTtcbnZhciBkZWNyZWFzZSA9IHJlcXVpcmUoXCJkZWNyZWFzZVwiKTtcbnZhciBkb3VidCA9IHJlcXVpcmUoXCJkb3VidFwiKTtcbnZhciBoYXJkZW4gPSByZXF1aXJlKFwiaGFyZGVuXCIpO1xudmFyIHJhemUgPSByZXF1aXJlKFwicmF6ZVwiKTtcblxudmFyIHBsb3VnaCA9IGZ1bmN0aW9uIHBsb3VnaChhcnJheSkge1xuXHQvKjtcbiBcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG4gXHRcdHtcbiBcdFx0XHRcImFycmF5OnJlcXVpcmVkXCI6IFtcbiBcdFx0XHRcdFwiWypdXCIsXG4gXHRcdFx0XHRcIi4uLlwiXG4gXHRcdFx0XVxuIFx0XHR9XG4gXHRAZW5kLW1ldGEtY29uZmlndXJhdGlvblxuICovXG5cblx0YXJyYXkgPSByYXplKGFyZ3VtZW50cyk7XG5cblx0aWYgKGFyaWQoYXJyYXkpKSB7XG5cdFx0YXJyYXkgPSBkb3VidCh0aGlzKS5BUlJBWSA/IHRoaXMgOiBbXTtcblx0fVxuXG5cdGlmIChkb3VidCh0aGlzKS5BUlJBWSAmJiBhcnJheSAhPSB0aGlzKSB7XG5cdFx0YXJyYXkgPSB0aGlzLmNvbmNhdChhcnJheSk7XG5cdH1cblxuXHR2YXIgbGlzdCA9IGRlY3JlYXNlKGFycmF5LCBmdW5jdGlvbiBmbGF0dGVuKHByZXZpb3VzLCBjdXJyZW50KSB7XG5cdFx0dmFyIGVsZW1lbnQgPSBkb3VidChjdXJyZW50KS5BU19BUlJBWSA/IHBsb3VnaC5hcHBseShudWxsLCBjdXJyZW50KSA6IGN1cnJlbnQ7XG5cblx0XHRyZXR1cm4gcHJldmlvdXMuY29uY2F0KGVsZW1lbnQpO1xuXHR9LCBbXSk7XG5cblx0aGFyZGVuKFwicGxvdWdoXCIsIHBsb3VnaC5iaW5kKGxpc3QpLCBsaXN0KTtcblxuXHRyZXR1cm4gbGlzdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcGxvdWdoO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL3Bsb3VnaC9wbG91Z2guc3VwcG9ydC5qc1xuLy8gbW9kdWxlIGlkID0gMTI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG4vKjtcblx0QG1vZHVsZS1saWNlbnNlOlxuXHRcdFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXHRcdEBtaXQtbGljZW5zZVxuXG5cdFx0Q29weXJpZ2h0IChAYykgMjAxNiBSaWNoZXZlIFNpb2RpbmEgQmViZWRvclxuXHRcdEBlbWFpbDogcmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVxuXG5cdFx0UGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuXHRcdG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcblx0XHRpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG5cdFx0dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuXHRcdGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuXHRcdGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblx0XHRUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcblx0XHRjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5cdFx0VEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuXHRcdElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuXHRcdEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuXHRcdEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcblx0XHRMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuXHRcdE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG5cdFx0U09GVFdBUkUuXG5cdEBlbmQtbW9kdWxlLWxpY2Vuc2VcblxuXHRAbW9kdWxlLWNvbmZpZ3VyYXRpb246XG5cdFx0e1xuXHRcdFx0XCJwYWNrYWdlXCI6IFwiZGVjcmVhc2VcIixcblx0XHRcdFwicGF0aFwiOiBcImRlY3JlYXNlL2RlY3JlYXNlLmpzXCIsXG5cdFx0XHRcImZpbGVcIjogXCJkZWNyZWFzZS5qc1wiLFxuXHRcdFx0XCJtb2R1bGVcIjogXCJkZWNyZWFzZVwiLFxuXHRcdFx0XCJhdXRob3JcIjogXCJSaWNoZXZlIFMuIEJlYmVkb3JcIixcblx0XHRcdFwiY29udHJpYnV0b3JzXCI6IFtcblx0XHRcdFx0XCJKb2huIExlbm9uIE1hZ2hhbm95IDxqb2hubGVub25tYWdoYW5veUBnbWFpbC5jb20+XCJcblx0XHRcdF0sXG5cdFx0XHRcImVNYWlsXCI6IFwicmljaGV2ZS5iZWJlZG9yQGdtYWlsLmNvbVwiLFxuXHRcdFx0XCJyZXBvc2l0b3J5XCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3ZvbGtvdmFzeXN0ZW1zL2RlY3JlYXNlLmdpdFwiLFxuXHRcdFx0XCJ0ZXN0XCI6IFwiZGVjcmVhc2UtdGVzdC5qc1wiLFxuXHRcdFx0XCJnbG9iYWxcIjogdHJ1ZVxuXHRcdH1cblx0QGVuZC1tb2R1bGUtY29uZmlndXJhdGlvblxuXG5cdEBtb2R1bGUtZG9jdW1lbnRhdGlvbjpcblx0XHRSZWR1Y2UgdGhlIGFycmF5LiBUaGlzIHdpbGwgYWx3YXlzIHJldHVybiBhbiBhcnJheS5cblx0QGVuZC1tb2R1bGUtZG9jdW1lbnRhdGlvblxuXG5cdEBpbmNsdWRlOlxuXHRcdHtcblx0XHRcdFwiZG91YnRcIjogXCJkb3VidFwiLFxuXHRcdFx0XCJoYXJkZW5cIjogXCJoYXJkZW5cIixcblx0XHRcdFwicHJvdHlwZVwiOiBcInByb3R5cGVcIixcblx0XHRcdFwicmF6ZVwiOiBcInJhemVcIixcblx0XHRcdFwidHJ1bHlcIjogXCJ0cnVseVwiXG5cdFx0fVxuXHRAZW5kLWluY2x1ZGVcbiovXG5cbnZhciBkb3VidCA9IHJlcXVpcmUoXCJkb3VidFwiKTtcbnZhciBoYXJkZW4gPSByZXF1aXJlKFwiaGFyZGVuXCIpO1xudmFyIHByb3R5cGUgPSByZXF1aXJlKFwicHJvdHlwZVwiKTtcbnZhciByYXplID0gcmVxdWlyZShcInJhemVcIik7XG52YXIgdHJ1bHkgPSByZXF1aXJlKFwidHJ1bHlcIik7XG5cbi8vOiBAc3VwcG9ydC1tb2R1bGU6XG4vLzogQHJlZmVyZW5jZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvcmVkdWNlXG5BcnJheS5wcm90b3R5cGUucmVkdWNlIHx8IChBcnJheS5wcm90b3R5cGUucmVkdWNlID0gZnVuY3Rpb24gKHIpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKG51bGwgPT0gdGhpcykgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFycmF5LnByb3RvdHlwZS5yZWR1Y2UgY2FsbGVkIG9uIG51bGwgb3IgdW5kZWZpbmVkXCIpO1xuXHRpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiByKSB0aHJvdyBuZXcgVHlwZUVycm9yKHIgKyBcIiBpcyBub3QgYSBmdW5jdGlvblwiKTtcblx0dmFyIGUsXG5cdCAgICB0ID0gT2JqZWN0KHRoaXMpLFxuXHQgICAgbiA9IHQubGVuZ3RoID4+PiAwLFxuXHQgICAgbyA9IDA7aWYgKDIgPT0gYXJndW1lbnRzLmxlbmd0aCkgZSA9IGFyZ3VtZW50c1sxXTtlbHNlIHtcblx0XHRmb3IgKDsgbiA+IG8gJiYgIShvIGluIHQpOykge1xuXHRcdFx0bysrO1xuXHRcdH1pZiAobyA+PSBuKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZVwiKTtcblx0XHRlID0gdFtvKytdO1xuXHR9Zm9yICg7IG4gPiBvOyBvKyspIHtcblx0XHRvIGluIHQgJiYgKGUgPSByKGUsIHRbb10sIG8sIHQpKTtcblx0fXJldHVybiBlO1xufSk7XG4vLzogQGVuZC1zdXBwb3J0LW1vZHVsZVxuXG52YXIgZGVjcmVhc2UgPSBmdW5jdGlvbiBkZWNyZWFzZShhcnJheSwgbWV0aG9kLCB2YWx1ZSkge1xuXHQvKjtcbiBcdEBtZXRhLWNvbmZpZ3VyYXRpb246XG4gXHRcdHtcbiBcdFx0XHRcImFycmF5OnJlcXVpcmVkXCI6IFwiWypdXCIsXG4gXHRcdFx0XCJtZXRob2Q6b3B0aW9uYWxcIjogXCJmdW5jdGlvblwiLFxuIFx0XHRcdFwidmFsdWU6b3B0aW9uYWxcIjogXCIqXCJcbiBcdFx0fVxuIFx0QGVuZC1tZXRhLWNvbmZpZ3VyYXRpb25cbiAqL1xuXG5cdHZhciBwYXJhbWV0ZXIgPSByYXplKGFyZ3VtZW50cyk7XG5cblx0YXJyYXkgPSBkb3VidChwYXJhbWV0ZXJbMF0pLkFSUkFZID8gcGFyYW1ldGVyWzBdIDogZG91YnQodGhpcykuQVJSQVkgPyB0aGlzIDogW107XG5cblx0Lyo7XG4gXHRAbm90ZTpcbiBcdFx0Q2xvbmUgdGhlIGFycmF5IHNvIHRoYXQgd2Ugd2lsbCBub3QgZGVzdHJveSBpdC5cbiBcdFx0RGVlcCBsZXZlbCByZWZlcmVuY2VzIHdpbGwgbm90IGJlIHN1cHBvcnRlZC5cbiBcdEBlbmQtbm90ZVxuICovXG5cdGFycmF5ID0gW10uY29uY2F0KGFycmF5KTtcblxuXHRtZXRob2QgPSBwcm90eXBlKHBhcmFtZXRlclswXSwgRlVOQ1RJT04pID8gcGFyYW1ldGVyWzBdIDogcHJvdHlwZShwYXJhbWV0ZXJbMV0sIEZVTkNUSU9OKSA/IHBhcmFtZXRlclsxXSA6IGZ1bmN0aW9uIHJlZHVjZShwcmV2aW91cywgY3VycmVudCwgaW5kZXgsIGFycmF5KSB7XG5cdFx0aWYgKGluZGV4ID09IGFycmF5Lmxlbmd0aCAtIDEpIHtcblx0XHRcdGFycmF5LnBvcCgpO1xuXG5cdFx0XHRyZXR1cm4gYXJyYXk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGN1cnJlbnQ7XG5cdH07XG5cblx0dmFsdWUgPSB0cnVseSh2YWx1ZSkgPyB2YWx1ZSA6IGFycmF5WzBdO1xuXG5cdHZhbHVlID0gYXJyYXkucmVkdWNlKG1ldGhvZCwgdmFsdWUpO1xuXG5cdGlmICghZG91YnQodmFsdWUpLkFSUkFZKSB7XG5cdFx0dmFsdWUgPSBbdmFsdWVdO1xuXHR9XG5cblx0aGFyZGVuKFwiZGVjcmVhc2VcIiwgZGVjcmVhc2UuYmluZCh2YWx1ZSksIHZhbHVlKTtcblxuXHRyZXR1cm4gdmFsdWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlY3JlYXNlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ib3dlcl9jb21wb25lbnRzL2RlY3JlYXNlL2RlY3JlYXNlLnN1cHBvcnQuanNcbi8vIG1vZHVsZSBpZCA9IDEyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9